{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor Run 169, I recommend that we push the boundaries further in local nonlinear approximation by replacing the existing f_adapt function with an even more flexible scheme. Instead of a fixed piecewise softplus/softsign blend, consider using a piecewise function that leverages a rational (Pad\u00e9) approximant for z \u2265 \u03b5 \u2013 this will capture the nearly linear region and then gracefully saturate into logarithmic behavior. For z < 0, using a hinge loss formulation may better penalize negative values instead of a high-degree exponent on a nested softsign. Moreover, redefine the dynamic threshold T by moving from a fixed summation over powers of a to a rational function approximation (e.g., [a + c1] / [a + c2]) with tunable constants; this can adapt better over a wide dynamic range. In the extra composite factor, include an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] or even a smooth maximum between two oscillatory terms. Finally, consider replacing the nested softplus chain with a nested softsign chain (or even a nested arctan chain) to better tame extreme outputs\u2014all aimed at reducing BIC, enhancing parameter recovery (especially for phi), and improving overall accuracy. Let\u2019s encourage creative, out\u2010of\u2010the-box approximations that diverge from the standard \u201clogistic plus nonlinear transformation\u201d patterns.\n</think>\n\nNew Instructions for Run 169:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by sequentially multiplying by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5) / phi.\n4. For the adaptive transformation f_adapt(z), replace the previous approach with a more flexible piecewise function:\n\u2003\u2003\u2013 For z \u2265 0, apply a piecewise approximation that uses a rational (Pad\u00e9) approximant: for example, if z < \u03b5, use a quadratic correction (z + k1\u00d7z\u00b2) to capture local curvature, and for z \u2265 \u03b5 transition to a formulation that computes ln(1+z) but adjusted by a rational correction to ensure smoothness.\n\u2003\u2003\u2013 For z < 0, shift z by a small constant (\u0394\u209b) and then use a hinge loss style penalty (e.g., set f_adapt(z) = \u2013 max(0, \u2013z - threshold)^p) so that negative differences are penalized sharply without over\u2010amplifying noise.\n5. Redefine the dynamic threshold T using a flexible rational function (such as a Pad\u00e9 approximant) that can adapt its curvature over a wide range of a values rather than a fixed summation.\n6. In the extra composite factor, add an extra multiplicative modulation term such as [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] or a smooth maximum between that and the existing term to blend oscillatory effects more gently.\n7. Replace the nested softplus chain with a nested softsign chain (or consider a nested arctan chain) to more effectively dampen extreme values.\n8. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, with Exponent defined similarly as before but optionally augmented by additional mild oscillatory terms.\n9. Finally, set the latent utility U = beta + gamma \u00d7 f(x) and convert U to an acceptance probability using the logistic function.\n10. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese modifications should encourage exploring alternative local nonlinear approximations that capture fine local curvature, particularly near z = 0, and impose a sharper penalty on negative signals. By leveraging rational approximants for T and replacing the nested softplus chain with a nested softsign, we expect improvements in BIC, parameter recovery (especially for phi), and overall accuracy. Be creative and think outside the most obvious transformations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor Run 169, I recommend that we push the boundaries further in local nonlinear approximation by replacing the existing f_adapt function with an even more flexible scheme. Instead of a fixed piecewise softplus/softsign blend, consider using a piecewise function that leverages a rational (Pad\u00e9) approximant for z \u2265 \u03b5 \u2013 this will capture the nearly linear region and then gracefully saturate into logarithmic behavior. For z < 0, using a hinge loss formulation may better penalize negative values instead of a high-degree exponent on a nested softsign. Moreover, redefine the dynamic threshold T by moving from a fixed summation over powers of a to a rational function approximation (e.g., [a + c1] / [a + c2]) with tunable constants; this can adapt better over a wide dynamic range. In the extra composite factor, include an additional multiplicative term such as [1 + 0.005\u00d7cos(0.9\u00d7a)] or even a smooth maximum between two oscillatory terms. Finally, consider replacing the nested softplus chain with a nested softsign chain (or even a nested arctan chain) to better tame extreme outputs\u2014all aimed at reducing BIC, enhancing parameter recovery (especially for phi), and improving overall accuracy. Let\u2019s encourage creative, out\u2010of\u2010the-box approximations that diverge from the standard \u201clogistic plus nonlinear transformation\u201d patterns.\n</think>\n\nNew Instructions for Run 169:\n1. Compute the core sum a as the sum of fixed components F\u2081,\u2026,F\u2081\u2081 plus a small constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by sequentially multiplying by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5) / phi.\n4. For the adaptive transformation f_adapt(z), replace the previous approach with a more flexible piecewise function:\n\u2003\u2003\u2013 For z \u2265 0, apply a piecewise approximation that uses a rational (Pad\u00e9) approximant: for example, if z < \u03b5, use a quadratic correction (z + k1\u00d7z\u00b2) to capture local curvature, and for z \u2265 \u03b5 transition to a formulation that computes ln(1+z) but adjusted by a rational correction to ensure smoothness.\n\u2003\u2003\u2013 For z < 0, shift z by a small constant (\u0394\u209b) and then use a hinge loss style penalty (e.g., set f_adapt(z) = \u2013 max(0, \u2013z - threshold)^p) so that negative differences are penalized sharply without over\u2010amplifying noise.\n5. Redefine the dynamic threshold T using a flexible rational function (such as a Pad\u00e9 approximant) that can adapt its curvature over a wide range of a values rather than a fixed summation.\n6. In the extra composite factor, add an extra multiplicative modulation term such as [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] or a smooth maximum between that and the existing term to blend oscillatory effects more gently.\n7. Replace the nested softplus chain with a nested softsign chain (or consider a nested arctan chain) to more effectively dampen extreme values.\n8. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, with Exponent defined similarly as before but optionally augmented by additional mild oscillatory terms.\n9. Finally, set the latent utility U = beta + gamma \u00d7 f(x) and convert U to an acceptance probability using the logistic function.\n10. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese modifications should encourage exploring alternative local nonlinear approximations that capture fine local curvature, particularly near z = 0, and impose a sharper penalty on negative signals. By leveraging rational approximants for T and replacing the nested softplus chain with a nested softsign, we expect improvements in BIC, parameter recovery (especially for phi), and overall accuracy. Be creative and think outside the most obvious transformations.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from proposal features derived from the dataset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F\u2081,\u2026,F\u2081\u2081 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with a multiplicative sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential multiplicative factors capturing oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold constant defining the transition in the piecewise adaptive function for z \u2265 0\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Coefficient for the quadratic correction when z < \u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Coefficient for the rational correction added to ln(1+z) when z \u2265 \u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u0394\u209b\": {\n      \"description\": \"Small constant shift applied to z for negative values in the adaptive function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the hinge-style penalty when z is negative\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c1\": {\n      \"description\": \"Constant numerator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Constant denominator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite multiplicative modulation factor capturing additional oscillatory effects\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent factor modulating the nonlinearity of the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of adaptive correction, dynamic threshold, and extra modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base bias parameter influencing latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in latent utility computation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used in the computation of w to adjust nonlinearity in the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate variable computed from phi to modulate the adaptive transformation (not directly used in final utility, but defines dynamics)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-modulated transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function to latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary choice that aggregates proposal features via a summation of fixed components, applies multiple oscillatory and rational (Pad\u00e9) approximations to capture local curvature and saturated logarithmic behavior, and then modulates the result with an adaptive piecewise transformation. The final latent utility is computed as a linear function of three learnable parameters (beta, gamma, and phi), which is converted to an acceptance probability using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from proposal features derived from the dataset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F\\u2081,\\u2026,F\\u2081\\u2081 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with a multiplicative sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential multiplicative factors capturing oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Threshold constant defining the transition in the piecewise adaptive function for z \\u2265 0\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Coefficient for the quadratic correction when z < \\u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Coefficient for the rational correction added to ln(1+z) when z \\u2265 \\u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\\u0394\\u209b\": {\n      \"description\": \"Small constant shift applied to z for negative values in the adaptive function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the hinge-style penalty when z is negative\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c1\": {\n      \"description\": \"Constant numerator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Constant denominator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite multiplicative modulation factor capturing additional oscillatory effects\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent factor modulating the nonlinearity of the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of adaptive correction, dynamic threshold, and extra modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base bias parameter influencing latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in latent utility computation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used in the computation of w to adjust nonlinearity in the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate variable computed from phi to modulate the adaptive transformation (not directly used in final utility, but defines dynamics)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-modulated transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function to latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1  # Fixed parameter\n    epsilon = 1 # Fixed parameter\n    k1 = 1 # Fixed parameter\n    k2 = 1 # Fixed parameter\n    delta_s = 0.5 # Fixed parameter\n    p = 2 # Fixed parameter\n    c1 = 1 # Fixed parameter\n    c2 = 2 # Fixed parameter\n\n    for trial in trial_data:\n        # Sum F_i values (assuming F_1 to F_11 are available in trial data)\n        F_sum = 0\n        for i in range(1, 12):\n            F_key = f'F_{i}'\n            F_i = trial.get(F_key, 0)  # Default to 0 if F_i is missing\n            F_sum += F_i\n\n        a = F_sum + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        # Adaptive function\n        if z >= 0:\n            if z < epsilon:\n                f_adapt_z = z + k1 * (z**2)\n            else:\n                f_adapt_z = math.log(1 + z) + (k2 * z) / (1 + z)\n        else:\n            f_adapt_z = -max(0, -z - delta_s)**p\n\n        T = (a + c1) / (a + c2)\n\n        extra = 1 + 0.005 * math.cos(0.9 * a)\n\n        Exponent = 1 + 0.002 * math.cos(a + 0.1)\n\n        fx = math.copysign(1, z) * (f_adapt_z * T * extra)**Exponent\n\n        U = beta + gamma * fx\n\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 10.0, \"split_self\": 30.0, \"splitperc_opp\": 50, \"splitperc_self\": 150, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 75.0, \"proposed_amount\": 30.0, \"F_1\": 1, \"F_2\": 1, \"F_3\": 1, \"F_4\": 1, \"F_5\": 1, \"F_6\": 1, \"F_7\": 1, \"F_8\": 1, \"F_9\": 1, \"F_10\": 1, \"F_11\": 1}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 14.0, \"split_self\": 26.0, \"splitperc_opp\": 70, \"splitperc_self\": 130, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 65.0, \"proposed_amount\": 26.0, \"F_1\": 1, \"F_2\": 1, \"F_3\": 1, \"F_4\": 1, \"F_5\": 1, \"F_6\": 1, \"F_7\": 1, \"F_8\": 1, \"F_9\": 1, \"F_10\": 1, \"F_11\": 1}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743550407.126386
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable base bias parameter influencing latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in latent utility computation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter used in the computation of w to adjust nonlinearity in the adaptive transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Fixed component i (i=1,...,11) computed from proposal features derived from the dataset",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant offset added to the sum of fixed components",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "a": {
      "description": "Core sum computed as the sum of F\u2081,\u2026,F\u2081\u2081 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum with a multiplicative sine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Transformed signal after sequential multiplicative factors capturing oscillatory adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b5": {
      "description": "Threshold constant defining the transition in the piecewise adaptive function for z \u2265 0",
      "range": {
        "min": 0.0001,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "k1": {
      "description": "Coefficient for the quadratic correction when z < \u03b5",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "k2": {
      "description": "Coefficient for the rational correction added to ln(1+z) when z \u2265 \u03b5",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "\u0394\u209b": {
      "description": "Small constant shift applied to z for negative values in the adaptive function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "p": {
      "description": "Exponent for the hinge-style penalty when z is negative",
      "range": {
        "min": 1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "T": {
      "description": "Dynamic threshold computed as a rational function of a",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "c1": {
      "description": "Constant numerator offset for dynamic threshold T",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "c2": {
      "description": "Constant denominator offset for dynamic threshold T",
      "range": {
        "min": 0.1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "extra": {
      "description": "Extra composite multiplicative modulation factor capturing additional oscillatory effects",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Exponent factor modulating the nonlinearity of the transformed signal",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed as the sign of z times the powered product of adaptive correction, dynamic threshold, and extra modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base bias parameter influencing latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in latent utility computation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable parameter used in the computation of w to adjust nonlinearity in the adaptive transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Intermediate variable computed from phi to modulate the adaptive transformation (not directly used in final utility, but defines dynamics)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma-modulated transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept = 1)": {
      "description": "Acceptance probability obtained by applying the logistic function to latent utility U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for binary choice that aggregates proposal features via a summation of fixed components, applies multiple oscillatory and rational (Pad\u00e9) approximations to capture local curvature and saturated logarithmic behavior, and then modulates the result with an adaptive piecewise transformation. The final latent utility is computed as a linear function of three learnable parameters (beta, gamma, and phi), which is converted to an acceptance probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Fixed component i (i=1,...,11) computed from proposal features derived from the dataset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F\u2081,\u2026,F\u2081\u2081 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with a multiplicative sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Transformed signal after sequential multiplicative factors capturing oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold constant defining the transition in the piecewise adaptive function for z \u2265 0\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Coefficient for the quadratic correction when z < \u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Coefficient for the rational correction added to ln(1+z) when z \u2265 \u03b5\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"\u0394\u209b\": {\n      \"description\": \"Small constant shift applied to z for negative values in the adaptive function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the hinge-style penalty when z is negative\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"c1\": {\n      \"description\": \"Constant numerator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"c2\": {\n      \"description\": \"Constant denominator offset for dynamic threshold T\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"extra\": {\n      \"description\": \"Extra composite multiplicative modulation factor capturing additional oscillatory effects\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent factor modulating the nonlinearity of the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed as the sign of z times the powered product of adaptive correction, dynamic threshold, and extra modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base bias parameter influencing latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in latent utility computation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used in the computation of w to adjust nonlinearity in the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Intermediate variable computed from phi to modulate the adaptive transformation (not directly used in final utility, but defines dynamics)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-modulated transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Acceptance probability obtained by applying the logistic function to latent utility U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for binary choice that aggregates proposal features via a summation of fixed components, applies multiple oscillatory and rational (Pad\u00e9) approximations to capture local curvature and saturated logarithmic behavior, and then modulates the result with an adaptive piecewise transformation. The final latent utility is computed as a linear function of three learnable parameters (beta, gamma, and phi), which is converted to an acceptance probability using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model for binary choice that aggregates proposal features via a summation of fixed components, applies multiple oscillatory and rational (Pad\u00e9) approximations to capture local curvature and saturated logarithmic behavior, and then modulates the result with an adaptive piecewise transformation. The final latent utility is computed as a linear function of three learnable parameters (beta, gamma, and phi), which is converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1  # Fixed parameter\n    epsilon = 1 # Fixed parameter\n    k1 = 1 # Fixed parameter\n    k2 = 1 # Fixed parameter\n    delta_s = 0.5 # Fixed parameter\n    p = 2 # Fixed parameter\n    c1 = 1 # Fixed parameter\n    c2 = 2 # Fixed parameter\n\n    for trial in trial_data:\n        # Sum F_i values (assuming F_1 to F_11 are available in trial data)\n        F_sum = 0\n        for i in range(1, 12):\n            F_key = f'F_{i}'\n            F_i = trial.get(F_key, 0)  # Default to 0 if F_i is missing\n            F_sum += F_i\n\n        a = F_sum + delta\n\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        w = (phi - 0.5) / phi\n\n        # Adaptive function\n        if z >= 0:\n            if z < epsilon:\n                f_adapt_z = z + k1 * (z**2)\n            else:\n                f_adapt_z = math.log(1 + z) + (k2 * z) / (1 + z)\n        else:\n            f_adapt_z = -max(0, -z - delta_s)**p\n\n        T = (a + c1) / (a + c2)\n\n        extra = 1 + 0.005 * math.cos(0.9 * a)\n\n        Exponent = 1 + 0.002 * math.cos(a + 0.1)\n\n        fx = math.copysign(1, z) * (f_adapt_z * T * extra)**Exponent\n\n        U = beta + gamma * fx\n\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5647130647130647,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.2472140657637123,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.318106404113295,
      "gamma": 0.0,
      "phi": 1.2746788361487311,
      "success": true,
      "log_likelihood": -24.953313074719734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.310379212005241,
      "gamma": 8.515216858766497,
      "phi": 0.6310695341418577,
      "success": true,
      "log_likelihood": -24.897714373666062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.4452242909572344,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.1283745574012405,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.8190248789212387,
      "gamma": 3.6531365121404837,
      "phi": 0.5201285011545391,
      "success": true,
      "log_likelihood": -23.545973163932267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1330111999380337,
      "success": true,
      "log_likelihood": -11.277420835670547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.985314712677932,
      "gamma": 1.4660972269596106,
      "phi": 0.8660247073309152,
      "success": true,
      "log_likelihood": -23.277390003257253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.68222518847543,
      "gamma": 9.847225162213247,
      "phi": 1.0479089146479383,
      "success": true,
      "log_likelihood": -11.277428428057958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9718335448940691,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.066853738721595,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.6897780894782979,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.4237447365723674,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.634488430572925,
      "gamma": 10.0,
      "phi": 1.1730959747420602,
      "success": true,
      "log_likelihood": -11.277427822987603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.729779709974767,
      "gamma": 10.0,
      "phi": 1.0293192261164568,
      "success": true,
      "log_likelihood": -11.277427179722578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.859213231861245,
      "gamma": 10.0,
      "phi": 0.7623986649621873,
      "success": true,
      "log_likelihood": -11.277426398591311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.554639612072714,
      "gamma": 6.589480566490141,
      "phi": 1.0727708128386113,
      "success": true,
      "log_likelihood": -11.277427661224323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.568129309276678,
      "gamma": 6.882334830734445,
      "phi": 0.9819507392345151,
      "success": true,
      "log_likelihood": -16.277439754400195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.9307108825391746,
      "gamma": 10.0,
      "phi": 0.5005761531135026,
      "success": true,
      "log_likelihood": -15.277421880993419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.739355110922719,
      "gamma": 10.0,
      "phi": 1.0925194688162407,
      "success": true,
      "log_likelihood": -11.277427118408593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.211021047218601,
      "gamma": 4.66616447789624,
      "phi": 1.4235371533146295,
      "success": true,
      "log_likelihood": -24.730616750545696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.832320991766929,
      "gamma": 7.39256856097015,
      "phi": 1.2739028477334857,
      "success": true,
      "log_likelihood": -16.27743020721322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9012596591002295,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.192236346087,
      "gamma": 1.3103806182228235,
      "phi": 1.0152363254020635,
      "success": true,
      "log_likelihood": -24.89771435688812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.198204816465614,
      "gamma": 3.325923760917185e-16,
      "phi": 1.1680659094273005,
      "success": true,
      "log_likelihood": -24.953298539054252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.888275187899249,
      "gamma": 3.7780426885141125,
      "phi": 1.1367118062270087,
      "success": true,
      "log_likelihood": -24.450957568496115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.1377511558847955,
      "gamma": 6.934039925723202,
      "phi": 0.8912097362938891,
      "success": true,
      "log_likelihood": -24.730616759687145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.435313225780463,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.975513881327575,
      "gamma": 7.9279806938620005,
      "phi": 0.5771923416396637,
      "success": true,
      "log_likelihood": -15.27742705988326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.032828519783646,
      "gamma": 5.697748454120327,
      "phi": 1.0557939681261777,
      "success": true,
      "log_likelihood": -19.277432480512033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.317145897611553,
      "gamma": 9.853559550616763,
      "phi": 1.1855634121078507,
      "success": true,
      "log_likelihood": -11.277431753715343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.061155493039242,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9611769111203817,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.4401242496854898,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.425900977875239,
      "gamma": 10.0,
      "phi": 1.1686932521475162,
      "success": true,
      "log_likelihood": -11.277421179811906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.410707627931189,
      "gamma": 7.881408983057795,
      "phi": 0.5822754981843858,
      "success": true,
      "log_likelihood": -23.545973163853283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.9038825987194534,
      "gamma": 6.388247484383553,
      "phi": 0.8367323464333075,
      "success": true,
      "log_likelihood": -22.157938172144096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.408803045925723,
      "gamma": 2.563101468908207,
      "phi": 0.8164832016249748,
      "success": true,
      "log_likelihood": -24.953315823164754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.2167637296686165,
      "gamma": 7.100728191776037,
      "phi": 0.538121220286349,
      "success": true,
      "log_likelihood": -22.91451005141332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.960030745907754,
      "gamma": 10.0,
      "phi": 0.8990852061145708,
      "success": true,
      "log_likelihood": -14.277430332788944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0432082543214256,
      "gamma": 1.0013010957600659,
      "phi": 1.4639648343161626,
      "success": true,
      "log_likelihood": -24.056945188752987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9352398622828891,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.405411237183326,
      "gamma": 10.0,
      "phi": 0.8691499906205111,
      "success": true,
      "log_likelihood": -12.27742872555319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.433818773733987,
      "gamma": 9.916224024785219,
      "phi": 1.3972607127547105,
      "success": true,
      "log_likelihood": -27.277375957090356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.016608146422721,
      "gamma": 5.329120808784071,
      "phi": 0.9612337613081227,
      "success": true,
      "log_likelihood": -25.276579734585933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.428834204098429,
      "gamma": 10.0,
      "phi": 0.5201487555366707,
      "success": true,
      "log_likelihood": -21.27032087257921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.505453455756382,
      "gamma": 1.6801631708231983,
      "phi": 0.6820591111668236,
      "success": true,
      "log_likelihood": -24.89771432413069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.0092247205450326,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.187423445019936,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5267723787866787,
      "gamma": 0.5279514421315274,
      "phi": 0.6029742462677735,
      "success": true,
      "log_likelihood": -24.89771432413433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.140455710709449,
      "gamma": 4.312678236151448,
      "phi": 0.7741068545192838,
      "success": true,
      "log_likelihood": -22.157938155598867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.414429386849513,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0779182362499324,
      "gamma": 0.0,
      "phi": 0.8666886018286288,
      "success": true,
      "log_likelihood": -24.89771432992078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7221061963767617,
      "gamma": 2.4051599225467,
      "phi": 1.0537546803585303,
      "success": true,
      "log_likelihood": -24.450957568536808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9300161373957283,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.576873262285241,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.006261510005411,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.438460737756994,
      "gamma": 3.3340773472334724,
      "phi": 0.6265784499381508,
      "success": true,
      "log_likelihood": -15.277493146719571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.1906534555691246,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.5397662276096917,
      "gamma": 10.0,
      "phi": 0.975360346419816,
      "success": true,
      "log_likelihood": -18.277436668856655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.422092130005889,
      "gamma": 6.156332982924501,
      "phi": 1.4348042562900365,
      "success": true,
      "log_likelihood": -24.05694518874018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.756094254998573,
      "gamma": 2.692697822496808,
      "phi": 0.8271578316573892,
      "success": true,
      "log_likelihood": -24.95329995644961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5283869952089977,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.0764511462012303,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.4411949130143622,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.448923611066411,
      "gamma": 4.946174251348874,
      "phi": 1.0663074811868685,
      "success": true,
      "log_likelihood": -24.73061675031375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.166076572400077,
      "gamma": 10.0,
      "phi": 0.8488819790925274,
      "success": true,
      "log_likelihood": -14.277428547508102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9544258551955975,
      "gamma": 8.78642002447404,
      "phi": 1.0264806837971285,
      "success": true,
      "log_likelihood": -16.277472227675474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.263548005973692,
      "gamma": 2.373475402477615,
      "phi": 0.6972076070471105,
      "success": true,
      "log_likelihood": -24.730616750335663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.091229810345651,
      "gamma": 10.0,
      "phi": 1.3291658624349854,
      "success": true,
      "log_likelihood": -14.27742915390876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.1344209072046987,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.9873051726468276,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1226073989533036,
      "gamma": 1.2292298785628433,
      "phi": 0.9169599895712787,
      "success": true,
      "log_likelihood": -24.897714325350364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.2516470890035483,
      "gamma": 10.0,
      "phi": 0.9381784736749332,
      "success": true,
      "log_likelihood": -19.277434065606336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.101883609207937,
      "gamma": 1.7968710538166202,
      "phi": 1.0156712506155956,
      "success": true,
      "log_likelihood": -24.953362623539952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.69703508340625,
      "gamma": 7.322544196729259,
      "phi": 1.0798305610149903,
      "success": true,
      "log_likelihood": -22.157938154755342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.664891696866575,
      "gamma": 10.0,
      "phi": 1.3916334334623248,
      "success": true,
      "log_likelihood": -13.277435552126608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.4577745511074438,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.692631989219793,
      "gamma": 6.474829972644715,
      "phi": 0.7783405870528942,
      "success": true,
      "log_likelihood": -24.056945188727607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.7265240180503344,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.699384857351697,
      "gamma": 1.9079941271864753,
      "phi": 1.410637622493411,
      "success": true,
      "log_likelihood": -24.89771433033812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.906768771761462,
      "gamma": 10.0,
      "phi": 0.596191058052945,
      "success": true,
      "log_likelihood": -14.277430857295867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.3654052670280017,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.616571637488523,
      "gamma": 1.5070689012869578,
      "phi": 1.312775907378989,
      "success": true,
      "log_likelihood": -24.95331255154501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3458955470091994,
      "gamma": 0.1804037989594916,
      "phi": 1.1064228423381737,
      "success": true,
      "log_likelihood": -24.05694518872343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.432097054843283,
      "gamma": 0.7407236000629245,
      "phi": 0.5024048265702514,
      "success": true,
      "log_likelihood": -43.2764677879351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.710133036949739,
      "gamma": 7.337970892164054,
      "phi": 0.5602546441727962,
      "success": true,
      "log_likelihood": -22.157938154774985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.2817526948641762,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.44651754451281,
      "gamma": 6.950419429674555,
      "phi": 1.3706402605087393,
      "success": true,
      "log_likelihood": -13.27743297534461,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.091212996705899,
      "gamma": 0.23527058293037093,
      "phi": 1.121336698369817,
      "success": true,
      "log_likelihood": -24.95367294079855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9454999942249795,
      "gamma": 2.90607772909235,
      "phi": 1.1331285448260742,
      "success": true,
      "log_likelihood": -22.157938154815067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.5612152008191552,
        "p": 1.2505561412434527e-09
      },
      "gamma": {
        "r": 0.24757069918084507,
        "p": 0.013014596860554143
      },
      "phi": {
        "r": 0.04251879997032087,
        "p": 0.6744618057253113
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 54.4159814956302,
  "bic_results": {
    "average_bic": 54.4159814956302,
    "individual_bics": [
      60.6585157558939,
      60.6571829648078,
      60.54598556270045,
      60.65742620704526,
      60.65733541130788,
      57.84250314323286,
      33.30539848670942,
      57.30533682188283,
      33.305413671484246,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.305412461343536,
      33.305411174813486,
      33.30540961255095,
      33.30541213781697,
      43.305436324168724,
      41.30540057735517,
      33.30541105218552,
      60.21179031645973,
      43.30541722979477,
      60.65760779852003,
      60.54598552914457,
      60.65715389347683,
      59.65247195236056,
      60.211790334742616,
      60.657880185732196,
      41.30541093513485,
      49.30542177639239,
      33.305420322799016,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.30539917499215,
      57.84250314307489,
      55.066433159656526,
      60.65718846169784,
      56.579576918194974,
      39.30541748094622,
      58.86444719287431,
      60.65806177720697,
      35.30541426647471,
      65.30530872954904,
      61.3037162845402,
      53.29119856052675,
      60.545985463629705,
      60.657517002782654,
      60.65742620704526,
      60.545985463636995,
      55.06643312656607,
      60.65833416441913,
      60.54598547520989,
      59.65247195244194,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.30554310880747,
      60.65842496015652,
      47.305430153081645,
      58.86444719284869,
      60.65715672826755,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031599583,
      39.30541391038453,
      43.305501270719276,
      60.211790316039654,
      39.30541512318585,
      60.65842496015652,
      60.65833416441913,
      60.545985466069055,
      49.305424946581,
      60.65728206244823,
      55.06643312487901,
      37.30542791962155,
      60.658606551631294,
      58.86444719282355,
      60.6585157558939,
      60.545985476044564,
      39.305418529960065,
      60.65842496015652,
      60.65718191845835,
      58.86444719281519,
      97.30349239123852,
      55.066433124918305,
      60.65806177720697,
      37.305422766057546,
      60.65790269696544,
      55.06643312499847
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.561\n- gamma: r = 0.248\n- phi: r = 0.043",
  "previous_models": [
    "Specification: a = (\u03a3[i=1,\u2026,11] F_i) + \u03b4  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt(z) = { z + k1 * z^2,       if z \u2265 0 and z < \u03b5  \n               ln(1 + z) + (k2 * z)/(1 + z),  if z \u2265 0 and z \u2265 \u03b5  \n              -max(0, -z - \u0394\u209b)^p,    if z < 0 }  \nT = (a + c1) / (a + c2)  \nextra = 1 + 0.005 * cos(0.9 * a)  \nExponent = 1 + 0.002 * cos(a + 0.1)  \nf(x) = sign(z) * [ f_adapt(z) * T * extra ]^(Exponent)  \nU = beta + gamma * f(x)  \nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model for binary choice that aggregates proposal features via a summation of fixed components, applies multiple oscillatory and rational (Pad\u00e9) approximations to capture local curvature and saturated logarithmic behavior, and then modulates the result with an adaptive piecewise transformation. The final latent utility is computed as a linear function of three learnable parameters (beta, gamma, and phi), which is converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 54.4159814956302\nOverall Accuracy: 0.5647\n\nParameter Recovery:\n- beta: r = 0.561\n- gamma: r = 0.248\n- phi: r = 0.043"
  ]
}