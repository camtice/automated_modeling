{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor Run 170, we want to push the model further by encouraging more creative nonlinear approximations. We will instruct the model to replace its current f_adapt block with one that, for z \u2265 \u03b5, uses a rational (Pad\u00e9) approximant\u2014this will capture the nearly linear region smoothly and then transition into logarithmic saturation\u2014and for z < 0, to penalize negatives with a hinge-type loss that prevents over\u2010amplification. Moreover, we will redefine the dynamic threshold T by using a rational function (for example, [a + c1] / [a + c2]) instead of a fixed power series. In addition, in the extra composite factor we will include an additional multiplicative modulation term (e.g., [1 + 0.005\u00d7cos(0.9\u00d7a)] or a smooth \u201cmax\u201d between two oscillatory functions) to help capture mid-range nuances. Finally, we recommend replacing the nested softplus chain with a nested softsign (or even nested arctan) chain to better dampen extreme outputs. These changes aim to improve BIC, enhance parameter recovery (especially for phi), and yield higher accuracy. Be creative and feel free to vary the coefficients and structure in a way that breaks out of the most obvious patterns.\n</think>\n\nNew Instructions for Run 170:\n\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by sequentially multiplying by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5) / phi.\n4. For the adaptive function f_adapt(z), use a piecewise function:\n\u2003\u2003\u2022 For z \u2265 \u03b5 (some small threshold), use a rational (Pad\u00e9) approximant that \u201cclips\u201d by transitioning from a local quadratic correction (z + k\u2081\u00d7z\u00b2) when z is very small to an expression approximating ln(1+z) plus a rational correction when z is larger.\n\u2003\u2003\u2022 For z < 0, instead of a high-degree exponent on a nested softsign, use a hinge loss formulation such that f_adapt(z) = \u2013max(0, \u2013z \u2212 \u0394\u209b)^p, where \u0394\u209b is a small shift and p is chosen to sharply penalize negative deviations.\n5. Redefine the dynamic threshold T not as an infinite power series but as a rational function such as T = (a + c1) / (a + c2) with tunable fixed constants c1 and c2.\n6. In the extra composite factor, incorporate an additional multiplicative modulation term\u2014e.g., multiply by [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] or use a smooth maximum of two oscillatory expressions\u2014to gently blend and capture mid-range behavior.\n7. Replace the current nested softplus chain with a nested softsign chain (or nested arctan chain) to dampen extreme outputs more effectively.\n8. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, where Exponent is defined analogously as before but may include additional mild oscillatory modulations.\n9. Finally, set the latent utility U = beta + gamma \u00d7 f(x) and convert U into an acceptance probability via the logistic function.\n10. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese instructions encourage creativity and out\u2010of\u2010the\u2010box choices while emphasizing the importance of capturing local curvature near zero and enforcing sharper penalties on negative values.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor Run 170, we want to push the model further by encouraging more creative nonlinear approximations. We will instruct the model to replace its current f_adapt block with one that, for z \u2265 \u03b5, uses a rational (Pad\u00e9) approximant\u2014this will capture the nearly linear region smoothly and then transition into logarithmic saturation\u2014and for z < 0, to penalize negatives with a hinge-type loss that prevents over\u2010amplification. Moreover, we will redefine the dynamic threshold T by using a rational function (for example, [a + c1] / [a + c2]) instead of a fixed power series. In addition, in the extra composite factor we will include an additional multiplicative modulation term (e.g., [1 + 0.005\u00d7cos(0.9\u00d7a)] or a smooth \u201cmax\u201d between two oscillatory functions) to help capture mid-range nuances. Finally, we recommend replacing the nested softplus chain with a nested softsign (or even nested arctan) chain to better dampen extreme outputs. These changes aim to improve BIC, enhance parameter recovery (especially for phi), and yield higher accuracy. Be creative and feel free to vary the coefficients and structure in a way that breaks out of the most obvious patterns.\n</think>\n\nNew Instructions for Run 170:\n\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a constant \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)] and compute z by sequentially multiplying by [1 + 0.008 \u00d7 cos(a + 0.065)], [1 + 0.005 \u00d7 sin(a + 0.115)], [1 + 0.004 \u00d7 cos(a + 0.085)], [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))], and [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n3. Define w = (phi \u2212 0.5) / phi.\n4. For the adaptive function f_adapt(z), use a piecewise function:\n\u2003\u2003\u2022 For z \u2265 \u03b5 (some small threshold), use a rational (Pad\u00e9) approximant that \u201cclips\u201d by transitioning from a local quadratic correction (z + k\u2081\u00d7z\u00b2) when z is very small to an expression approximating ln(1+z) plus a rational correction when z is larger.\n\u2003\u2003\u2022 For z < 0, instead of a high-degree exponent on a nested softsign, use a hinge loss formulation such that f_adapt(z) = \u2013max(0, \u2013z \u2212 \u0394\u209b)^p, where \u0394\u209b is a small shift and p is chosen to sharply penalize negative deviations.\n5. Redefine the dynamic threshold T not as an infinite power series but as a rational function such as T = (a + c1) / (a + c2) with tunable fixed constants c1 and c2.\n6. In the extra composite factor, incorporate an additional multiplicative modulation term\u2014e.g., multiply by [1 + 0.005 \u00d7 cos(0.9 \u00d7 a)] or use a smooth maximum of two oscillatory expressions\u2014to gently blend and capture mid-range behavior.\n7. Replace the current nested softplus chain with a nested softsign chain (or nested arctan chain) to dampen extreme outputs more effectively.\n8. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }, where Exponent is defined analogously as before but may include additional mild oscillatory modulations.\n9. Finally, set the latent utility U = beta + gamma \u00d7 f(x) and convert U into an acceptance probability via the logistic function.\n10. Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n\nThese instructions encourage creativity and out\u2010of\u2010the\u2010box choices while emphasizing the importance of capturing local curvature near zero and enforcing sharper penalties on negative values.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling factor applied to the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weighting parameter modifying f_adapt via w\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed experimental component (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant additive term in the core sum a\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Small threshold constant for f_adapt switching\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod and multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive nonlinear transformation of z; uses a Pad\u00e9 approximant for z \u2265 \u03b5 and a hinge-type penalty for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weighting factor derived from phi to modulate f_adapt\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adapted\": {\n      \"description\": \"Product of f_adapt(z) and w incorporating phi\u2019s adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined by a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Additional multiplicative oscillatory modulation factor\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested\": {\n      \"description\": \"Double application of the softsign function to z to dampen extreme values\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent modulating the final transformation with mild oscillatory adjustments\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal obtained by applying sign, adaptive, threshold, extra, and nested factors raised to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of a participant accepting the proposal, obtained via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear binary choice model that first computes a core sum from fixed experimental components, then sequentially modulates this sum with multiple oscillatory factors to yield a transformed signal z. A piecewise adaptive function f_adapt(z) applies a rational (Pad\u00e9) approximant for positive z and a hinge-type penalty for negatives; its output is further weighted by a factor derived from phi. A dynamic threshold T and an extra oscillatory modulation factor refine the signal, which is dampened via a nested softsign chain. The final transformed signal f(x) is raised to an exponent with minor oscillatory modulation and linearly scaled with beta and gamma to yield latent utility U, which is converted to an acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling factor applied to the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weighting parameter modifying f_adapt via w\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed experimental component (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Constant additive term in the core sum a\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Small threshold constant for f_adapt switching\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod and multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive nonlinear transformation of z; uses a Pad\\u00e9 approximant for z \\u2265 \\u03b5 and a hinge-type penalty for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weighting factor derived from phi to modulate f_adapt\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adapted\": {\n      \"description\": \"Product of f_adapt(z) and w incorporating phi\\u2019s adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined by a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Additional multiplicative oscillatory modulation factor\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested\": {\n      \"description\": \"Double application of the softsign function to z to dampen extreme values\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent modulating the final transformation with mild oscillatory adjustments\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal obtained by applying sign, adaptive, threshold, extra, and nested factors raised to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of a participant accepting the proposal, obtained via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    epsilon = 0.0001 #Fixed constant from the data description\n\n    for trial in trial_data:\n        # Extract data from the trial dictionary\n        delta = 0  # Assuming delta is 0 if not provided\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # Default to 0 if F_i is missing\n\n\n        # Core sum\n        a = delta + sum(F_values)\n\n        # Modulated core sum\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Sequentially modulated signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * \\\n            (1 + 0.005 * math.sin(a + 0.115)) * \\\n            (1 + 0.004 * math.cos(a + 0.085)) * \\\n            (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * \\\n            (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Adaptive nonlinear transformation\n        if z >= epsilon:\n            f_adapt_z = math.log(1 + z) + (0.12 * z**2) / (1 + 0.08 * z)\n        else:\n            f_adapt_z = -max(0, -z - 0.05)**2\n\n        # Weighting factor\n        w = (phi - 0.5) / phi\n\n        # Adapted signal\n        adapted = f_adapt_z * w\n\n        # Dynamic threshold\n        T = (a + 0.5) / (a + 1)\n\n        # Additional multiplicative factor\n        extra = 1 + 0.005 * math.cos(0.9 * a)\n\n        # Nested softsign\n        softsign_z = z / (1 + abs(z))\n        nested = softsign_z / (1 + abs(softsign_z))\n\n        # Exponent\n        Exponent = 1 + 0.002 * math.sin(a)\n\n        # Transformed signal\n        sign_z = 1 if z >= 0 else -1\n        f_x = sign_z * (abs(adapted * T * extra * nested)**Exponent)\n\n        # Latent utility\n        U = beta + gamma * f_x\n\n        # Predicted probability\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta = 0.1, gamma = 0.1, phi = 0.1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743550537.7977622
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling factor applied to the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive weighting parameter modifying f_adapt via w",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling factor applied to the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive weighting parameter modifying f_adapt via w",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F_i": {
      "description": "Fixed experimental component (for i = 1,...,11)",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Constant additive term in the core sum a",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b5": {
      "description": "Small threshold constant for f_adapt switching",
      "range": {
        "min": 0.0001,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "a": {
      "description": "Core sum computed from fixed components and \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modulated core sum with sinusoidal adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Sequentially modulated signal derived from a_mod and multiple oscillatory factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Adaptive nonlinear transformation of z; uses a Pad\u00e9 approximant for z \u2265 \u03b5 and a hinge-type penalty for negative z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weighting factor derived from phi to modulate f_adapt",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "adapted": {
      "description": "Product of f_adapt(z) and w incorporating phi\u2019s adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold defined by a rational function of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Additional multiplicative oscillatory modulation factor",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "nested": {
      "description": "Double application of the softsign function to z to dampen extreme values",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Exponent modulating the final transformation with mild oscillatory adjustments",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal obtained by applying sign, adaptive, threshold, extra, and nested factors raised to the Exponent",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted probability of a participant accepting the proposal, obtained via a logistic function of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear binary choice model that first computes a core sum from fixed experimental components, then sequentially modulates this sum with multiple oscillatory factors to yield a transformed signal z. A piecewise adaptive function f_adapt(z) applies a rational (Pad\u00e9) approximant for positive z and a hinge-type penalty for negatives; its output is further weighted by a factor derived from phi. A dynamic threshold T and an extra oscillatory modulation factor refine the signal, which is dampened via a nested softsign chain. The final transformed signal f(x) is raised to an exponent with minor oscillatory modulation and linearly scaled with beta and gamma to yield latent utility U, which is converted to an acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling factor applied to the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive weighting parameter modifying f_adapt via w\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Fixed experimental component (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant additive term in the core sum a\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Small threshold constant for f_adapt switching\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modulated core sum with sinusoidal adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Sequentially modulated signal derived from a_mod and multiple oscillatory factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive nonlinear transformation of z; uses a Pad\u00e9 approximant for z \u2265 \u03b5 and a hinge-type penalty for negative z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weighting factor derived from phi to modulate f_adapt\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adapted\": {\n      \"description\": \"Product of f_adapt(z) and w incorporating phi\u2019s adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold defined by a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Additional multiplicative oscillatory modulation factor\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"nested\": {\n      \"description\": \"Double application of the softsign function to z to dampen extreme values\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Exponent modulating the final transformation with mild oscillatory adjustments\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal obtained by applying sign, adaptive, threshold, extra, and nested factors raised to the Exponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of a participant accepting the proposal, obtained via a logistic function of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear binary choice model that first computes a core sum from fixed experimental components, then sequentially modulates this sum with multiple oscillatory factors to yield a transformed signal z. A piecewise adaptive function f_adapt(z) applies a rational (Pad\u00e9) approximant for positive z and a hinge-type penalty for negatives; its output is further weighted by a factor derived from phi. A dynamic threshold T and an extra oscillatory modulation factor refine the signal, which is dampened via a nested softsign chain. The final transformed signal f(x) is raised to an exponent with minor oscillatory modulation and linearly scaled with beta and gamma to yield latent utility U, which is converted to an acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))\nSummary: A nonlinear binary choice model that first computes a core sum from fixed experimental components, then sequentially modulates this sum with multiple oscillatory factors to yield a transformed signal z. A piecewise adaptive function f_adapt(z) applies a rational (Pad\u00e9) approximant for positive z and a hinge-type penalty for negatives; its output is further weighted by a factor derived from phi. A dynamic threshold T and an extra oscillatory modulation factor refine the signal, which is dampened via a nested softsign chain. The final transformed signal f(x) is raised to an exponent with minor oscillatory modulation and linearly scaled with beta and gamma to yield latent utility U, which is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    epsilon = 0.0001 #Fixed constant from the data description\n\n    for trial in trial_data:\n        # Extract data from the trial dictionary\n        delta = 0  # Assuming delta is 0 if not provided\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # Default to 0 if F_i is missing\n\n\n        # Core sum\n        a = delta + sum(F_values)\n\n        # Modulated core sum\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Sequentially modulated signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * \\\n            (1 + 0.005 * math.sin(a + 0.115)) * \\\n            (1 + 0.004 * math.cos(a + 0.085)) * \\\n            (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * \\\n            (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Adaptive nonlinear transformation\n        if z >= epsilon:\n            f_adapt_z = math.log(1 + z) + (0.12 * z**2) / (1 + 0.08 * z)\n        else:\n            f_adapt_z = -max(0, -z - 0.05)**2\n\n        # Weighting factor\n        w = (phi - 0.5) / phi\n\n        # Adapted signal\n        adapted = f_adapt_z * w\n\n        # Dynamic threshold\n        T = (a + 0.5) / (a + 1)\n\n        # Additional multiplicative factor\n        extra = 1 + 0.005 * math.cos(0.9 * a)\n\n        # Nested softsign\n        softsign_z = z / (1 + abs(z))\n        nested = softsign_z / (1 + abs(softsign_z))\n\n        # Exponent\n        Exponent = 1 + 0.002 * math.sin(a)\n\n        # Transformed signal\n        sign_z = 1 if z >= 0 else -1\n        f_x = sign_z * (abs(adapted * T * extra * nested)**Exponent)\n\n        # Latent utility\n        U = beta + gamma * f_x\n\n        # Predicted probability\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5662393162393162,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 5.319717592959654,
      "phi": 0.8876186148802222,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.964123115642676,
      "phi": 0.7872111046099826,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782879546756434,
      "gamma": 1.0467692848261778,
      "phi": 0.852923492808899,
      "success": true,
      "log_likelihood": -24.897714324103216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.344354643923905,
      "phi": 1.4110825815731936,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.7746297042385795,
      "phi": 0.7376768033916568,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28407478617633,
      "gamma": 6.500309953507088,
      "phi": 1.1902323570698408,
      "success": true,
      "log_likelihood": -23.545973163849546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.9593568559897,
      "phi": 1.3118673036972957,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8145864104270819,
      "gamma": 1.8758169394322333,
      "phi": 0.7392089511090189,
      "success": true,
      "log_likelihood": -22.91451006639622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.907302177390002,
      "phi": 1.0478372488738685,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.1814949253926805,
      "phi": 1.267851926618626,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.178286206849807,
      "phi": 1.4380130409858558,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.8383598909743344,
      "phi": 1.2548884640066384,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.066741100750126,
      "phi": 1.4146522698118371,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.129065097001204,
      "phi": 1.1152323640606228,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.890408057284153,
      "phi": 1.178551355632518,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.5156715025005925,
      "phi": 0.9741232678824752,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.6269627422528,
      "phi": 1.3482891110288344,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.1225050706283186,
      "phi": 0.7435155468163156,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.898655683407406,
      "phi": 1.100276603569831,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.40865591438380644,
      "phi": 0.52694597283022,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2476266373140181,
      "gamma": 1.009028614197982,
      "phi": 0.6515508482283211,
      "success": true,
      "log_likelihood": -24.730616754940986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.065857627713866,
      "phi": 1.07124377014827,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.424903841539952,
      "phi": 1.2810468260282888,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.309906247605792,
      "gamma": 7.673711673703663,
      "phi": 1.1266799556134692,
      "success": true,
      "log_likelihood": -24.952632070910962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.389595024610211,
      "gamma": 1.102657329894876,
      "phi": 0.5420051262324285,
      "success": true,
      "log_likelihood": -24.9533111351872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790397341688852,
      "gamma": 7.229148262308584,
      "phi": 0.7486823775278911,
      "success": true,
      "log_likelihood": -24.450957568546123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247400518659063,
      "gamma": 7.710480983205997,
      "phi": 0.6640017791624895,
      "success": true,
      "log_likelihood": -24.730616750514898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.4219188760388572,
      "phi": 1.1668764665076274,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.235519520120685,
      "phi": 1.3306287658719878,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.7147448284364994,
      "phi": 0.6952875710100274,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.8978335622583495,
      "phi": 0.6281191958728514,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.277317453198429,
      "phi": 1.1801657558094265,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.076060761581272,
      "phi": 1.2385653306668483,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.4143815161801,
      "phi": 0.6139268613344234,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.466600552261138,
      "phi": 0.85792145620761,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28409966332649744,
      "gamma": 6.531323492689689,
      "phi": 1.3427270058511316,
      "success": true,
      "log_likelihood": -23.54597316400735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230034086715263,
      "gamma": 8.889040100045058,
      "phi": 1.3744219236402877,
      "success": true,
      "log_likelihood": -22.15793815473307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.337887366262944,
      "gamma": 7.980023611739496,
      "phi": 0.8371925590083558,
      "success": true,
      "log_likelihood": -24.95329852781984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148260700631161,
      "gamma": 7.736820709241683,
      "phi": 1.4129817941311673,
      "success": true,
      "log_likelihood": -22.914510051831435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.874431101980143,
      "phi": 0.6262061520214904,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265000275578958,
      "gamma": 6.942132787328132,
      "phi": 0.7686235820975652,
      "success": true,
      "log_likelihood": -24.056945188726033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.626788047619345,
      "phi": 1.395895004885375,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.822844480552207,
      "phi": 0.9913727326975753,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247412289352444,
      "gamma": 5.45609764603628,
      "phi": 0.5518953126871607,
      "success": true,
      "log_likelihood": -24.730616750408362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265102790212033,
      "gamma": 7.460060765144409,
      "phi": 1.3956916562493102,
      "success": true,
      "log_likelihood": -24.05694518872459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0633376387743083,
      "gamma": 8.02389871904672,
      "phi": 0.7103722197466372,
      "success": true,
      "log_likelihood": -21.270320947252007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0776078036605203,
      "gamma": 5.353347263351384,
      "phi": 0.9925831792551966,
      "success": true,
      "log_likelihood": -24.897714344069154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6049632349932264,
      "phi": 1.3345086753402984,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.65316951874431,
      "phi": 0.9913271573916584,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078295484677815,
      "gamma": 9.507150338525861,
      "phi": 0.5257610155071394,
      "success": true,
      "log_likelihood": -24.897714324109305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5236423940866453,
      "gamma": 3.1522676435904904,
      "phi": 0.9476292767093915,
      "success": true,
      "log_likelihood": -22.157938188239722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4866249995093794,
      "phi": 1.2585498275797447,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077790705692463,
      "gamma": 4.07384693116991,
      "phi": 1.1165527491599234,
      "success": true,
      "log_likelihood": -24.897714334709363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.679055281891387,
      "gamma": 7.7748363200022155,
      "phi": 1.3785344467636356,
      "success": true,
      "log_likelihood": -24.450957568494918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.090378843053908,
      "phi": 0.6949685215919074,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.726749978896671,
      "phi": 0.886823063763254,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.919237575396021,
      "gamma": 8.003880172686022,
      "phi": 0.8434586832913419,
      "success": true,
      "log_likelihood": -24.953692233823222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.017715483881307614,
      "phi": 1.3516480270386606,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.9231265358612477,
      "phi": 1.2957149052748596,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.600613902005547,
      "phi": 1.165404430852631,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19263292439409205,
      "gamma": 1.9856127276107527,
      "phi": 1.3446365018049118,
      "success": true,
      "log_likelihood": -24.056945188830902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.384041354917041,
      "gamma": 4.895615974561448,
      "phi": 1.4685308907881152,
      "success": true,
      "log_likelihood": -24.953311276152817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.519855782634309,
      "phi": 1.301914598437961,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.412891154465402,
      "phi": 0.5240960707726617,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.150699364048648,
      "phi": 1.024437367796818,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474404360380833,
      "gamma": 2.9661778220314305,
      "phi": 1.4904823884474336,
      "success": true,
      "log_likelihood": -24.730616750303643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.524867393430184,
      "phi": 1.0745393746117284,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.618197384464337,
      "phi": 0.8885732998249427,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.248136537726938,
      "gamma": 2.297928081208074,
      "phi": 0.6973920899428838,
      "success": true,
      "log_likelihood": -24.73061681502231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.967192885110823,
      "phi": 1.423135911977532,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.576926702306646,
      "phi": 0.8157169413103798,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.2885530470269193,
      "phi": 1.336004627918291,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.079092244633681,
      "gamma": 7.006848064602433,
      "phi": 0.7731462408711659,
      "success": true,
      "log_likelihood": -24.89771435282803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.391787667857972,
      "phi": 1.4268237443072618,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.480859314685608,
      "phi": 1.0252855990197265,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5225646723863828,
      "gamma": 2.5820683244682674,
      "phi": 0.5661539171325065,
      "success": true,
      "log_likelihood": -22.157938170731924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 9.387408107861756,
      "phi": 0.8870632127346384,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.489402777882475,
      "phi": 1.2128191483225046,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.192657019009714,
      "gamma": 9.055119586407644,
      "phi": 0.8230160012712492,
      "success": true,
      "log_likelihood": -24.056945188727305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.8625706524099652,
      "phi": 0.7510904909911614,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0782990263616634,
      "gamma": 0.9646404439241452,
      "phi": 1.1662589509346137,
      "success": true,
      "log_likelihood": -24.89771432411388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.385282823707806,
      "phi": 0.9416774403820262,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.455694656105914,
      "phi": 0.9397850972866804,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999996,
      "gamma": 3.9005253083002787,
      "phi": 1.3151158086783656,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265891565305526,
      "gamma": 1.105955063698647,
      "phi": 0.9754631054907636,
      "success": true,
      "log_likelihood": -24.05694518873208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.6693966697991085,
      "phi": 1.3722999276463563,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230422854461863,
      "gamma": 7.64032427098893,
      "phi": 0.5545891844642464,
      "success": true,
      "log_likelihood": -22.15793815484772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 5.3737206055595035,
      "phi": 0.6919611472517194,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6081284012280874,
      "phi": 1.2239392503738022,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6589876607113474,
      "phi": 1.3230473658399888,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5233147477067122,
      "gamma": 0.31225401209189374,
      "phi": 0.6052468039562995,
      "success": true,
      "log_likelihood": -22.157938162648097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.610582961673037,
        "p": 1.5309156470941602e-11
      },
      "gamma": {
        "r": -0.01211073598103336,
        "p": 0.9048086457508202
      },
      "phi": {
        "r": 0.16713206918464038,
        "p": 0.09650873478772366
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.923901263405234,
  "bic_results": {
    "average_bic": 53.923901263405234,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.545985463574766,
      60.65742620704526,
      60.65733541130788,
      57.84250314306742,
      33.3062773958674,
      56.57957694816076,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.211790325250306,
      43.305823414830115,
      60.65760779852003,
      60.65582095719026,
      60.657179085742726,
      59.65247195246057,
      60.21179031639812,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314338303,
      55.066433124834475,
      60.657153871008006,
      56.5795769190312,
      39.30600500724502,
      58.86444719282039,
      60.65806177720697,
      35.30618659965994,
      60.21179031618506,
      58.86444719281751,
      53.29119870987235,
      60.54598550350664,
      60.657517002782654,
      60.65742620704526,
      60.545985463586945,
      55.06643319184778,
      60.65833416441913,
      60.54598548478705,
      59.65247195235817,
      60.657517002782654,
      60.657698594257425,
      60.65794128301478,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.86444719303013,
      60.65717936767396,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031597562,
      39.30600500724503,
      43.3058234148301,
      60.211790445412944,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598552102439,
      49.30555102620774,
      60.6571538198331,
      55.066433156832176,
      37.306095803452486,
      60.658606551631294,
      58.86444719282294,
      60.6585157558939,
      60.5459854635961,
      39.30600500724503,
      60.65842496015652,
      60.6571538198331,
      58.864447192832486,
      60.65842496015651,
      55.06643312506377,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.06643314066453
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.611\n- gamma: r = -0.012\n- phi: r = 0.167",
  "previous_models": [
    "Specification: a = \u03b4 + \u2211[i=1 to 11] F_i  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + (0.12 \u00b7 z\u00b2)/(1 + 0.08 \u00b7 z)   if z \u2265 \u03b5  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003  -max(0, -z - 0.05)\u00b2               if z < 0 }  \nw = (phi - 0.5) / phi  \nadapted = f_adapt(z) \u00b7 w  \nT = (a + 0.5) / (a + 1)  \nextra = 1 + 0.005 \u00b7 cos(0.9 \u00b7 a)  \nnested = softsign(softsign(z)),\u2003where softsign(x) = x/(1+|x|)  \nExponent = 1 + 0.002 \u00b7 sin(a)  \nf(x) = sign(z) \u00b7 [adapted \u00b7 T \u00b7 extra \u00b7 nested]^(Exponent)  \nU = beta + gamma \u00b7 f(x)  \np_accept = 1/(1 + exp(\u2212U))\nSummary: A nonlinear binary choice model that first computes a core sum from fixed experimental components, then sequentially modulates this sum with multiple oscillatory factors to yield a transformed signal z. A piecewise adaptive function f_adapt(z) applies a rational (Pad\u00e9) approximant for positive z and a hinge-type penalty for negatives; its output is further weighted by a factor derived from phi. A dynamic threshold T and an extra oscillatory modulation factor refine the signal, which is dampened via a nested softsign chain. The final transformed signal f(x) is raised to an exponent with minor oscillatory modulation and linearly scaled with beta and gamma to yield latent utility U, which is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.923901263405234\nOverall Accuracy: 0.5662\n\nParameter Recovery:\n- beta: r = 0.611\n- gamma: r = -0.012\n- phi: r = 0.167"
  ]
}