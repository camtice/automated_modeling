<new_instructions>
1. Compute the core sum a = Σ[i=1 to 11] Fᵢ + δ.
2. Define a_mod = 1.08 × a × [1 + 0.012 × sin(a + 0.045)].
3. Compute z as the product:
  z = a_mod × [1 + 0.008 × cos(a + 0.065)] × [1 + 0.005 × sin(a + 0.115)] × [1 + 0.004 × cos(a + 0.085)] × [1 + 0.006 × (sin(a + 0.035) × cos(a + 0.055))] × [1 + 0.003 × (sin(a + 0.03) × cos(a + 0.05))].
4. Define the weight w = (phi – 0.5) / phi.
5. Adaptive transformation f_adapt(z):
  • For nonnegative z (z ≥ 0.0001), set
    f_adapt(z) = z + 0.1·z² + ln(1+z) + 0.1·z/(1+z).
  • For negative z (z < 0.0001), set
    f_adapt(z) = – max(0, –z – Δₛ)²             with Δₛ = 0.05.
6. Define the dynamic threshold as a simple rational (Padé) form: T = (a + 1) / (a + 1.5).
7. Define the extra composite modulation as extra = 1 + 0.005×cos(0.9×a) + 0.002×sin(2×a). To robustly damp the signal, replace any deep softplus chains with a nested arctan (or softsign) chain if needed.
8. Define the final exponent modulator as Exponent = [0.9478 + 0.00018 × ln(1+a)] × [1 + 0.001×sin(a) + 0.0005×cos(2×a)].
9. Compute the overall transformed signal f(x) = sign(z) × { [ f_adapt(z) × T × extra ]^(Exponent) }.
10. Set the latent utility U = beta + gamma × f(x) and then compute the acceptance probability as P(accept) = 1 / [1 + exp(–U)].
11. Use exactly three learnable parameters with these strict bounds: beta ∈ [–10, 10], gamma ∈ [0, 10], and phi ∈ [0.5, 1.5].
12. Think out of the box and feel free to creatively adjust the form of f_adapt (for instance, by blending a local quadratic correction with a saturated logarithmic term via a Padé approximant) and incorporate the extra modulation in a way that stabilizes the estimates and enhances parameter recovery.
</new_instructions>