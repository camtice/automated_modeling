{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 174, we want to push for more creative and flexible nonlinear approximations. Instead of using a fixed power\u2010series for the dynamic threshold T, we will require a simpler rational (Pad\u00e9) form (e.g., T = (a+c\u2081)/(a+c\u2082)) to help stabilize parameter estimates. For the adaptive transformation f_adapt(z), for nonnegative z (z \u2265 0.0001) require that the model smoothly transitions from a local quadratic correction into a saturated logarithmic term via a Pad\u00e9 approximant\u2014for example, starting with a term like z + k\u2081\u00b7z\u00b2 then switching to ln(1+z) modified by an extra rational adjustment (such as + k\u2082\u00b7z/(1+z)). For negative z, use a hinge-loss formulation defined as f_adapt(z) = \u2013max(0, \u2013z \u2013 \u0394\u209b)\u1d56 with a low exponent (such as p = 2) so that the penalty for negative deviations is moderate rather than extreme. To further improve parameter recovery, instruct the model to add an extra oscillatory modulation inside the extra composite factor (e.g., multiply by [1 + 0.005\u00b7cos(0.9\u00b7a) + 0.002\u00b7sin(2\u00b7a)]). Also, replace any nested softplus chains with a nested arctan or softsign chain for robust damping. Finally, let the final exponent multiplying the product be modulated by a mild oscillatory term (for instance, multiplied by [1 + 0.001\u00b7sin(a) + 0.0005\u00b7cos(2\u00b7a)]). The learnable parameters remain exactly three and must be strictly bounded: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. These modifications are designed to yield interpretable and stable nonlinear models, improving accuracy, reducing BIC, and enhancing parameter recovery.\n</think>\n\n<new_instructions>\n1. Compute the core sum a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute z as the product: z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight w = (phi \u2013 0.5) / phi.\n5. Define the adaptive transformation f_adapt(z) as follows:\n\u2003\u2013 For nonnegative z (z \u2265 0.0001), use a Pad\u00e9 approximant that smoothly transitions from a local quadratic correction to a logarithmic saturation. For example, set f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1+z) + k\u2082\u00b7z/(1+z). (Choose k\u2081 = 0.1 and k\u2082 = 0.1 as exemplary constants.)\n\u2003\u2013 For negative z (z < 0.0001), set f_adapt(z) = \u2013max(0, \u2013z \u2013 \u0394\u209b)\u00b2, where \u0394\u209b = 0.05.\n6. Define the dynamic threshold T as a rational function, e.g. T = (a + c\u2081) / (a + c\u2082) with c\u2081 = 1 and c\u2082 = 1.5.\n7. Define the extra composite modulation as extra = [1 + 0.005\u00d7cos(0.9\u00d7a) + 0.002\u00d7sin(2\u00d7a)].\n8. Replace any nested softplus functions with a nested arctan chain (or use the softsign function) to dampen the signal robustly.\n9. Define the final exponent modulator Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.001\u00d7sin(a) + 0.0005\u00d7cos(2\u00d7a)].\n10. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n11. Then set latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability via the logistic function: P(accept) = 1 / [1 + exp(\u2013U)].\n12. Use exactly three learnable parameters with these strict bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</new_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 174, we want to push for more creative and flexible nonlinear approximations. Instead of using a fixed power\u2010series for the dynamic threshold T, we will require a simpler rational (Pad\u00e9) form (e.g., T = (a+c\u2081)/(a+c\u2082)) to help stabilize parameter estimates. For the adaptive transformation f_adapt(z), for nonnegative z (z \u2265 0.0001) require that the model smoothly transitions from a local quadratic correction into a saturated logarithmic term via a Pad\u00e9 approximant\u2014for example, starting with a term like z + k\u2081\u00b7z\u00b2 then switching to ln(1+z) modified by an extra rational adjustment (such as + k\u2082\u00b7z/(1+z)). For negative z, use a hinge-loss formulation defined as f_adapt(z) = \u2013max(0, \u2013z \u2013 \u0394\u209b)\u1d56 with a low exponent (such as p = 2) so that the penalty for negative deviations is moderate rather than extreme. To further improve parameter recovery, instruct the model to add an extra oscillatory modulation inside the extra composite factor (e.g., multiply by [1 + 0.005\u00b7cos(0.9\u00b7a) + 0.002\u00b7sin(2\u00b7a)]). Also, replace any nested softplus chains with a nested arctan or softsign chain for robust damping. Finally, let the final exponent multiplying the product be modulated by a mild oscillatory term (for instance, multiplied by [1 + 0.001\u00b7sin(a) + 0.0005\u00b7cos(2\u00b7a)]). The learnable parameters remain exactly three and must be strictly bounded: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. These modifications are designed to yield interpretable and stable nonlinear models, improving accuracy, reducing BIC, and enhancing parameter recovery.\n</think>\n\n<new_instructions>\n1. Compute the core sum a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Set a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute z as the product: z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight w = (phi \u2013 0.5) / phi.\n5. Define the adaptive transformation f_adapt(z) as follows:\n\u2003\u2013 For nonnegative z (z \u2265 0.0001), use a Pad\u00e9 approximant that smoothly transitions from a local quadratic correction to a logarithmic saturation. For example, set f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1+z) + k\u2082\u00b7z/(1+z). (Choose k\u2081 = 0.1 and k\u2082 = 0.1 as exemplary constants.)\n\u2003\u2013 For negative z (z < 0.0001), set f_adapt(z) = \u2013max(0, \u2013z \u2013 \u0394\u209b)\u00b2, where \u0394\u209b = 0.05.\n6. Define the dynamic threshold T as a rational function, e.g. T = (a + c\u2081) / (a + c\u2082) with c\u2081 = 1 and c\u2082 = 1.5.\n7. Define the extra composite modulation as extra = [1 + 0.005\u00d7cos(0.9\u00d7a) + 0.002\u00d7sin(2\u00d7a)].\n8. Replace any nested softplus functions with a nested arctan chain (or use the softsign function) to dampen the signal robustly.\n9. Define the final exponent modulator Exponent = [0.9478 + 0.00018\u00d7ln(1+a)] \u00d7 [1 + 0.001\u00d7sin(a) + 0.0005\u00d7cos(2\u00d7a)].\n10. Compute the final transformed signal as f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra ]^(Exponent) }.\n11. Then set latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability via the logistic function: P(accept) = 1 / [1 + exp(\u2013U)].\n12. Use exactly three learnable parameters with these strict bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</new_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Trial-specific factor i (for i=1,...,11) computed from experimental data features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to the sum of F_i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F_i plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Signal computed as a_mod modulated by multiple trigonometric factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling weight and normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"k1\": {\n      \"description\": \"Fixed constant for quadratic correction in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"k2\": {\n      \"description\": \"Fixed constant for rational adjustment in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_s\": {\n      \"description\": \"Fixed threshold constant used in hinge-loss for negative z\",\n      \"range\": {\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Oscillatory composite modulation factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator with logarithmic and oscillatory components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed by applying adaptive transformation, threshold, and modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and gamma multiplied by f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model where a composite signal f(x) is computed from a core sum of 11 trial-specific factors plus a constant offset. The signal is modulated via multiple sinusoidal terms, an adaptive transformation f_adapt that employs a Pad\u00e9 approximant for nonnegative inputs and a hinge loss for negative inputs, and a dynamic threshold defined by a rational function. An extra oscillatory modulation and a final exponent modulator refine the transformation before scaling by learnable parameters beta and gamma. The latent utility is then passed through a logistic function to yield the predicted acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Trial-specific factor i (for i=1,...,11) computed from experimental data features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to the sum of F_i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F_i plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Signal computed as a_mod modulated by multiple trigonometric factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling weight and normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"k1\": {\n      \"description\": \"Fixed constant for quadratic correction in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"k2\": {\n      \"description\": \"Fixed constant for rational adjustment in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_s\": {\n      \"description\": \"Fixed threshold constant used in hinge-loss for negative z\",\n      \"range\": {\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Oscillatory composite modulation factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator with logarithmic and oscillatory components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed by applying adaptive transformation, threshold, and modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and gamma multiplied by f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from trial data.  Handle missing F_i.\n        F_values = []\n        for i in range(1, 12):\n            key = f'F_{i}'\n            F_values.append(trial.get(key, 0))  # Use 0 if F_i is missing\n\n        delta = trial.get('delta', 0)  # handle missing delta\n\n        # Calculate a\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = z + 0.1 * z**2 + math.log(1 + z) + 0.1 * z / (1 + z)\n        else:\n            f_adapt_z = - max(0, -z - 0.05)**2\n\n        # Calculate T\n        T = (a + 1) / (a + 1.5)\n\n        # Calculate extra\n        extra = 1 + 0.005 * math.cos(0.9 * a) + 0.002 * math.sin(2 * a)\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.001 * math.sin(a) + 0.0005 * math.cos(2 * a))\n\n        # Calculate f(x)\n        if z >= 0:\n            sign_z = 1\n        else:\n            sign_z = -1\n\n        f_x = sign_z * (f_adapt_z * T * extra)**Exponent\n\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept)\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:  # Handle overflow (very large U)\n            p_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743550770.82527
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter controlling weight and normalization",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Trial-specific factor i (for i=1,...,11) computed from experimental data features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Constant offset added to the sum of F_i",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data/calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of F_i plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Modified core sum with sinusoidal modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Signal computed as a_mod modulated by multiple trigonometric factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight computed from learnable parameter phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter controlling weight and normalization",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "k1": {
      "description": "Fixed constant for quadratic correction in f_adapt",
      "range": {
        "min": 0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "k2": {
      "description": "Fixed constant for rational adjustment in f_adapt",
      "range": {
        "min": 0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "Delta_s": {
      "description": "Fixed threshold constant used in hinge-loss for negative z",
      "range": {
        "min": 0.05,
        "max": 0.05,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "constant"
    },
    "T": {
      "description": "Dynamic threshold computed as a rational function of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Oscillatory composite modulation factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulator with logarithmic and oscillatory components",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal computed by applying adaptive transformation, threshold, and modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as the sum of beta and gamma multiplied by f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept)": {
      "description": "Acceptance probability computed via the logistic function applied to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model where a composite signal f(x) is computed from a core sum of 11 trial-specific factors plus a constant offset. The signal is modulated via multiple sinusoidal terms, an adaptive transformation f_adapt that employs a Pad\u00e9 approximant for nonnegative inputs and a hinge loss for negative inputs, and a dynamic threshold defined by a rational function. An extra oscillatory modulation and a final exponent modulator refine the transformation before scaling by learnable parameters beta and gamma. The latent utility is then passed through a logistic function to yield the predicted acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Trial-specific factor i (for i=1,...,11) computed from experimental data features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to the sum of F_i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of F_i plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Modified core sum with sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Signal computed as a_mod modulated by multiple trigonometric factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter controlling weight and normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"k1\": {\n      \"description\": \"Fixed constant for quadratic correction in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"k2\": {\n      \"description\": \"Fixed constant for rational adjustment in f_adapt\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"Delta_s\": {\n      \"description\": \"Fixed threshold constant used in hinge-loss for negative z\",\n      \"range\": {\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"constant\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a rational function of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Oscillatory composite modulation factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator with logarithmic and oscillatory components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal computed by applying adaptive transformation, threshold, and modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of beta and gamma multiplied by f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model where a composite signal f(x) is computed from a core sum of 11 trial-specific factors plus a constant offset. The signal is modulated via multiple sinusoidal terms, an adaptive transformation f_adapt that employs a Pad\u00e9 approximant for nonnegative inputs and a hinge loss for negative inputs, and a dynamic threshold defined by a rational function. An extra oscillatory modulation and a final exponent modulator refine the transformation before scaling by learnable parameters beta and gamma. The latent utility is then passed through a logistic function to yield the predicted acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model where a composite signal f(x) is computed from a core sum of 11 trial-specific factors plus a constant offset. The signal is modulated via multiple sinusoidal terms, an adaptive transformation f_adapt that employs a Pad\u00e9 approximant for nonnegative inputs and a hinge loss for negative inputs, and a dynamic threshold defined by a rational function. An extra oscillatory modulation and a final exponent modulator refine the transformation before scaling by learnable parameters beta and gamma. The latent utility is then passed through a logistic function to yield the predicted acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values from trial data.  Handle missing F_i.\n        F_values = []\n        for i in range(1, 12):\n            key = f'F_{i}'\n            F_values.append(trial.get(key, 0))  # Use 0 if F_i is missing\n\n        delta = trial.get('delta', 0)  # handle missing delta\n\n        # Calculate a\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = z + 0.1 * z**2 + math.log(1 + z) + 0.1 * z / (1 + z)\n        else:\n            f_adapt_z = - max(0, -z - 0.05)**2\n\n        # Calculate T\n        T = (a + 1) / (a + 1.5)\n\n        # Calculate extra\n        extra = 1 + 0.005 * math.cos(0.9 * a) + 0.002 * math.sin(2 * a)\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.001 * math.sin(a) + 0.0005 * math.cos(2 * a))\n\n        # Calculate f(x)\n        if z >= 0:\n            sign_z = 1\n        else:\n            sign_z = -1\n\n        f_x = sign_z * (f_adapt_z * T * extra)**Exponent\n\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P(accept)\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:  # Handle overflow (very large U)\n            p_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5732600732600732,
  "fitting_results": [
    {
      "phi": 0.84908190889002,
      "beta": -10.0,
      "gamma": 0.07833889230550062,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.421424373345275,
      "beta": -10.0,
      "gamma": 8.537077857846652,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.025207065870417,
      "beta": -2.078274579613539,
      "gamma": 6.312846381230408,
      "success": true,
      "log_likelihood": -24.89771432410466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6400566132878737,
      "beta": -10.0,
      "gamma": 1.3187171654372332,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0037600705586973,
      "beta": -10.0,
      "gamma": 0.03678873598992993,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2277853900756823,
      "beta": 0.284069338001876,
      "gamma": 3.9104491218415838,
      "success": true,
      "log_likelihood": -23.545973163856203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6225680836864851,
      "beta": 9.999999999999998,
      "gamma": 2.8249559070209784,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7010448179384585,
      "beta": 8.60645621248631,
      "gamma": 8.26054800150333,
      "success": true,
      "log_likelihood": -23.276996908060465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8961106786508833,
      "beta": 10.0,
      "gamma": 0.022110996347923795,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5281463224945118,
      "beta": -10.0,
      "gamma": 9.784597552236571,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.32626873807606,
      "beta": -10.0,
      "gamma": 9.388944147100247,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4689498650668082,
      "beta": -10.0,
      "gamma": 3.0737891993362054,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.773857800423497,
      "beta": -10.0,
      "gamma": 2.100955674572421,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7803570757109929,
      "beta": 10.0,
      "gamma": 9.781281362740634,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4821617150222877,
      "beta": 10.0,
      "gamma": 8.007801906139454,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9304994386950364,
      "beta": 10.0,
      "gamma": 9.180845598427409,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2005142133487658,
      "beta": 10.0,
      "gamma": 2.5181619161156323,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9517026181151607,
      "beta": 10.0,
      "gamma": 1.3164370427213967,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2828678707272658,
      "beta": 10.0,
      "gamma": 1.7378066855558971,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0818844495121271,
      "beta": 9.999999999999998,
      "gamma": 7.125633930599396,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0253637432283975,
      "beta": -1.247570668286834,
      "gamma": 8.776377688183288,
      "success": true,
      "log_likelihood": -24.730616752573745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.472246338350468,
      "beta": 10.0,
      "gamma": 2.8540988537652345,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4617784346083464,
      "beta": -10.0,
      "gamma": 9.446630454893834,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.747328508665942,
      "beta": -2.0781758872564304,
      "gamma": 9.862639548230236,
      "success": true,
      "log_likelihood": -24.897714324600326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6510553630550547,
      "beta": -8.371576652361032,
      "gamma": 1.6509848833974738,
      "success": true,
      "log_likelihood": -24.953298733700397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.214890470702151,
      "beta": -0.6790752230870983,
      "gamma": 4.099021662366431,
      "success": true,
      "log_likelihood": -24.450957568583615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7514551171441987,
      "beta": -1.2475389871344342,
      "gamma": 0.5796761272659201,
      "success": true,
      "log_likelihood": -24.730616751604558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3459698192272342,
      "beta": -10.0,
      "gamma": 0.7582564011603221,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6861603922054086,
      "beta": 10.0,
      "gamma": 8.366754091365467,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1567098400514026,
      "beta": 10.0,
      "gamma": 3.390180500881088,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6126928652951298,
      "beta": 10.0,
      "gamma": 2.81421735121012,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8283040778260855,
      "beta": -10.0,
      "gamma": 9.981809955385799,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8853744362914794,
      "beta": -9.999999999999998,
      "gamma": 6.949719182852004,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2957792567791864,
      "beta": -10.0,
      "gamma": 8.778105529250533,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1670934799229982,
      "beta": 10.0,
      "gamma": 4.328059942027779,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1125383462157958,
      "beta": 0.28410725802834946,
      "gamma": 5.496028060734282,
      "success": true,
      "log_likelihood": -23.545973164116997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6879371433603847,
      "beta": 1.5229545794620432,
      "gamma": 8.544589719373494,
      "success": true,
      "log_likelihood": -22.157938154942382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9130525606276945,
      "beta": -10.0,
      "gamma": 8.449188806188738,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.350097834563272,
      "beta": 0.8148706180755207,
      "gamma": 2.842189102509135,
      "success": true,
      "log_likelihood": -22.914510051415494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3884085946457096,
      "beta": 10.0,
      "gamma": 0.6468343194903581,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3548265956039327,
      "beta": -0.1926368562098771,
      "gamma": 7.332915884250881,
      "success": true,
      "log_likelihood": -24.056945188793197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3616089579779613,
      "beta": -10.0,
      "gamma": 5.168766723831086,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2918956059513456,
      "beta": 10.0,
      "gamma": 0.12037365631360819,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7077586059891701,
      "beta": -1.2474360519488088,
      "gamma": 1.9050751535088628,
      "success": true,
      "log_likelihood": -24.73061675030604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3295572530120112,
      "beta": -0.19265094928389406,
      "gamma": 0.025017320951552513,
      "success": true,
      "log_likelihood": -24.05694518872468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.626005312148562,
      "beta": 3.0643574558546978,
      "gamma": 0.5046272078296032,
      "success": true,
      "log_likelihood": -21.270320904912026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.498863639889168,
      "beta": -2.0783383886817903,
      "gamma": 8.787601309944861,
      "success": true,
      "log_likelihood": -24.89771432423881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8262502569979353,
      "beta": -10.0,
      "gamma": 1.9960828368508832,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0092247244728314,
      "beta": -10.0,
      "gamma": 8.051598227068823,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.690173394265836,
      "beta": -2.0798621951613896,
      "gamma": 4.198770467057059,
      "success": true,
      "log_likelihood": -24.897714433364783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1482795197812972,
      "beta": 1.523161533965195,
      "gamma": 4.6539722129437235,
      "success": true,
      "log_likelihood": -22.15793815675487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2982863331666232,
      "beta": -10.0,
      "gamma": 3.7401436591260504,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6837054266459801,
      "beta": -2.0772433628021103,
      "gamma": 2.9916484803500243,
      "success": true,
      "log_likelihood": -24.897714371478713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1683649892668886,
      "beta": -0.6790374032812962,
      "gamma": 7.117184243949113,
      "success": true,
      "log_likelihood": -24.450957568562885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2152225349806574,
      "beta": -9.999999999999998,
      "gamma": 8.14910234827557,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6503790331541153,
      "beta": -10.0,
      "gamma": 1.9240778768042888,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2403842265220302,
      "beta": -10.0,
      "gamma": 0.6616674408441858,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.335150655106717,
      "beta": 10.0,
      "gamma": 4.26628111781029,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3777164936839008,
      "beta": -10.0,
      "gamma": 7.0148918597925825,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7891987965413108,
      "beta": 9.065533760694315,
      "gamma": 4.672636089316154,
      "success": true,
      "log_likelihood": -18.277730732810507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0943781571081317,
      "beta": -0.1926491543878445,
      "gamma": 0.5041487172576786,
      "success": true,
      "log_likelihood": -24.0569451887276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4403735418243526,
      "beta": -10.0,
      "gamma": 0.13794585003676918,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8107456196569605,
      "beta": -10.0,
      "gamma": 0.7933274409661173,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.222780497752722,
      "beta": -10.0,
      "gamma": 8.51732704715422,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4858141435089118,
      "beta": -10.0,
      "gamma": 4.435586193702599,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6880173274303317,
      "beta": -1.247404091380789,
      "gamma": 4.390080607286499,
      "success": true,
      "log_likelihood": -24.730616750478653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2487570182855592,
      "beta": 10.0,
      "gamma": 0.09541405988268692,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5045807025746527,
      "beta": 10.0,
      "gamma": 2.403413201313259,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7818331148290867,
      "beta": -1.2477117929726431,
      "gamma": 9.362569720171404,
      "success": true,
      "log_likelihood": -24.730616760147193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3934279178896412,
      "beta": 10.0,
      "gamma": 7.5623342895530445,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7638087671849336,
      "beta": -10.0,
      "gamma": 1.0770992964008042,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.231052918038967,
      "beta": -10.0,
      "gamma": 0.057923182097101567,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7392859084566027,
      "beta": -2.078413525529209,
      "gamma": 6.5291469831608975,
      "success": true,
      "log_likelihood": -24.897714324854373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1342595234530797,
      "beta": 10.0,
      "gamma": 4.447193544134342,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8823064739023455,
      "beta": -4.347821639837887,
      "gamma": 3.3378619350610936,
      "success": true,
      "log_likelihood": -24.954032291002253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.407301272642131,
      "beta": 1.5229954799589538,
      "gamma": 2.0648193731281106,
      "success": true,
      "log_likelihood": -22.157938154740304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1058465067266365,
      "beta": 10.0,
      "gamma": 0.2781163369675399,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6137323116084963,
      "beta": -10.0,
      "gamma": 1.5240143642248727,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2199830459808862,
      "beta": -0.1925818229325843,
      "gamma": 2.680446890840077,
      "success": true,
      "log_likelihood": -24.05694519005922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2636923099314394,
      "beta": -10.0,
      "gamma": 5.325764605353534,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7803579716391494,
      "beta": -2.0783168121079894,
      "gamma": 6.343734847227111,
      "success": true,
      "log_likelihood": -24.8977143241535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1282554529318904,
      "beta": 10.0,
      "gamma": 3.792521514745566,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.813658688956586,
      "beta": -9.999999999999998,
      "gamma": 9.117019420475167,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8030982275405032,
      "beta": -3.903870980999352,
      "gamma": 3.4286018030833176,
      "success": true,
      "log_likelihood": -24.955056442704816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8940519134980082,
      "beta": -0.19264397288622898,
      "gamma": 3.0587469369314113,
      "success": true,
      "log_likelihood": -24.05694518874556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5884252444587421,
      "beta": -10.0,
      "gamma": 7.985828166506454,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4580299867526842,
      "beta": 1.5231394401892906,
      "gamma": 3.101713004388503,
      "success": true,
      "log_likelihood": -22.157938156224446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2271382606741974,
      "beta": -10.0,
      "gamma": 8.281239632747642,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8795065818710277,
      "beta": 10.0,
      "gamma": 7.406979669577129,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9683158328095632,
      "beta": -10.0,
      "gamma": 2.2226710039769038,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5543938815791281,
      "beta": 1.5231524098434015,
      "gamma": 7.660482309962041,
      "success": true,
      "log_likelihood": -22.15793815652604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.015367841289992829,
        "p": 0.8793799864065508
      },
      "beta": {
        "r": 0.7258838001198505,
        "p": 1.2968841687712391e-17
      },
      "gamma": {
        "r": 0.00792719055366114,
        "p": 0.9376081260067255
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.93071869754131,
  "bic_results": {
    "average_bic": 53.93071869754131,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598546357765,
      60.65742620704526,
      60.65733541130788,
      57.842503143080734,
      33.3062773958674,
      57.30455063148926,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179032051582,
      43.305823414830115,
      60.65760779852003,
      60.545985464568986,
      60.65715428276913,
      59.652471952535564,
      60.21179031857744,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314360233,
      55.0664331252531,
      60.6571538198331,
      56.57957691819932,
      39.30600500724502,
      58.86444719295473,
      60.65806177720697,
      35.30618659965994,
      60.21179031598041,
      58.86444719281769,
      53.29119862519238,
      60.54598546384595,
      60.657517002782654,
      60.65742620704526,
      60.54598568209789,
      55.066433128878074,
      60.65833416441913,
      60.545985558325754,
      59.652471952494096,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.30601828098935,
      58.86444719282353,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031632563,
      39.30600500724503,
      43.3058234148301,
      60.21179033566271,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546507708,
      49.30555102620774,
      60.65862139737284,
      55.06643312484894,
      37.306095803452486,
      60.658606551631294,
      58.864447195486775,
      60.6585157558939,
      60.545985463675336,
      39.30600500724503,
      60.65842496015652,
      60.66066970077796,
      58.864447192859444,
      60.65842496015651,
      55.06643312781722,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.066433128420414
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.015\n- beta: r = 0.726\n- gamma: r = 0.008",
  "previous_models": [
    "Specification: a = (\u03a3[i=1 to 11] F_i) + \u03b4\na_mod = 1.08 * a * (1 + 0.012*sin(a + 0.045))\nz = a_mod * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + 0.1*z^2 + ln(1+z) + 0.1*z/(1+z)\u2003if\u2003z \u2265 0.0001;\u2003- max(0, -z - 0.05)^2\u2003if\u2003z < 0.0001 }\nT = (a + 1) / (a + 1.5)\nextra = 1 + 0.005*cos(0.9*a) + 0.002*sin(2*a)\nExponent = (0.9478 + 0.00018*ln(1+a)) * (1 + 0.001*sin(a) + 0.0005*cos(2*a))\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(Exponent)\nU = beta + gamma * f(x)\nP(accept) = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model where a composite signal f(x) is computed from a core sum of 11 trial-specific factors plus a constant offset. The signal is modulated via multiple sinusoidal terms, an adaptive transformation f_adapt that employs a Pad\u00e9 approximant for nonnegative inputs and a hinge loss for negative inputs, and a dynamic threshold defined by a rational function. An extra oscillatory modulation and a final exponent modulator refine the transformation before scaling by learnable parameters beta and gamma. The latent utility is then passed through a logistic function to yield the predicted acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.93071869754131\nOverall Accuracy: 0.5733\n\nParameter Recovery:\n- phi: r = 0.015\n- beta: r = 0.726\n- gamma: r = 0.008"
  ]
}