{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor the new run, I'd like to encourage the model designer to introduce more flexible, nested nonlinear corrections. In particular, enhance the adaptive transformation for small and negative values by including a local quadratic (or even higher\u2010order) correction for z near 0. Also, experiment with adding additional nested softplus or softsign chains in the extra modulation term to \u201csmooth\u201d extreme values and reduce variability. The dynamic threshold T can be made somewhat more expressive (for example, using a Pad\u00e9 approximant of a higher order) to better capture the scale of a. Finally, adapt the exponent modulator by including additional oscillatory terms (e.g., sine/cosine functions in a) to refine the curvature and thereby improve accuracy, lower BIC, and enhance parameter recovery. Use exactly the same strict bounds on learnable parameters (beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]). Encourage out\u2010of\u2010the\u2011box ideas, such as exploring alternative penalty functions for the negative branch, and adding mild additive corrections when |z| is very small.\n</think>\n<new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Transform the core sum with a sinusoidal modulation:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute the composite signal z as the product:\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function:\n\u2003\u2022 For z \u2265 \u03f5 (e.g. 0.0001): use a Pad\u00e9\u2010like blend augmented with a local quadratic correction (e.g. add k\u2081\u22c5z\u00b2) so that f_adapt(z) = z + k\u2081\u22c5z\u00b2 + ln(1+z) + k\u2082\u22c5[z/(1+z)].\n\u2003\u2022 For z below \u03f5, use a steep saturation function such as f_adapt(z) = \u2013 max(0, \u2013z \u2013 \u0394\u209b)^p.\nFeel free to tune the constants k\u2081, k\u2082, \u0394\u209b, and p.\n6. Define a dynamic threshold T using a higher\u2010order Pad\u00e9 approximation, for example T = \u03a3[k=0 to K] (a^k \u00d7 (1/2)^k) with K large (suggest K between 30 and 150) to capture the scale of a.\n7. Define an extra modulation term extra that adds gentle oscillatory corrections. Consider incorporating nested softplus chains (e.g. softplus(softplus(...))) and/or additional sine/cosine terms to improve smoothing.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u2026], where you may add extra oscillatory terms to capture curvature.\n9. Compute the overall transformed signal:\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w ]^(Exponent) }.\n10. Set the latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as:\u2003P(accept) = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict bounds:  \n\u2003\u2003beta \u2208 [\u201310, 10],\u2003gamma \u2208 [0, 10],\u2003phi \u2208 [0.5, 1.5].\n12. Consider experimenting with additional local corrections for small |z| (e.g. adding a term proportional to z\u00b2 when |z| is below a small threshold) and incorporating extra nested nonlinearities (such as an extra softplus chain) in the extra modulation term.\n</new_instructions>\n<SUMMARY>\nThis model computes a core sum from fixed features, then applies sequential sinusoidal and cosine modulations. It uses an adaptive transformation\u2014blending a Pad\u00e9\u2010like function with a local quadratic correction for small values and a steep penalty for negative values\u2014followed by a dynamic threshold and an extra modulation term enriched with nested nonlinearities. The transformed signal is raised to a modulated exponent and linearly combined with learnable parameters beta and gamma to yield latent utility, which is then mapped by a logistic function to predict acceptance.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor the new run, I'd like to encourage the model designer to introduce more flexible, nested nonlinear corrections. In particular, enhance the adaptive transformation for small and negative values by including a local quadratic (or even higher\u2010order) correction for z near 0. Also, experiment with adding additional nested softplus or softsign chains in the extra modulation term to \u201csmooth\u201d extreme values and reduce variability. The dynamic threshold T can be made somewhat more expressive (for example, using a Pad\u00e9 approximant of a higher order) to better capture the scale of a. Finally, adapt the exponent modulator by including additional oscillatory terms (e.g., sine/cosine functions in a) to refine the curvature and thereby improve accuracy, lower BIC, and enhance parameter recovery. Use exactly the same strict bounds on learnable parameters (beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]). Encourage out\u2010of\u2010the\u2011box ideas, such as exploring alternative penalty functions for the negative branch, and adding mild additive corrections when |z| is very small.\n</think>\n<new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Transform the core sum with a sinusoidal modulation:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute the composite signal z as the product:\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function:\n\u2003\u2022 For z \u2265 \u03f5 (e.g. 0.0001): use a Pad\u00e9\u2010like blend augmented with a local quadratic correction (e.g. add k\u2081\u22c5z\u00b2) so that f_adapt(z) = z + k\u2081\u22c5z\u00b2 + ln(1+z) + k\u2082\u22c5[z/(1+z)].\n\u2003\u2022 For z below \u03f5, use a steep saturation function such as f_adapt(z) = \u2013 max(0, \u2013z \u2013 \u0394\u209b)^p.\nFeel free to tune the constants k\u2081, k\u2082, \u0394\u209b, and p.\n6. Define a dynamic threshold T using a higher\u2010order Pad\u00e9 approximation, for example T = \u03a3[k=0 to K] (a^k \u00d7 (1/2)^k) with K large (suggest K between 30 and 150) to capture the scale of a.\n7. Define an extra modulation term extra that adds gentle oscillatory corrections. Consider incorporating nested softplus chains (e.g. softplus(softplus(...))) and/or additional sine/cosine terms to improve smoothing.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1+a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u2026], where you may add extra oscillatory terms to capture curvature.\n9. Compute the overall transformed signal:\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w ]^(Exponent) }.\n10. Set the latent utility U = beta + gamma \u00d7 f(x) and compute the acceptance probability as:\u2003P(accept) = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict bounds:  \n\u2003\u2003beta \u2208 [\u201310, 10],\u2003gamma \u2208 [0, 10],\u2003phi \u2208 [0.5, 1.5].\n12. Consider experimenting with additional local corrections for small |z| (e.g. adding a term proportional to z\u00b2 when |z| is below a small threshold) and incorporating extra nested nonlinearities (such as an extra softplus chain) in the extra modulation term.\n</new_instructions>\n<SUMMARY>\nThis model computes a core sum from fixed features, then applies sequential sinusoidal and cosine modulations. It uses an adaptive transformation\u2014blending a Pad\u00e9\u2010like function with a local quadratic correction for small values and a steep penalty for negative values\u2014followed by a dynamic threshold and an extra modulation term enriched with nested nonlinearities. The transformed signal is raised to a modulated exponent and linearly combined with learnable parameters beta and gamma to yield latent utility, which is then mapped by a logistic function to predict acceptance.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Data-derived feature 1; component of the core sum extracted from the task-relevant variables\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Data-derived feature 2; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Data-derived feature 3; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Data-derived feature 4; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Data-derived feature 5; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Data-derived feature 6; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Data-derived feature 7; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Data-derived feature 8; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Data-derived feature 9; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Data-derived feature 10; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Data-derived feature 11; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of features and constant offset, a = \u03a3[i=1,11] F_i + \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after nested sinusoidal and cosinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable modulation parameter influencing weight; determines degree of soft normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as w = (phi - 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k1\": {\n      \"description\": \"Constant local quadratic coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k2\": {\n      \"description\": \"Constant blend coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for switching adaptive transformation regimes; \u03b5 = 0.0001\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394s\": {\n      \"description\": \"Steepness adjustment constant for negative z in adaptive transformation; set to 0.001\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the negative branch of the adaptive transformation; set to 2\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a Pad\u00e9\u2010like approximation: T = \u03a3[k=0,30] a^k * (1/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K\": {\n      \"description\": \"Upper bound in the Pad\u00e9\u2010like summation for T; set to 30\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus chains and an oscillatory correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b11\": {\n      \"description\": \"Constant oscillatory coefficient for sine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b12\": {\n      \"description\": \"Constant oscillatory coefficient for cosine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator computed as (0.9478 + 0.00018 * ln(1+a)) * (1 + \u03b11*sin(a) + \u03b12*cos(2a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Overall transformed signal computed as f = sign(z)*[ f_adapt(z) * T * extra * w ]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter representing base tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma * f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via logistic function, P(accept) = 1/(1+exp(-U))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Data-derived feature 1; component of the core sum extracted from the task-relevant variables\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Data-derived feature 2; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Data-derived feature 3; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Data-derived feature 4; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Data-derived feature 5; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Data-derived feature 6; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Data-derived feature 7; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Data-derived feature 8; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Data-derived feature 9; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Data-derived feature 10; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Data-derived feature 11; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Constant offset added to the sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of features and constant offset, a = \\u03a3[i=1,11] F_i + \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after nested sinusoidal and cosinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable modulation parameter influencing weight; determines degree of soft normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as w = (phi - 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k1\": {\n      \"description\": \"Constant local quadratic coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k2\": {\n      \"description\": \"Constant blend coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b5\": {\n      \"description\": \"Threshold for switching adaptive transformation regimes; \\u03b5 = 0.0001\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u0394s\": {\n      \"description\": \"Steepness adjustment constant for negative z in adaptive transformation; set to 0.001\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the negative branch of the adaptive transformation; set to 2\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a Pad\\u00e9\\u2010like approximation: T = \\u03a3[k=0,30] a^k * (1/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K\": {\n      \"description\": \"Upper bound in the Pad\\u00e9\\u2010like summation for T; set to 30\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus chains and an oscillatory correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b11\": {\n      \"description\": \"Constant oscillatory coefficient for sine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b12\": {\n      \"description\": \"Constant oscillatory coefficient for cosine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator computed as (0.9478 + 0.00018 * ln(1+a)) * (1 + \\u03b11*sin(a) + \\u03b12*cos(2a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Overall transformed signal computed as f = sign(z)*[ f_adapt(z) * T * extra * w ]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter representing base tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma * f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via logistic function, P(accept) = 1/(1+exp(-U))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    k1 = 0.1\n    k2 = 0.1\n    epsilon = 0.0001\n    delta_s = 0.001\n    p = 2\n    K = 30\n    alpha1 = 0.01\n    alpha2 = 0.01\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0  # Assuming delta is zero if not provided\n\n        # a = \u03a3[i=1,11] F_i + \u03b4\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n\n        # a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # f_adapt(z)\n        if z >= epsilon:\n            f_adapt_z = z + k1 * z**2 + math.log(1 + z) + k2 * (z / (1 + z))\n        else:\n            f_adapt_z = - max(0, -z - delta_s)**p\n\n        # T = \u03a3[k=0,30] a^k * (1/2)^k\n        T = sum(a**k * (1/2)**k for k in range(K + 1))\n\n        # softplus(u)=ln(1+exp(u))\n        softplus = lambda u: math.log(1 + math.exp(u))\n\n        # extra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)\n        extra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * math.sin(a + 0.04)\n\n        # Exponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + alpha1 * math.sin(a) + alpha2 * math.cos(2 * a))\n\n        # f = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\n        f = (1 if z >= 0 else -1) * ( f_adapt_z * T * extra * w )**Exponent\n\n        # U = beta + gamma * f\n        U = beta + gamma * f\n\n        # P_accept = 1 / (1 + exp(-U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 30, \"token_self\": 70, \"combined_earning\": 100, \"split_opp\": 0.3, \"split_self\": 0.7, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 30.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 30.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 51, \"token_self\": 49, \"combined_earning\": 100, \"split_opp\": 0.51, \"split_self\": 0.49, \"splitperc_opp\": 51, \"splitperc_self\": 49, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 51.0, \"proposed_amount\": 51.0, \"F1\": 2, \"F2\": 2, \"F3\": 2, \"F4\": 2, \"F5\": 2, \"F6\": 2, \"F7\": 2, \"F8\": 2, \"F9\": 2, \"F10\": 2, \"F11\": 2}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743550951.537722
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable modulation parameter influencing weight; determines degree of soft normalization",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable intercept parameter representing base tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter on the transformed signal f",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Data-derived feature 1; component of the core sum extracted from the task-relevant variables",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Data-derived feature 2; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Data-derived feature 3; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Data-derived feature 4; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Data-derived feature 5; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Data-derived feature 6; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Data-derived feature 7; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Data-derived feature 8; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Data-derived feature 9; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Data-derived feature 10; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Data-derived feature 11; component of the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Constant offset added to the sum of features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum of features and constant offset, a = \u03a3[i=1,11] F_i + \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally modulated core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal after nested sinusoidal and cosinusoidal modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable modulation parameter influencing weight; determines degree of soft normalization",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Weight computed from phi as w = (phi - 0.5)/phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "k1": {
      "description": "Constant local quadratic coefficient in adaptive transformation; set to 0.1",
      "range": {
        "min": 0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "k2": {
      "description": "Constant blend coefficient in adaptive transformation; set to 0.1",
      "range": {
        "min": 0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b5": {
      "description": "Threshold for switching adaptive transformation regimes; \u03b5 = 0.0001",
      "range": {
        "min": 0.0001,
        "max": 0.0001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u0394s": {
      "description": "Steepness adjustment constant for negative z in adaptive transformation; set to 0.001",
      "range": {
        "min": 0.001,
        "max": 0.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p": {
      "description": "Exponent for the negative branch of the adaptive transformation; set to 2",
      "range": {
        "min": 2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a Pad\u00e9\u2010like approximation: T = \u03a3[k=0,30] a^k * (1/2)^k",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "K": {
      "description": "Upper bound in the Pad\u00e9\u2010like summation for T; set to 30",
      "range": {
        "min": 30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra modulation term incorporating nested softplus chains and an oscillatory correction",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b11": {
      "description": "Constant oscillatory coefficient for sine term in Exponent; set to 0.01",
      "range": {
        "min": 0.01,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b12": {
      "description": "Constant oscillatory coefficient for cosine term in Exponent; set to 0.01",
      "range": {
        "min": 0.01,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Exponent": {
      "description": "Final exponent modulator computed as (0.9478 + 0.00018 * ln(1+a)) * (1 + \u03b11*sin(a) + \u03b12*cos(2a))",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Overall transformed signal computed as f = sign(z)*[ f_adapt(z) * T * extra * w ]^(Exponent)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable intercept parameter representing base tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter on the transformed signal f",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as U = beta + gamma * f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Acceptance probability computed via logistic function, P(accept) = 1/(1+exp(-U))",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Data-derived feature 1; component of the core sum extracted from the task-relevant variables\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Data-derived feature 2; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Data-derived feature 3; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Data-derived feature 4; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Data-derived feature 5; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Data-derived feature 6; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Data-derived feature 7; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Data-derived feature 8; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Data-derived feature 9; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Data-derived feature 10; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Data-derived feature 11; component of the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum of features and constant offset, a = \u03a3[i=1,11] F_i + \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after nested sinusoidal and cosinusoidal modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable modulation parameter influencing weight; determines degree of soft normalization\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as w = (phi - 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k1\": {\n      \"description\": \"Constant local quadratic coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k2\": {\n      \"description\": \"Constant blend coefficient in adaptive transformation; set to 0.1\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b5\": {\n      \"description\": \"Threshold for switching adaptive transformation regimes; \u03b5 = 0.0001\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u0394s\": {\n      \"description\": \"Steepness adjustment constant for negative z in adaptive transformation; set to 0.001\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 0.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\": {\n      \"description\": \"Exponent for the negative branch of the adaptive transformation; set to 2\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a Pad\u00e9\u2010like approximation: T = \u03a3[k=0,30] a^k * (1/2)^k\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"K\": {\n      \"description\": \"Upper bound in the Pad\u00e9\u2010like summation for T; set to 30\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus chains and an oscillatory correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b11\": {\n      \"description\": \"Constant oscillatory coefficient for sine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b12\": {\n      \"description\": \"Constant oscillatory coefficient for cosine term in Exponent; set to 0.01\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator computed as (0.9478 + 0.00018 * ln(1+a)) * (1 + \u03b11*sin(a) + \u03b12*cos(2a))\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Overall transformed signal computed as f = sign(z)*[ f_adapt(z) * T * extra * w ]^(Exponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter representing base tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter on the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as U = beta + gamma * f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via logistic function, P(accept) = 1/(1+exp(-U))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    k1 = 0.1\n    k2 = 0.1\n    epsilon = 0.0001\n    delta_s = 0.001\n    p = 2\n    K = 30\n    alpha1 = 0.01\n    alpha2 = 0.01\n\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0  # Assuming delta is zero if not provided\n\n        # a = \u03a3[i=1,11] F_i + \u03b4\n        a = F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11 + delta\n\n        # a_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # z = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # w = (phi - 0.5) / phi\n        w = (phi - 0.5) / phi\n\n        # f_adapt(z)\n        if z >= epsilon:\n            f_adapt_z = z + k1 * z**2 + math.log(1 + z) + k2 * (z / (1 + z))\n        else:\n            f_adapt_z = - max(0, -z - delta_s)**p\n\n        # T = \u03a3[k=0,30] a^k * (1/2)^k\n        T = sum(a**k * (1/2)**k for k in range(K + 1))\n\n        # softplus(u)=ln(1+exp(u))\n        softplus = lambda u: math.log(1 + math.exp(u))\n\n        # extra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)\n        extra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * math.sin(a + 0.04)\n\n        # Exponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + alpha1 * math.sin(a) + alpha2 * math.cos(2 * a))\n\n        # f = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\n        f = (1 if z >= 0 else -1) * ( f_adapt_z * T * extra * w )**Exponent\n\n        # U = beta + gamma * f\n        U = beta + gamma * f\n\n        # P_accept = 1 / (1 + exp(-U))\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.57997557997558,
  "fitting_results": [
    {
      "phi": 0.6858968071565608,
      "beta": -10.0,
      "gamma": 7.407182746831711,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.32027782789427,
      "beta": -6.619584087388657,
      "gamma": 5.318050433003425,
      "success": true,
      "log_likelihood": -24.953306479465187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.506322930374763,
      "beta": -2.0793375197742914,
      "gamma": 3.5793566664447707,
      "success": true,
      "log_likelihood": -24.89771437285719,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8189208572506794,
      "beta": -10.0,
      "gamma": 8.348277768932743,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6893454036966188,
      "beta": -10.0,
      "gamma": 4.32724013689071,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2668557613231157,
      "beta": 0.2840581415581892,
      "gamma": 6.869652769810315,
      "success": true,
      "log_likelihood": -23.545973163916276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.275908319917379,
      "beta": 10.0,
      "gamma": 6.769729658350966,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4643546195011783,
      "beta": 0.8150440493479734,
      "gamma": 4.2994652259657515,
      "success": true,
      "log_likelihood": -22.914510056636797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1022928410242434,
      "beta": 9.999999999999998,
      "gamma": 0.6391351704964643,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.724196392465365,
      "beta": -10.0,
      "gamma": 9.36788226573764,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8542849699273136,
      "beta": -10.0,
      "gamma": 1.2244986774083888,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5743072615484415,
      "beta": -10.0,
      "gamma": 3.761219339787404,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3430184376493126,
      "beta": -10.0,
      "gamma": 6.776924076678897,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4418961377324075,
      "beta": 10.0,
      "gamma": 3.9937079147934593,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9771303537594328,
      "beta": 10.0,
      "gamma": 1.3930697267616898,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0720649188345657,
      "beta": 10.0,
      "gamma": 0.585931462413809,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9146053072798866,
      "beta": 10.0,
      "gamma": 7.139212468395976,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3951733134187565,
      "beta": 10.0,
      "gamma": 0.2055471621314442,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.119141712842099,
      "beta": 10.0,
      "gamma": 1.6710075199754504,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.535748522096177,
      "beta": 10.0,
      "gamma": 8.875979985439702,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9089524705534465,
      "beta": -1.2474384228450939,
      "gamma": 7.270945472104318,
      "success": true,
      "log_likelihood": -24.730616750304105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.986815976499202,
      "beta": 10.0,
      "gamma": 5.727985258703006,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3738730439419096,
      "beta": -10.0,
      "gamma": 3.574365298899415,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0871362049850537,
      "beta": -2.0778182890991337,
      "gamma": 5.4790634136896355,
      "success": true,
      "log_likelihood": -24.897714333552656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9752010326312124,
      "beta": -10.0,
      "gamma": 2.180394196532114,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4030993359362807,
      "beta": -9.449408282408218,
      "gamma": 9.512235537005736,
      "success": true,
      "log_likelihood": -24.953062331024423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0603884675638113,
      "beta": -1.2474016580741158,
      "gamma": 0.8727622138636082,
      "success": true,
      "log_likelihood": -24.73061675050297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8602324176827496,
      "beta": -10.0,
      "gamma": 0.03644539054277085,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1878394255610862,
      "beta": 10.0,
      "gamma": 7.564923424282725,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3206253936756154,
      "beta": 10.0,
      "gamma": 1.5389096834086669,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2373136938415876,
      "beta": 10.0,
      "gamma": 9.354250920259066,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2493213883521421,
      "beta": -10.0,
      "gamma": 2.5131548542673263,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0204852101844621,
      "beta": -10.0,
      "gamma": 5.258689859737772,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3367083499013686,
      "beta": -10.0,
      "gamma": 8.714983533561325,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7822951759877768,
      "beta": 10.0,
      "gamma": 4.608262885144452,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5324700906312894,
      "beta": 0.28407910127209557,
      "gamma": 4.811634121823677,
      "success": true,
      "log_likelihood": -23.545973163854825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6052540592136617,
      "beta": 1.522742230956909,
      "gamma": 5.633161872405555,
      "success": true,
      "log_likelihood": -22.157938160429353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.510825156433634,
      "beta": -6.264834906442679,
      "gamma": 6.535925984140469,
      "success": true,
      "log_likelihood": -24.953314710890126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3951739666203333,
      "beta": 0.8148687760405932,
      "gamma": 9.717318515629739,
      "success": true,
      "log_likelihood": -22.91451005141847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8322902831193079,
      "beta": 10.0,
      "gamma": 7.191888090652937,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3124780563288538,
      "beta": -0.19265062099729927,
      "gamma": 0.3837486303365423,
      "success": true,
      "log_likelihood": -24.056945188725102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8642017809640605,
      "beta": -10.0,
      "gamma": 7.61931175115002,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4376844261640165,
      "beta": 10.0,
      "gamma": 3.6369645500055725,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3804334735418222,
      "beta": -1.2477537519064095,
      "gamma": 0.1980867383100271,
      "success": true,
      "log_likelihood": -24.730616763424496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.467827396681286,
      "beta": -9.682367512572661,
      "gamma": 2.131896526251007,
      "success": true,
      "log_likelihood": -24.953049031390293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4864460668975936,
      "beta": 3.06711736608526,
      "gamma": 6.640820703317666,
      "success": true,
      "log_likelihood": -21.270320858789624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.085702734169209,
      "beta": -2.078416369212073,
      "gamma": 7.612731795484021,
      "success": true,
      "log_likelihood": -24.89771432488737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.928818533544474,
      "beta": -10.0,
      "gamma": 2.821692820590714,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1860011582102916,
      "beta": -10.0,
      "gamma": 3.460251619451519,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7858915580462826,
      "beta": -2.0785829154154625,
      "gamma": 3.6249060138888813,
      "success": true,
      "log_likelihood": -24.897714328057244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4177495346967297,
      "beta": 1.5235020733343188,
      "gamma": 2.5050624583813317,
      "success": true,
      "log_likelihood": -22.15793817511309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6430293504497904,
      "beta": -10.0,
      "gamma": 6.052124576744285,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7140237383319564,
      "beta": -2.0783862716718318,
      "gamma": 5.805693641931843,
      "success": true,
      "log_likelihood": -24.8977143245739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6450585179205616,
      "beta": -0.6790571989189588,
      "gamma": 2.342588668854604,
      "success": true,
      "log_likelihood": -24.450957568495937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.709412824611213,
      "beta": -8.510903442201109,
      "gamma": 9.170655914424723,
      "success": true,
      "log_likelihood": -24.954103560827278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6724786151333625,
      "beta": -9.999999999999998,
      "gamma": 1.420492892077596,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7129661352002783,
      "beta": -10.0,
      "gamma": 2.129684409817576,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.990032816447758,
      "beta": 10.0,
      "gamma": 1.5253716608909162,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.990560832188742,
      "beta": -10.0,
      "gamma": 1.9964535397653504,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7842330493900094,
      "beta": 10.0,
      "gamma": 8.992977525461086,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0585194444280748,
      "beta": -0.19266212420640014,
      "gamma": 8.269521686086348,
      "success": true,
      "log_likelihood": -24.056945188744436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5462085307577317,
      "beta": -10.0,
      "gamma": 4.183752966599342,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0606836292809798,
      "beta": -10.0,
      "gamma": 2.504980313023646,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7052570420274137,
      "beta": -9.999999999999996,
      "gamma": 7.4334429949185585,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3077967907913437,
      "beta": -10.0,
      "gamma": 6.984247176100416,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3245514437929098,
      "beta": -1.2474869345551074,
      "gamma": 3.4080744243057968,
      "success": true,
      "log_likelihood": -24.730616750594212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1530111493318453,
      "beta": 10.0,
      "gamma": 0.8169009420443951,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0843943996282748,
      "beta": 10.0,
      "gamma": 1.533142735070795,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0711789209570737,
      "beta": -1.247441580578265,
      "gamma": 2.8046306254529876,
      "success": true,
      "log_likelihood": -24.730616750303874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7609610995394055,
      "beta": 10.0,
      "gamma": 1.7093462788145453,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9942281091605064,
      "beta": -10.0,
      "gamma": 3.9738822738833757,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2690806139393258,
      "beta": -10.0,
      "gamma": 9.578311041236422,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8628262120882081,
      "beta": -2.077922614566679,
      "gamma": 1.7437808761004092,
      "success": true,
      "log_likelihood": -24.8977143297817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9801259803318546,
      "beta": 10.0,
      "gamma": 4.573847768009643,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.149502941608403,
      "beta": -9.512750217534949,
      "gamma": 6.373250095187677,
      "success": true,
      "log_likelihood": -24.953298517532172,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3700151591023664,
      "beta": 1.5229165829169058,
      "gamma": 9.785770325891676,
      "success": true,
      "log_likelihood": -22.157938155377483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6693884593386654,
      "beta": 10.0,
      "gamma": 0.6719758054179603,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9060641977823212,
      "beta": -10.0,
      "gamma": 2.1878861146763295,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.474233304696545,
      "beta": -0.19265258120916073,
      "gamma": 9.245978093709855,
      "success": true,
      "log_likelihood": -24.056945188723468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4893965403774865,
      "beta": -9.999999999999998,
      "gamma": 1.0622116981249352,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7497292542298201,
      "beta": -2.0778485740325583,
      "gamma": 5.588294535512205,
      "success": true,
      "log_likelihood": -24.897714332359598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9745377713432057,
      "beta": 10.0,
      "gamma": 0.940126987077522,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.094154477011049,
      "beta": -10.0,
      "gamma": 2.303933163218548,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8539150730632882,
      "beta": -8.367543872606845,
      "gamma": 2.392641741789623,
      "success": true,
      "log_likelihood": -24.95329873564949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6167847167627065,
      "beta": -0.19265533946482805,
      "gamma": 3.2507252727816685,
      "success": true,
      "log_likelihood": -24.056945188724633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6774540343533898,
      "beta": -8.864694414021733,
      "gamma": 2.3274887781245166,
      "success": true,
      "log_likelihood": -24.955276366544513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5560540844816547,
      "beta": 1.5230143304707728,
      "gamma": 0.8965687488395613,
      "success": true,
      "log_likelihood": -22.157938154740073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5798939866514312,
      "beta": -10.0,
      "gamma": 2.2372887013516705,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8896440008914679,
      "beta": 10.0,
      "gamma": 7.191485348014704,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4710994647552087,
      "beta": -10.0,
      "gamma": 0.4213354731296637,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0559862353219849,
      "beta": 7.250639138057739,
      "gamma": 1.536106375538936,
      "success": true,
      "log_likelihood": -22.276487697857718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.06735459033515927,
        "p": 0.5055169073447257
      },
      "beta": {
        "r": 0.5589068236930006,
        "p": 1.509945042803476e-09
      },
      "gamma": {
        "r": 0.04598467906113149,
        "p": 0.649608720157427
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.95607213040704,
  "bic_results": {
    "average_bic": 53.95607213040704,
    "individual_bics": [
      60.6585157558939,
      60.65716977429871,
      60.545985561082716,
      60.65742620704526,
      60.65733541130788,
      57.84250314320089,
      33.3062773958674,
      56.57957692864193,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031597654,
      43.305823414830115,
      60.65760779852003,
      60.54598548247364,
      60.6571538198331,
      60.65668147741718,
      60.21179031637428,
      60.657880185732196,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.84250314307798,
      55.06643313622703,
      60.65718623714858,
      56.57957691820528,
      39.30600500724502,
      58.86444719281853,
      60.65806177720697,
      35.30618659965994,
      60.21179034221733,
      60.65665487814891,
      53.291198532947575,
      60.545985465143076,
      60.657517002782654,
      60.65742620704526,
      60.54598547148282,
      55.06643316559452,
      60.65833416441913,
      60.545985464516136,
      59.6524719523602,
      60.65876393702288,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.8644471928572,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031655676,
      39.30600500724503,
      43.3058234148301,
      60.211790315976074,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.545985474931726,
      49.30555102620774,
      60.65715385043268,
      55.0664331261233,
      37.306095803452486,
      60.658606551631294,
      58.86444719281526,
      60.6585157558939,
      60.54598548008752,
      39.30600500724503,
      60.65842496015652,
      60.65715428666731,
      58.86444719281759,
      60.66110954845736,
      55.06643312484847,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.30353221108376
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.067\n- beta: r = 0.559\n- gamma: r = 0.046",
  "previous_models": [
    "Specification: a = \u03a3[i=1,11] F_i + \u03b4\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z / (1 + z))   if z \u2265 \u03b5  \n             { - max(0, -z - \u0394s)^p                              if z < \u03b5\nT = \u03a3[k=0,30] a^k * (1/2)^k\nextra = softplus( softplus(0.001 * a + 0.002) ) + 0.0005 * sin(a + 0.04)    where softplus(u)=ln(1+exp(u))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + \u03b11 * sin(a) + \u03b12 * cos(2 * a))\nf = sign(z) * ( f_adapt(z) * T * extra * w )^(Exponent)\nU = beta + gamma * f\nP_accept = 1 / (1 + exp(-U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.95607213040704\nOverall Accuracy: 0.5800\n\nParameter Recovery:\n- phi: r = 0.067\n- beta: r = 0.559\n- gamma: r = 0.046"
  ]
}