{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply a sinusoidal modulation:\u2003\u2003\u2003\u2003\u2003\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Form the composite signal:\u2003\u2003\u2003\u2003\u2003\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function:\n\u2003\u2022 For z \u2265 \u03b5 (set \u03b5 = 0.0001): let\n\u2003\u2003f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1 + z) + k\u2082\u00b7[z/(1 + z)]\n\u2003\u2003where k\u2081 and k\u2082 are small constants (e.g. 0.01) to provide a local quadratic soft correction.\n\u2003\u2022 For z < \u03b5: use a steep penalty, for example,\n\u2003\u2003f_adapt(z) = \u2013 max(0, \u2013z \u2013 \u0394\u209b)^p,\n\u2003\u2003where \u0394\u209b is a small shift (e.g. 0.05) and p > 1 (try p = 2 or higher) to ensure saturation.\n6. Define a dynamic threshold T using a high\u2010order Pad\u00e9 approximant:\u2003T = \u03a3[k=0 to K] (a\u1d4f \u00d7 (1/2)\u1d4f), with K chosen between 30 and 100.\n7. Define an extra modulation term \u201cextra\u201d that adds gentle oscillatory corrections and further smooths extreme values. For example, extra = softplus(softplus(0.001\u00d7a + 0.002)) + 0.0005\u00d7sin(a + 0.04), where softplus(u)=ln(1+exp(u)). You are encouraged to stack extra softplus or softsign functions if needed.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1 + a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u03b1\u2083 \u00d7 sin(3a)], where \u03b1\u2081, \u03b1\u2082, and \u03b1\u2083 are small constants (for example, 0.005, 0.001, 0.001).\n9. Compute the overall transformed signal:\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w ]^(Exponent) }.\n10. Compute latent utility:\u2003U = beta + gamma \u00d7 f(x), and then predict acceptance probability as:\u2003P(accept) = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n12. Additionally, consider adding a mild additive correction (e.g. a term proportional to z\u00b2) when |z| is very small to improve local sensitivity.\n13. Experiment with alternative penalty functions for the negative branch (for instance, using a higher-degree power or a nested softsign chain) to improve parameter recovery.\n14. Feel free to incorporate additional nested nonlinearities (e.g., stacking extra softplus functions) in the extra term to smooth extreme values and reduce variability.\n</new_instructions>\n<SUMMARY>\nThis model computes a core sum from 11 fixed features, then applies sequential sinusoidal and cosine modulations followed by a piecewise adaptive transformation that blends a Pad\u00e9\u2010like function with local quadratic corrections for small values and steep penalties for negatives. A dynamic threshold (via a high\u2010order Pad\u00e9 approximant) and an extra modulation term (augmented by nested softplus or softsign chains and additional sine/cosine corrections) further refine the signal. The final transformed value, raised to an adaptive exponent that itself incorporates extra oscillatory terms, is linearly combined with parameters beta and gamma to yield latent utility, which is mapped through a logistic function to predict acceptance.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply a sinusoidal modulation:\u2003\u2003\u2003\u2003\u2003\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Form the composite signal:\u2003\u2003\u2003\u2003\u2003\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function:\n\u2003\u2022 For z \u2265 \u03b5 (set \u03b5 = 0.0001): let\n\u2003\u2003f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1 + z) + k\u2082\u00b7[z/(1 + z)]\n\u2003\u2003where k\u2081 and k\u2082 are small constants (e.g. 0.01) to provide a local quadratic soft correction.\n\u2003\u2022 For z < \u03b5: use a steep penalty, for example,\n\u2003\u2003f_adapt(z) = \u2013 max(0, \u2013z \u2013 \u0394\u209b)^p,\n\u2003\u2003where \u0394\u209b is a small shift (e.g. 0.05) and p > 1 (try p = 2 or higher) to ensure saturation.\n6. Define a dynamic threshold T using a high\u2010order Pad\u00e9 approximant:\u2003T = \u03a3[k=0 to K] (a\u1d4f \u00d7 (1/2)\u1d4f), with K chosen between 30 and 100.\n7. Define an extra modulation term \u201cextra\u201d that adds gentle oscillatory corrections and further smooths extreme values. For example, extra = softplus(softplus(0.001\u00d7a + 0.002)) + 0.0005\u00d7sin(a + 0.04), where softplus(u)=ln(1+exp(u)). You are encouraged to stack extra softplus or softsign functions if needed.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1 + a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u03b1\u2083 \u00d7 sin(3a)], where \u03b1\u2081, \u03b1\u2082, and \u03b1\u2083 are small constants (for example, 0.005, 0.001, 0.001).\n9. Compute the overall transformed signal:\u2003f(x) = sign(z) \u00d7 { [ f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w ]^(Exponent) }.\n10. Compute latent utility:\u2003U = beta + gamma \u00d7 f(x), and then predict acceptance probability as:\u2003P(accept) = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n12. Additionally, consider adding a mild additive correction (e.g. a term proportional to z\u00b2) when |z| is very small to improve local sensitivity.\n13. Experiment with alternative penalty functions for the negative branch (for instance, using a higher-degree power or a nested softsign chain) to improve parameter recovery.\n14. Feel free to incorporate additional nested nonlinearities (e.g., stacking extra softplus functions) in the extra term to smooth extreme values and reduce variability.\n</new_instructions>\n<SUMMARY>\nThis model computes a core sum from 11 fixed features, then applies sequential sinusoidal and cosine modulations followed by a piecewise adaptive transformation that blends a Pad\u00e9\u2010like function with local quadratic corrections for small values and steep penalties for negatives. A dynamic threshold (via a high\u2010order Pad\u00e9 approximant) and an extra modulation term (augmented by nested softplus or softsign chains and additional sine/cosine corrections) further refine the signal. The final transformed value, raised to an adaptive exponent that itself incorporates extra oscillatory terms, is linearly combined with parameters beta and gamma to yield latent utility, which is mapped through a logistic function to predict acceptance.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_vector\": {\n      \"description\": \"Vector of 11 features extracted from the dataset (e.g., trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, splitperc_self, accepted_amount, accepted_perc) used to compute the core sum\",\n      \"range\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the core feature sum (set as 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum over the 11 features plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used to compute the weight; modulates the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \u2013 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with piecewise function; applies a quadratic soft correction for z \u2265 0.0001 and a steep penalty for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a high\u2010order Pad\u00e9 approximant summing k=0 to 30 of a\u1d4f \u00b7 (1/2)\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term adding gentle oscillatory corrections using nested softplus functions and a sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Adaptive exponent modulator incorporating logarithmic scaling and oscillatory sine/cosine corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\u00b2 applied when |z| is very small (i.e., < 0.001)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Overall transformed signal obtained by raising the weighted and corrected adaptive value to the adaptive exponent, preserving the sign of z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter that forms the base of latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the influence of the transformed signal on latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transformation to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_vector\": {\n      \"description\": \"Vector of 11 features extracted from the dataset (e.g., trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, splitperc_self, accepted_amount, accepted_perc) used to compute the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Constant offset added to the core feature sum (set as 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum over the 11 features plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used to compute the weight; modulates the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \\u2013 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with piecewise function; applies a quadratic soft correction for z \\u2265 0.0001 and a steep penalty for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a high\\u2010order Pad\\u00e9 approximant summing k=0 to 30 of a\\u1d4f \\u00b7 (1/2)\\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term adding gentle oscillatory corrections using nested softplus functions and a sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Adaptive exponent modulator incorporating logarithmic scaling and oscillatory sine/cosine corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\\u00b2 applied when |z| is very small (i.e., < 0.001)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Overall transformed signal obtained by raising the weighted and corrected adaptive value to the adaptive exponent, preserving the sign of z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter that forms the base of latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the influence of the transformed signal on latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transformation to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_vector from trial data\n        F_vector = [\n            trial.get(\"trial_type\", 0),\n            trial.get(\"trial_role\", 0),\n            trial.get(\"token_opp\", 0),\n            trial.get(\"token_self\", 0),\n            trial.get(\"combined_earning\", 0),\n            trial.get(\"split_opp\", 0),\n            trial.get(\"split_self\", 0),\n            trial.get(\"splitperc_opp\", 0),\n            trial.get(\"splitperc_self\", 0),\n            trial.get(\"accepted_amount\", 0),\n            trial.get(\"accepted_perc\", 0)\n        ]\n\n        # Calculate 'a'\n        a = sum(F_vector) + 0  # \u03b4 is 0\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = z + 0.01 * z**2 + math.log(1 + z) + 0.01 * (z / (1 + z))\n        else:\n            f_adapt_z = -max(0, -z - 0.05)**2\n\n        # Calculate T\n        T = sum([a**k * (1/2)**k for k in range(31)])\n\n        # Calculate extra\n        extra = math.log(1 + math.exp(math.log(1 + math.exp(0.001 * a + 0.002)))) + 0.0005 * math.sin(a + 0.04)\n\n        # Calculate exponent\n        exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.005 * math.sin(a) + 0.001 * math.cos(2 * a) + 0.001 * math.sin(3 * a))\n\n        # Calculate correction\n        if abs(z) < 0.001:\n            correction = 0.001 * z**2\n        else:\n            correction = 0\n\n        # Calculate f(x)\n        fx = math.copysign(1, z) * (abs(f_adapt_z) * T * extra * w + correction)**exponent\n\n        # Calculate U\n        U = beta + gamma * fx\n\n        # Calculate P(accept)\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743551071.263789
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter used to compute the weight; modulates the adaptive transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable intercept parameter that forms the base of latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the influence of the transformed signal on latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )",
  "variable_descriptions": {
    "F_vector": {
      "description": "Vector of 11 features extracted from the dataset (e.g., trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, splitperc_self, accepted_amount, accepted_perc) used to compute the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Constant offset added to the core feature sum (set as 0)",
      "range": {
        "min": 0,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum over the 11 features plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally modulated core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal after sequential sinusoidal and cosine modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter used to compute the weight; modulates the adaptive transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "w": {
      "description": "Weight computed from phi as (phi \u2013 0.5)/phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Adaptive transformation of z with piecewise function; applies a quadratic soft correction for z \u2265 0.0001 and a steep penalty for z < 0.0001",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a high\u2010order Pad\u00e9 approximant summing k=0 to 30 of a\u1d4f \u00b7 (1/2)\u1d4f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra modulation term adding gentle oscillatory corrections using nested softplus functions and a sine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "exponent": {
      "description": "Adaptive exponent modulator incorporating logarithmic scaling and oscillatory sine/cosine corrections",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "correction": {
      "description": "Mild additive correction term proportional to z\u00b2 applied when |z| is very small (i.e., < 0.001)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Overall transformed signal obtained by raising the weighted and corrected adaptive value to the adaptive exponent, preserving the sign of z",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable intercept parameter that forms the base of latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the influence of the transformed signal on latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept)": {
      "description": "Predicted acceptance probability obtained by applying a logistic transformation to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_vector\": {\n      \"description\": \"Vector of 11 features extracted from the dataset (e.g., trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, splitperc_self, accepted_amount, accepted_perc) used to compute the core sum\",\n      \"range\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the core feature sum (set as 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum over the 11 features plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally modulated core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used to compute the weight; modulates the adaptive transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from phi as (phi \u2013 0.5)/phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z with piecewise function; applies a quadratic soft correction for z \u2265 0.0001 and a steep penalty for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a high\u2010order Pad\u00e9 approximant summing k=0 to 30 of a\u1d4f \u00b7 (1/2)\u1d4f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term adding gentle oscillatory corrections using nested softplus functions and a sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"exponent\": {\n      \"description\": \"Adaptive exponent modulator incorporating logarithmic scaling and oscillatory sine/cosine corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\u00b2 applied when |z| is very small (i.e., < 0.001)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Overall transformed signal obtained by raising the weighted and corrected adaptive value to the adaptive exponent, preserving the sign of z\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable intercept parameter that forms the base of latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the influence of the transformed signal on latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the scaled transformed signal f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept)\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transformation to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_vector from trial data\n        F_vector = [\n            trial.get(\"trial_type\", 0),\n            trial.get(\"trial_role\", 0),\n            trial.get(\"token_opp\", 0),\n            trial.get(\"token_self\", 0),\n            trial.get(\"combined_earning\", 0),\n            trial.get(\"split_opp\", 0),\n            trial.get(\"split_self\", 0),\n            trial.get(\"splitperc_opp\", 0),\n            trial.get(\"splitperc_self\", 0),\n            trial.get(\"accepted_amount\", 0),\n            trial.get(\"accepted_perc\", 0)\n        ]\n\n        # Calculate 'a'\n        a = sum(F_vector) + 0  # \u03b4 is 0\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = z + 0.01 * z**2 + math.log(1 + z) + 0.01 * (z / (1 + z))\n        else:\n            f_adapt_z = -max(0, -z - 0.05)**2\n\n        # Calculate T\n        T = sum([a**k * (1/2)**k for k in range(31)])\n\n        # Calculate extra\n        extra = math.log(1 + math.exp(math.log(1 + math.exp(0.001 * a + 0.002)))) + 0.0005 * math.sin(a + 0.04)\n\n        # Calculate exponent\n        exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + 0.005 * math.sin(a) + 0.001 * math.cos(2 * a) + 0.001 * math.sin(3 * a))\n\n        # Calculate correction\n        if abs(z) < 0.001:\n            correction = 0.001 * z**2\n        else:\n            correction = 0\n\n        # Calculate f(x)\n        fx = math.copysign(1, z) * (abs(f_adapt_z) * T * extra * w + correction)**exponent\n\n        # Calculate U\n        U = beta + gamma * fx\n\n        # Calculate P(accept)\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5393772893772893,
  "fitting_results": [
    {
      "phi": 0.6966351076505988,
      "beta": -5.516617244802575,
      "gamma": 6.878651180085096,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.388909978620629,
      "beta": -1.0481119796089509,
      "gamma": 0.19243311741407143,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9192397815186883,
      "beta": -7.8195919138128716,
      "gamma": 5.224655136817341,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7113909871293971,
      "beta": 9.3988056346268,
      "gamma": 5.422579634181331,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8138787179201974,
      "beta": -5.222321433697463,
      "gamma": 6.153908413285939,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8301165116942599,
      "beta": 1.5222840549027783,
      "gamma": 8.835806798386896,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.117092006000655,
      "beta": 5.9146043353002735,
      "gamma": 3.3974937876964706,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6469929155986731,
      "beta": 5.3875539209969165,
      "gamma": 4.334289809587241,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6400861176280049,
      "beta": -1.634331765582111,
      "gamma": 0.1515914202600177,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4570348095291765,
      "beta": -7.542523271131696,
      "gamma": 6.883515736759637,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6213173104704792,
      "beta": -0.15076631810126884,
      "gamma": 1.3838012014140078,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6562196340591244,
      "beta": 3.565987303626798,
      "gamma": 8.005892618840075,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8885155496169176,
      "beta": -1.2841228533546083,
      "gamma": 6.305994189389507,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8337212820597344,
      "beta": -4.49207287907546,
      "gamma": 7.37883129382102,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.213886277672451,
      "beta": 8.343759706408164,
      "gamma": 4.504085180604961,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1336484773446711,
      "beta": -0.991878189607684,
      "gamma": 9.222408933519095,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1706907336111074,
      "beta": -9.205739566677911,
      "gamma": 3.6060681213101664,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0351462002307388,
      "beta": -4.817316353329324,
      "gamma": 7.415553312505791,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.455522617177773,
      "beta": -2.0901679256885686,
      "gamma": 8.266234713152965,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8307616453020336,
      "beta": -0.1268843108282276,
      "gamma": 2.5470798280168303,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9581616821668859,
      "beta": -2.8217402132365743,
      "gamma": 1.6617339458246672,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0671423633299746,
      "beta": 5.111418401293008,
      "gamma": 1.5761666072609382,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4578563913850897,
      "beta": 9.418968588218387,
      "gamma": 8.824513182498258,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0690737300440505,
      "beta": 6.397242969523166,
      "gamma": 7.481007233971306,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5422373687417377,
      "beta": 9.89547720253189,
      "gamma": 8.227368486285174,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5829753585278806,
      "beta": -1.2563480450173827,
      "gamma": 0.4224009271630691,
      "success": true,
      "log_likelihood": -26.277420742206036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2824747106135994,
      "beta": -9.823124595386531,
      "gamma": 6.614233275624965,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9914909307611598,
      "beta": 1.3765722614862455,
      "gamma": 6.4440274858215885,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0438661115011623,
      "beta": 3.2407773046136867,
      "gamma": 2.2602921904093853,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9378929277718313,
      "beta": 5.1983524387740125,
      "gamma": 1.930691225918486,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2172709206284344,
      "beta": -5.7760514226360815,
      "gamma": 9.250323473545075,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7204483631875305,
      "beta": 8.014658576151945,
      "gamma": 8.487973404165917,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5308695239665562,
      "beta": 9.756950850654732,
      "gamma": 7.645770780918971,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3810225468564679,
      "beta": 9.948335173541125,
      "gamma": 1.1068334282408332,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1099895719456891,
      "beta": 7.773239134358306,
      "gamma": 6.4636078893461635,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2755582640264143,
      "beta": -4.99211032176095,
      "gamma": 1.3168825100711612,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1934069655795814,
      "beta": -3.7379326326922646,
      "gamma": 3.8542941092205716,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.372450798286153,
      "beta": 6.545812196123716,
      "gamma": 5.897480957151853,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3977798882499521,
      "beta": 9.122335520682771,
      "gamma": 8.808598855123865,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3856962674409536,
      "beta": -5.6377650463524205,
      "gamma": 6.6819054833830265,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8502129869534104,
      "beta": 0.6516106674351505,
      "gamma": 3.1117140739002958,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7810977979603669,
      "beta": 9.86600840695348,
      "gamma": 3.875118373018619,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.905689042167864,
      "beta": 7.2389382681711965,
      "gamma": 2.179254528639023,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.612773556441555,
      "beta": 5.388175080691305,
      "gamma": 3.1579538713166224,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8435002459181884,
      "beta": -2.8524682239369925,
      "gamma": 2.3982119639807573,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1505414041887378,
      "beta": 3.218360341809664,
      "gamma": 4.2674425867594055,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8923600720845053,
      "beta": -7.153667755244905,
      "gamma": 4.501007203760432,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.958298148468358,
      "beta": -2.051878331044552,
      "gamma": 3.6034267371490936,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0955306595538405,
      "beta": -7.1995026578459225,
      "gamma": 8.630528787096637,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8494298357494802,
      "beta": -8.63583814461708,
      "gamma": 7.409199975999251,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5751074333433919,
      "beta": -2.840154214805219,
      "gamma": 3.406819083526017,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7425959638626184,
      "beta": -5.8654160776302255,
      "gamma": 4.865883526285756,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8125783430690106,
      "beta": -4.108734792629938,
      "gamma": 6.223462455325475,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2693970565714374,
      "beta": -8.166776492966715,
      "gamma": 2.824802650692857,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8353391311807331,
      "beta": 1.1992689398311445,
      "gamma": 0.555080421268862,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.794374051014657,
      "beta": -4.456776441354345,
      "gamma": 8.911289447793612,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7994852187886408,
      "beta": 5.554026086505333,
      "gamma": 1.618073962843164,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.010631955791029,
      "beta": 2.5604236541084884,
      "gamma": 6.274082683326675,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2482686977927426,
      "beta": 7.7139902993344265,
      "gamma": 7.902948421973561,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.343529034412028,
      "beta": -3.994004009939789,
      "gamma": 7.060505698306788,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2009558574901575,
      "beta": -7.908898672620488,
      "gamma": 9.360796289236763,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.274861259555943,
      "beta": -4.810942055376302,
      "gamma": 9.617050064626586,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1986642407298154,
      "beta": -4.018988140038077,
      "gamma": 9.009348446713561,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2367262682034355,
      "beta": -9.56531737199494,
      "gamma": 4.988413095847792,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2848225250400884,
      "beta": 8.684257900525441,
      "gamma": 1.6896731966979106,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9030690502696777,
      "beta": -4.659518583879725,
      "gamma": 3.1326383011958168,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2042115732781329,
      "beta": 9.407593627553158,
      "gamma": 8.33464250904243,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0669157721716391,
      "beta": 8.19718953626327,
      "gamma": 4.860445743958971,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7978962803497612,
      "beta": 1.7702103784320755,
      "gamma": 1.3329622449586087,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2987319478525783,
      "beta": 0.6075057579860008,
      "gamma": 2.037290816510472,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0693936461997104,
      "beta": 2.190937030969584,
      "gamma": 8.308379520505657,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9087832576214834,
      "beta": 0.04948277507077847,
      "gamma": 4.909338783195519,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.157435574882704,
      "beta": -1.2661565880060532,
      "gamma": 9.98696666687123,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9435784887192231,
      "beta": -8.846268488455287,
      "gamma": 8.377116243084123,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2667164280210574,
      "beta": 9.89454778841219,
      "gamma": 1.8569849779888514,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3471132147444822,
      "beta": 7.252277802100387,
      "gamma": 8.734004342603095,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2224614930514581,
      "beta": 8.804477617551584,
      "gamma": 0.22554488889599433,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3536660935190699,
      "beta": 2.364268806530223,
      "gamma": 7.337013399123792,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7010646263906266,
      "beta": -3.7761861764051607,
      "gamma": 0.4280897168501141,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1655124554262382,
      "beta": 7.834478879906076,
      "gamma": 7.263255999618879,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4899314427203914,
      "beta": 7.392660031405583,
      "gamma": 6.042276405882086,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6779041853190354,
      "beta": 3.0964244152250764,
      "gamma": 4.581173876853757,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3584000236441818,
      "beta": -1.264358563093408,
      "gamma": 2.5569261663102685,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8037238011106125,
      "beta": 6.029719387723077,
      "gamma": 4.167910644493197,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.439488508905511,
      "beta": 5.500420413170994,
      "gamma": 2.5382294985096108,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5143679793781295,
      "beta": 5.750224405451512,
      "gamma": 7.330870871523684,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5875445244574604,
      "beta": 8.828458899659129,
      "gamma": 8.564189354446288,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7414029481024748,
      "beta": -9.13425339896973,
      "gamma": 7.135859626696705,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9831872402269067,
      "beta": -8.981710506710233,
      "gamma": 9.996496163874939,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2782565379262731,
      "beta": 0.2986032641757479,
      "gamma": 3.4906350172273437,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7352624587965274,
      "beta": -8.71706750391806,
      "gamma": 1.0891303389782026,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.05087023840006977,
        "p": 0.615222774251249
      },
      "beta": {
        "r": -0.0586906127860063,
        "p": 0.5618960083792409
      },
      "gamma": {
        "r": -0.05427868486015758,
        "p": 0.5917109300398943
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.3163873105318,
  "bic_results": {
    "average_bic": 64.3163873105318,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30539829978041,
      65.30539829931033,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931031,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.305398300250474,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.30539829178902,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539829366934,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.051\n- beta: r = -0.059\n- gamma: r = -0.054",
  "previous_models": [
    "Specification: a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 sin(a + 0.035) \u00b7 cos(a + 0.055)) \u00b7 (1 + 0.003 \u00b7 sin(a + 0.03) \u00b7 cos(a + 0.05))\nw = (phi \u2013 0.5) / phi\nf_adapt(z) = { z + 0.01 \u00b7 z\u00b2 + ln(1+z) + 0.01 \u00b7 (z/(1+z)) , if z \u2265 0.0001 ; \u2013 [max(0, \u2013z \u2013 0.05)]\u00b2 , if z < 0.0001 }\nT = \u03a3(k=0,30) [a\u1d4f \u00b7 (1/2)\u1d4f]\nextra = ln(1 + exp(ln(1 + exp(0.001 \u00b7 a + 0.002)))) + 0.0005 \u00b7 sin(a + 0.04)\nexponent = [0.9478 + 0.00018 \u00b7 ln(1+a)] \u00b7 [1 + 0.005 \u00b7 sin(a) + 0.001 \u00b7 cos(2a) + 0.001 \u00b7 sin(3a)]\ncorrection = { 0.001 \u00b7 z\u00b2 , if |z| < 0.001 ; 0 , otherwise }\nf(x) = sign(z) \u00b7 { [ f_adapt(z) \u00b7 T \u00b7 extra \u00b7 w + correction ] }^(exponent)\nU = beta + gamma \u00b7 f(x)\nP(accept) = 1 / ( 1 + exp(\u2013 U) )\nSummary: \nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.3163873105318\nOverall Accuracy: 0.5394\n\nParameter Recovery:\n- phi: r = 0.051\n- beta: r = -0.059\n- gamma: r = -0.054"
  ]
}