{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply a sinusoidal scaling transformation:\u2003\u2003\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Form the composite signal by sequential multiplicative modulations:\u2003\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003\u2003\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function that:\n\u2003\u2022 For z \u2265 \u03b5 (set \u03b5 = 0.0001), instead of using a pure Pad\u00e9\u2010like function, blend a rational (ln-based) function with a local quadratic correction; for example, use f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1 + z) + k\u2082\u00b7[z/(1 + z)].\n\u2003\u2022 For z < \u03b5, avoid overly steep penalties by experimenting with a nested softsign or softplus chain with a moderate exponent (try an exponent between 2 and 6) to avoid instability.\n6. Define a dynamic threshold T using a Pad\u00e9 approximant sum:\u2003T = \u03a3[k=0 to K] a\u1d4f \u00d7 (1/2)\u1d4f with K chosen from 30 to 50.\n7. Define an extra modulation term \u201cextra\u201d that incorporates additional nested nonlinearities. For example, try a design that stacks several softplus layers (and/or softsign functions) optionally multiplied by a gentle sinusoidal or Gaussian radial basis term. This term should be tunable and help smooth extreme values.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1 + a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u03b1\u2083 \u00d7 sin(3a)]. Consider allowing slight alternatives here (e.g., by including cosine or tanh functions) to improve the sensitivity of the model.\n9. Compute the final transformed signal:\u2003f(x) = sign(z) \u00d7 { [f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w] + correction }^(Exponent), where \u201ccorrection\u201d is a mild additive term (e.g., proportional to z\u00b2 when |z| is very small) to improve local sensitivity.\n10. Compute latent utility as:\u2003U = beta + gamma \u00d7 f(x) and predict acceptance probability via the logistic function:\u2003P_accept = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n12. Experiment with alternative penalty or smoothing functions for the negative branch of f_adapt (for example, using a nested softplus chain with a moderate exponent rather than a very high power) to improve parameter recovery.\n13. Encourage out-of-the-box modifications in the extra term; consider adding a Gaussian radial basis term (e.g., exp(\u2013((a \u2013 \u03bc)\u00b2)/(2\u03c3\u00b2))) to capture nonlinearity near an important operating point (for instance, near a = 1).\n14. Optionally, experiment with incorporating additional oscillatory modulation directly in the exponent modulator to further fine-tune the compression of extreme values.\n\n</new_instructions>\n<SUMMARY>\nThis model derives a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to compute an intermediate signal. It then uses a piecewise adaptive transformation that blends a Pad\u00e9\u2010like logarithmic function with a local quadratic correction for nonnegative values and smooth nested nonlinearities for negatives. A dynamic threshold via a finite summation and an extra modulation term (which may include nested softplus and a Gaussian RBF) further refine the signal. Finally, the transformed value is raised to an adaptive exponent\u2014including additional oscillatory modulation\u2014and linearly combined with beta and gamma to yield latent utility, which is mapped via a logistic function to predict acceptance.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>\n1. Compute the core sum:\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply a sinusoidal scaling transformation:\u2003\u2003\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Form the composite signal by sequential multiplicative modulations:\u2003\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003\u2003\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function that:\n\u2003\u2022 For z \u2265 \u03b5 (set \u03b5 = 0.0001), instead of using a pure Pad\u00e9\u2010like function, blend a rational (ln-based) function with a local quadratic correction; for example, use f_adapt(z) = z + k\u2081\u00b7z\u00b2 + ln(1 + z) + k\u2082\u00b7[z/(1 + z)].\n\u2003\u2022 For z < \u03b5, avoid overly steep penalties by experimenting with a nested softsign or softplus chain with a moderate exponent (try an exponent between 2 and 6) to avoid instability.\n6. Define a dynamic threshold T using a Pad\u00e9 approximant sum:\u2003T = \u03a3[k=0 to K] a\u1d4f \u00d7 (1/2)\u1d4f with K chosen from 30 to 50.\n7. Define an extra modulation term \u201cextra\u201d that incorporates additional nested nonlinearities. For example, try a design that stacks several softplus layers (and/or softsign functions) optionally multiplied by a gentle sinusoidal or Gaussian radial basis term. This term should be tunable and help smooth extreme values.\n8. Define the final exponent modulator as:\u2003Exponent = [0.9478 + 0.00018 \u00d7 ln(1 + a)] \u00d7 [1 + \u03b1\u2081 \u00d7 sin(a) + \u03b1\u2082 \u00d7 cos(2a) + \u03b1\u2083 \u00d7 sin(3a)]. Consider allowing slight alternatives here (e.g., by including cosine or tanh functions) to improve the sensitivity of the model.\n9. Compute the final transformed signal:\u2003f(x) = sign(z) \u00d7 { [f_adapt(z) \u00d7 T \u00d7 extra \u00d7 w] + correction }^(Exponent), where \u201ccorrection\u201d is a mild additive term (e.g., proportional to z\u00b2 when |z| is very small) to improve local sensitivity.\n10. Compute latent utility as:\u2003U = beta + gamma \u00d7 f(x) and predict acceptance probability via the logistic function:\u2003P_accept = 1 / [1 + exp(\u2013U)].\n11. Use exactly three learnable parameters with strict finite bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n12. Experiment with alternative penalty or smoothing functions for the negative branch of f_adapt (for example, using a nested softplus chain with a moderate exponent rather than a very high power) to improve parameter recovery.\n13. Encourage out-of-the-box modifications in the extra term; consider adding a Gaussian radial basis term (e.g., exp(\u2013((a \u2013 \u03bc)\u00b2)/(2\u03c3\u00b2))) to capture nonlinearity near an important operating point (for instance, near a = 1).\n14. Optionally, experiment with incorporating additional oscillatory modulation directly in the exponent modulator to further fine-tune the compression of extreme values.\n\n</new_instructions>\n<SUMMARY>\nThis model derives a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to compute an intermediate signal. It then uses a piecewise adaptive transformation that blends a Pad\u00e9\u2010like logarithmic function with a local quadratic correction for nonnegative values and smooth nested nonlinearities for negatives. A dynamic threshold via a finite summation and an extra modulation term (which may include nested softplus and a Gaussian RBF) further refine the signal. Finally, the transformed value is raised to an adaptive exponent\u2014including additional oscillatory modulation\u2014and linearly combined with beta and gamma to yield latent utility, which is mapped via a logistic function to predict acceptance.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Component i of the 11 fixed features that contribute to the core sum (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Additive constant bias for the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features and delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulation of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold value to switch between transformation regimes in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Constant coefficient for the quadratic term in f_adapt for z \u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.002,\n        \"max\": 0.002,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Constant coefficient for the rational term in f_adapt for z \u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.003,\n        \"max\": 0.003,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight parameter computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used for computing the weight w and modulating the system\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 epsilon it blends a rational ln-based function with a quadratic term, for z < epsilon it uses a softplus-based transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite Pad\u00e9 approximant sum of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus nonlinearity and a Gaussian radial basis function centered near a=1, with an added sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha1\": {\n      \"description\": \"Fixed coefficient for sin(a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha2\": {\n      \"description\": \"Fixed coefficient for cos(2a) in the exponent modulator\",\n      \"range\": {\n        \"min\": -0.01,\n        \"max\": -0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha3\": {\n      \"description\": \"Fixed coefficient for sin(3a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.005,\n        \"max\": 0.005,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator that scales the transformed signal, combining a logarithmic term and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\u00b2 to enhance local sensitivity when |z| is small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed/calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed by applying the adapted transformation, dynamic threshold, extra modulation, weight, and correction, raised to the exponent modulator\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in computing latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance computed via the logistic function of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first computes a core sum from 11 features, applies sinusoidal scaling and sequential multiplicative modulations, and then transforms the result using a piecewise adaptive function. This transformation is further modulated by a dynamic Pad\u00e9 approximant threshold, extra nested nonlinearities (including a Gaussian radial basis term and softplus functions), and an oscillatory exponent modulator. The final transformed signal is linearly combined with three learnable parameters (beta, gamma, and phi) to produce a latent utility, which is mapped through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Component i of the 11 fixed features that contribute to the core sum (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Additive constant bias for the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features and delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulation of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold value to switch between transformation regimes in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Constant coefficient for the quadratic term in f_adapt for z \\u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.002,\n        \"max\": 0.002,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Constant coefficient for the rational term in f_adapt for z \\u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.003,\n        \"max\": 0.003,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight parameter computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used for computing the weight w and modulating the system\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \\u2265 epsilon it blends a rational ln-based function with a quadratic term, for z < epsilon it uses a softplus-based transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite Pad\\u00e9 approximant sum of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus nonlinearity and a Gaussian radial basis function centered near a=1, with an added sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha1\": {\n      \"description\": \"Fixed coefficient for sin(a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha2\": {\n      \"description\": \"Fixed coefficient for cos(2a) in the exponent modulator\",\n      \"range\": {\n        \"min\": -0.01,\n        \"max\": -0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha3\": {\n      \"description\": \"Fixed coefficient for sin(3a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.005,\n        \"max\": 0.005,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator that scales the transformed signal, combining a logarithmic term and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\\u00b2 to enhance local sensitivity when |z| is small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed/calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed by applying the adapted transformation, dynamic threshold, extra modulation, weight, and correction, raised to the exponent modulator\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in computing latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance computed via the logistic function of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    epsilon = 0.0001\n    k1 = 0.002\n    k2 = 0.003\n    alpha1 = 0.01\n    alpha2 = -0.01\n    alpha3 = 0.005\n\n    for trial in trial_data:\n        # Extract F_i values (assuming they are named F1, F2, ..., F11 in the trial data)\n        F_values = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]  # Default to 0 if a feature is missing\n\n        # Extract delta\n        delta = trial.get(\"delta\", 0)  # Default to 0 if delta is missing\n\n        # Calculate a\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Define f_adapt\n        def f_adapt(z_val):\n            if z_val >= epsilon:\n                return z_val + k1 * z_val**2 + math.log(1 + z_val) + k2 * (z_val / (1 + z_val))\n            else:\n                return math.log(1 + math.exp(3 * z_val)) / 3\n\n        # Calculate T\n        T = sum((a**k) / (2**k) for k in range(31))\n\n        # Calculate extra\n        extra = math.log(1 + math.exp(a)) * math.exp(-((a - 1)**2) / 2) * (1 + 0.01 * math.sin(a))\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + alpha1 * math.sin(a) + alpha2 * math.cos(2 * a) + alpha3 * math.sin(3 * a))\n\n        # Calculate correction\n        correction = 0.001 * z**2\n\n        # Calculate f_x\n        f_x = (1 if z >= 0 else -1) * ((f_adapt(z) * T * extra * w + correction)**Exponent)\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P_accept\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 10.0, \"split_self\": 30.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 10.0, \"F1\": 0.5, \"F2\": -0.2, \"F3\": 0.1, \"F4\": 0.8, \"F5\": -0.3, \"F6\": 0.4, \"F7\": 0.7, \"F8\": -0.1, \"F9\": 0.6, \"F10\": -0.4, \"F11\": 0.9, \"delta\": 0.2}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 12.0, \"split_self\": 28.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 12.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 12.0, \"F1\": -0.1, \"F2\": 0.3, \"F3\": -0.5, \"F4\": 0.2, \"F5\": 0.7, \"F6\": -0.9, \"F7\": 0.1, \"F8\": 0.5, \"F9\": -0.2, \"F10\": 0.8, \"F11\": -0.6, \"delta\": -0.3}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743551628.631139
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Learnable parameter used for computing the weight w and modulating the system",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in computing latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F_i": {
      "description": "Component i of the 11 fixed features that contribute to the core sum (for i = 1,...,11)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Additive constant bias for the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "fixed",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "a": {
      "description": "Core sum computed as the sum of 11 features and delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally scaled version of the core sum a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal obtained by sequential multiplicative modulation of a_mod",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon": {
      "description": "Small positive threshold value to switch between transformation regimes in f_adapt",
      "range": {
        "min": 0.0001,
        "max": 0.0001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "k1": {
      "description": "Constant coefficient for the quadratic term in f_adapt for z \u2265 epsilon",
      "range": {
        "min": 0.002,
        "max": 0.002,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "k2": {
      "description": "Constant coefficient for the rational term in f_adapt for z \u2265 epsilon",
      "range": {
        "min": 0.003,
        "max": 0.003,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "w": {
      "description": "Weight parameter computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Learnable parameter used for computing the weight w and modulating the system",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z; for z \u2265 epsilon it blends a rational ln-based function with a quadratic term, for z < epsilon it uses a softplus-based transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed as a finite Pad\u00e9 approximant sum of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra modulation term incorporating nested softplus nonlinearity and a Gaussian radial basis function centered near a=1, with an added sinusoidal modulation",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha1": {
      "description": "Fixed coefficient for sin(a) in the exponent modulator",
      "range": {
        "min": 0.01,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "alpha2": {
      "description": "Fixed coefficient for cos(2a) in the exponent modulator",
      "range": {
        "min": -0.01,
        "max": -0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "alpha3": {
      "description": "Fixed coefficient for sin(3a) in the exponent modulator",
      "range": {
        "min": 0.005,
        "max": 0.005,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "Exponent": {
      "description": "Final exponent modulator that scales the transformed signal, combining a logarithmic term and oscillatory adjustments",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "correction": {
      "description": "Mild additive correction term proportional to z\u00b2 to enhance local sensitivity when |z| is small",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed/calculated"
    },
    "f_x": {
      "description": "Final transformed signal computed by applying the adapted transformation, dynamic threshold, extra modulation, weight, and correction, raised to the exponent modulator",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the transformed signal in computing latent utility",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma-scaled transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Predicted probability of acceptance computed via the logistic function of latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model that first computes a core sum from 11 features, applies sinusoidal scaling and sequential multiplicative modulations, and then transforms the result using a piecewise adaptive function. This transformation is further modulated by a dynamic Pad\u00e9 approximant threshold, extra nested nonlinearities (including a Gaussian radial basis term and softplus functions), and an oscillatory exponent modulator. The final transformed signal is linearly combined with three learnable parameters (beta, gamma, and phi) to produce a latent utility, which is mapped through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"Component i of the 11 fixed features that contribute to the core sum (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Additive constant bias for the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"fixed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features and delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulation of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold value to switch between transformation regimes in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k1\": {\n      \"description\": \"Constant coefficient for the quadratic term in f_adapt for z \u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.002,\n        \"max\": 0.002,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"k2\": {\n      \"description\": \"Constant coefficient for the rational term in f_adapt for z \u2265 epsilon\",\n      \"range\": {\n        \"min\": 0.003,\n        \"max\": 0.003,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight parameter computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable parameter used for computing the weight w and modulating the system\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; for z \u2265 epsilon it blends a rational ln-based function with a quadratic term, for z < epsilon it uses a softplus-based transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed as a finite Pad\u00e9 approximant sum of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra modulation term incorporating nested softplus nonlinearity and a Gaussian radial basis function centered near a=1, with an added sinusoidal modulation\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha1\": {\n      \"description\": \"Fixed coefficient for sin(a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha2\": {\n      \"description\": \"Fixed coefficient for cos(2a) in the exponent modulator\",\n      \"range\": {\n        \"min\": -0.01,\n        \"max\": -0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"alpha3\": {\n      \"description\": \"Fixed coefficient for sin(3a) in the exponent modulator\",\n      \"range\": {\n        \"min\": 0.005,\n        \"max\": 0.005,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"Exponent\": {\n      \"description\": \"Final exponent modulator that scales the transformed signal, combining a logarithmic term and oscillatory adjustments\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"correction\": {\n      \"description\": \"Mild additive correction term proportional to z\u00b2 to enhance local sensitivity when |z| is small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"fixed/calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final transformed signal computed by applying the adapted transformation, dynamic threshold, extra modulation, weight, and correction, raised to the exponent modulator\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal in computing latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma-scaled transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of acceptance computed via the logistic function of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first computes a core sum from 11 features, applies sinusoidal scaling and sequential multiplicative modulations, and then transforms the result using a piecewise adaptive function. This transformation is further modulated by a dynamic Pad\u00e9 approximant threshold, extra nested nonlinearities (including a Gaussian radial basis term and softplus functions), and an oscillatory exponent modulator. The final transformed signal is linearly combined with three learnable parameters (beta, gamma, and phi) to produce a latent utility, which is mapped through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))\nSummary: A complex nonlinear utility model that first computes a core sum from 11 features, applies sinusoidal scaling and sequential multiplicative modulations, and then transforms the result using a piecewise adaptive function. This transformation is further modulated by a dynamic Pad\u00e9 approximant threshold, extra nested nonlinearities (including a Gaussian radial basis term and softplus functions), and an oscillatory exponent modulator. The final transformed signal is linearly combined with three learnable parameters (beta, gamma, and phi) to produce a latent utility, which is mapped through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    epsilon = 0.0001\n    k1 = 0.002\n    k2 = 0.003\n    alpha1 = 0.01\n    alpha2 = -0.01\n    alpha3 = 0.005\n\n    for trial in trial_data:\n        # Extract F_i values (assuming they are named F1, F2, ..., F11 in the trial data)\n        F_values = [trial.get(f\"F{i}\", 0) for i in range(1, 12)]  # Default to 0 if a feature is missing\n\n        # Extract delta\n        delta = trial.get(\"delta\", 0)  # Default to 0 if delta is missing\n\n        # Calculate a\n        a = sum(F_values) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Define f_adapt\n        def f_adapt(z_val):\n            if z_val >= epsilon:\n                return z_val + k1 * z_val**2 + math.log(1 + z_val) + k2 * (z_val / (1 + z_val))\n            else:\n                return math.log(1 + math.exp(3 * z_val)) / 3\n\n        # Calculate T\n        T = sum((a**k) / (2**k) for k in range(31))\n\n        # Calculate extra\n        extra = math.log(1 + math.exp(a)) * math.exp(-((a - 1)**2) / 2) * (1 + 0.01 * math.sin(a))\n\n        # Calculate Exponent\n        Exponent = (0.9478 + 0.00018 * math.log(1 + a)) * (1 + alpha1 * math.sin(a) + alpha2 * math.cos(2 * a) + alpha3 * math.sin(3 * a))\n\n        # Calculate correction\n        correction = 0.001 * z**2\n\n        # Calculate f_x\n        f_x = (1 if z >= 0 else -1) * ((f_adapt(z) * T * extra * w + correction)**Exponent)\n\n        # Calculate U\n        U = beta + gamma * f_x\n\n        # Calculate P_accept\n        try:\n            P_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5503663003663004,
  "fitting_results": [
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 6.328292968206004,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -6.209335367533552,
      "gamma": 2.7194633083852806,
      "success": true,
      "log_likelihood": -24.953316610849733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5022805943458093,
      "beta": -2.081832141496928,
      "gamma": 4.429915767735355,
      "success": true,
      "log_likelihood": -24.89771433122087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 6.833508789736763,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 4.921745886938586,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5000010826570445,
      "beta": 0.28407461489440383,
      "gamma": 3.1703197435995683,
      "success": true,
      "log_likelihood": -23.545973163850384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3168444607155678,
      "beta": 0.7631239556816403,
      "gamma": 0.7223947777474965,
      "success": true,
      "log_likelihood": -22.91451005143792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 3.079059098161928,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 4.6132390247441855,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 2.3607216912296725,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 7.195803061056085,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 8.987619087423846,
      "success": true,
      "log_likelihood": -16.277527458679756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -15.27754057992888,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2712748665192668,
      "beta": -1.4409063484777658,
      "gamma": 2.7570462381061214,
      "success": true,
      "log_likelihood": -24.730616750333613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 9.883979282942018,
      "success": true,
      "log_likelihood": -16.27752037150098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 8.800333576697522,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.522547085027084,
      "gamma": 5.793520263941919,
      "success": true,
      "log_likelihood": -24.897714324480066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -6.226196267238029,
      "gamma": 4.824783650133339,
      "success": true,
      "log_likelihood": -24.953316011243974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -0.6790368620533932,
      "gamma": 5.542704031976655,
      "success": true,
      "log_likelihood": -24.450957568567137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -1.2473927165743564,
      "gamma": 0.8099408294139264,
      "success": true,
      "log_likelihood": -24.730616750605915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 8.883789879845486,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -15.277540579928877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4346871356540605,
      "beta": 10.0,
      "gamma": 9.502329306645873,
      "success": true,
      "log_likelihood": -19.27745817524815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 5.84473397216172,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.000049297266753,
      "beta": -10.0,
      "gamma": 0.761498227183805,
      "success": true,
      "log_likelihood": -24.953440904183655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 9.848169267839312,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -11.277624942613802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4846497529423117,
      "beta": -0.43836824066818575,
      "gamma": 9.469047720783387,
      "success": true,
      "log_likelihood": -23.545973163850107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4864099951163894,
      "beta": 1.200408252859357,
      "gamma": 4.225983039212542,
      "success": true,
      "log_likelihood": -22.157938154736527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 8.698293966269803,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4999483138904002,
      "beta": 0.49694076871056636,
      "gamma": 4.148234476126306,
      "success": true,
      "log_likelihood": -22.914510053015203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -14.277561670600107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4995592737338352,
      "beta": -0.5432025366781007,
      "gamma": 4.5730071222131174,
      "success": true,
      "log_likelihood": -24.0569451887236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 4.671801257380589,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9678251372640214,
      "beta": 10.0,
      "gamma": 2.4638673634658144,
      "success": true,
      "log_likelihood": -12.277763502073396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.9644260506518538,
      "gamma": 9.352004410400154,
      "success": true,
      "log_likelihood": -24.730616750305973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -0.19265658917732695,
      "gamma": 8.388015370148132,
      "success": true,
      "log_likelihood": -24.056945188726463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7385820468953578,
      "beta": 3.0578301435114352,
      "gamma": 0.18887065572694195,
      "success": true,
      "log_likelihood": -21.27032088103803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -2.077937660171275,
      "gamma": 6.459916216517328,
      "success": true,
      "log_likelihood": -24.897714329316685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 2.390840676293595,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 8.894527310055787,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6079632019264127,
      "beta": -2.223293926504283,
      "gamma": 6.546290490623066,
      "success": true,
      "log_likelihood": -24.897714324179272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2616733231200858,
      "beta": 1.148282133604918,
      "gamma": 5.3657500283752055,
      "success": true,
      "log_likelihood": -22.157938155337618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3137135916385139,
      "beta": -10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5001070344237156,
      "beta": -2.0785650549271972,
      "gamma": 6.123825383113063,
      "success": true,
      "log_likelihood": -24.897714324155633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4999256468759397,
      "beta": -1.3012654515953057,
      "gamma": 8.11586569356335,
      "success": true,
      "log_likelihood": -24.45095756850265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 2.921163970906058,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 7.156239530385856,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 3.524629353288563,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -15.277540579928878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 8.513871936533327,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -18.277477307915174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.8488161218619213,
      "gamma": 8.558648934362461,
      "success": true,
      "log_likelihood": -24.05694518872546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9781930072804799,
      "beta": -9.626764667854669,
      "gamma": 3.018622418412782,
      "success": true,
      "log_likelihood": -24.95329852060782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.925508850797024,
      "beta": -10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 5.0117781685232385,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9755746871507359,
      "beta": -10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4999891802800265,
      "beta": -1.8007985755049514,
      "gamma": 7.21705956058407,
      "success": true,
      "log_likelihood": -24.73061675063758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -14.277561670600111,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.633036552262764,
      "success": true,
      "log_likelihood": -16.27753913697123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.518735936593935,
      "beta": -1.2841130428988112,
      "gamma": 7.3756121636187615,
      "success": true,
      "log_likelihood": -24.73061675030407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -14.27756167060011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1542537735791818,
      "beta": 9.434902703245553,
      "gamma": 1.6762245633661526,
      "success": true,
      "log_likelihood": -43.2758242517153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 9.159146730856808,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3945019709306599,
      "beta": -2.2793295082272587,
      "gamma": 2.767402207015019,
      "success": true,
      "log_likelihood": -24.897714888122586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.596413921422363,
      "success": true,
      "log_likelihood": -19.27746339538816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -7.210891084696285,
      "gamma": 3.0441830368222296,
      "success": true,
      "log_likelihood": -24.95330094354925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4301605611594626,
      "beta": 1.3477193653176038,
      "gamma": 2.3400152558501026,
      "success": true,
      "log_likelihood": -22.157938154733586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -13.277582761271342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 6.914593486083411,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -0.19265445655218294,
      "gamma": 9.927562379997388,
      "success": true,
      "log_likelihood": -24.056945188723834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 4.240922127353789,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9166196666337547,
      "beta": -6.776489457316876,
      "gamma": 7.206933553779579,
      "success": true,
      "log_likelihood": -24.95163696351525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -14.27756167060011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 1.9100368998220574,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0001205998662757,
      "beta": -8.551758060855706,
      "gamma": 5.720950624155899,
      "success": true,
      "log_likelihood": -24.95329882097087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4999985259870867,
      "beta": -0.9593230585001166,
      "gamma": 9.999996620131542,
      "success": true,
      "log_likelihood": -24.056945188723546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 4.3341093391257015,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4649697999275513,
      "beta": 1.2385088779948088,
      "gamma": 3.750402341979852,
      "success": true,
      "log_likelihood": -22.157938157741718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 3.255993357096764,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8124520609360409,
      "beta": 7.5769126821891675,
      "gamma": 9.938374588850207,
      "success": true,
      "log_likelihood": -13.279917072503508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -10.0,
      "gamma": 3.7434871933341975,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.1586539409761243,
      "gamma": 4.7524996264126305,
      "success": true,
      "log_likelihood": -22.157938154739192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.021640382868009494,
        "p": 0.8307746870681623
      },
      "beta": {
        "r": 0.7105653921343371,
        "p": 1.228205013180684e-16
      },
      "gamma": {
        "r": -0.0860702129207178,
        "p": 0.394512463363588
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 54.32652017579191,
  "bic_results": {
    "average_bic": 54.32652017579191,
    "individual_bics": [
      60.6585157558939,
      60.65719003706779,
      60.54598547781008,
      60.65742620704526,
      60.65733541130788,
      57.842503143069095,
      33.30580670059594,
      56.57957691824417,
      33.30580670059594,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.30580670059594,
      33.30580670059594,
      33.30580670059594,
      33.30580670059594,
      43.30561173272784,
      41.30563797522609,
      33.30580670059594,
      60.21179031603556,
      43.305597558370295,
      60.65760779852003,
      60.54598546432847,
      60.65718883785628,
      59.65247195250261,
      60.211790316580164,
      60.657880185732196,
      41.305637975226084,
      49.305473165864626,
      33.30580670059594,
      60.6585157558939,
      60.65743862373564,
      60.657517002782654,
      33.30580670059594,
      57.84250314306854,
      55.06643312484138,
      60.6571538198331,
      56.57957692139874,
      39.30568015656854,
      58.86444719281553,
      60.65806177720697,
      35.30608381951512,
      60.21179031598028,
      58.86444719282126,
      53.29119857744439,
      60.5459854740017,
      60.657517002782654,
      60.65742620704526,
      60.54598546372688,
      55.06643312604356,
      60.65833416441913,
      60.5459854636796,
      59.65247195237363,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.30563797522609,
      60.65842496015652,
      47.30551143119868,
      58.864447192819256,
      60.657153856583975,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031664349,
      39.305680156568556,
      43.3056350893108,
      60.21179031597647,
      39.30568015656855,
      97.30220531879893,
      60.65833416441913,
      60.5459865916135,
      49.30548360614465,
      60.65715870246683,
      55.0664331248355,
      37.305722337911014,
      60.658606551631294,
      58.864447192816,
      60.6585157558939,
      60.653830742398824,
      39.30568015656855,
      60.65842496015652,
      60.65715445731007,
      58.86444719281542,
      60.65842496015651,
      55.06643313085176,
      60.65806177720697,
      37.310390960375344,
      60.65724461557049,
      55.06643312484671
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.022\n- beta: r = 0.711\n- gamma: r = -0.086",
  "previous_models": [
    "Specification: a = (\u03a3[i=1:11] F_i) + delta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nw = (phi - 0.5) / phi\nf_adapt(z) = { z + k1 * z^2 + ln(1 + z) + k2 * (z/(1 + z))   if z \u2265 epsilon;   (ln(1 + exp(3*z)))/3   if z < epsilon }\nT = \u03a3[k=0:30] (a^k)/(2^k)\nextra = ln(1 + exp(a)) * exp(-((a - 1)^2)/2) * (1 + 0.01 * sin(a))\nExponent = (0.9478 + 0.00018 * ln(1 + a)) * (1 + alpha1 * sin(a) + alpha2 * cos(2*a) + alpha3 * sin(3*a))\ncorrection = 0.001 * z^2\nf_x = sign(z) * ([ f_adapt(z) * T * extra * w + correction ]^(Exponent))\nU = beta + gamma * f_x\nP_accept = 1/(1 + exp(-U))\nSummary: A complex nonlinear utility model that first computes a core sum from 11 features, applies sinusoidal scaling and sequential multiplicative modulations, and then transforms the result using a piecewise adaptive function. This transformation is further modulated by a dynamic Pad\u00e9 approximant threshold, extra nested nonlinearities (including a Gaussian radial basis term and softplus functions), and an oscillatory exponent modulator. The final transformed signal is linearly combined with three learnable parameters (beta, gamma, and phi) to produce a latent utility, which is mapped through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 54.32652017579191\nOverall Accuracy: 0.5504\n\nParameter Recovery:\n- phi: r = -0.022\n- beta: r = 0.711\n- gamma: r = -0.086"
  ]
}