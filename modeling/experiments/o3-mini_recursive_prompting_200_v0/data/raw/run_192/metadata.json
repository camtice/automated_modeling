{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nBased on the previous run, we want to lower the BIC and increase accuracy and improve parameter recovery. We could advise trying smoother alternatives for the negative branch (for example, using a nested softplus chain with moderate exponent instead of huge exponents) and to experiment with updating the dynamic threshold T (e.g., using a Pad\u00e9 approximant with tighter bounds) and give flexibility in tuning the extra term (including a Gaussian radial basis term that can capture nonlinearity near a = 1). We could also encourage the addition of oscillatory modulation directly in the exponent modulator. We want to encourage innovation, so suggest exploring different functions for f_adapt for both branches. Emphasize the need to define finite parameter bounds for beta, gamma, and phi. \n</think>\n<new_instructions>\n1. Compute the core sum:\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply sinusoidal scaling:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute the composite signal by sequential multiplicative modulations:\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For f_adapt(z), use a piecewise function that for z \u2265 \u03b5 (set \u03b5 = 0.0001) uses a softer rational transformation augmented by a small quadratic correction and softsign smoothing; for z < \u03b5, use a nested softplus chain with a moderate exponent (target exponent between 2 and 6) instead of very high powers.\n6. Revise the dynamic threshold T. Instead of a simple power series sum from k=0 to K, consider using an alternate Pad\u00e9 approximant or a rational function that is less sensitive to extreme values. Allow K to be adjustable in the range 30\u201350.\n7. For the extra term, allow an additional Gaussian radial basis function, for instance, multiplying extra by exp(\u2013((a \u2013 1)\u00b2)/(2\u03c3\u00b2)) with \u03c3 around 0.25, to better capture local nonlinearities near a = 1. Also encourage stacking a few (2-4) nested softplus (or softsign) layers.\n8. In the exponent modulator, include additional oscillatory components (e.g., include a sin() or tanh() term) to compress extreme values more smoothly.\n9. Add an optional mild local correction term (such as a small multiple of z\u00b2 when |z| is very small) so that near zero, the model is sensitive.\n10. Ensure exactly three learnable parameters with strict finite bounds: beta must lie in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5].\n11. Encourage out-of-the-box experimentation for the negative branch of f_adapt\u2014try using a nested softplus chain with an exponent in the range of 2\u20136 instead of a very high power function.\n12. Consider experimenting with a slight increase in the flexibility of the exponent modulator by incorporating additional oscillatory terms (for example, including both sin(2a) and cos(2a)), to allow a more fine\u2010tuned compression of the transformed signal.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to yield an intermediate signal. A piecewise adaptive transformation\u2014with a softened rational (ln-based) plus local quadratic correction for nonnegative values and a nested softplus chain with moderate exponent for negatives\u2014smoothly transforms the intermediate signal. This is further modulated by a dynamic threshold and an extra composite term that incorporates nested nonlinearities (including a Gaussian radial basis). The resulting signal is raised to an adaptive exponent modulated by additional oscillatory components, then linearly combined with base (beta) and scaling (gamma) parameters to yield latent utility, which is mapped via a logistic function for acceptance probability prediction. The learnable parameters (beta, gamma, phi) are strictly bounded.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nBased on the previous run, we want to lower the BIC and increase accuracy and improve parameter recovery. We could advise trying smoother alternatives for the negative branch (for example, using a nested softplus chain with moderate exponent instead of huge exponents) and to experiment with updating the dynamic threshold T (e.g., using a Pad\u00e9 approximant with tighter bounds) and give flexibility in tuning the extra term (including a Gaussian radial basis term that can capture nonlinearity near a = 1). We could also encourage the addition of oscillatory modulation directly in the exponent modulator. We want to encourage innovation, so suggest exploring different functions for f_adapt for both branches. Emphasize the need to define finite parameter bounds for beta, gamma, and phi. \n</think>\n<new_instructions>\n1. Compute the core sum:\u2003\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply sinusoidal scaling:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Compute the composite signal by sequential multiplicative modulations:\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For f_adapt(z), use a piecewise function that for z \u2265 \u03b5 (set \u03b5 = 0.0001) uses a softer rational transformation augmented by a small quadratic correction and softsign smoothing; for z < \u03b5, use a nested softplus chain with a moderate exponent (target exponent between 2 and 6) instead of very high powers.\n6. Revise the dynamic threshold T. Instead of a simple power series sum from k=0 to K, consider using an alternate Pad\u00e9 approximant or a rational function that is less sensitive to extreme values. Allow K to be adjustable in the range 30\u201350.\n7. For the extra term, allow an additional Gaussian radial basis function, for instance, multiplying extra by exp(\u2013((a \u2013 1)\u00b2)/(2\u03c3\u00b2)) with \u03c3 around 0.25, to better capture local nonlinearities near a = 1. Also encourage stacking a few (2-4) nested softplus (or softsign) layers.\n8. In the exponent modulator, include additional oscillatory components (e.g., include a sin() or tanh() term) to compress extreme values more smoothly.\n9. Add an optional mild local correction term (such as a small multiple of z\u00b2 when |z| is very small) so that near zero, the model is sensitive.\n10. Ensure exactly three learnable parameters with strict finite bounds: beta must lie in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5].\n11. Encourage out-of-the-box experimentation for the negative branch of f_adapt\u2014try using a nested softplus chain with an exponent in the range of 2\u20136 instead of a very high power function.\n12. Consider experimenting with a slight increase in the flexibility of the exponent modulator by incorporating additional oscillatory terms (for example, including both sin(2a) and cos(2a)), to allow a more fine\u2010tuned compression of the transformed signal.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to yield an intermediate signal. A piecewise adaptive transformation\u2014with a softened rational (ln-based) plus local quadratic correction for nonnegative values and a nested softplus chain with moderate exponent for negatives\u2014smoothly transforms the intermediate signal. This is further modulated by a dynamic threshold and an extra composite term that incorporates nested nonlinearities (including a Gaussian radial basis). The resulting signal is raised to an adaptive exponent modulated by additional oscillatory components, then linearly combined with base (beta) and scaling (gamma) parameters to yield latent utility, which is mapped via a logistic function for acceptance probability prediction. The learnable parameters (beta, gamma, phi) are strictly bounded.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from trial data (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A constant baseline offset added to the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 fixed features plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite modulated signal after sequential multiplicative sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small constant threshold for switching in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from the learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z; piecewise defined with a logarithmic and quadratic-plus-tanh term when z>=epsilon and a nested softplus chain with exponent 4 when z<epsilon\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant and augmented with a Gaussian radial basis term and nested softplus chain\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Exponent modulator that incorporates f_adapt(z) and additional oscillatory terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(|z| < 0.05)\": {\n      \"description\": \"Indicator function that equals 1 if |z| < 0.05 and 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the base preference, weighted dynamic threshold, adaptive exponentiation of f_adapt(z), and a small local correction term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter that shifts the latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the effective exponent in the transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter used to compute the weight w that scales the influence of T\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"T1\": {\n      \"description\": \"Fixed coefficient for the numerator of the Pad\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.02,\n        \"max\": 0.02,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T2\": {\n      \"description\": \"Fixed coefficient for the denominator of the Pad\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.015,\n        \"max\": 0.015,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from trial data (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A constant baseline offset added to the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 fixed features plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite modulated signal after sequential multiplicative sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small constant threshold for switching in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from the learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z; piecewise defined with a logarithmic and quadratic-plus-tanh term when z>=epsilon and a nested softplus chain with exponent 4 when z<epsilon\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant and augmented with a Gaussian radial basis term and nested softplus chain\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Exponent modulator that incorporates f_adapt(z) and additional oscillatory terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(|z| < 0.05)\": {\n      \"description\": \"Indicator function that equals 1 if |z| < 0.05 and 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the base preference, weighted dynamic threshold, adaptive exponentiation of f_adapt(z), and a small local correction term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter that shifts the latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the effective exponent in the transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter used to compute the weight w that scales the influence of T\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"T1\": {\n      \"description\": \"Fixed coefficient for the numerator of the Pad\\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.02,\n        \"max\": 0.02,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T2\": {\n      \"description\": \"Fixed coefficient for the denominator of the Pad\\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.015,\n        \"max\": 0.015,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract features\n        F = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11, default to 0 if missing\n        delta = trial.get(\"delta\", 0)\n\n        # Calculate a\n        a = sum(F) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z)\n        else:\n            softplus = lambda x: math.log(1 + math.exp(x))\n            f_adapt_z = softplus(softplus(z**4))\n\n        # Calculate T\n        T = (1 + 0.02 * z) / (1 + 0.015 * z) + math.exp(-(a - 1)**2 / (2 * (0.25)**2)) * (math.log(1 + math.exp(math.log(1 + math.exp(z)))))**2\n\n        # Calculate E\n        E = math.exp(-gamma * (f_adapt_z + math.sin(2 * a) + math.cos(2 * a)))\n\n        # Calculate I(|z| < 0.05)\n        I = 1 if abs(z) < 0.05 else 0\n\n        # Calculate U\n        U = beta + w * T * (f_adapt_z)**(E) + 0.002 * z**2 * I\n\n        # Calculate p_accept\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n```",
      "timestamp": 1743551765.558527
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base tendency parameter that shifts the latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the effective exponent in the transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter used to compute the weight w that scales the influence of T",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))",
  "variable_descriptions": {
    "F_i": {
      "description": "The i-th fixed feature extracted from trial data (for i = 1,...,11)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "A constant baseline offset added to the core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "a": {
      "description": "Core sum computed as the sum of 11 fixed features plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally scaled core sum",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite modulated signal after sequential multiplicative sinusoidal and cosine modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon": {
      "description": "Small constant threshold for switching in f_adapt",
      "range": {
        "min": 0.0001,
        "max": 0.0001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "w": {
      "description": "Weight computed from the learnable parameter phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Adaptive transformation of z; piecewise defined with a logarithmic and quadratic-plus-tanh term when z>=epsilon and a nested softplus chain with exponent 4 when z<epsilon",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed via a Pad\u00e9 approximant and augmented with a Gaussian radial basis term and nested softplus chain",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E": {
      "description": "Exponent modulator that incorporates f_adapt(z) and additional oscillatory terms",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I(|z| < 0.05)": {
      "description": "Indicator function that equals 1 if |z| < 0.05 and 0 otherwise",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed from the base preference, weighted dynamic threshold, adaptive exponentiation of f_adapt(z), and a small local correction term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted probability of acceptance obtained by applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base tendency parameter that shifts the latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the effective exponent in the transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter used to compute the weight w that scales the influence of T",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "T1": {
      "description": "Fixed coefficient for the numerator of the Pad\u00e9 approximant (dynamic threshold)",
      "range": {
        "min": 0.02,
        "max": 0.02,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "T2": {
      "description": "Fixed coefficient for the denominator of the Pad\u00e9 approximant (dynamic threshold)",
      "range": {
        "min": 0.015,
        "max": 0.015,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from trial data (for i = 1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A constant baseline offset added to the core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 fixed features plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled core sum\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite modulated signal after sequential multiplicative sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small constant threshold for switching in f_adapt\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"w\": {\n      \"description\": \"Weight computed from the learnable parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Adaptive transformation of z; piecewise defined with a logarithmic and quadratic-plus-tanh term when z>=epsilon and a nested softplus chain with exponent 4 when z<epsilon\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant and augmented with a Gaussian radial basis term and nested softplus chain\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Exponent modulator that incorporates f_adapt(z) and additional oscillatory terms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I(|z| < 0.05)\": {\n      \"description\": \"Indicator function that equals 1 if |z| < 0.05 and 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the base preference, weighted dynamic threshold, adaptive exponentiation of f_adapt(z), and a small local correction term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of acceptance obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter that shifts the latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the effective exponent in the transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter used to compute the weight w that scales the influence of T\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"T1\": {\n      \"description\": \"Fixed coefficient for the numerator of the Pad\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.02,\n        \"max\": 0.02,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T2\": {\n      \"description\": \"Fixed coefficient for the denominator of the Pad\u00e9 approximant (dynamic threshold)\",\n      \"range\": {\n        \"min\": 0.015,\n        \"max\": 0.015,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract features\n        F = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]  # F_1 to F_11, default to 0 if missing\n        delta = trial.get(\"delta\", 0)\n\n        # Calculate a\n        a = sum(F) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z)\n        else:\n            softplus = lambda x: math.log(1 + math.exp(x))\n            f_adapt_z = softplus(softplus(z**4))\n\n        # Calculate T\n        T = (1 + 0.02 * z) / (1 + 0.015 * z) + math.exp(-(a - 1)**2 / (2 * (0.25)**2)) * (math.log(1 + math.exp(math.log(1 + math.exp(z)))))**2\n\n        # Calculate E\n        E = math.exp(-gamma * (f_adapt_z + math.sin(2 * a) + math.cos(2 * a)))\n\n        # Calculate I(|z| < 0.05)\n        I = 1 if abs(z) < 0.05 else 0\n\n        # Calculate U\n        U = beta + w * T * (f_adapt_z)**(E) + 0.002 * z**2 * I\n\n        # Calculate p_accept\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5787545787545787,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 5.535329885507195,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.228431182766231,
      "gamma": 1.8970784343027782,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953315933268573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.56489268039602,
      "gamma": 7.906307871433182,
      "phi": 0.9531538983195688,
      "success": true,
      "log_likelihood": -24.951059591041783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.6794156380612908,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.8715286156832605,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.41777605111969296,
      "gamma": 0.10777523224526622,
      "phi": 1.4321214127259367,
      "success": true,
      "log_likelihood": -23.545973163849617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 2.352995327909931,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277646256212535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8149411224945865,
      "gamma": 8.092929580757538,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.91451005222506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.8112156829319241,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277643771480523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.340110740727505,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.702424799285599,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.5347616729638004,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.665664658488746,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.365367380388295,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277646357486963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.4158765175672419,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277645632090998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8631477374464558,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277646073993004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.587104787494119,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277646357655206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.730519258030038,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.277529822942842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.240273754684974,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27755314752087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1551738936587472,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277645102956276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9143749715471603,
      "gamma": 8.13164043618238,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.73061675030413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.435578689988956,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.277529845157467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.545153001487138,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.745537241893414,
      "gamma": 5.684194153514323,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.897714328526448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.096878328802237,
      "gamma": 7.949396937804599,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95332116962209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.216694094385618,
      "gamma": 2.5577543673751415,
      "phi": 1.0803465370204548,
      "success": true,
      "log_likelihood": -24.450957568494935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8497710020040745,
      "gamma": 5.329796339889939,
      "phi": 1.2564902746365105,
      "success": true,
      "log_likelihood": -24.730616750357047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.2115429607276211,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.7162354221828413,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.277553144253535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.277457442824357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.3148279548075656,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277646247750653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.1018847853123865,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.503831608635023,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.702677227532597,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.5993965311185645,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764586414282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3844729076094316,
      "gamma": 1.729608218814972,
      "phi": 1.499996076049938,
      "success": true,
      "log_likelihood": -23.54597316457525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8558613228045463,
      "gamma": 2.6972859408926553,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.15793815474339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.95827105234666,
      "gamma": 2.0110985009079956,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953302552804832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.14792576902027277,
      "gamma": 9.280084714242655,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.914510051438384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.663605520976099,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277576450094978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926487314881754,
      "gamma": 7.424274401203407,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.056945188728545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.320557823724572,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277610177905549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2579958508924614,
      "gamma": 4.793281702638339,
      "phi": 0.5053383822415981,
      "success": true,
      "log_likelihood": -24.730616750325314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265485836400004,
      "gamma": 1.3426313950277724,
      "phi": 0.5000005884139378,
      "success": true,
      "log_likelihood": -24.056945188723446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3394558213338614,
      "gamma": 0.05669081962342451,
      "phi": 1.4955558909296345,
      "success": true,
      "log_likelihood": -21.27032094452603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.085965640260531,
      "gamma": 2.3657952138457436,
      "phi": 0.5038636759115751,
      "success": true,
      "log_likelihood": -24.897714324103983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.298598342807706,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.00174551165153,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5191416093468164,
      "gamma": 1.8250076196786889,
      "phi": 0.8933706188270921,
      "success": true,
      "log_likelihood": -24.89771433695568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5238869016105296,
      "gamma": 0.749999995453125,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.157938218865393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.378463080011487,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0781300282388506,
      "gamma": 0.25002839866052545,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.89771432512132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3459917489114508,
      "gamma": 6.924171882699134,
      "phi": 1.4999995199087919,
      "success": true,
      "log_likelihood": -24.450957568494907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.8394132062017965,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.036911668506905,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.4778934909217885,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.812484106992493,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.277553147318626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 4.1328216409414225,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.2599367226610867,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.27748320598597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926547147845508,
      "gamma": 7.338435305754931,
      "phi": 0.5000006931287916,
      "success": true,
      "log_likelihood": -24.05694518872339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.2848715961487,
      "gamma": 6.572339336075751,
      "phi": 1.0773699551510614,
      "success": true,
      "log_likelihood": -24.95334390279401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.3034120740224235,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.19872336422795575,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.908462974353943,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.914366494942974,
      "gamma": 5.817395042642973,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.730616750318934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.018498682919995,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277576449901758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.32676656899310097,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.277526371728012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3174431316954067,
      "gamma": 0.37567511733209,
      "phi": 0.535931198067633,
      "success": true,
      "log_likelihood": -24.73061675030403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.526628375631941,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277576450151251,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.064746229765046,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.3152904542698334,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7450240430820334,
      "gamma": 4.954588750409937,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.897714325803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.409213602316381,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.277459937650193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.906144384362965,
      "gamma": 1.6098103539519324,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95329910348206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0010954612068157,
      "gamma": 4.3080603449745585,
      "phi": 1.0451748660135773,
      "success": true,
      "log_likelihood": -22.157938155278927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277588358608234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.2302903467954802,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.859596464248827,
      "gamma": 7.085034514603043,
      "phi": 1.4999993076624838,
      "success": true,
      "log_likelihood": -24.056945188735668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.374965148463042,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7913429723588745,
      "gamma": 5.4015596608158205,
      "phi": 0.9442662410853254,
      "success": true,
      "log_likelihood": -24.951517480742684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277566539310921,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.933967423088276,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.889924126667943,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1982766243654895,
      "gamma": 8.220691858434506,
      "phi": 0.5028271541402995,
      "success": true,
      "log_likelihood": -24.056945188723848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.128879176286533,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8561329684811233,
      "gamma": 5.684936530194427,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.157938155081414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.564813839519312,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.151051677036908,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277599752661166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.4743371477669567,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1448113681420566,
      "gamma": 3.8221333290366233,
      "phi": 0.8035094361650488,
      "success": true,
      "log_likelihood": -22.1579381621212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6470346519494811,
        "p": 3.5136513875298826e-13
      },
      "gamma": {
        "r": 0.1630610831544185,
        "p": 0.10502217825481615
      },
      "phi": {
        "r": -0.00047980704977348704,
        "p": 0.9962198394148193
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92496392406638,
  "bic_results": {
    "average_bic": 53.92496392406638,
    "individual_bics": [
      60.6585157558939,
      60.65718868190548,
      60.652675997451894,
      60.65742620704526,
      60.65733541130788,
      57.84250314306756,
      33.305849327793396,
      56.57957691981845,
      33.30584435832938,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.30584953034226,
      33.30584807955033,
      33.305848963354336,
      33.30584953067874,
      43.30561646125402,
      41.305663110410066,
      33.30584702128088,
      60.211790315976586,
      43.30561650568326,
      60.65760779852003,
      60.54598547242122,
      60.65719915461251,
      59.6524719523582,
      60.21179031608243,
      60.657880185732196,
      41.3056631038754,
      49.30547170101704,
      33.30584931086963,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.305848543653966,
      57.84250314451883,
      55.06643312485511,
      60.657161920978,
      56.579576918245095,
      39.30570971555829,
      58.86444719282542,
      60.65806177720697,
      35.30577717117943,
      60.21179031601896,
      58.86444719281522,
      53.291198704420395,
      60.5459854635763,
      60.657517002782654,
      60.65742620704526,
      60.54598548927969,
      55.06643325309912,
      60.65833416441913,
      60.54598546561097,
      59.65247195235814,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.30566311000558,
      60.65842496015652,
      47.305523227340274,
      58.864447192815106,
      60.65724462095635,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.2117903160062,
      39.305709715171844,
      43.30560955882436,
      60.21179031597639,
      39.30570971567083,
      60.65842496015652,
      60.65833416441913,
      60.54598546697433,
      49.30547669066871,
      60.65715502233245,
      55.06643312592618,
      37.305733532584796,
      60.658606551631294,
      58.86444719283966,
      60.6585157558939,
      60.6535917768537,
      39.30568989399018,
      60.65842496015652,
      60.6571538198331,
      58.86444719281603,
      60.65842496015651,
      55.06643312553116,
      60.65806177720697,
      37.30575632069066,
      60.65724461557049,
      55.06643313961074
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.647\n- gamma: r = 0.163\n- phi: r = -0.000",
  "previous_models": [
    "Specification: a = \u03a3(i=1,11) F_i + \u03b4\na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))\nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))\nw = (phi \u2212 0.5) / phi\nf_adapt(z) = { ln(1 + z) + 0.05 \u00b7 z\u00b2/(1 + z) + tanh(z)\u2003\u2003if\u2003z \u2265 0.0001\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003softplus( softplus(z\u2074) )\u2003\u2003\u2003\u2003\u2003\u2003if\u2003z < 0.0001 }\nT = (1 + 0.02 \u00b7 z)/(1 + 0.015 \u00b7 z) + exp(\u2212(a \u2212 1)\u00b2/(2 \u00b7 (0.25)\u00b2)) \u00b7 [ softplus( softplus(z) ) ]\u00b2\nE = exp( \u2212 gamma \u00b7 ( f_adapt(z) + sin(2 \u00b7 a) + cos(2 \u00b7 a) ) )\nU = beta + w \u00b7 T \u00b7 ( f_adapt(z) )^(E) + 0.002 \u00b7 z\u00b2 \u00b7 I(|z| < 0.05)\np_accept = 1/(1 + exp(\u2212U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92496392406638\nOverall Accuracy: 0.5788\n\nParameter Recovery:\n- beta: r = 0.647\n- gamma: r = 0.163\n- phi: r = -0.000"
  ]
}