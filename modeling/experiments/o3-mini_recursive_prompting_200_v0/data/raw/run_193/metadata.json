{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nWe can improve the model by recommending a softer adaptive transformation for negative outcomes (using a nested softplus chain with an exponent between 2 and 6 instead of using very high powers), and by suggesting a dynamic threshold using a Pad\u00e9 approximant with a moderated number of terms (say, k between 30 and 50). Also, let\u2019s add additional oscillatory modulation (sin and cos terms) into the exponent modulator to smooth the compression. We should also include an optional local correction term near zero to enhance sensitivity. Finally, we explicitly specify that the three learnable parameters (beta, gamma, phi) are bounded: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. This should encourage out-of\u2010the\u2010box exploration and help improve BIC and parameter recovery while increasing accuracy.\n</think>\n<new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply sinusoidal scaling:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Construct the composite signal by sequential multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function that for z \u2265 \u03b5 (set \u03b5 = 0.0001) applies a softened rational transformation augmented with a small quadratic term and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2) while for z < \u03b5 use a nested softplus chain with a moderate exponent (e.g., an exponent between 2 and 6, rather than extremely high powers).\n6. Replace the simple power series threshold T with an alternative Pad\u00e9 approximant or rational function with k adjustable between 30 and 50 to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function term such as exp(\u2013((a \u2013 1)\u00b2)/(2\u00b70.25\u00b2)) and allow stacking 2\u20134 nested softplus (or softsign) layers to robustly capture local nonlinearities.\n8. In the exponent modulator, incorporate additional oscillatory components (for example, include both sin(2a) and cos(2a)) to more smoothly compress extreme values.\n9. Optionally add a mild local correction term (e.g. a small multiple of z\u00b2 when |z| is very small) to boost sensitivity in that region.\n10. Ensure exactly three learnable parameters with strict finite bounds:\u2003beta \u2208 [\u201310, 10],\u2003gamma \u2208 [0, 10],\u2003phi \u2208 [0.5, 1.5].\n11. Encourage innovation, especially in the negative branch of f_adapt: explore a nested softplus chain with an exponent in the range 2\u20136.\n12. Finally, allow the exponent modulator to flexibly combine both sin() and cos() terms (e.g., sin(2a) and cos(2a)) for fine\u2010tuned compression.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to yield an intermediate signal. A piecewise adaptive transformation then softly maps the signal using a rational (ln\u2010based) plus local quadratic correction for nonnegative values, while employing a nested softplus chain with a moderate exponent for negative values. The result is further stabilized by a dynamic threshold using a Pad\u00e9 approximant (with k between 30 and 50) and enhanced by an extra composite term featuring a Gaussian radial basis function and stacked softplus layers. The final transformed signal is raised to an adaptive exponent modulated by additional oscillatory terms and combined linearly with base (beta) and scaling (gamma) parameters. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], and phi \u2208 [0.5,1.5]) are used. This design is aimed at reducing BIC, improving parameter recovery, and increasing predictive accuracy.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nWe can improve the model by recommending a softer adaptive transformation for negative outcomes (using a nested softplus chain with an exponent between 2 and 6 instead of using very high powers), and by suggesting a dynamic threshold using a Pad\u00e9 approximant with a moderated number of terms (say, k between 30 and 50). Also, let\u2019s add additional oscillatory modulation (sin and cos terms) into the exponent modulator to smooth the compression. We should also include an optional local correction term near zero to enhance sensitivity. Finally, we explicitly specify that the three learnable parameters (beta, gamma, phi) are bounded: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. This should encourage out-of\u2010the\u2010box exploration and help improve BIC and parameter recovery while increasing accuracy.\n</think>\n<new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Apply sinusoidal scaling:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Construct the composite signal by sequential multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), use a piecewise function that for z \u2265 \u03b5 (set \u03b5 = 0.0001) applies a softened rational transformation augmented with a small quadratic term and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2) while for z < \u03b5 use a nested softplus chain with a moderate exponent (e.g., an exponent between 2 and 6, rather than extremely high powers).\n6. Replace the simple power series threshold T with an alternative Pad\u00e9 approximant or rational function with k adjustable between 30 and 50 to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function term such as exp(\u2013((a \u2013 1)\u00b2)/(2\u00b70.25\u00b2)) and allow stacking 2\u20134 nested softplus (or softsign) layers to robustly capture local nonlinearities.\n8. In the exponent modulator, incorporate additional oscillatory components (for example, include both sin(2a) and cos(2a)) to more smoothly compress extreme values.\n9. Optionally add a mild local correction term (e.g. a small multiple of z\u00b2 when |z| is very small) to boost sensitivity in that region.\n10. Ensure exactly three learnable parameters with strict finite bounds:\u2003beta \u2208 [\u201310, 10],\u2003gamma \u2208 [0, 10],\u2003phi \u2208 [0.5, 1.5].\n11. Encourage innovation, especially in the negative branch of f_adapt: explore a nested softplus chain with an exponent in the range 2\u20136.\n12. Finally, allow the exponent modulator to flexibly combine both sin() and cos() terms (e.g., sin(2a) and cos(2a)) for fine\u2010tuned compression.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and applies sequential sinusoidal and cosine modulations to yield an intermediate signal. A piecewise adaptive transformation then softly maps the signal using a rational (ln\u2010based) plus local quadratic correction for nonnegative values, while employing a nested softplus chain with a moderate exponent for negative values. The result is further stabilized by a dynamic threshold using a Pad\u00e9 approximant (with k between 30 and 50) and enhanced by an extra composite term featuring a Gaussian radial basis function and stacked softplus layers. The final transformed signal is raised to an adaptive exponent modulated by additional oscillatory terms and combined linearly with base (beta) and scaling (gamma) parameters. Three learnable parameters (beta \u2208 [\u201310,10], gamma \u2208 [0,10], and phi \u2208 [0.5,1.5]) are used. This design is aimed at reducing BIC, improving parameter recovery, and increasing predictive accuracy.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Final utility driving the responder's decision\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base intercept parameter for utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the composite signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the exponent weight in the oscillatory term\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Eleven distinct fixed features extracted from the trial (i=1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Baseline offset added to the sum over features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and baseline offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold (\u03b5) for the piecewise adaptive transformation\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, softens negative outcomes via a nested softplus chain when z is below epsilon and applies a logarithmic\u2010rational transformation when nonnegative\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Fixed degree for the Pad\u00e9 approximant used in thresholding (set between 30 and 50; here k=40)\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant rational function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Gaussian radial basis function term capturing local nonlinearity near a = 1\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Stacked nested softplus transformation of a (with two layers)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Additional oscillatory modulator combining sin(2a) and cos(2a)\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"L\": {\n      \"description\": \"Mild local correction term added when |z| is very small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Q\": {\n      \"description\": \"Composite signal combining the adaptive transformation and additional modulations (threshold T, oscillatory term, Gaussian RBF, nested softplus S, and local correction L)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Final utility driving the responder's decision\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base intercept parameter for utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the composite signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the exponent weight in the oscillatory term\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Eleven distinct fixed features extracted from the trial (i=1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Baseline offset added to the sum over features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and baseline offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold (\\u03b5) for the piecewise adaptive transformation\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, softens negative outcomes via a nested softplus chain when z is below epsilon and applies a logarithmic\\u2010rational transformation when nonnegative\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Fixed degree for the Pad\\u00e9 approximant used in thresholding (set between 30 and 50; here k=40)\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant rational function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Gaussian radial basis function term capturing local nonlinearity near a = 1\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Stacked nested softplus transformation of a (with two layers)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Additional oscillatory modulator combining sin(2a) and cos(2a)\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"L\": {\n      \"description\": \"Mild local correction term added when |z| is very small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Q\": {\n      \"description\": \"Composite signal combining the adaptive transformation and additional modulations (threshold T, oscillatory term, Gaussian RBF, nested softplus S, and local correction L)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values, handling missing keys by assuming 0\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]\n\n        # Calculate a\n        a = sum(F_values) + trial.get(\"delta\", 0)  # Using delta since \u03b4 is difficult to type, defaulting to 0\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            f_adapt_z = math.log(1 + math.exp(math.log(1 + math.exp(z**4))))\n\n        # Calculate T\n        T = (1 + z / 40) / (1 + z / 40 + (z / 40)**2)\n\n        # Calculate R\n        R = math.exp(-((a - 1)**2) / (2 * 0.0625))\n\n        # Calculate S\n        S = math.log(1 + math.exp(math.log(1 + math.exp(a))))\n\n        # Calculate M\n        M = math.sin(2 * a) + math.cos(2 * a)\n\n        # Calculate L\n        if abs(z) < 0.001:\n            L = 0.01 * z**2\n        else:\n            L = 0\n\n        # Calculate Q\n        Q = f_adapt_z * (T + w * M + R + S) + L\n\n        # Calculate U\n        U = beta + gamma * Q\n\n        # Calculate P(accept=1)\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 5.0, \"split_self\": 15.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 8.0, \"split_self\": 12.0, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 8.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=1, gamma=1, phi=1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743551836.771532
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base intercept parameter for utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter multiplying the composite signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the exponent weight in the oscillatory term",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))",
  "variable_descriptions": {
    "U": {
      "description": "Final utility driving the responder's decision",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base intercept parameter for utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter multiplying the composite signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter modulating the exponent weight in the oscillatory term",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "F_i": {
      "description": "Eleven distinct fixed features extracted from the trial (i=1,...,11)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Baseline offset added to the sum over features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed from the 11 features and baseline offset",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally scaled version of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal after sequential multiplicative modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight factor computed from phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon": {
      "description": "Small positive threshold (\u03b5) for the piecewise adaptive transformation",
      "range": {
        "min": 0.0001,
        "max": 0.0001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z, softens negative outcomes via a nested softplus chain when z is below epsilon and applies a logarithmic\u2010rational transformation when nonnegative",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "k": {
      "description": "Fixed degree for the Pad\u00e9 approximant used in thresholding (set between 30 and 50; here k=40)",
      "range": {
        "min": 30,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "T": {
      "description": "Dynamic threshold computed via a Pad\u00e9 approximant rational function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R": {
      "description": "Gaussian radial basis function term capturing local nonlinearity near a = 1",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S": {
      "description": "Stacked nested softplus transformation of a (with two layers)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M": {
      "description": "Additional oscillatory modulator combining sin(2a) and cos(2a)",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "L": {
      "description": "Mild local correction term added when |z| is very small",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Q": {
      "description": "Composite signal combining the adaptive transformation and additional modulations (threshold T, oscillatory term, Gaussian RBF, nested softplus S, and local correction L)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Final utility driving the responder's decision\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base intercept parameter for utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter multiplying the composite signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter modulating the exponent weight in the oscillatory term\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"F_i\": {\n      \"description\": \"Eleven distinct fixed features extracted from the trial (i=1,...,11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Baseline offset added to the sum over features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and baseline offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal after sequential multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon\": {\n      \"description\": \"Small positive threshold (\u03b5) for the piecewise adaptive transformation\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 0.0001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, softens negative outcomes via a nested softplus chain when z is below epsilon and applies a logarithmic\u2010rational transformation when nonnegative\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Fixed degree for the Pad\u00e9 approximant used in thresholding (set between 30 and 50; here k=40)\",\n      \"range\": {\n        \"min\": 30,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant rational function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Gaussian radial basis function term capturing local nonlinearity near a = 1\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Stacked nested softplus transformation of a (with two layers)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Additional oscillatory modulator combining sin(2a) and cos(2a)\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"L\": {\n      \"description\": \"Mild local correction term added when |z| is very small\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Q\": {\n      \"description\": \"Composite signal combining the adaptive transformation and additional modulations (threshold T, oscillatory term, Gaussian RBF, nested softplus S, and local correction L)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i values, handling missing keys by assuming 0\n        F_values = [trial.get(f\"F_{i}\", 0) for i in range(1, 12)]\n\n        # Calculate a\n        a = sum(F_values) + trial.get(\"delta\", 0)  # Using delta since \u03b4 is difficult to type, defaulting to 0\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (\n            1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (\n            1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate w\n        w = (phi - 0.5) / phi\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            f_adapt_z = math.log(1 + math.exp(math.log(1 + math.exp(z**4))))\n\n        # Calculate T\n        T = (1 + z / 40) / (1 + z / 40 + (z / 40)**2)\n\n        # Calculate R\n        R = math.exp(-((a - 1)**2) / (2 * 0.0625))\n\n        # Calculate S\n        S = math.log(1 + math.exp(math.log(1 + math.exp(a))))\n\n        # Calculate M\n        M = math.sin(2 * a) + math.cos(2 * a)\n\n        # Calculate L\n        if abs(z) < 0.001:\n            L = 0.01 * z**2\n        else:\n            L = 0\n\n        # Calculate Q\n        Q = f_adapt_z * (T + w * M + R + S) + L\n\n        # Calculate U\n        U = beta + gamma * Q\n\n        # Calculate P(accept=1)\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5604395604395604,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.990265097255381,
      "gamma": 6.529056525359339,
      "phi": 1.453236524283904,
      "success": true,
      "log_likelihood": -29.277245942151048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5021819591589605,
      "gamma": 0.15422207625253173,
      "phi": 0.815692703469015,
      "success": true,
      "log_likelihood": -24.897714643157983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.578883805390364,
      "gamma": 3.537926845973731,
      "phi": 0.501520262832102,
      "success": true,
      "log_likelihood": -31.277339247503733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.7487317125896276,
      "gamma": 6.0529715987326576,
      "phi": 0.5826603922191729,
      "success": true,
      "log_likelihood": -24.27742067095373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.765987011178597,
      "gamma": 9.826365241777568,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277420746639836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.977251151301019,
      "gamma": 1.3002744693486457,
      "phi": 1.125339206440097,
      "success": true,
      "log_likelihood": -22.91451005146832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1825790552785023,
      "gamma": 5.900360847765659,
      "phi": 1.340201198704027,
      "success": true,
      "log_likelihood": -11.277420808615473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5507795853208409,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.6209835398561965,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.8485697797926851,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.060824569492371,
      "gamma": 6.807818545528823,
      "phi": 0.8863111142118921,
      "success": true,
      "log_likelihood": -11.277421952984048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4588746577236265,
      "gamma": 5.645019802594231,
      "phi": 1.1581214859919884,
      "success": true,
      "log_likelihood": -11.277420893171202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.766017375885848,
      "gamma": 6.708537547626468,
      "phi": 1.4945211733774402,
      "success": true,
      "log_likelihood": -11.277420745848577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.395333874421649,
      "gamma": 4.9880242480212935,
      "phi": 1.2269265616991145,
      "success": true,
      "log_likelihood": -11.277420873399818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.400256949032563,
      "gamma": 5.568745586974498,
      "phi": 0.9940818992140822,
      "success": true,
      "log_likelihood": -16.277420751834345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.080591774186561,
      "gamma": 1.940292187105644,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.277433901589516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9833168987194725,
      "gamma": 5.127240608489007,
      "phi": 1.1284781923668668,
      "success": true,
      "log_likelihood": -11.277421898673568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.615191979208634,
      "gamma": 2.0958050136370345,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.730616750323822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.5070560597597975,
      "gamma": 9.6164782223423,
      "phi": 1.3201794965515559,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.7282226029389416,
      "gamma": 6.478560192446745,
      "phi": 1.0587285718105053,
      "success": true,
      "log_likelihood": -34.277416529601226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.258720446668001,
      "gamma": 0.7820507849946946,
      "phi": 0.8901144103291254,
      "success": true,
      "log_likelihood": -24.89771433646726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.50991095301144,
      "gamma": 6.460086846609982,
      "phi": 1.1078200219407728,
      "success": true,
      "log_likelihood": -29.277135491299518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.9964552357969,
      "gamma": 5.277840774896845,
      "phi": 0.8914644022727506,
      "success": true,
      "log_likelihood": -26.277101332765728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.65427498346997,
      "gamma": 0.7953046146964217,
      "phi": 1.132811848200236,
      "success": true,
      "log_likelihood": -27.27731268830775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.267589019068092,
      "gamma": 5.753312633260914,
      "phi": 0.9625668883684712,
      "success": true,
      "log_likelihood": -15.277420751402902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.3207533334913695,
      "gamma": 8.257522651151724,
      "phi": 0.8460316466000831,
      "success": true,
      "log_likelihood": -19.277420743854282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.576789786917352,
      "gamma": 7.6481053970916175,
      "phi": 0.5768001036394629,
      "success": true,
      "log_likelihood": -11.27742074574472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.276692054619458,
      "gamma": 2.3812890740482695,
      "phi": 0.6541355529755678,
      "success": true,
      "log_likelihood": -44.276699847978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.953247949867949,
      "gamma": 7.542965871107041,
      "phi": 1.2286184148964447,
      "success": true,
      "log_likelihood": -11.277420745769748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.756166653648136,
      "gamma": 6.98576907344939,
      "phi": 0.9489195868802451,
      "success": true,
      "log_likelihood": -24.277400012220074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.561376051461236,
      "gamma": 2.391106843562393,
      "phi": 1.2653898707152877,
      "success": true,
      "log_likelihood": -22.157965340446065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.6091051534878622,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953313931189008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8150046303049324,
      "gamma": 0.0,
      "phi": 0.9466583278037652,
      "success": true,
      "log_likelihood": -22.914510054494244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.434229636469407,
      "gamma": 8.402766027554927,
      "phi": 1.1986533242751651,
      "success": true,
      "log_likelihood": -14.277420745027932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.023698300516011,
      "gamma": 1.6547877277845369,
      "phi": 0.5042201448195319,
      "success": true,
      "log_likelihood": -24.056945188730065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.4840645026589296,
      "gamma": 6.680589986490677,
      "phi": 0.6063130163216807,
      "success": true,
      "log_likelihood": -12.277420760504224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8469406969233544,
      "gamma": 3.11129138742998,
      "phi": 0.6308215210746253,
      "success": true,
      "log_likelihood": -27.277045105506055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.345209064964813,
      "gamma": 8.340312404510744,
      "phi": 1.271845054573948,
      "success": true,
      "log_likelihood": -25.27741989814441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.894423259974087,
      "gamma": 3.316786061182393,
      "phi": 1.4337676415426162,
      "success": true,
      "log_likelihood": -21.270343074248032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.84537642327656,
      "gamma": 1.0806578577593158,
      "phi": 0.9125045068822764,
      "success": true,
      "log_likelihood": -28.27728210691331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.954616265072753,
      "gamma": 1.7719011585287026,
      "phi": 1.2711191340714314,
      "success": true,
      "log_likelihood": -33.27725587153176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.666369079523091,
      "gamma": 2.489692569467437,
      "phi": 0.9834338037534176,
      "success": true,
      "log_likelihood": -28.277399544579286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.3938471118879923,
      "gamma": 1.346185148125713,
      "phi": 1.1090665783302016,
      "success": true,
      "log_likelihood": -22.15793817189064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.8750001061951,
      "gamma": 1.6076479739710738,
      "phi": 1.3045805667488792,
      "success": true,
      "log_likelihood": -24.897714328817038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.461930479451719,
      "gamma": 1.6384951689176614,
      "phi": 0.501269752354596,
      "success": true,
      "log_likelihood": -24.450957569303345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.483366382456978,
      "gamma": 6.340843214842077,
      "phi": 0.6822109138543252,
      "success": true,
      "log_likelihood": -15.277420745013538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.54174744815184,
      "gamma": 5.126528161829275,
      "phi": 1.3408672243222712,
      "success": true,
      "log_likelihood": -18.27742086739841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.342664947337048,
      "gamma": 2.1280917510707225,
      "phi": 1.0673950846644191,
      "success": true,
      "log_likelihood": -24.05694518872366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.118189799286422,
      "gamma": 2.37974815140257,
      "phi": 1.0143494013749434,
      "success": true,
      "log_likelihood": -29.276321547438428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.362937404424033,
      "gamma": 7.81587337527365,
      "phi": 0.6045089489078727,
      "success": true,
      "log_likelihood": -31.277418009073234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.051033574377371,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.247453469466611,
      "gamma": 1.0485568694553003e-06,
      "phi": 0.5095370431656691,
      "success": true,
      "log_likelihood": -24.730616750319037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.57963037878919,
      "gamma": 9.369013498816518,
      "phi": 0.9961574645902532,
      "success": true,
      "log_likelihood": -14.277420745026559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7470657806274605,
      "gamma": 7.778494563663376,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.277420961652147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.282281064364815,
      "gamma": 0.7913389756343066,
      "phi": 0.6612798378139025,
      "success": true,
      "log_likelihood": -24.730617265785487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.631689052579169,
      "gamma": 5.625926477382509,
      "phi": 0.8518747197791562,
      "success": true,
      "log_likelihood": -14.277420746618525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.673530144319097,
      "gamma": 7.75474495985867,
      "phi": 1.0302351866163677,
      "success": true,
      "log_likelihood": -43.27741048287397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.435444678540124,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.897714325471586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1385549349715713,
      "gamma": 9.319154379420734,
      "phi": 1.3426528749252715,
      "success": true,
      "log_likelihood": -19.277420743855277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.247191720250022,
      "gamma": 0.3723159992117307,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953300210746246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.997223821720627,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.15793815957642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.569178509234636,
      "gamma": 7.378494000444179,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277428172808992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.389028198849216,
      "gamma": 1.8384566406767966,
      "phi": 0.9502742831585739,
      "success": true,
      "log_likelihood": -24.056945188739842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2679693499419753,
      "gamma": 4.691680713740168,
      "phi": 0.6379579953329473,
      "success": true,
      "log_likelihood": -28.27695648896116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.060947199502564,
      "gamma": 3.1195558789259827,
      "phi": 0.972907587230747,
      "success": true,
      "log_likelihood": -14.277420855234556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.243441211243816,
      "gamma": 3.6243919697240288,
      "phi": 0.6723815344700547,
      "success": true,
      "log_likelihood": -43.277410773587576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.360341033389186,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953311895591227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1835077649573043,
      "gamma": 0.7663696993651473,
      "phi": 0.6809219356812038,
      "success": true,
      "log_likelihood": -24.05694518926986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.48518795497508,
      "gamma": 7.4466078803615945,
      "phi": 0.5591636165889586,
      "success": true,
      "log_likelihood": -43.277419291721884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5231678957921926,
      "gamma": 0.0,
      "phi": 0.8094354518307908,
      "success": true,
      "log_likelihood": -22.15793815692252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.4484441762328295,
      "gamma": 6.08874820804301,
      "phi": 1.3527791431704765,
      "success": true,
      "log_likelihood": -13.277420745314272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.52260517173318,
      "gamma": 3.3064160965082197,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.157938167895136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.04959802999461299,
        "p": 0.6241010839833194
      },
      "gamma": {
        "r": 0.162009810635711,
        "p": 0.1073133107690901
      },
      "phi": {
        "r": 0.03490152168100813,
        "p": 0.7302956426746514
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 56.94011901213974,
  "bic_results": {
    "average_bic": 56.94011901213974,
    "individual_bics": [
      60.6585157558939,
      69.30504869967042,
      60.54598610168429,
      60.65742620704526,
      73.30523531037579,
      59.30539815727579,
      33.305398308648,
      56.579576918304966,
      33.305398432599276,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.305400721336426,
      33.305398601710735,
      33.30539830706549,
      33.305398562167966,
      43.305398319037025,
      41.30542461854736,
      33.30540061271547,
      60.21179031601598,
      43.305398304481216,
      79.30538987457078,
      60.54598548830285,
      69.30482779796736,
      63.30475948089979,
      65.30518219198383,
      60.657880185732196,
      41.305398318174134,
      49.3053983030769,
      33.30539830685777,
      99.30395651132433,
      60.65742620704526,
      60.657517002782654,
      33.305398306907826,
      59.30535683980848,
      55.066487496260464,
      60.65718467774634,
      56.579576924356815,
      39.30539830542419,
      58.864447192828464,
      60.65806177720697,
      35.30539833637678,
      65.30464702638044,
      61.305396611657144,
      53.29124296386439,
      67.30512102919495,
      77.30506855843184,
      60.65742620704526,
      67.3053559045269,
      55.06643315914961,
      60.65833416441913,
      60.5459854730024,
      59.652471953975024,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.30539830539541,
      60.65842496015652,
      47.30539855016515,
      58.864447192815646,
      69.30319991024518,
      60.6585157558939,
      73.3053928335148,
      60.65806177720697,
      60.2117903160064,
      39.30539830542145,
      43.30539873867262,
      60.21179134693931,
      39.305398308605376,
      97.30537778111626,
      60.65833416441913,
      60.54598546631151,
      49.30539830307889,
      60.657157236860826,
      55.066433134521176,
      37.30541316098632,
      60.658606551631294,
      58.86444719284802,
      60.6585157558939,
      67.30446979329065,
      39.30539852583745,
      97.30537836254348,
      60.65718060655078,
      58.86444719390805,
      97.3053953988121,
      55.066433129213365,
      60.65806177720697,
      37.305398305996874,
      60.65724461557049,
      55.066433151158606
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.050\n- gamma: r = 0.162\n- phi: r = 0.035",
  "previous_models": [
    "Specification: a = \u2211[i=1 to 11] F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nw = (phi \u2013 0.5) / phi  \nf_adapt(z) = { ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2\u2003\u2003if z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp( ln(1 + exp( z^(4) ) )) )\u2003\u2003\u2003\u2003\u2003if z < 0.0001 }  \nT = (1 + z/40) / (1 + z/40 + (z/40)\u00b2)  \nR = exp( \u2013 ((a \u2013 1)\u00b2) / (2 \u00b7 0.0625) )  \nS = ln(1 + exp( ln(1 + exp(a) ) ))  \nM = sin(2\u00b7a) + cos(2\u00b7a)  \nL = { 0.01\u00b7z\u00b2\u2003\u2003if |z| < 0.001  \n\u2003\u2003\u20030\u2003\u2003\u2003\u2003otherwise }  \nQ = f_adapt(z) \u00b7 ( T + w \u00b7 M + R + S ) + L  \nU = beta + gamma \u00b7 Q  \nP(accept=1) = 1 / (1 + exp( \u2013 U ))\nSummary: \nTarget Variable: accept\nPrediction Type: utility\nBIC: 56.94011901213974\nOverall Accuracy: 0.5604\n\nParameter Recovery:\n- beta: r = 0.050\n- gamma: r = 0.162\n- phi: r = 0.035"
  ]
}