{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Scale a with a sinusoidal factor:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Build a composite signal by sequential, multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. Use a piecewise adaptive transformation f_adapt(z) as follows:\n\u2003\u2003\u2022 For nonnegative z (z \u2265 0.0001), apply a softened rational transformation that combines ln(1+z) with a small quadratic correction and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2). \n\u2003\u2003\u2022 For very small or negative z (z < 0.0001), use a nested softplus chain with a moderate exponent (preferably between 2 and 6) so as to avoid extreme sensitivity.\n6. Replace a simple power series for the dynamic threshold T with a moderately long Pad\u00e9 approximant (using k in the range of 30 to 50) to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00b7(0.25)\u00b2))) and optionally stack 2\u20134 nested softplus (or softsign) layers to capture local nonlinearities.\n8. In the exponent modulator, include additional oscillatory terms such as sin(2a) and cos(2a) (and possibly sin(3a) or cos(3a)) to smooth the compression of extreme values.\n9. Optionally introduce a small local correction (such as 0.001\u00b7z\u00b2 added when |z| is very small) to enhance sensitivity near zero.\n10. Constrain the three learnable parameters strictly:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\n11. Encourage exploration in the negative branch of f_adapt by adjusting the number of nested softplus layers or by altering the exponent (preferably between 2 and 6) so that the model is less harsh on small negative signals.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and scales it sinusoidally before applying sequential multiplicative modulations to form an intermediate signal. A piecewise adaptive function then softly transforms this signal\u2014using a rational (ln\u2010based) plus quadratic correction for nonnegative values and a nested softplus chain for negative values. A dynamic threshold is computed via a Pad\u00e9 approximant (with 30\u201350 terms) and an extra composite term, enriched with a Gaussian radial basis and additional oscillatory modifiers, further refines the signal. Finally, the result is raised to an adaptive exponent modulated by sin and cos terms and linearly combined with three bounded learnable parameters (beta in [\u201310,10], gamma in [0,10], and phi in [0.5,1.5]). This design is intended to improve accuracy, reduce BIC, and enhance parameter recovery.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Scale a with a sinusoidal factor:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Build a composite signal by sequential, multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. Use a piecewise adaptive transformation f_adapt(z) as follows:\n\u2003\u2003\u2022 For nonnegative z (z \u2265 0.0001), apply a softened rational transformation that combines ln(1+z) with a small quadratic correction and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2). \n\u2003\u2003\u2022 For very small or negative z (z < 0.0001), use a nested softplus chain with a moderate exponent (preferably between 2 and 6) so as to avoid extreme sensitivity.\n6. Replace a simple power series for the dynamic threshold T with a moderately long Pad\u00e9 approximant (using k in the range of 30 to 50) to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00b7(0.25)\u00b2))) and optionally stack 2\u20134 nested softplus (or softsign) layers to capture local nonlinearities.\n8. In the exponent modulator, include additional oscillatory terms such as sin(2a) and cos(2a) (and possibly sin(3a) or cos(3a)) to smooth the compression of extreme values.\n9. Optionally introduce a small local correction (such as 0.001\u00b7z\u00b2 added when |z| is very small) to enhance sensitivity near zero.\n10. Constrain the three learnable parameters strictly:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\n11. Encourage exploration in the negative branch of f_adapt by adjusting the number of nested softplus layers or by altering the exponent (preferably between 2 and 6) so that the model is less harsh on small negative signals.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and scales it sinusoidally before applying sequential multiplicative modulations to form an intermediate signal. A piecewise adaptive function then softly transforms this signal\u2014using a rational (ln\u2010based) plus quadratic correction for nonnegative values and a nested softplus chain for negative values. A dynamic threshold is computed via a Pad\u00e9 approximant (with 30\u201350 terms) and an extra composite term, enriched with a Gaussian radial basis and additional oscillatory modifiers, further refines the signal. Finally, the result is raised to an adaptive exponent modulated by sin and cos terms and linearly combined with three bounded learnable parameters (beta in [\u201310,10], gamma in [0,10], and phi in [0.5,1.5]). This design is intended to improve accuracy, reduce BIC, and enhance parameter recovery.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \\u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"token_self\", 0)\n        F2 = trial.get(\"token_opp\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_self\", 0)\n        F5 = trial.get(\"split_opp\", 0)\n        F6 = trial.get(\"splitperc_self\", 0)\n        F7 = trial.get(\"splitperc_opp\", 0)\n        F8 = trial.get(\"accepted_amount\", 0)\n        F9 = trial.get(\"accepted_perc\", 0)\n        F10 = trial.get(\"proposed_perc\", 0)\n        F11 = trial.get(\"trial_type\", 0)\n\n        # Core sum\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n\n        # Sinusoidally scaled version of the core sum a\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Composite signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Weight factor\n        w = (phi - 0.5) / phi\n\n        # Piecewise adaptive transformation of z\n        if z >= 0.0001:\n            f_adapt = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            softplus = lambda x: math.log(1 + math.exp(x))\n            f_adapt = softplus(softplus(z**gamma))\n\n        # Dynamic threshold\n        T_numerator = sum(a**j for j in range(31))\n        T_denominator = 1 + sum(a**j for j in range(1, 31))\n        T = T_numerator / T_denominator if T_denominator != 0 else 0\n\n        # Extra composite term\n        softplus = lambda x: math.log(1 + math.exp(x))\n        E = math.exp(-((a - 1)**2) / (2 * (0.25)**2)) * softplus(softplus(a))\n\n        # Modulation factor\n        M = (T + E) * (1 + w * math.sin(2 * a) + w * math.cos(2 * a) + w * math.sin(3 * a) + w * math.cos(3 * a))\n\n        # Utility\n        U = beta + gamma * f_adapt * M\n\n        # Predicted probability\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 11, \"token_self\": 11, \"combined_earning\": 22, \"split_opp\": 5.5, \"split_self\": 5.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 11.0, \"accepted_perc\": 100.0, \"proposed_perc\": 50.0, \"proposed_amount\": 11.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 14, \"token_self\": 14, \"combined_earning\": 28, \"split_opp\": 11.2, \"split_self\": 2.8, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 2.8}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 13, \"token_self\": 13, \"combined_earning\": 26, \"split_opp\": 10.4, \"split_self\": 2.6, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 2.6}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 4, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 15, \"token_self\": 15, \"combined_earning\": 30, \"split_opp\": 7.5, \"split_self\": 7.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 100.0, \"proposed_perc\": 50.0, \"proposed_amount\": 7.5}, {\"ID\": 4, \"group\": \"treatment\", \"trial_number\": 5, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 9, \"token_self\": 9, \"combined_earning\": 18, \"split_opp\": 7.2, \"split_self\": 1.8, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 1.8}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743551915.867667
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \\u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1743551916.3989482
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \\u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.5, gamma=0.5, phi=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"token_self\", None)\n        F2 = trial.get(\"token_opp\", None)\n        F3 = trial.get(\"combined_earning\", None)\n        F4 = trial.get(\"split_self\", None)\n        F5 = trial.get(\"split_opp\", None)\n        F6 = trial.get(\"splitperc_self\", None)\n        F7 = trial.get(\"splitperc_opp\", None)\n        F8 = trial.get(\"accepted_amount\", None)\n        F9 = trial.get(\"accepted_perc\", None)\n        F10 = trial.get(\"proposed_perc\", None)\n        F11 = trial.get(\"trial_type\", None)\n        \n        # Handle missing feature data by skipping the trial\n        if any(f is None for f in [F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11]):\n            print(f\"Skipping trial due to missing feature data: {trial.get('ID')}\")\n            model_predictions.append(None)  # Or some other placeholder\n            continue\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        w = (phi - 0.5) / phi\n\n        if z >= 0.0001:\n            f_adapt = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            def softplus(x):\n                return math.log(1 + math.exp(x))\n            f_adapt = softplus(softplus(z**gamma))\n\n        T_numerator = sum(a**j for j in range(31))\n        T_denominator = 1 + sum(a**j for j in range(1, 31))\n        T = T_numerator / T_denominator\n        \n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        E = math.exp(-((a - 1)**2) / (2*(0.25)**2)) * softplus(softplus(a))\n        M = (T + E) * (1 + w * math.sin(2*a) + w * math.cos(2*a) + w * math.sin(3*a) + w * math.cos(3*a))\n        U = beta + gamma * f_adapt * M\n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=0.5, gamma=0.5, phi=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743551922.42022
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \\u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1743551922.932278
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \\u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1743551923.352128
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base offset parameter incorporated in the core sum and utility; influences overall bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Feature 1 derived from a dataset variable (e.g., token_self)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Feature 2 derived from a dataset variable (e.g., token_opp)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Feature 3 derived from a dataset variable (e.g., combined_earning)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Feature 4 derived from a dataset variable (e.g., split_self)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Feature 5 derived from a dataset variable (e.g., split_opp)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Feature 6 derived from a dataset variable (e.g., splitperc_self)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Feature 7 derived from a dataset variable (e.g., splitperc_opp)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Feature 8 derived from a dataset variable (e.g., accepted_amount)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Feature 9 derived from a dataset variable (e.g., accepted_perc)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Feature 10 derived from a dataset variable (e.g., proposed_perc)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "categorical (converted to numeric)",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Base offset parameter incorporated in the core sum and utility; influences overall bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "a": {
      "description": "Core sum computed from the 11 features and beta offset",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Sinusoidally scaled version of the core sum a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal obtained by sequential multiplicative modulations of a_mod",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight factor computed from phi that scales oscillatory corrections",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \u2265 0.0001, and a nested softplus chain for z < 0.0001",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold computed via a Pad\u00e9 approximant with 31 terms (j=0,...,30) applied to a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E": {
      "description": "Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M": {
      "description": "Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Predicted probability for accepting the proposal, obtained by applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Feature 1 derived from a dataset variable (e.g., token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Feature 2 derived from a dataset variable (e.g., token_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Feature 3 derived from a dataset variable (e.g., combined_earning)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Feature 4 derived from a dataset variable (e.g., split_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Feature 5 derived from a dataset variable (e.g., split_opp)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Feature 6 derived from a dataset variable (e.g., splitperc_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Feature 7 derived from a dataset variable (e.g., splitperc_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Feature 8 derived from a dataset variable (e.g., accepted_amount)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Feature 9 derived from a dataset variable (e.g., accepted_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Feature 10 derived from a dataset variable (e.g., proposed_perc)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Feature 11 derived from a dataset variable (e.g., trial_type coded numerically)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"categorical (converted to numeric)\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base offset parameter incorporated in the core sum and utility; influences overall bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the contribution of the transformed composite signal to utility and serving as the exponent in the adaptive branch for negative z\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Modulator controlling the weight factor w in the oscillatory influences; influences the balance of local oscillatory corrections\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from the 11 features and beta offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Sinusoidally scaled version of the core sum a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained by sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight factor computed from phi that scales oscillatory corrections\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Piecewise adaptive transformation of z; uses a logarithmic plus quadratic correction and tanh for z \u2265 0.0001, and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant with 31 terms (j=0,...,30) applied to a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers capturing local nonlinearities\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Modulation factor combining the dynamic threshold T, extra composite term E, and additional oscillatory terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal computed as a linear combination of beta and the transformed composite signal; subsequently transformed into a choice probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability for accepting the proposal, obtained by applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 65, in <module>\n    results = simulate_model(data, beta=0.5, gamma=0.5, phi=0.5)\n  File \"<string>\", line 22, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
      "timestamp": 1743551915.92551
    },
    {
      "retry_number": 1,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1743551916.3990111
    },
    {
      "retry_number": 2,
      "error": "JSON parsing error: Expecting value: line 1 column 1 (char 0)\nOutput: Skipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\nSkipping trial due to missing feature data: 1001\n{\"results\": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]}\n",
      "timestamp": 1743551922.4715168
    },
    {
      "retry_number": 3,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1743551922.9323268
    },
    {
      "retry_number": 4,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1743551923.352155
    }
  ],
  "current_retry": 4,
  "simulation_error": "Failed after maximum retries",
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"token_self\", 0)\n        F2 = trial.get(\"token_opp\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_self\", 0)\n        F5 = trial.get(\"split_opp\", 0)\n        F6 = trial.get(\"splitperc_self\", 0)\n        F7 = trial.get(\"splitperc_opp\", 0)\n        F8 = trial.get(\"accepted_amount\", 0)\n        F9 = trial.get(\"accepted_perc\", 0)\n        F10 = trial.get(\"proposed_perc\", 0)\n        F11 = trial.get(\"trial_type\", 0)\n\n        # Core sum\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n\n        # Sinusoidally scaled version of the core sum a\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Composite signal\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Weight factor\n        w = (phi - 0.5) / phi\n\n        # Piecewise adaptive transformation of z\n        if z >= 0.0001:\n            f_adapt = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            softplus = lambda x: math.log(1 + math.exp(x))\n            f_adapt = softplus(softplus(z**gamma))\n\n        # Dynamic threshold\n        T_numerator = sum(a**j for j in range(31))\n        T_denominator = 1 + sum(a**j for j in range(1, 31))\n        T = T_numerator / T_denominator if T_denominator != 0 else 0\n\n        # Extra composite term\n        softplus = lambda x: math.log(1 + math.exp(x))\n        E = math.exp(-((a - 1)**2) / (2 * (0.25)**2)) * softplus(softplus(a))\n\n        # Modulation factor\n        M = (T + E) * (1 + w * math.sin(2 * a) + w * math.cos(2 * a) + w * math.sin(3 * a) + w * math.cos(3 * a))\n\n        # Utility\n        U = beta + gamma * f_adapt * M\n\n        # Predicted probability\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 5,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1002: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1004: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1005: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1007: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1008: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1010: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1012: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1013: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1015: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1016: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1017: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1018: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1019: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1020: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1022: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1023: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1024: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1026: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1027: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1029: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1030: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1031: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1032: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1033: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1034: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1035: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1037: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1038: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1040: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1041: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1042: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 1044: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2001: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2002: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2003: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2005: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2006: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2007: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2008: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2009: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2012: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2014: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2015: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2016: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2017: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2019: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2020: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2021: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2022: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2023: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2024: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2025: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2026: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2027: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2028: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2029: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2030: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2031: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2032: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2035: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2036: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2038: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2039: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2040: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2041: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2042: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2043: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2044: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2045: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2046: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2047: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']",
    "Error fitting participant 2048: Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: ['Initial objective value is not finite: nan', 'Initial objective value is not finite: nan', 'Initial objective value is not finite: nan']"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: a = (\u03a3[i=1:11] F_i) + beta  \na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))  \nz = a_mod * (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))) * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \nw = (phi - 0.5) / phi  \nf_adapt = { ln(1+z) + 0.05 * z^2/(1+z) + tanh(z) + 0.001 * z^2    if z \u2265 0.0001  \n            softplus( softplus( z^gamma ) )                      if z < 0.0001 }  \nT = (\u03a3[j=0:30] a^j) / (1 + \u03a3[j=1:30] a^j)  \nE = exp( -((a - 1)^2) / (2*(0.25)^2) ) * softplus( softplus(a) )  \nM = (T + E) * (1 + w * sin(2*a) + w * cos(2*a) + w * sin(3*a) + w * cos(3*a))  \nU = beta + gamma * f_adapt * M  \nP_accept = 1 / (1 + exp(-U))\nSummary: \nTarget Variable: accept\nPrediction Type: utility"
  ]
}