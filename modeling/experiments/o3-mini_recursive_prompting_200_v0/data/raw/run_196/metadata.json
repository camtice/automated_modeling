{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Scale a with a sinusoidal factor:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Build a composite signal by sequential, multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. Use a piecewise adaptive transformation f_adapt(z) as follows:\n\u2003\u2003\u2022 For nonnegative z (z \u2265 0.0001), apply a softened rational transformation that combines ln(1+z) with a small quadratic correction and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2). \n\u2003\u2003\u2022 For very small or negative z (z < 0.0001), use a nested softplus chain with a moderate exponent (preferably between 2 and 6) so as to avoid extreme sensitivity.\n6. Replace a simple power series for the dynamic threshold T with a moderately long Pad\u00e9 approximant (using k in the range of 30 to 50) to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00b7(0.25)\u00b2))) and optionally stack 2\u20134 nested softplus (or softsign) layers to capture local nonlinearities.\n8. In the exponent modulator, include additional oscillatory terms such as sin(2a) and cos(2a) (and possibly sin(3a) or cos(3a)) to smooth the compression of extreme values.\n9. Optionally introduce a small local correction (such as 0.001\u00b7z\u00b2 added when |z| is very small) to enhance sensitivity near zero.\n10. Constrain the three learnable parameters strictly:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\n11. Encourage exploration in the negative branch of f_adapt by adjusting the number of nested softplus layers or by altering the exponent (preferably between 2 and 6) so that the model is less harsh on small negative signals.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and scales it sinusoidally before applying sequential multiplicative modulations to form an intermediate signal. A piecewise adaptive function then softly transforms this signal\u2014using a rational (ln\u2010based) plus quadratic correction for nonnegative values and a nested softplus chain for negative values. A dynamic threshold is computed via a Pad\u00e9 approximant (with 30\u201350 terms) and an extra composite term, enriched with a Gaussian radial basis and additional oscillatory modifiers, further refines the signal. Finally, the result is raised to an adaptive exponent modulated by sin and cos terms and linearly combined with three bounded learnable parameters (beta in [\u201310,10], gamma in [0,10], and phi in [0.5,1.5]). This design is intended to improve accuracy, reduce BIC, and enhance parameter recovery.\n</SUMMARY>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <new_instructions>\n1. Compute the core sum:\u2003a = \u03a3[i=1 to 11] F\u1d62 + \u03b4.\n2. Scale a with a sinusoidal factor:\u2003a_mod = 1.08 \u00d7 a \u00d7 [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Build a composite signal by sequential, multiplicative modulations:\n\u2003\u2003z = a_mod \u00d7 [1 + 0.008 \u00d7 cos(a + 0.065)] \u00d7 [1 + 0.005 \u00d7 sin(a + 0.115)] \u00d7 [1 + 0.004 \u00d7 cos(a + 0.085)] \u00d7 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))] \u00d7 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n4. Define the weight:\u2003w = (phi \u2013 0.5) / phi.\n5. Use a piecewise adaptive transformation f_adapt(z) as follows:\n\u2003\u2003\u2022 For nonnegative z (z \u2265 0.0001), apply a softened rational transformation that combines ln(1+z) with a small quadratic correction and softsign smoothing (e.g., f_adapt = ln(1+z) + 0.05\u00b7z\u00b2/(1+z) + tanh(z) + 0.001\u00b7z\u00b2). \n\u2003\u2003\u2022 For very small or negative z (z < 0.0001), use a nested softplus chain with a moderate exponent (preferably between 2 and 6) so as to avoid extreme sensitivity.\n6. Replace a simple power series for the dynamic threshold T with a moderately long Pad\u00e9 approximant (using k in the range of 30 to 50) to stabilize T.\n7. In the extra composite term, incorporate a Gaussian radial basis function (e.g. exp(\u2013((a\u20131)\u00b2)/(2\u00b7(0.25)\u00b2))) and optionally stack 2\u20134 nested softplus (or softsign) layers to capture local nonlinearities.\n8. In the exponent modulator, include additional oscillatory terms such as sin(2a) and cos(2a) (and possibly sin(3a) or cos(3a)) to smooth the compression of extreme values.\n9. Optionally introduce a small local correction (such as 0.001\u00b7z\u00b2 added when |z| is very small) to enhance sensitivity near zero.\n10. Constrain the three learnable parameters strictly:\n\u2003\u2003beta \u2208 [\u201310, 10],\n\u2003\u2003gamma \u2208 [0, 10],\n\u2003\u2003phi \u2208 [0.5, 1.5].\n11. Encourage exploration in the negative branch of f_adapt by adjusting the number of nested softplus layers or by altering the exponent (preferably between 2 and 6) so that the model is less harsh on small negative signals.\n</new_instructions>\n<SUMMARY>\nThe model computes a core sum from 11 fixed features and scales it sinusoidally before applying sequential multiplicative modulations to form an intermediate signal. A piecewise adaptive function then softly transforms this signal\u2014using a rational (ln\u2010based) plus quadratic correction for nonnegative values and a nested softplus chain for negative values. A dynamic threshold is computed via a Pad\u00e9 approximant (with 30\u201350 terms) and an extra composite term, enriched with a Gaussian radial basis and additional oscillatory modifiers, further refines the signal. Finally, the result is raised to an adaptive exponent modulated by sin and cos terms and linearly combined with three bounded learnable parameters (beta in [\u201310,10], gamma in [0,10], and phi in [0.5,1.5]). This design is intended to improve accuracy, reduce BIC, and enhance parameter recovery.\n</SUMMARY>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from the trial (e.g., contributions, splits, tokens, trial type, etc.) for i=1,...,11\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the core sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features plus an offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Core sum scaled by a sinusoidal factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained from sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Piecewise adaptive transformation of z; using a softened rational function for z \u2265 0.0001 and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T(a)\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant of order 40 on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ECT\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers to capture local nonlinearities\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from the learnable parameter \u03c6, defined as (\u03c6 - 0.5) / \u03c6\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Exponent modulator including additional oscillatory terms, computed as exp(sin(2a) + cos(2a) + sin(3a))\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"LC\": {\n      \"description\": \"Local correction to enhance sensitivity near zero; added as 0.001 \u00b7 z\u00b2 when |z| < 0.0001\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Aggregated signal combining the adaptive transformation, dynamic threshold, extra composite term, and local correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Learnable base bias parameter representing the inherent tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Learnable scaling parameter that modulates the aggregated signal S\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Learnable parameter controlling the weight w, constrained to ensure 0.5 \u2264 \u03c6 \u2264 1.5\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting a proposal, computed as \u03b2 + \u03b3 \u00b7 w \u00b7 S^M\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function with temperature = 1 applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from the trial (e.g., contributions, splits, tokens, trial type, etc.) for i=1,...,11\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Constant offset added to the core sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features plus an offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Core sum scaled by a sinusoidal factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained from sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Piecewise adaptive transformation of z; using a softened rational function for z \\u2265 0.0001 and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T(a)\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant of order 40 on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ECT\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers to capture local nonlinearities\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from the learnable parameter \\u03c6, defined as (\\u03c6 - 0.5) / \\u03c6\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Exponent modulator including additional oscillatory terms, computed as exp(sin(2a) + cos(2a) + sin(3a))\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"LC\": {\n      \"description\": \"Local correction to enhance sensitivity near zero; added as 0.001 \\u00b7 z\\u00b2 when |z| < 0.0001\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Aggregated signal combining the adaptive transformation, dynamic threshold, extra composite term, and local correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b2\": {\n      \"description\": \"Learnable base bias parameter representing the inherent tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Learnable scaling parameter that modulates the aggregated signal S\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Learnable parameter controlling the weight w, constrained to ensure 0.5 \\u2264 \\u03c6 \\u2264 1.5\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting a proposal, computed as \\u03b2 + \\u03b3 \\u00b7 w \\u00b7 S^M\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function with temperature = 1 applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract F_i features from trial data\n        F = [\n            trial.get(\"token_opp\", 0),\n            trial.get(\"token_self\", 0),\n            trial.get(\"combined_earning\", 0),\n            trial.get(\"split_opp\", 0),\n            trial.get(\"split_self\", 0),\n            trial.get(\"splitperc_opp\", 0),\n            trial.get(\"splitperc_self\", 0),\n            trial.get(\"proposed_perc\", 0),\n            trial.get(\"proposed_amount\", 0),\n            trial.get(\"trial_type\", 0),\n            trial.get(\"trial_role\", 0)\n        ]  # Features - fill these dynamically from trial\n        delta = 0 #Constant offset added to the core sum of features\n\n        # Calculate 'a'\n        a = sum(F) + delta\n\n        # Calculate a_mod\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Calculate z\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        # Calculate f_adapt(z)\n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            f_adapt_z = math.log(1 + math.exp(4 * math.log(1 + math.exp(4 * z))))\n\n        # Calculate T(a)\n        T_a = sum(a**j for j in range(41)) / (1 + sum(a**j for j in range(1, 41)))\n\n        # Calculate ECT\n        ECT = math.exp(-((a - 1)**2) / (2 * (0.25)**2)) * math.log(1 + math.exp(math.log(1 + math.exp(a))))\n\n        # Calculate w\n        w = (\u03c6 - 0.5) / \u03c6\n\n        # Calculate M\n        M = math.exp(math.sin(2 * a) + math.cos(2 * a) + math.sin(3 * a))\n\n        # Calculate LC\n        if abs(z) < 0.0001:\n            LC = 0.001 * z**2\n        else:\n            LC = 0\n\n        # Calculate S\n        S = f_adapt_z + T_a + ECT + LC\n\n        # Calculate U\n        U = \u03b2 + \u03b3 * w * (S)**M\n\n        # Calculate P(accept = 1)\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n```",
      "timestamp": 1743552049.192414
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from the trial (e.g., contributions, splits, tokens, trial type, etc.) for i=1,...,11\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Constant offset added to the core sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features plus an offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Core sum scaled by a sinusoidal factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained from sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Piecewise adaptive transformation of z; using a softened rational function for z \\u2265 0.0001 and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T(a)\": {\n      \"description\": \"Dynamic threshold computed via a Pad\\u00e9 approximant of order 40 on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ECT\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers to capture local nonlinearities\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from the learnable parameter \\u03c6, defined as (\\u03c6 - 0.5) / \\u03c6\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Exponent modulator including additional oscillatory terms, computed as exp(sin(2a) + cos(2a) + sin(3a))\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"LC\": {\n      \"description\": \"Local correction to enhance sensitivity near zero; added as 0.001 \\u00b7 z\\u00b2 when |z| < 0.0001\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Aggregated signal combining the adaptive transformation, dynamic threshold, extra composite term, and local correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b2\": {\n      \"description\": \"Learnable base bias parameter representing the inherent tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Learnable scaling parameter that modulates the aggregated signal S\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Learnable parameter controlling the weight w, constrained to ensure 0.5 \\u2264 \\u03c6 \\u2264 1.5\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting a proposal, computed as \\u03b2 + \\u03b3 \\u00b7 w \\u00b7 S^M\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function with temperature = 1 applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "</target_variable>\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        F = [trial.get(f\"F_{i}\", 0.0) for i in range(1, 12)]\n        delta = trial.get(\"delta\", 0.0)  # Assuming delta is available in the trial data or defaults to 0\n        a = sum(F) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        \n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            f_adapt_z = math.log(1 + math.exp(4 * math.log(1 + math.exp(4 * z))))\n            \n        T_a = sum(a**j for j in range(0, 41)) / (1 + sum(a**j for j in range(1, 41)))\n        ECT = math.exp(-((a - 1)**2) / (2 * (0.25)**2)) * math.log(1 + math.exp(math.log(1 + math.exp(a))))\n        w = (\u03c6 - 0.5) / \u03c6\n        M = math.exp(math.sin(2 * a) + math.cos(2 * a) + math.sin(3 * a))\n        \n        if abs(z) < 0.0001:\n            LC = 0.001 * z**2\n        else:\n            LC = 0\n            \n        S = f_adapt_z + T_a + ECT + LC\n        U = \u03b2 + \u03b3 * w * (S)**M\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 13, \"token_self\": 7, \"combined_earning\": 20, \"split_opp\": 0.7, \"split_self\": 0.3, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 70.0, \"proposed_amount\": 13.0}, {\"ID\": 2, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 13, \"combined_earning\": 20, \"split_opp\": 0.3, \"split_self\": 0.7, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 13.0, \"accepted_perc\": 70.0, \"proposed_perc\": 30.0, \"proposed_amount\": 7.0}, {\"ID\": 3, \"group\": \"group1\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 13, \"token_self\": 7, \"combined_earning\": 20, \"split_opp\": 0.7, \"split_self\": 0.3, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 70.0, \"proposed_amount\": 13.0}]'\ndata = json.loads(data_json)\n\n# Add dummy F_i and delta values for testing purposes\nfor i, trial in enumerate(data):\n    for j in range(1, 12):\n        trial[f\"F_{j}\"] = float(i + j)  # Add some dummy values\n    trial[\"delta\"] = float(i)\n\n# Get results for the data\nresults = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.7)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743552055.2350342
    }
  ],
  "learnable_parameters": {
    "\u03b2": {
      "description": "Learnable base bias parameter representing the inherent tendency to accept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Learnable scaling parameter that modulates the aggregated signal S",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Learnable parameter controlling the weight w, constrained to ensure 0.5 \u2264 \u03c6 \u2264 1.5",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))",
  "variable_descriptions": {
    "F_i": {
      "description": "The i-th fixed feature extracted from the trial (e.g., contributions, splits, tokens, trial type, etc.) for i=1,...,11",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "empirical",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Constant offset added to the core sum of features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of 11 features plus an offset",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_mod": {
      "description": "Core sum scaled by a sinusoidal factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Composite signal obtained from sequential multiplicative modulations of a_mod",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt(z)": {
      "description": "Piecewise adaptive transformation of z; using a softened rational function for z \u2265 0.0001 and a nested softplus chain for z < 0.0001",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T(a)": {
      "description": "Dynamic threshold computed via a Pad\u00e9 approximant of order 40 on a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "ECT": {
      "description": "Extra composite term incorporating a Gaussian radial basis function and nested softplus layers to capture local nonlinearities",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Weight derived from the learnable parameter \u03c6, defined as (\u03c6 - 0.5) / \u03c6",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M": {
      "description": "Exponent modulator including additional oscillatory terms, computed as exp(sin(2a) + cos(2a) + sin(3a))",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "LC": {
      "description": "Local correction to enhance sensitivity near zero; added as 0.001 \u00b7 z\u00b2 when |z| < 0.0001",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S": {
      "description": "Aggregated signal combining the adaptive transformation, dynamic threshold, extra composite term, and local correction",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b2": {
      "description": "Learnable base bias parameter representing the inherent tendency to accept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Learnable scaling parameter that modulates the aggregated signal S",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Learnable parameter controlling the weight w, constrained to ensure 0.5 \u2264 \u03c6 \u2264 1.5",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting a proposal, computed as \u03b2 + \u03b3 \u00b7 w \u00b7 S^M",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P(accept = 1)": {
      "description": "Probability of accepting the proposal computed via the logistic function with temperature = 1 applied to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F_i\": {\n      \"description\": \"The i-th fixed feature extracted from the trial (e.g., contributions, splits, tokens, trial type, etc.) for i=1,...,11\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"distribution\": {\n        \"type\": \"empirical\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Constant offset added to the core sum of features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of 11 features plus an offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_mod\": {\n      \"description\": \"Core sum scaled by a sinusoidal factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Composite signal obtained from sequential multiplicative modulations of a_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt(z)\": {\n      \"description\": \"Piecewise adaptive transformation of z; using a softened rational function for z \u2265 0.0001 and a nested softplus chain for z < 0.0001\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T(a)\": {\n      \"description\": \"Dynamic threshold computed via a Pad\u00e9 approximant of order 40 on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"ECT\": {\n      \"description\": \"Extra composite term incorporating a Gaussian radial basis function and nested softplus layers to capture local nonlinearities\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Weight derived from the learnable parameter \u03c6, defined as (\u03c6 - 0.5) / \u03c6\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M\": {\n      \"description\": \"Exponent modulator including additional oscillatory terms, computed as exp(sin(2a) + cos(2a) + sin(3a))\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"LC\": {\n      \"description\": \"Local correction to enhance sensitivity near zero; added as 0.001 \u00b7 z\u00b2 when |z| < 0.0001\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Aggregated signal combining the adaptive transformation, dynamic threshold, extra composite term, and local correction\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Learnable base bias parameter representing the inherent tendency to accept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Learnable scaling parameter that modulates the aggregated signal S\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Learnable parameter controlling the weight w, constrained to ensure 0.5 \u2264 \u03c6 \u2264 1.5\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting a proposal, computed as \u03b2 + \u03b3 \u00b7 w \u00b7 S^M\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P(accept = 1)\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function with temperature = 1 applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: a = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\nSummary: \nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 75, in <module>\n    results = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5)\n              ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<string>\", line 26, in simulate_model\n    a = sum(F) + delta\n        ~~~^^^\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
      "timestamp": 1743552049.266078
    }
  ],
  "current_retry": 1,
  "simulation_error": "Traceback (most recent call last):\n  File \"<string>\", line 75, in <module>\n    results = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5)\n              ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<string>\", line 26, in simulate_model\n    a = sum(F) + delta\n        ~~~^^^\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
  "simulation_code": "def simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        F = [trial.get(f\"F_{i}\", 0.0) for i in range(1, 12)]\n        delta = trial.get(\"delta\", 0.0)  # Assuming delta is available in the trial data or defaults to 0\n        a = sum(F) + delta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        z = a_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        \n        if z >= 0.0001:\n            f_adapt_z = math.log(1 + z) + 0.05 * z**2 / (1 + z) + math.tanh(z) + 0.001 * z**2\n        else:\n            f_adapt_z = math.log(1 + math.exp(4 * math.log(1 + math.exp(4 * z))))\n            \n        T_a = sum(a**j for j in range(0, 41)) / (1 + sum(a**j for j in range(1, 41)))\n        ECT = math.exp(-((a - 1)**2) / (2 * (0.25)**2)) * math.log(1 + math.exp(math.log(1 + math.exp(a))))\n        w = (\u03c6 - 0.5) / \u03c6\n        M = math.exp(math.sin(2 * a) + math.cos(2 * a) + math.sin(3 * a))\n        \n        if abs(z) < 0.0001:\n            LC = 0.001 * z**2\n        else:\n            LC = 0\n            \n        S = f_adapt_z + T_a + ECT + LC\n        U = \u03b2 + \u03b3 * w * (S)**M\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 1,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5396825396825398,
  "fitting_results": [
    {
      "\u03b2": 6.639563706299903,
      "\u03b3": 2.893212207557323,
      "\u03c6": 0.6428262402774152,
      "success": true,
      "log_likelihood": -44.27742073797483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.762670215577134,
      "\u03b3": 0.0,
      "\u03c6": 0.8804932260626686,
      "success": true,
      "log_likelihood": -24.95330449402048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.975613703268988,
      "\u03b3": 0.8782777789215686,
      "\u03c6": 1.2468411270435897,
      "success": true,
      "log_likelihood": -28.27741911987726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.6330485576992544,
      "\u03b3": 4.214249484394452,
      "\u03c6": 0.665302829330153,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.811147754355703,
      "\u03b3": 2.5742582712196094,
      "\u03c6": 0.7339620671239685,
      "success": true,
      "log_likelihood": -31.277420740578293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.183096903136928,
      "\u03b3": 2.5500770716398122,
      "\u03c6": 0.8739410408768457,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.23959781279442183,
      "\u03b3": 7.41776127994327,
      "\u03c6": 0.6338919108560781,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.6859011187604023,
      "\u03b3": 0.1566020160757653,
      "\u03c6": 0.6652372300485678,
      "success": true,
      "log_likelihood": -22.914510051913727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.44038532584142587,
      "\u03b3": 3.905278390556095,
      "\u03c6": 1.0804695494291827,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.9976286123358378,
      "\u03b3": 4.245409539751423,
      "\u03c6": 0.6251126931522931,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.0,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.3122730611592264,
      "\u03b3": 6.335152431109941,
      "\u03c6": 1.1154781918099932,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.400702655906974,
      "\u03b3": 8.991390990575498,
      "\u03c6": 0.9145008587832917,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.154630911966344,
      "\u03b3": 9.573292661478737,
      "\u03c6": 0.6356559349861483,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.656089324414845,
      "\u03b3": 9.411111493783126,
      "\u03c6": 0.7200074215637309,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.513974414022032,
      "\u03b3": 5.212121251090414,
      "\u03c6": 1.2921965192710836,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.394843630873336,
      "\u03b3": 8.567309395582095,
      "\u03c6": 1.3021733110012286,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.3621198465032762,
      "\u03b3": 8.712763753956827,
      "\u03c6": 1.2266701537399494,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.085638689827604,
      "\u03b3": 8.027441984851329,
      "\u03c6": 1.3999797158927705,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.2295444995496574,
      "\u03b3": 7.8535251951116125,
      "\u03c6": 0.6029146049388375,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.881901049493965,
      "\u03b3": 6.858908570188512,
      "\u03c6": 1.3923072509040741,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.4910863232579548,
      "\u03b3": 2.389908524763106,
      "\u03c6": 1.2297811881207572,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.405562359477322,
      "\u03b3": 7.587579242991714,
      "\u03c6": 0.8213449166456991,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.594956981425572,
      "\u03b3": 4.334324199554679,
      "\u03c6": 1.4810948230897756,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.015531534492318,
      "\u03b3": 6.95437193185589,
      "\u03c6": 1.4148063312313401,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.191266226545174,
      "\u03b3": 0.04487768580441953,
      "\u03c6": 0.9197389293647723,
      "success": true,
      "log_likelihood": -26.277174807431372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.55409277607179,
      "\u03b3": 0.42537060797685095,
      "\u03c6": 1.0312234929256738,
      "success": true,
      "log_likelihood": -27.277316136980907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.05451440111582,
      "\u03b3": 7.002117922691,
      "\u03c6": 1.3013835054630705,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0033475953755566,
      "\u03b3": 10.0,
      "\u03c6": 1.5,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.790601163671408,
      "\u03b3": 9.64562171034096,
      "\u03c6": 0.7766409157409948,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 4.413477379271795,
      "\u03b3": 8.639683673858709,
      "\u03c6": 1.1330651917858758,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.4337336227588615,
      "\u03b3": 5.550963801469583,
      "\u03c6": 1.422507529243093,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.0,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.0492773007764757,
      "\u03b3": 9.89980615644487,
      "\u03c6": 0.6769448934808547,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.8579388724356,
      "\u03b3": 5.072874347045469,
      "\u03c6": 1.4659845356178254,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.176665896026175,
      "\u03b3": 0.2070914923215396,
      "\u03c6": 1.131900627259021,
      "success": true,
      "log_likelihood": -23.54597316395835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.203472702888471,
      "\u03b3": 5.573672932780162,
      "\u03c6": 0.9627491340192168,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.155680937399598,
      "\u03b3": 6.473764033538617,
      "\u03c6": 1.367422177985052,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.662743837107392,
      "\u03b3": 1.0319279993007024,
      "\u03c6": 0.8710801978392281,
      "success": true,
      "log_likelihood": -23.277420742783743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.178842900488618,
      "\u03b3": 4.117975684713109,
      "\u03c6": 0.7714211215152663,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.812135355223958,
      "\u03b3": 1.918694625140418,
      "\u03c6": 1.0319524376947937,
      "success": true,
      "log_likelihood": -25.27742074244033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.962322002219873,
      "\u03b3": 1.6454235699359354,
      "\u03c6": 0.9992632629452505,
      "success": true,
      "log_likelihood": -39.27742073826914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.376192679736423,
      "\u03b3": 3.2461549963530123,
      "\u03c6": 0.8750894664917815,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.506742614013412,
      "\u03b3": 4.618728858420908,
      "\u03c6": 0.6043354783991821,
      "success": true,
      "log_likelihood": -27.27742073827633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265067184159076,
      "\u03b3": 0.7442731332670377,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.056945188725003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.215952888123807,
      "\u03b3": 3.91610702151419,
      "\u03c6": 0.5255236543685186,
      "success": true,
      "log_likelihood": -21.277420330386327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0778079136982486,
      "\u03b3": 0.0,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.897714333979927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.401072060657672,
      "\u03b3": 7.3928299775029185,
      "\u03c6": 1.1344119102390624,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.149241347784206,
      "\u03b3": 0.8805716551749336,
      "\u03c6": 1.4179894688971766,
      "success": true,
      "log_likelihood": -32.27741670271119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.1885399324407544,
      "\u03b3": 8.837280561395591,
      "\u03c6": 1.2856708571691033,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.493320099678392,
      "\u03b3": 8.797795237876855,
      "\u03c6": 0.6884914754739603,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.25396732320075,
      "\u03b3": 6.638805390462882,
      "\u03c6": 1.051141079220605,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.422048509770375,
      "\u03b3": 0.2270733710411536,
      "\u03c6": 1.2818127815553113,
      "success": true,
      "log_likelihood": -24.897714324107117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.865134808168108,
      "\u03b3": 2.9692976777488966,
      "\u03c6": 0.6609997407631667,
      "success": true,
      "log_likelihood": -26.277420742206026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.9965595372597527,
      "\u03b3": 6.428025887778634,
      "\u03c6": 0.934973347082656,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.579873454170713,
      "\u03b3": 7.153529341248772,
      "\u03c6": 0.9240391417141831,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.8214999685986344,
      "\u03b3": 0.37884882757673805,
      "\u03c6": 1.3378063636072077,
      "success": true,
      "log_likelihood": -37.2773180082001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.080932878910161,
      "\u03b3": 4.584432221577195,
      "\u03c6": 1.5,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.866591440273478,
      "\u03b3": 9.977445109116275,
      "\u03c6": 1.0025122584465762,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.713652235277959,
      "\u03b3": 7.106864490625884,
      "\u03c6": 0.9332139831178996,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.1258453244214515,
      "\u03b3": 6.492185922914117,
      "\u03c6": 0.8445438408557869,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.968577881303705,
      "\u03b3": 8.47503885881038,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953302470050673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.0,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.648806249196868,
      "\u03b3": 3.2963653232360377,
      "\u03c6": 1.4706213628207112,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.3332419134188687,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.627769330962357,
      "\u03b3": 2.1193287330506605,
      "\u03c6": 1.4360261083113528,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.529205334348653,
      "\u03b3": 6.2940740980830565,
      "\u03c6": 1.417751377912604,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.0259446945267197,
      "\u03b3": 5.27993552877399,
      "\u03c6": 0.6793565197926816,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.5228541004053877,
      "\u03b3": 1.0176628419246003,
      "\u03c6": 1.4285288237469125,
      "success": true,
      "log_likelihood": -27.277420741940144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.424762605643398,
      "\u03b3": 9.246644661081747,
      "\u03c6": 1.3697807172776693,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.8502054526057972,
      "\u03b3": 6.793587372029863,
      "\u03c6": 0.7314125552036758,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.197447900214605,
      "\u03b3": 5.075487131082054,
      "\u03c6": 0.9525860132760207,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.494640305203665,
      "\u03b3": 0.7786560120123984,
      "\u03c6": 1.210416749021023,
      "success": true,
      "log_likelihood": -28.277314311853843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.617020732983063,
      "\u03b3": 7.422552546544208,
      "\u03c6": 1.3401158906136659,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.228597335370019,
      "\u03b3": 1.7548687479966183,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953315927485438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.479986317368778,
      "\u03b3": 0.7743329442037586,
      "\u03c6": 0.5823637103797547,
      "success": true,
      "log_likelihood": -22.277409870435434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.680217385417297,
      "\u03b3": 6.807342629697794,
      "\u03c6": 1.1708581865284788,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.0,
      "\u03c6": 1.398083365313665,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.907505139559479,
      "\u03b3": 4.844203664849221,
      "\u03c6": 0.6281650269077639,
      "success": true,
      "log_likelihood": -25.277420742441052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.496609275192275,
      "\u03b3": 9.585973096490601,
      "\u03c6": 1.410908859506145,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.162656968473058,
      "\u03b3": 7.94621673438648,
      "\u03c6": 1.382434666651351,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.6437889922882505,
      "\u03b3": 5.313694601734433,
      "\u03c6": 1.3018048974179361,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.0,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.817970612272829,
      "\u03b3": 3.981196576826141,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.953298591561445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.16779183841255,
      "\u03b3": 0.3319916994587413,
      "\u03c6": 1.324848939195998,
      "success": true,
      "log_likelihood": -24.056945188778375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.804194863807556,
      "\u03b3": 5.882575211839084,
      "\u03c6": 0.9526318252954559,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.473860297484187,
      "\u03b3": 3.2703013460269603,
      "\u03c6": 1.1084197941003038,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 4.88912975468933,
      "\u03c6": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.810791900609686,
      "\u03b3": 2.9334639717582878,
      "\u03c6": 0.9702242528337824,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.225396873412587,
      "\u03b3": 0.5729984700542445,
      "\u03c6": 1.4586931954089977,
      "success": true,
      "log_likelihood": -30.27742071674224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.199012290891613,
      "\u03b3": 5.415309207996367,
      "\u03c6": 1.4468076212455543,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "\u03b2": {
        "r": 0.08204726428840386,
        "p": 0.41706323317456423
      },
      "\u03b3": {
        "r": -0.12423872397702933,
        "p": 0.2181190499984813
      },
      "\u03c6": {
        "r": 0.15520726395569703,
        "p": 0.12309327087912421
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 61.50633372439089,
  "bic_results": {
    "average_bic": 61.50633372439089,
    "individual_bics": [
      99.30539829131799,
      60.657165803409285,
      67.30539505512284,
      75.30539829695991,
      73.30539829652491,
      59.30539830072057,
      33.305398306831634,
      56.57957691919579,
      33.305398306831634,
      77.30539829648983,
      60.65733541130787,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30490643023107,
      65.30518908933014,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      60.65742620704526,
      77.30539829648983,
      33.305398306831634,
      57.84250314328503,
      55.30539830166073,
      69.30539829837015,
      57.30539830093582,
      39.30539830542139,
      61.305398300248996,
      89.30539829190661,
      35.305398306361546,
      65.305398291921,
      58.86444719281833,
      53.30539747614098,
      60.54598548332818,
      77.30539829648983,
      75.30539022079071,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      60.54598546358257,
      63.30539829978038,
      77.30539829648983,
      81.30539829554967,
      85.30519283176852,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      60.65716175546967,
      60.6585157558939,
      73.30539829742999,
      60.65806177720697,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829924862,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30518543907601,
      49.30539830307097,
      60.65718867033921,
      55.305376556239196,
      37.30539830589146,
      60.658606551631294,
      61.30539830025043,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      60.65842496015652,
      60.657153998491225,
      58.864447192925084,
      97.30539829178902,
      55.30539830166073,
      60.65806177720697,
      37.30539830589146,
      71.30539824885281,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- \u03b2: r = 0.082\n- \u03b3: r = -0.124\n- \u03c6: r = 0.155",
  "previous_models": [
    "Specification: a = \u03a3_{i=1}^{11} F_i + \u03b4  \na_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045))  \nz = a_mod \u00b7 (1 + 0.008 \u00b7 cos(a + 0.065)) \u00b7 (1 + 0.005 \u00b7 sin(a + 0.115)) \u00b7 (1 + 0.004 \u00b7 cos(a + 0.085)) \u00b7 (1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))) \u00b7 (1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05)))  \nf_adapt(z) = { ln(1+z) + 0.05 \u00b7 z\u00b2/(1+z) + tanh(z) + 0.001 \u00b7 z\u00b2,\u2003if\u2003z \u2265 0.0001  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003ln(1 + exp(4 \u00b7 ln(1 + exp(4 \u00b7 z)))),\u2003if\u2003z < 0.0001 }  \nT(a) = ( \u03a3_{j=0}^{40} a^j ) / ( 1 + \u03a3_{j=1}^{40} a^j )  \nECT = exp( -((a - 1)\u00b2) / (2 \u00b7 (0.25)\u00b2) ) \u00b7 ln(1 + exp( ln(1 + exp(a)) ))  \nw = (\u03c6 - 0.5) / \u03c6  \nM = exp( sin(2a) + cos(2a) + sin(3a) )  \nLC = { 0.001 \u00b7 z\u00b2,\u2003if\u2003|z| < 0.0001  \n\u2003\u2003\u2003\u20030,\u2003otherwise }  \nS = f_adapt(z) + T(a) + ECT + LC  \nU = \u03b2 + \u03b3 \u00b7 w \u00b7 (S)^M  \nP(accept = 1) = 1 / (1 + exp( -U ))\nSummary: \nTarget Variable: accept\nPrediction Type: utility\nBIC: 61.50633372439089\nOverall Accuracy: 0.5397\n\nParameter Recovery:\n- \u03b2: r = 0.082\n- \u03b3: r = -0.124\n- \u03c6: r = 0.155"
  ]
}