{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nWe want to update the instructions to encourage smoother transformations in the negative regime and to improve overall performance (accuracy, lower BIC, better parameter recovery). We want to suggest using a two\u2010layer softplus (or logistic) function for z<\u03b5 instead of an overly aggressive power law, and tweak oscillatory terms and dynamic thresholds. We also want to suggest that the exponent modulator be gently modulated to preserve local variation, and encourage experimenting with more flexible Pad\u00e9 approximants or finite polynomial series for T. We also want to have a clear specification of strict finite bounds; we restate \u03b2, \u03b3 and \u03c6 bounds. We encourage the use of out-of-the-box nonlinear mixtures like blending softplus and logistic functions, and mention to experiment with lower effective exponents in the negative regime to improve parameter recovery.\n</think>\n\nNew Instructions for run 199 of 200:\n1. Compute the core sum as a = \u03a3[i=1 to 11] F[i] + beta, where each fixed feature F[i] is first normalized to avoid excessive scaling.\n2. Scale a using a sinusoidal modulation: set a_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045)).\n3. Construct the composite signal z = a_mod multiplied by successive oscillatory factors: [1 + 0.008 \u00b7 cos(a + 0.065)], [1 + 0.005 \u00b7 sin(a + 0.115)], [1 + 0.004 \u00b7 cos(a + 0.085)], [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))], and [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))].\n4. Define the weight: w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), design a smooth function that:\n\u2003\u2003\u2022 For z \u2265 \u03b5 (choose \u03b5 around 1e\u20133), blends a logarithmic transformation with a small quadratic correction and tanh damping (for instance: f_adapt(z) = ln(1+z) + k\u2081\u00b7(z\u00b2/(1+z)) + tanh(z)), where k\u2081 around 0.05.\n\u2003\u2003\u2022 For z < \u03b5, instead of aggressive power\u2010law transformation, apply a two\u2010layer softplus or logistic function (e.g., f_adapt(z) = ln(1 + exp(\u03bb\u00b7z))/\u03bb, with \u03bb chosen between 2 and 4) to smooth the transition in the negative regime.\n6. Compute a dynamic threshold T using a finite polynomial series or Pad\u00e9 approximant with order in the range 30\u201350. Experiment with a Pad\u00e9 form of T = \u03a3[j=0]^(J) (a^j)/(j!) divided by a similar series with offset.\n7. In the extra composite term, incorporate a Gaussian radial basis function (for example, exp(\u2013((a \u2013 1)\u00b2)/(2\u00b7(0.25)\u00b2))) and a short chain (2\u20133 layers) of nested softplus functions (or softsign) to stabilize near zero.\n8. For the exponent modulation, add gentle oscillatory corrections (e.g., include small sin(2a) and cos(2a) terms) so that extreme values are compressed while maintaining local variation.\n9. Optionally add a small local correction term (such as 0.001 \u00b7 z\u00b2 for |z| below a threshold like 0.01) to improve sensitivity near zero.\n10. Set the finite learnable parameter bounds strictly as follows:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma \u2208 [0, 10],\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n11. Encourage out-of-the-box nonlinear functions: experiment with blends of softplus, logistic, and power\u2010law damping functions to smoothly transition across the entire domain, especially improving negative regime parameter recovery.\n12. Overall, strive for a model that yields lower BIC, better parameter recovery (with balanced correlations across parameters), and high accuracy in predicting responder acceptance.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nWe want to update the instructions to encourage smoother transformations in the negative regime and to improve overall performance (accuracy, lower BIC, better parameter recovery). We want to suggest using a two\u2010layer softplus (or logistic) function for z<\u03b5 instead of an overly aggressive power law, and tweak oscillatory terms and dynamic thresholds. We also want to suggest that the exponent modulator be gently modulated to preserve local variation, and encourage experimenting with more flexible Pad\u00e9 approximants or finite polynomial series for T. We also want to have a clear specification of strict finite bounds; we restate \u03b2, \u03b3 and \u03c6 bounds. We encourage the use of out-of-the-box nonlinear mixtures like blending softplus and logistic functions, and mention to experiment with lower effective exponents in the negative regime to improve parameter recovery.\n</think>\n\nNew Instructions for run 199 of 200:\n1. Compute the core sum as a = \u03a3[i=1 to 11] F[i] + beta, where each fixed feature F[i] is first normalized to avoid excessive scaling.\n2. Scale a using a sinusoidal modulation: set a_mod = 1.08 \u00b7 a \u00b7 (1 + 0.012 \u00b7 sin(a + 0.045)).\n3. Construct the composite signal z = a_mod multiplied by successive oscillatory factors: [1 + 0.008 \u00b7 cos(a + 0.065)], [1 + 0.005 \u00b7 sin(a + 0.115)], [1 + 0.004 \u00b7 cos(a + 0.085)], [1 + 0.006 \u00b7 (sin(a + 0.035) \u00b7 cos(a + 0.055))], and [1 + 0.003 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))].\n4. Define the weight: w = (phi \u2013 0.5) / phi.\n5. For the adaptive transformation f_adapt(z), design a smooth function that:\n\u2003\u2003\u2022 For z \u2265 \u03b5 (choose \u03b5 around 1e\u20133), blends a logarithmic transformation with a small quadratic correction and tanh damping (for instance: f_adapt(z) = ln(1+z) + k\u2081\u00b7(z\u00b2/(1+z)) + tanh(z)), where k\u2081 around 0.05.\n\u2003\u2003\u2022 For z < \u03b5, instead of aggressive power\u2010law transformation, apply a two\u2010layer softplus or logistic function (e.g., f_adapt(z) = ln(1 + exp(\u03bb\u00b7z))/\u03bb, with \u03bb chosen between 2 and 4) to smooth the transition in the negative regime.\n6. Compute a dynamic threshold T using a finite polynomial series or Pad\u00e9 approximant with order in the range 30\u201350. Experiment with a Pad\u00e9 form of T = \u03a3[j=0]^(J) (a^j)/(j!) divided by a similar series with offset.\n7. In the extra composite term, incorporate a Gaussian radial basis function (for example, exp(\u2013((a \u2013 1)\u00b2)/(2\u00b7(0.25)\u00b2))) and a short chain (2\u20133 layers) of nested softplus functions (or softsign) to stabilize near zero.\n8. For the exponent modulation, add gentle oscillatory corrections (e.g., include small sin(2a) and cos(2a) terms) so that extreme values are compressed while maintaining local variation.\n9. Optionally add a small local correction term (such as 0.001 \u00b7 z\u00b2 for |z| below a threshold like 0.01) to improve sensitivity near zero.\n10. Set the finite learnable parameter bounds strictly as follows:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma \u2208 [0, 10],\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n11. Encourage out-of-the-box nonlinear functions: experiment with blends of softplus, logistic, and power\u2010law damping functions to smoothly transition across the entire domain, especially improving negative regime parameter recovery.\n12. Overall, strive for a model that yields lower BIC, better parameter recovery (with balanced correlations across parameters), and high accuracy in predicting responder acceptance.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Normalized fixed feature 1 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Normalized fixed feature 2 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Normalized fixed feature 3 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Normalized fixed feature 4 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Normalized fixed feature 5 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Normalized fixed feature 6 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Normalized fixed feature 7 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Normalized fixed feature 8 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Normalized fixed feature 9 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Normalized fixed feature 10 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Normalized fixed feature 11 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter added to the sum of fixed features\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_p\": {\n      \"description\": \"Slope parameter for the softplus transformation in the negative regime\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 2,\n          \"high\": 4\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent modulator parameter contributing to oscillatory corrections\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter setting the weight adjustment in the composite signal\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Computed utility value before logistic transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n<SUMMARY>\nA nonlinear composite utility model that aggregates 11 normalized features with a base tendency (beta), applies sinusoidal and oscillatory scaling, and transforms the composite signal using an adaptive piece\u2010wise function. Dynamic thresholding via a Pad\u00e9 approximant and additional Gaussian and nested softplus corrections, alongside gentle oscillatory terms modulated by gamma, yield a utility that is passed through a logistic function to predict binary responder choices.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'lambda_p', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Normalized fixed feature 1 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Normalized fixed feature 2 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Normalized fixed feature 3 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Normalized fixed feature 4 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Normalized fixed feature 5 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Normalized fixed feature 6 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Normalized fixed feature 7 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Normalized fixed feature 8 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Normalized fixed feature 9 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Normalized fixed feature 10 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Normalized fixed feature 11 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter added to the sum of fixed features\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_p\": {\n      \"description\": \"Slope parameter for the softplus transformation in the negative regime\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 2,\n          \"high\": 4\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent modulator parameter contributing to oscillatory corrections\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter setting the weight adjustment in the composite signal\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Computed utility value before logistic transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, lambda_p=2, gamma=0, phi=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"split_opp\", 0)\n        F2 = trial.get(\"split_self\", 0)\n        F3 = trial.get(\"splitperc_opp\", 0)\n        F4 = trial.get(\"splitperc_self\", 0)\n        F5 = trial.get(\"proposed_perc\", 0)\n        F6 = trial.get(\"proposed_amount\", 0)\n        F7 = trial.get(\"token_opp\", 0)\n        F8 = trial.get(\"token_self\", 0)\n        F9 = trial.get(\"combined_earning\", 0)\n        F10 = trial.get(\"trial_number\", 0)\n        F11 = trial.get(\"trial_type\", 0)\n\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        O = (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * O\n\n        def f_adapt(z):\n            if z >= 1e-3:\n                return math.log(1 + z) + 0.05 * (z**2 / (1 + z)) + math.tanh(z)\n            else:\n                return math.log(1 + math.exp(lambda_p * z)) / lambda_p\n\n        T_numerator = sum((a**j) / math.factorial(j) for j in range(31))\n        T_denominator = sum(((a + 1)**j) / math.factorial(j) for j in range(31))\n        T = T_numerator / T_denominator if T_denominator != 0 else 0\n\n\n        w = (phi - 0.5) / phi\n        R = math.exp(-((a - 1)**2) / (2 * 0.0625))\n        SP = math.log(1 + math.exp(math.log(1 + math.exp(math.log(1 + math.exp(a))))))\n\n        L = 0.001 * z**2 if abs(z) < 0.01 else 0\n\n        U = w * f_adapt(z) - T + gamma * (math.sin(2 * a) + math.cos(2 * a)) + R * SP + L\n        p = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[]' # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743552281.551918
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'lambda_p', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Normalized fixed feature 1 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Normalized fixed feature 2 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Normalized fixed feature 3 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Normalized fixed feature 4 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Normalized fixed feature 5 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Normalized fixed feature 6 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Normalized fixed feature 7 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Normalized fixed feature 8 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Normalized fixed feature 9 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Normalized fixed feature 10 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Normalized fixed feature 11 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter added to the sum of fixed features\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_p\": {\n      \"description\": \"Slope parameter for the softplus transformation in the negative regime\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 2,\n          \"high\": 4\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent modulator parameter contributing to oscillatory corrections\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter setting the weight adjustment in the composite signal\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Computed utility value before logistic transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "</exception>\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, lambda_p, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"split_opp\", 0)\n        F2 = trial.get(\"split_self\", 0)\n        F3 = trial.get(\"proposed_perc\", 0)\n        F4 = trial.get(\"proposed_amount\", 0)\n        F5 = trial.get(\"accepted_amount\", 0)\n        F6 = trial.get(\"accepted_perc\", 0)\n        F7 = trial.get(\"token_opp\", 0)\n        F8 = trial.get(\"token_self\", 0)\n        F9 = trial.get(\"combined_earning\", 0)\n        F10 = trial.get(\"splitperc_opp\", 0)\n        F11 = trial.get(\"splitperc_self\", 0)\n        \n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        O = (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * O\n\n        def f_adapt(z):\n            if z >= 1e-3:\n                return math.log(1+z) + 0.05 * (z**2/(1+z)) + math.tanh(z)\n            else:\n                return math.log(1+math.exp(lambda_p * z))/lambda_p\n            \n        T_num = sum((a**j) / math.factorial(j) for j in range(31))\n        T_den = sum(((a+1)**j) / math.factorial(j) for j in range(31))\n        T = T_num / T_den\n        \n        w = (phi - 0.5)/phi\n        R = math.exp(-((a - 1)**2)/(2*0.0625))\n        SP = math.log(1+math.exp(math.log(1+math.exp(math.log(1+math.exp(a))))))\n        \n        if abs(z) < 0.01:\n            L = 0.001 * z**2\n        else:\n            L = 0\n            \n        U = w * f_adapt(z) - T + gamma * (math.sin(2*a) + math.cos(2*a)) + R * SP + L\n        p = 1/(1+math.exp(-U))\n        model_predictions.append(p)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 0.5, \"split_self\": 0.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 0.5, \"split_self\": 0.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=0.5, lambda_p=0.5, gamma=0.5, phi=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743552287.17631
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'lambda_p', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Normalized fixed feature 1 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Normalized fixed feature 2 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Normalized fixed feature 3 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Normalized fixed feature 4 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Normalized fixed feature 5 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Normalized fixed feature 6 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Normalized fixed feature 7 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Normalized fixed feature 8 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Normalized fixed feature 9 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Normalized fixed feature 10 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Normalized fixed feature 11 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter added to the sum of fixed features\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_p\": {\n      \"description\": \"Slope parameter for the softplus transformation in the negative regime\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 2,\n          \"high\": 4\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent modulator parameter contributing to oscillatory corrections\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter setting the weight adjustment in the composite signal\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Computed utility value before logistic transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, lambda_p, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        O = (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * O\n\n        def f_adapt(z):\n            if z >= 1e-3:\n                return math.log(1 + z) + 0.05 * (z**2 / (1 + z)) + math.tanh(z)\n            else:\n                return math.log(1 + math.exp(lambda_p * z)) / lambda_p\n\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        T_num = sum((a**j) / factorial(j) for j in range(31))\n        T_den = sum(((a+1)**j) / factorial(j) for j in range(31))\n        T = T_num / T_den\n\n        w = (phi - 0.5) / phi\n        R = math.exp(-((a - 1)**2) / (2 * 0.0625))\n        SP = math.log(1 + math.exp(math.log(1 + math.exp(math.log(1 + math.exp(a))))))\n\n        if abs(z) < 0.01:\n            L = 0.001 * z**2\n        else:\n            L = 0\n\n        U = w * f_adapt(z) - T + gamma * (math.sin(2*a) + math.cos(2*a)) + R * SP + L\n        p = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 14, \"token_self\": 2, \"combined_earning\": 16, \"split_opp\": 12.0, \"split_self\": 4.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 25.0, \"proposed_amount\": 4.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 4, \"combined_earning\": 16, \"split_opp\": 7.0, \"split_self\": 9.0, \"splitperc_opp\": 44, \"splitperc_self\": 56, \"accept\": 1.0, \"accepted_amount\": 9.0, \"accepted_perc\": 56.0, \"proposed_perc\": 25.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=0.5, lambda_p=0.5, gamma=0.5, phi=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743552292.845053
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base tendency parameter added to the sum of fixed features",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_p": {
      "description": "Slope parameter for the softplus transformation in the negative regime",
      "range": {
        "min": 2,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 2,
          "high": 4
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Exponent modulator parameter contributing to oscillatory corrections",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter setting the weight adjustment in the composite signal",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Normalized fixed feature 1 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Normalized fixed feature 2 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Normalized fixed feature 3 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Normalized fixed feature 4 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Normalized fixed feature 5 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Normalized fixed feature 6 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Normalized fixed feature 7 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Normalized fixed feature 8 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Normalized fixed feature 9 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Normalized fixed feature 10 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Normalized fixed feature 11 extracted from the dataset",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Base tendency parameter added to the sum of fixed features",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_p": {
      "description": "Slope parameter for the softplus transformation in the negative regime",
      "range": {
        "min": 2,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 2,
          "high": 4
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Exponent modulator parameter contributing to oscillatory corrections",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Parameter setting the weight adjustment in the composite signal",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Computed utility value before logistic transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear composite utility model that aggregates 11 normalized features with a base tendency (beta), applies sinusoidal and oscillatory scaling, and transforms the composite signal using an adaptive piece\u2010wise function. Dynamic thresholding via a Pad\u00e9 approximant and additional Gaussian and nested softplus corrections, alongside gentle oscillatory terms modulated by gamma, yield a utility that is passed through a logistic function to predict binary responder choices.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Normalized fixed feature 1 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Normalized fixed feature 2 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Normalized fixed feature 3 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Normalized fixed feature 4 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Normalized fixed feature 5 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Normalized fixed feature 6 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Normalized fixed feature 7 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Normalized fixed feature 8 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Normalized fixed feature 9 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Normalized fixed feature 10 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Normalized fixed feature 11 extracted from the dataset\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter added to the sum of fixed features\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_p\": {\n      \"description\": \"Slope parameter for the softplus transformation in the negative regime\",\n      \"range\": {\n        \"min\": 2,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 2,\n          \"high\": 4\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Exponent modulator parameter contributing to oscillatory corrections\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Parameter setting the weight adjustment in the composite signal\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Computed utility value before logistic transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n<SUMMARY>\nA nonlinear composite utility model that aggregates 11 normalized features with a base tendency (beta), applies sinusoidal and oscillatory scaling, and transforms the composite signal using an adaptive piece\u2010wise function. Dynamic thresholding via a Pad\u00e9 approximant and additional Gaussian and nested softplus corrections, alongside gentle oscillatory terms modulated by gamma, yield a utility that is passed through a logistic function to predict binary responder choices.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\nSummary: A nonlinear composite utility model that aggregates 11 normalized features with a base tendency (beta), applies sinusoidal and oscillatory scaling, and transforms the composite signal using an adaptive piece\u2010wise function. Dynamic thresholding via a Pad\u00e9 approximant and additional Gaussian and nested softplus corrections, alongside gentle oscillatory terms modulated by gamma, yield a utility that is passed through a logistic function to predict binary responder choices.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n    results = simulate_model(data, beta=0.5, lambda_p=0.5, gamma=0.5, phi=0.5)\n  File \"<string>\", line 22, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n         ~~~~~~~~~~~~~~~~~~^~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
      "timestamp": 1743552281.622818
    },
    {
      "retry_number": 1,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n    results = simulate_model(data, beta=0.5, lambda_p=0.5, gamma=0.5, phi=0.5)\n  File \"<string>\", line 21, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n         ~~~~~~~~^~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
      "timestamp": 1743552287.232194
    }
  ],
  "current_retry": 2,
  "simulation_error": "Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n    results = simulate_model(data, beta=0.5, lambda_p=0.5, gamma=0.5, phi=0.5)\n  File \"<string>\", line 21, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n         ~~~~~~~~^~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
  "simulation_code": "def simulate_model(trial_data, beta, lambda_p, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\n        a_mod = 1.08 * a * (1 + 0.012 * math.sin(a + 0.045))\n        O = (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055)) * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n        z = a_mod * O\n\n        def f_adapt(z):\n            if z >= 1e-3:\n                return math.log(1 + z) + 0.05 * (z**2 / (1 + z)) + math.tanh(z)\n            else:\n                return math.log(1 + math.exp(lambda_p * z)) / lambda_p\n\n        def factorial(n):\n            if n == 0:\n                return 1\n            else:\n                return n * factorial(n-1)\n\n        T_num = sum((a**j) / factorial(j) for j in range(31))\n        T_den = sum(((a+1)**j) / factorial(j) for j in range(31))\n        T = T_num / T_den\n\n        w = (phi - 0.5) / phi\n        R = math.exp(-((a - 1)**2) / (2 * 0.0625))\n        SP = math.log(1 + math.exp(math.log(1 + math.exp(math.log(1 + math.exp(a))))))\n\n        if abs(z) < 0.01:\n            L = 0.001 * z**2\n        else:\n            L = 0\n\n        U = w * f_adapt(z) - T + gamma * (math.sin(2*a) + math.cos(2*a)) + R * SP + L\n        p = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p)\n    return model_predictions",
  "total_retries": 2,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5543345543345544,
  "fitting_results": [
    {
      "beta": 1.9228538172603067,
      "lambda_p": 2.2584845735220926,
      "gamma": 9.716744480173427,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953310221342644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.157365212807525,
      "lambda_p": 2.4187423821257426,
      "gamma": 5.451805885467177,
      "phi": 1.0863179496980493,
      "success": true,
      "log_likelihood": -24.95329946182854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.318819976121864,
      "lambda_p": 3.511733150327997,
      "gamma": 1.4410696810229042,
      "phi": 0.5450038050601873,
      "success": true,
      "log_likelihood": -24.897714324270407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1046455719306065,
      "lambda_p": 3.02826225985854,
      "gamma": 8.603981376164672,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953315957222262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.345331024963562,
      "lambda_p": 2.1565728217354554,
      "gamma": 9.993156693172187,
      "phi": 0.5778052756371326,
      "success": true,
      "log_likelihood": -24.95329996492123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.558547543431895,
      "lambda_p": 3.9133023223647303,
      "gamma": 6.26090015933897,
      "phi": 1.4508491270818396,
      "success": true,
      "log_likelihood": -23.54597316384954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.736173281469767,
      "lambda_p": 3.34324416293014,
      "gamma": 8.376491165135796,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27742943291193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.868588487703681,
      "lambda_p": 3.776090232529558,
      "gamma": 0.9275148788970489,
      "phi": 0.6052932629782476,
      "success": true,
      "log_likelihood": -22.914510051415473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.976657106980612,
      "lambda_p": 2.921177966293074,
      "gamma": 8.599031585341677,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277430517975633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.220843639356184,
      "lambda_p": 3.081463553338884,
      "gamma": 9.540081585883522,
      "phi": 1.0926173255353882,
      "success": true,
      "log_likelihood": -24.953327462848694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.352295352586796,
      "lambda_p": 3.395773957420584,
      "gamma": 8.866196561147671,
      "phi": 0.5478936094219151,
      "success": true,
      "log_likelihood": -24.95330517045493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.2001681208351,
      "lambda_p": 2.585238307652457,
      "gamma": 9.58694374273318,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953314501113248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.527385211149523,
      "lambda_p": 3.695812111407055,
      "gamma": 9.347254494154217,
      "phi": 0.8553340674953794,
      "success": true,
      "log_likelihood": -24.95331009745489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.718508193485653,
      "lambda_p": 3.4349207409791935,
      "gamma": 8.568892200966193,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277428706418231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.692395180327258,
      "lambda_p": 2.75976595154806,
      "gamma": 8.333291561334477,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277431482518047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.996529095059971,
      "lambda_p": 3.9349179223718806,
      "gamma": 9.711165896057484,
      "phi": 1.4422997815179825,
      "success": true,
      "log_likelihood": -11.27742351221269,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.64043686762342,
      "lambda_p": 2.0,
      "gamma": 8.77203833292685,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277429996425917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.009240066125212,
      "lambda_p": 3.130754196644755,
      "gamma": 9.664136949986103,
      "phi": 0.9168632985784444,
      "success": true,
      "log_likelihood": -16.277429635527536,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.864095025933643,
      "lambda_p": 3.4916334989241076,
      "gamma": 8.881763457009306,
      "phi": 0.8403617021440681,
      "success": true,
      "log_likelihood": -15.277437645623758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.33011676408916557,
      "lambda_p": 2.180908693139546,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277427695622876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4424038735502643,
      "lambda_p": 2.1022432093901435,
      "gamma": 6.9708143248667,
      "phi": 1.4960644631140172,
      "success": true,
      "log_likelihood": -24.730616752483368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4405445468600404,
      "lambda_p": 3.7336971030889643,
      "gamma": 8.876049194066255,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.27743339128826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9672685231351466,
      "lambda_p": 2.114306362460968,
      "gamma": 9.694450937003216,
      "phi": 1.3583473333414229,
      "success": true,
      "log_likelihood": -24.953313855329,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.753246704900157,
      "lambda_p": 2.3495100128784454,
      "gamma": 7.8481116850451285,
      "phi": 1.006877732001478,
      "success": true,
      "log_likelihood": -24.89771432413893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.867880479646909,
      "lambda_p": 2.0416231002923473,
      "gamma": 5.13487923897876,
      "phi": 0.7391207678360444,
      "success": true,
      "log_likelihood": -24.953304084681964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6712178347897915,
      "lambda_p": 2.6562789672365525,
      "gamma": 4.71687809875233,
      "phi": 0.7083915589513637,
      "success": true,
      "log_likelihood": -24.45095756849593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4313108033497205,
      "lambda_p": 3.1995611001127138,
      "gamma": 8.427545838910957,
      "phi": 1.351139994580153,
      "success": true,
      "log_likelihood": -24.730616750303632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.260703350530932,
      "lambda_p": 2.4668908437493373,
      "gamma": 8.82948116218939,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953319507398188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.33759276824022044,
      "lambda_p": 3.5169442560791975,
      "gamma": 9.481810433787809,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.277428885213837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.978060353642494,
      "lambda_p": 2.0,
      "gamma": 10.0,
      "phi": 0.5038220690619492,
      "success": true,
      "log_likelihood": -19.277424249691393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.587898409335649,
      "lambda_p": 3.2394608999571544,
      "gamma": 8.757132813939682,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27743097669517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.127899089157978,
      "lambda_p": 3.8110356437864485,
      "gamma": 9.587368145530233,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953318139406075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "lambda_p": 3.071239598132231,
      "gamma": 10.0,
      "phi": 1.2854348841636245,
      "success": true,
      "log_likelihood": -24.953342505094543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.940205872429308,
      "lambda_p": 2.3836688248804667,
      "gamma": 9.569231071258795,
      "phi": 0.8526143903084946,
      "success": true,
      "log_likelihood": -24.953325422251012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7820375701326308,
      "lambda_p": 3.7322571828652458,
      "gamma": 10.0,
      "phi": 1.3001243603412855,
      "success": true,
      "log_likelihood": -11.27743115366061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.552100785781628,
      "lambda_p": 2.4192740982226697,
      "gamma": 1.5685634196184475,
      "phi": 1.4701317859967094,
      "success": true,
      "log_likelihood": -23.545973163849574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3722290043002117,
      "lambda_p": 3.297834729871606,
      "gamma": 4.198243533073974,
      "phi": 1.1994287954686305,
      "success": true,
      "log_likelihood": -22.157938154732875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.105702637471696,
      "lambda_p": 2.23184384572522,
      "gamma": 4.382006783789658,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953307399942577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.498151411645704,
      "lambda_p": 3.5121827119625175,
      "gamma": 6.00942285405531,
      "phi": 1.0057688356250802,
      "success": true,
      "log_likelihood": -22.914510051428987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.45376934102426747,
      "lambda_p": 2.441475398502054,
      "gamma": 9.166684426995381,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277432816593928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.403772139242739,
      "lambda_p": 3.5353185386205426,
      "gamma": 7.139654707742859,
      "phi": 1.3771157792800488,
      "success": true,
      "log_likelihood": -24.056945188723674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1645820138434602,
      "lambda_p": 2.8435339232040837,
      "gamma": 9.204673355139725,
      "phi": 1.297450443280306,
      "success": true,
      "log_likelihood": -24.95331403960605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.7000364629387406,
      "lambda_p": 3.041078047642907,
      "gamma": 8.554288012695551,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277427836068256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4665716131793056,
      "lambda_p": 2.6057561573564314,
      "gamma": 2.9458153739563078,
      "phi": 1.1540403552030956,
      "success": true,
      "log_likelihood": -24.73061675031119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.666136197288796,
      "lambda_p": 2.3065431118241553,
      "gamma": 6.355702100436026,
      "phi": 0.7928356187553246,
      "success": true,
      "log_likelihood": -24.056945188723866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.54784590315089,
      "lambda_p": 2.4980440762372975,
      "gamma": 0.9379682253348728,
      "phi": 1.2261872132226748,
      "success": true,
      "log_likelihood": -21.270320863538082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.765141302968772,
      "lambda_p": 2.080220209877244,
      "gamma": 5.6969819743875885,
      "phi": 1.0091993422982766,
      "success": true,
      "log_likelihood": -24.897714347633702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.068885842047402,
      "lambda_p": 2.8109647789149497,
      "gamma": 9.083523786076187,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95331479865768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.010503558640857,
      "lambda_p": 3.861304553897489,
      "gamma": 9.002494264279365,
      "phi": 1.3275600625920918,
      "success": true,
      "log_likelihood": -24.953363362455757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.780810119083458,
      "lambda_p": 3.449225851732033,
      "gamma": 9.604142008252193,
      "phi": 1.002739885330301,
      "success": true,
      "log_likelihood": -24.897714324899088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.823258281699028,
      "lambda_p": 2.8671166298581277,
      "gamma": 9.023488900129632,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.157938155301856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.289009521136663,
      "lambda_p": 3.2843937103660075,
      "gamma": 9.246559016922003,
      "phi": 0.983422371445783,
      "success": true,
      "log_likelihood": -24.953317802131533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5792278731606055,
      "lambda_p": 2.0971442466313155,
      "gamma": 6.647826080902252,
      "phi": 1.2086814289901702,
      "success": true,
      "log_likelihood": -24.897714324481463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.447622611525102,
      "lambda_p": 3.801353042077184,
      "gamma": 5.134975876796184,
      "phi": 1.0405436781701134,
      "success": true,
      "log_likelihood": -24.45095756849499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.3104342001997775,
      "lambda_p": 2.007633577319616,
      "gamma": 8.659395967881611,
      "phi": 0.5625238167806759,
      "success": true,
      "log_likelihood": -24.953311819976015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.145145557831768,
      "lambda_p": 2.702131570245444,
      "gamma": 8.615684684190109,
      "phi": 1.2291881302354124,
      "success": true,
      "log_likelihood": -24.953342743927433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0624631656509516,
      "lambda_p": 2.128689452030146,
      "gamma": 8.858868127860182,
      "phi": 0.8211358297363468,
      "success": true,
      "log_likelihood": -24.95332693967238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7331930814107404,
      "lambda_p": 3.9379349586300445,
      "gamma": 8.88212063349545,
      "phi": 0.9273737549158131,
      "success": true,
      "log_likelihood": -15.27744969703816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.29305515280596,
      "lambda_p": 2.8085792845455178,
      "gamma": 9.429487826883664,
      "phi": 1.3599231918409471,
      "success": true,
      "log_likelihood": -24.953314456292347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.663400739809314,
      "lambda_p": 2.539749575634568,
      "gamma": 8.220535230888908,
      "phi": 1.4207604959669975,
      "success": true,
      "log_likelihood": -18.27742446749982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9799591642312917,
      "lambda_p": 2.9409946650753795,
      "gamma": 3.7582104590452396,
      "phi": 0.7859209131782983,
      "success": true,
      "log_likelihood": -24.056945188728154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.400951760713066,
      "lambda_p": 2.6068977939351434,
      "gamma": 7.1674369390313935,
      "phi": 1.1796769638285383,
      "success": true,
      "log_likelihood": -24.953298496878617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1873508648031237,
      "lambda_p": 2.3112381268605207,
      "gamma": 9.426284146084413,
      "phi": 1.133329352812588,
      "success": true,
      "log_likelihood": -24.953315605965294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1579958176430676,
      "lambda_p": 3.1365764654528414,
      "gamma": 8.257948042901528,
      "phi": 0.7922507585811427,
      "success": true,
      "log_likelihood": -24.95331036451268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.148780265077471,
      "lambda_p": 2.9976990190098802,
      "gamma": 9.953098214946284,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953312365642983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.8063958072791126,
      "lambda_p": 3.2712560125596406,
      "gamma": 1.2012597428023375,
      "phi": 0.9869007748360631,
      "success": true,
      "log_likelihood": -24.73061675030522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.40768388120587146,
      "lambda_p": 2.79963645233654,
      "gamma": 9.145813760786584,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277433297832554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.869919672776888,
      "lambda_p": 3.2928362197266616,
      "gamma": 9.623654621867118,
      "phi": 1.4808055322167166,
      "success": true,
      "log_likelihood": -16.277429148496946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3177015012841866,
      "lambda_p": 2.954424427901034,
      "gamma": 0.6488608450483837,
      "phi": 1.1427334455046299,
      "success": true,
      "log_likelihood": -24.730616779933115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.888180461276768,
      "lambda_p": 3.9413993993117353,
      "gamma": 9.808341404686722,
      "phi": 0.9717726560200839,
      "success": true,
      "log_likelihood": -14.277422305636513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1113085987491087,
      "lambda_p": 2.9830767661685775,
      "gamma": 9.563827486080122,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953321788130193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1361693318035462,
      "lambda_p": 2.870949132166843,
      "gamma": 9.556178063899472,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953311243718552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.436685819994251,
      "lambda_p": 2.915892929461467,
      "gamma": 1.6084284644902147,
      "phi": 0.5132020286537473,
      "success": true,
      "log_likelihood": -24.89771433845119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.7501717101071774,
      "lambda_p": 2.7532706114779146,
      "gamma": 8.715363528068314,
      "phi": 0.9229498021659507,
      "success": true,
      "log_likelihood": -19.277430153238175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.8942922826696136,
      "lambda_p": 2.4583743430004787,
      "gamma": 6.28606278755916,
      "phi": 0.6364437972655879,
      "success": true,
      "log_likelihood": -24.95331588898274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.573349254693695,
      "lambda_p": 2.1192622237734353,
      "gamma": 6.565955489401393,
      "phi": 0.6849316035584689,
      "success": true,
      "log_likelihood": -22.15793815474105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.868875329147872,
      "lambda_p": 2.2211821341951437,
      "gamma": 10.0,
      "phi": 1.0307201994401534,
      "success": true,
      "log_likelihood": -13.277428857120201,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.272346544457395,
      "lambda_p": 3.037205889913886,
      "gamma": 8.726212201959733,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953347685643468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.512999779565109,
      "lambda_p": 3.806612484358127,
      "gamma": 2.9105200224071037,
      "phi": 1.4617295404563215,
      "success": true,
      "log_likelihood": -24.056945188723407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1863909721892665,
      "lambda_p": 3.3482546055180658,
      "gamma": 9.41927017783493,
      "phi": 1.3076940117027098,
      "success": true,
      "log_likelihood": -24.953315596962046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.345995878172821,
      "lambda_p": 2.9169052947550336,
      "gamma": 1.2108476753212571,
      "phi": 0.8631373977635821,
      "success": true,
      "log_likelihood": -24.89771433028304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.932200812625042,
      "lambda_p": 3.194010548512896,
      "gamma": 9.70588491005413,
      "phi": 0.7913228587048421,
      "success": true,
      "log_likelihood": -14.277431816131967,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.34872895764295,
      "lambda_p": 3.7272433501748945,
      "gamma": 9.361105899353884,
      "phi": 0.7436785465803721,
      "success": true,
      "log_likelihood": -24.953316137133854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.225146374641264,
      "lambda_p": 2.77769795329707,
      "gamma": 8.361728548255895,
      "phi": 1.048390674124211,
      "success": true,
      "log_likelihood": -24.953298498614306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.256718185520858,
      "lambda_p": 3.7954064011133863,
      "gamma": 6.298680025173862,
      "phi": 1.241569162352193,
      "success": true,
      "log_likelihood": -24.056945188723446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.4087016186285135,
      "lambda_p": 2.779042733625304,
      "gamma": 9.224598565388254,
      "phi": 0.6077760375507003,
      "success": true,
      "log_likelihood": -24.953320984725828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.363561790197273,
      "lambda_p": 2.6740369382882947,
      "gamma": 0.0,
      "phi": 1.4406547480105303,
      "success": true,
      "log_likelihood": -22.157938154736804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.28421255221957,
      "lambda_p": 2.6539434828070942,
      "gamma": 9.086380671606793,
      "phi": 0.6573196539130661,
      "success": true,
      "log_likelihood": -24.95331726683784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7564463940600596,
      "lambda_p": 3.045674122821131,
      "gamma": 9.91637024489421,
      "phi": 1.142255731014325,
      "success": true,
      "log_likelihood": -13.277429769963044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.181205871290757,
      "lambda_p": 2.036937547201882,
      "gamma": 7.902175023792854,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953309168817906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.673959939173085,
      "lambda_p": 3.721922064582494,
      "gamma": 0.5110063753109813,
      "phi": 0.9869994770720194,
      "success": true,
      "log_likelihood": -22.15793815680055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.029128335527721684,
        "p": 0.7735899801086563
      },
      "lambda_p": {
        "r": 0.13424239187088857,
        "p": 0.18299750628129047
      },
      "gamma": {
        "r": 0.1650261416681262,
        "p": 0.10084224234174144
      },
      "phi": {
        "r": -0.006591130316630767,
        "p": 0.9481076510345302
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 57.50579424838451,
  "bic_results": {
    "average_bic": 57.50579424838451,
    "individual_bics": [
      64.24069619650973,
      64.24067467748152,
      64.12950440236526,
      64.24070766826897,
      64.2406756836669,
      61.42602208152351,
      36.888934619648296,
      60.16309585665539,
      36.888936789775705,
      64.24073067952183,
      64.2406860947343,
      64.24070475605093,
      64.24069594873421,
      36.888933166660905,
      36.88893871886053,
      36.88892277824982,
      36.888935746676275,
      46.888935024879515,
      44.888951045071956,
      36.88893114507019,
      63.79530925879118,
      46.88894253640096,
      64.24070346448244,
      64.1295044021023,
      64.24068392318837,
      63.235990890816296,
      63.7953092544317,
      64.24071476862082,
      44.88893352425211,
      52.88892425320722,
      36.88893770721478,
      64.2407120326366,
      64.24076076401353,
      64.24072659832646,
      36.88893806114566,
      61.426022081523584,
      58.649952063290186,
      64.2406905537096,
      60.16309585668242,
      42.888941387012295,
      62.447966131271784,
      64.24070383303653,
      38.88893142596095,
      63.79530925444682,
      62.44796613127217,
      56.8747174809006,
      64.12950444909184,
      64.2407053511398,
      64.24080247873596,
      64.12950440362262,
      58.64995206442815,
      64.24071135808751,
      64.12950440278736,
      63.23599089081442,
      64.24069939377647,
      64.24076124167931,
      64.2407296331692,
      44.88897514790076,
      64.24070466640913,
      50.888924688824076,
      62.44796613128075,
      64.24067274758167,
      64.24070696575502,
      64.2406964828498,
      64.24070048511041,
      63.79530925443488,
      42.88894234948955,
      46.888934050818335,
      63.795309313690666,
      42.88892036509746,
      64.24071933008483,
      64.24069824126154,
      64.12950443072683,
      52.88893606030079,
      64.24070753178992,
      58.64995206330654,
      40.88893346806484,
      64.24077112511138,
      62.44796613127126,
      64.24070694774854,
      64.12950441439052,
      42.888939386088374,
      64.24070802809214,
      64.24067275105305,
      62.44796613127133,
      64.24071772327609,
      58.649952063298045,
      64.24071028750012,
      40.88893529375053,
      64.24069409146026,
      58.649952067425545
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.029\n- lambda_p: r = 0.134\n- gamma: r = 0.165\n- phi: r = -0.007",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + beta\na_mod = 1.08 * a * (1 + 0.012 * sin(a + 0.045))\nO = (1 + 0.008 * cos(a + 0.065)) * (1 + 0.005 * sin(a + 0.115)) * (1 + 0.004 * cos(a + 0.085)) * (1 + 0.006 * sin(a + 0.035) * cos(a + 0.055)) * (1 + 0.003 * sin(a + 0.03) * cos(a + 0.05))\nz = a_mod * O\nf_adapt(z) = { ln(1+z) + 0.05 * (z^2/(1+z)) + tanh(z)   if z \u2265 1e-3  \n             ln(1+exp(lambda_p * z))/lambda_p           if z < 1e-3 }\nT = (\u03a3[j=0 to 30] (a^j)/(j!)) / (\u03a3[j=0 to 30] ((a+1)^j)/(j!))\nw = (phi - 0.5)/phi\nR = exp(-((a - 1)^2)/(2*0.0625))\nSP = ln(1+exp(ln(1+exp(ln(1+exp(a)))))\nL = { 0.001 * z^2   if |z| < 0.01  \n    0             otherwise }\nU = w * f_adapt(z) - T + gamma * (sin(2*a) + cos(2*a)) + R * SP + L\np = 1/(1+exp(-U))\nSummary: A nonlinear composite utility model that aggregates 11 normalized features with a base tendency (beta), applies sinusoidal and oscillatory scaling, and transforms the composite signal using an adaptive piece\u2010wise function. Dynamic thresholding via a Pad\u00e9 approximant and additional Gaussian and nested softplus corrections, alongside gentle oscillatory terms modulated by gamma, yield a utility that is passed through a logistic function to predict binary responder choices.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 57.50579424838451\nOverall Accuracy: 0.5543\n\nParameter Recovery:\n- beta: r = 0.029\n- lambda_p: r = 0.134\n- gamma: r = 0.165\n- phi: r = -0.007"
  ]
}