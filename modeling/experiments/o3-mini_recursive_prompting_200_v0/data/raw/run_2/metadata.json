{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nTo improve model performance across BIC, parameter recovery, and overall prediction accuracy, we want to encourage the LLM to consider adjustments to the original model that address covariance issues between the learnable parameters. The new instructions should prompt the exploration of alternative representations of the utility function, possibly introducing simple transformations or additional scaling parameters to reduce parameter interdependence. We also want to further specify the intended psychological mechanisms and encourage out\u2010of\u2010the\u2010box ideas while still requiring a parsimonious model with only a few learnable parameters. For example, the LLM might consider normalizing the fairness difference (or including a variance parameter) or even introducing a bias term that shifts the expected fair share calculation. Emphasize using bounded priors to address covariance problems. Also, maintain an emphasis on modeling only observable responder choices and on explicit parameter bounds. This outcome should drive the modeling LLM to propose models that better capture psychological reasoning, incorporate careful parameter mapping, and avoid unnecessary complexity.\n</think>\n\nFor run 2 of 200, please follow these updated instructions:\n\n1. Carefully describe the psychological mechanisms underlying responder decision-making. Beyond a baseline bias and sensitivity to fairness deviations, consider that decision-making may benefit from normalization or rescaling of input differences (such as the difference between the offered share and expected fair share). Think about whether a non-linear transformation or additional scaling parameter might reduce covariance between learnable parameters.\n\n2. Propose a mathematical model that remains parsimonious with minimal learnable parameters, but explore options beyond the simple linear relation. For instance, consider models that include a normalized fairness difference, a weighted scaling term, or a transformation (such as a square-root or logarithmic transform) of the fairness difference. Ideas that suggest including an extra parameter for scaling the fairness difference may be beneficial, provided that parameter is tightly bounded to avoid covariance issues.\n\n3. Specify clear finite bounds for all learnable parameters (e.g., using generous uniform priors on well-defined intervals) and carefully justify or note any transformations or additional parameters aimed at reducing high covariance. Detail the psychological rationale behind any extra terms and how they capture the cognitive mechanisms that might affect the interpretation of fairness.\n\n4. Ensure that the model directly predicts a latent utility from which a probability is generated using a logistic transformation. This latent utility must incorporate all relevant variables from the dataset \u2013 including proposing variables such as split_self, combined_earning, token_self, and token_opp \u2013 in a method that minimizes parameter interdependence.\n\n5. Write out the formal mathematical model between <MODEL> and </MODEL> tags. Then provide the variable descriptions in a JSON format between <VARIABLES> and </VARIABLES> tags, making sure that all learnable parameters are clearly bounded.\n\n6. Avoid including extraneous learnable parameters. The focus is to achieve higher accuracy, lower BIC, and improved parameter recovery by carefully tuning a minimal set of learnable parameters and, if needed, including a well-constrained additional scaling parameter on the fairness term to decouple its effect from the bias term.\n\n7. Be creative and out-of-the-box. While the original model used a simple linear computation of the fairness difference, consider if incorporating a normalization term, a non-linear transformation, or even a dual-stage utility computation might improve model performance. Any proposed modifications should be motivated by the underlying psychological principles of fairness and decision-making.\n\nRemember: Each modification must be grounded in the observable behavior of the participants and must be implementable solely with the provided dataset variables.\n\nGood luck and think creatively to improve performance!",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nTo improve model performance across BIC, parameter recovery, and overall prediction accuracy, we want to encourage the LLM to consider adjustments to the original model that address covariance issues between the learnable parameters. The new instructions should prompt the exploration of alternative representations of the utility function, possibly introducing simple transformations or additional scaling parameters to reduce parameter interdependence. We also want to further specify the intended psychological mechanisms and encourage out\u2010of\u2010the\u2010box ideas while still requiring a parsimonious model with only a few learnable parameters. For example, the LLM might consider normalizing the fairness difference (or including a variance parameter) or even introducing a bias term that shifts the expected fair share calculation. Emphasize using bounded priors to address covariance problems. Also, maintain an emphasis on modeling only observable responder choices and on explicit parameter bounds. This outcome should drive the modeling LLM to propose models that better capture psychological reasoning, incorporate careful parameter mapping, and avoid unnecessary complexity.\n</think>\n\nFor run 2 of 200, please follow these updated instructions:\n\n1. Carefully describe the psychological mechanisms underlying responder decision-making. Beyond a baseline bias and sensitivity to fairness deviations, consider that decision-making may benefit from normalization or rescaling of input differences (such as the difference between the offered share and expected fair share). Think about whether a non-linear transformation or additional scaling parameter might reduce covariance between learnable parameters.\n\n2. Propose a mathematical model that remains parsimonious with minimal learnable parameters, but explore options beyond the simple linear relation. For instance, consider models that include a normalized fairness difference, a weighted scaling term, or a transformation (such as a square-root or logarithmic transform) of the fairness difference. Ideas that suggest including an extra parameter for scaling the fairness difference may be beneficial, provided that parameter is tightly bounded to avoid covariance issues.\n\n3. Specify clear finite bounds for all learnable parameters (e.g., using generous uniform priors on well-defined intervals) and carefully justify or note any transformations or additional parameters aimed at reducing high covariance. Detail the psychological rationale behind any extra terms and how they capture the cognitive mechanisms that might affect the interpretation of fairness.\n\n4. Ensure that the model directly predicts a latent utility from which a probability is generated using a logistic transformation. This latent utility must incorporate all relevant variables from the dataset \u2013 including proposing variables such as split_self, combined_earning, token_self, and token_opp \u2013 in a method that minimizes parameter interdependence.\n\n5. Write out the formal mathematical model between <MODEL> and </MODEL> tags. Then provide the variable descriptions in a JSON format between <VARIABLES> and </VARIABLES> tags, making sure that all learnable parameters are clearly bounded.\n\n6. Avoid including extraneous learnable parameters. The focus is to achieve higher accuracy, lower BIC, and improved parameter recovery by carefully tuning a minimal set of learnable parameters and, if needed, including a well-constrained additional scaling parameter on the fairness term to decouple its effect from the bias term.\n\n7. Be creative and out-of-the-box. While the original model used a simple linear computation of the fairness difference, consider if incorporating a normalization term, a non-linear transformation, or even a dual-stage utility computation might improve model performance. Any proposed modifications should be motivated by the underlying psychological principles of fairness and decision-making.\n\nRemember: Each modification must be grounded in the observable behavior of the participants and must be implementable solely with the provided dataset variables.\n\nGood luck and think creatively to improve performance!\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"bias\": {\n      \"description\": \"Baseline bias parameter reflecting an a priori tendency to accept or reject offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the normalized fairness gap on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear transformation exponent on the fairness gap, modulating concavity; values <1 yield a concave transformation and >1 yield a convex transformation.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.1,\n          \"upper\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share in pounds for the participant as offered in a trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined monetary amount in pounds available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing his/her contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary variable indicating whether the participant accepted (1) or rejected (0) the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model for responder decision-making, combining a baseline bias and a nonlinearly transformed fairness gap. The fairness gap is defined as the difference between the normalized offered share (split_self divided by combined_earning) and the normalized expected share based on individual token contributions. The model applies a learnable nonlinearity exponent (gamma) to this gap, scaled by sensitivity, and adds a bias term. The resulting latent utility is converted to a choice probability via a logistic function, thereby predicting binary accept/reject decisions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"bias\": {\n      \"description\": \"Baseline bias parameter reflecting an a priori tendency to accept or reject offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the normalized fairness gap on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear transformation exponent on the fairness gap, modulating concavity; values <1 yield a concave transformation and >1 yield a convex transformation.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.1,\n          \"upper\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share in pounds for the participant as offered in a trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined monetary amount in pounds available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing his/her contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary variable indicating whether the participant accepted (1) or rejected (0) the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self_i = trial.get(\"split_self\", 0)\n        combined_earning_i = trial.get(\"combined_earning\", 1)\n        token_self_i = trial.get(\"token_self\", 0)\n        token_opp_i = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if combined_earning_i == 0:\n            fairness_offer = 0\n        else:\n            fairness_offer = split_self_i / combined_earning_i\n\n        if (token_self_i + token_opp_i) == 0:\n            fairness_expected = 0\n        else:\n            fairness_expected = token_self_i / (token_self_i + token_opp_i)\n\n        fairness_gap = fairness_offer - fairness_expected\n\n        U_i = bias + sensitivity * math.copysign(1, fairness_gap) * abs(fairness_gap)**gamma\n\n        p_i = 1 / (1 + math.exp(-U_i))\n\n        model_predictions.append(p_i)\n    return model_predictions\n```",
      "timestamp": 1743537839.106553
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline bias parameter reflecting an a priori tendency to accept or reject offers.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity parameter scaling the impact of the normalized fairness gap on utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear transformation exponent on the fairness gap, modulating concavity; values <1 yield a concave transformation and >1 yield a convex transformation.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.1,
          "upper": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)",
  "variable_descriptions": {
    "bias": {
      "description": "Baseline bias parameter reflecting an a priori tendency to accept or reject offers.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity parameter scaling the impact of the normalized fairness gap on utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear transformation exponent on the fairness gap, modulating concavity; values <1 yield a concave transformation and >1 yield a convex transformation.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.1,
          "upper": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share in pounds for the participant as offered in a trial.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined monetary amount in pounds available in the trial.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing his/her contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Binary variable indicating whether the participant accepted (1) or rejected (0) the proposal.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A dual-component utility model for responder decision-making, combining a baseline bias and a nonlinearly transformed fairness gap. The fairness gap is defined as the difference between the normalized offered share (split_self divided by combined_earning) and the normalized expected share based on individual token contributions. The model applies a learnable nonlinearity exponent (gamma) to this gap, scaled by sensitivity, and adds a bias term. The resulting latent utility is converted to a choice probability via a logistic function, thereby predicting binary accept/reject decisions.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"bias\": {\n      \"description\": \"Baseline bias parameter reflecting an a priori tendency to accept or reject offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the impact of the normalized fairness gap on utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear transformation exponent on the fairness gap, modulating concavity; values <1 yield a concave transformation and >1 yield a convex transformation.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.1,\n          \"upper\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share in pounds for the participant as offered in a trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined monetary amount in pounds available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing his/her contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary variable indicating whether the participant accepted (1) or rejected (0) the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model for responder decision-making, combining a baseline bias and a nonlinearly transformed fairness gap. The fairness gap is defined as the difference between the normalized offered share (split_self divided by combined_earning) and the normalized expected share based on individual token contributions. The model applies a learnable nonlinearity exponent (gamma) to this gap, scaled by sensitivity, and adds a bias term. The resulting latent utility is converted to a choice probability via a logistic function, thereby predicting binary accept/reject decisions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)\nSummary: A dual-component utility model for responder decision-making, combining a baseline bias and a nonlinearly transformed fairness gap. The fairness gap is defined as the difference between the normalized offered share (split_self divided by combined_earning) and the normalized expected share based on individual token contributions. The model applies a learnable nonlinearity exponent (gamma) to this gap, scaled by sensitivity, and adds a bias term. The resulting latent utility is converted to a choice probability via a logistic function, thereby predicting binary accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self_i = trial.get(\"split_self\", 0)\n        combined_earning_i = trial.get(\"combined_earning\", 1)\n        token_self_i = trial.get(\"token_self\", 0)\n        token_opp_i = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if combined_earning_i == 0:\n            fairness_offer = 0\n        else:\n            fairness_offer = split_self_i / combined_earning_i\n\n        if (token_self_i + token_opp_i) == 0:\n            fairness_expected = 0\n        else:\n            fairness_expected = token_self_i / (token_self_i + token_opp_i)\n\n        fairness_gap = fairness_offer - fairness_expected\n\n        U_i = bias + sensitivity * math.copysign(1, fairness_gap) * abs(fairness_gap)**gamma\n\n        p_i = 1 / (1 + math.exp(-U_i))\n\n        model_predictions.append(p_i)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.57997557997558,
  "fitting_results": [
    {
      "bias": -4.691769561368086,
      "sensitivity": 10.0,
      "gamma": 0.40527237282305756,
      "success": true,
      "log_likelihood": -24.830356475732007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.232391257336317,
      "sensitivity": 10.0,
      "gamma": 0.4684656432279734,
      "success": true,
      "log_likelihood": -22.220821339603884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.3535707903173044,
      "sensitivity": 10.0,
      "gamma": 0.5602601197032524,
      "success": true,
      "log_likelihood": -21.25245722067315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.7597507171148945,
      "sensitivity": 10.0,
      "gamma": 0.396707793395163,
      "success": true,
      "log_likelihood": -23.27331231907262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.068969859355868,
      "sensitivity": 10.0,
      "gamma": 0.5102267525626252,
      "success": true,
      "log_likelihood": -21.998705065936345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.7558595101042473,
      "sensitivity": 10.0,
      "gamma": 0.636499180840305,
      "success": true,
      "log_likelihood": -20.630121056199528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 8.396738243386211e-18,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.9849200205530364,
      "sensitivity": 10.0,
      "gamma": 0.6189259678691088,
      "success": true,
      "log_likelihood": -20.059405415331657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.8516804846732278,
      "sensitivity": 10.0,
      "gamma": 0.4304929609898742,
      "success": true,
      "log_likelihood": -22.7880619906916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.0631747298569465,
      "sensitivity": 10.0,
      "gamma": 0.5082537523328001,
      "success": true,
      "log_likelihood": -22.04892180874197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.628063071414052,
      "sensitivity": 10.0,
      "gamma": 0.4120930461729594,
      "success": true,
      "log_likelihood": -24.829857217898557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.9462482387907376,
      "sensitivity": 10.0,
      "gamma": 0.4652473743425428,
      "success": true,
      "log_likelihood": -22.454854661198873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 1.2762849744413312,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.278787263809063,
      "sensitivity": 10.0,
      "gamma": 0.8645033781513499,
      "success": true,
      "log_likelihood": -15.884394621300512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.393389081584304,
      "sensitivity": 10.0,
      "gamma": 0.8909522028868992,
      "success": true,
      "log_likelihood": -14.948854113357608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.453626841190024,
      "sensitivity": 10.0,
      "gamma": 0.5471407016880453,
      "success": true,
      "log_likelihood": -21.356763695614713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.663451013284438,
      "sensitivity": 10.0,
      "gamma": 0.7817799257119133,
      "success": true,
      "log_likelihood": -16.026158476795054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.782417325593659,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.496775642276685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.157526791147552,
      "sensitivity": 10.0,
      "gamma": 0.518601190593116,
      "success": true,
      "log_likelihood": -22.563466203213885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.231408885416024,
      "sensitivity": 10.0,
      "gamma": 0.524765198735841,
      "success": true,
      "log_likelihood": -21.72822041287512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.587876707845826,
      "sensitivity": 10.0,
      "gamma": 0.5568959922387038,
      "success": true,
      "log_likelihood": -21.07835947847967,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.5079409455373263,
      "sensitivity": 10.0,
      "gamma": 0.4928358429311838,
      "success": true,
      "log_likelihood": -21.852841322561055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.477863680798183,
      "sensitivity": 10.0,
      "gamma": 0.36005010393574405,
      "success": true,
      "log_likelihood": -23.291097093163902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.137477472640899,
      "sensitivity": 10.0,
      "gamma": 0.864542620088727,
      "success": true,
      "log_likelihood": -15.186948642823605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.931173991546255,
      "sensitivity": 10.0,
      "gamma": 0.7044616991459568,
      "success": true,
      "log_likelihood": -18.433371089392036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.689494489895899,
      "sensitivity": 10.0,
      "gamma": 0.40539266248258365,
      "success": true,
      "log_likelihood": -24.83035658960673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.5531645421195126,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -24.197354844048135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.757062587077319,
      "sensitivity": 10.0,
      "gamma": 0.3502763499709756,
      "success": true,
      "log_likelihood": -23.284235894306214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.780110936850655,
      "sensitivity": 10.0,
      "gamma": 0.6331643062891547,
      "success": true,
      "log_likelihood": -21.464136793816586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.9725569440495905,
      "sensitivity": 10.0,
      "gamma": 0.7118095570186252,
      "success": true,
      "log_likelihood": -19.325363225861206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.237818998953858,
      "sensitivity": 10.0,
      "gamma": 0.5014350411715969,
      "success": true,
      "log_likelihood": -21.958805845748504,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.135096825303969,
      "sensitivity": 10.0,
      "gamma": 0.5587936713432718,
      "success": true,
      "log_likelihood": -20.65840484417113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.8436499139076545,
      "sensitivity": 10.0,
      "gamma": 0.48786724413640625,
      "success": true,
      "log_likelihood": -21.60765825208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.748805849978594,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.498578452603326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.695749516165539,
      "sensitivity": 10.0,
      "gamma": 0.4103193263704516,
      "success": true,
      "log_likelihood": -22.586869646156778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.6703163975608213,
      "sensitivity": 10.0,
      "gamma": 0.5982535570123734,
      "success": true,
      "log_likelihood": -21.2296108241736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.295194670501695,
      "sensitivity": 10.0,
      "gamma": 0.8438015416350214,
      "success": true,
      "log_likelihood": -20.371342605401903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.3543854410240677,
      "sensitivity": 10.0,
      "gamma": 0.4493795517834213,
      "success": true,
      "log_likelihood": -22.4545732007464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.32024631917897,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.47099684451232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.9413861327725805,
      "sensitivity": 10.0,
      "gamma": 0.4626188745694892,
      "success": true,
      "log_likelihood": -22.537692489371537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.445808301772909,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -24.422689868702683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.193087466612449,
      "sensitivity": 10.0,
      "gamma": 0.7370122077243706,
      "success": true,
      "log_likelihood": -21.07952699194145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.665079121493496,
      "sensitivity": 10.0,
      "gamma": 0.40813530888491134,
      "success": true,
      "log_likelihood": -24.83014102235475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.872351485718253,
      "sensitivity": 10.0,
      "gamma": 0.5471245878497347,
      "success": true,
      "log_likelihood": -23.278309159956567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.5300550749070879,
      "sensitivity": 10.0,
      "gamma": 1.6853849220922736,
      "success": true,
      "log_likelihood": -23.99755116204623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.7718671046634134,
      "sensitivity": 10.0,
      "gamma": 0.3543553742995662,
      "success": true,
      "log_likelihood": -23.276938667909246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.6768154326179348,
      "sensitivity": 10.0,
      "gamma": 0.4148774230773725,
      "success": true,
      "log_likelihood": -22.966391540626134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.886826402192201,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.490673766176585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.670209847684745,
      "sensitivity": 10.0,
      "gamma": 0.40761104000502424,
      "success": true,
      "log_likelihood": -24.830173077325977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.055982522500833,
      "sensitivity": 10.0,
      "gamma": 0.6274886496553829,
      "success": true,
      "log_likelihood": -18.22818860750753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.726962203401999,
      "sensitivity": 10.0,
      "gamma": 0.5115267328632355,
      "success": true,
      "log_likelihood": -22.154263660883935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.2280824948033713,
      "sensitivity": 10.0,
      "gamma": 0.487558426004795,
      "success": true,
      "log_likelihood": -22.097713955470486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.6926392221375135,
      "sensitivity": 10.0,
      "gamma": 0.40519673897288844,
      "success": true,
      "log_likelihood": -24.830356468550324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.5503496958907257,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -24.19735833116942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.6084745466571695,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.507847994487253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.497506860649022,
      "sensitivity": 10.0,
      "gamma": 0.4913164106408533,
      "success": true,
      "log_likelihood": -21.868158775861627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.447220949368488,
      "sensitivity": 10.0,
      "gamma": 0.9079871837712138,
      "success": true,
      "log_likelihood": -16.025541813505146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.379898353452974,
      "sensitivity": 10.0,
      "gamma": 0.502383458741698,
      "success": true,
      "log_likelihood": -22.634392870553235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 0.6948292963635566,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.387829348371602,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.524624291908573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.665583393285311,
      "sensitivity": 10.0,
      "gamma": 0.40807826362158567,
      "success": true,
      "log_likelihood": -24.830145543450154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.198266956533237,
      "sensitivity": 10.0,
      "gamma": 0.5228935401777756,
      "success": true,
      "log_likelihood": -22.589542032797098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.95644617157908,
      "sensitivity": 10.0,
      "gamma": 0.7523231501884784,
      "success": true,
      "log_likelihood": -18.71190847184825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.0515043295061695,
      "sensitivity": 10.0,
      "gamma": 0.46660214741371064,
      "success": true,
      "log_likelihood": -23.90441546572072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.179207684790043,
      "sensitivity": 10.0,
      "gamma": 0.6650958727110377,
      "success": true,
      "log_likelihood": -20.291789125591155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 8.453533246249272,
      "gamma": 0.9855991442215818,
      "success": true,
      "log_likelihood": -24.95359598418908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.148522426039228,
      "sensitivity": 10.0,
      "gamma": 0.33884835563299687,
      "success": true,
      "log_likelihood": -22.67837114066592,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.694882663691899,
      "sensitivity": 10.0,
      "gamma": 0.4049448576092636,
      "success": true,
      "log_likelihood": -24.83035650787594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.838663771813803,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.45582213855288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 10.0,
      "gamma": 1.1634686414229378,
      "success": true,
      "log_likelihood": -24.953533621030793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.8773782955350318,
      "sensitivity": 10.0,
      "gamma": 0.5774238976579834,
      "success": true,
      "log_likelihood": -22.79078804034014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.402182820616749,
      "sensitivity": 10.0,
      "gamma": 0.31237402638848055,
      "success": true,
      "log_likelihood": -22.837675887360493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.58840886584006,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -24.19760836246989,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.259888793683982,
      "sensitivity": 10.0,
      "gamma": 0.6411310832144018,
      "success": true,
      "log_likelihood": -20.580098983572192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 10.0,
      "gamma": 1.1399929805596254,
      "success": true,
      "log_likelihood": -24.953359122381066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -13.277766495784894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.6342242994697966,
      "sensitivity": 10.0,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -23.461289673396767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.435644365027703,
      "sensitivity": 10.0,
      "gamma": 0.480376248468109,
      "success": true,
      "log_likelihood": -21.576392340764723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.6548425067168817,
        "p": 1.4635227580493325e-13
      },
      "sensitivity": {
        "r": 0.014741125413949382,
        "p": 0.8842641500017162
      },
      "gamma": {
        "r": -0.02834610729906572,
        "p": 0.7795131650853194
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 51.437816348561505,
  "bic_results": {
    "average_bic": 51.437816348561505,
    "individual_bics": [
      60.41126976683235,
      55.1921994945761,
      53.25547125671463,
      57.29718145351357,
      54.747966947241025,
      52.01079892776738,
      33.3062773958674,
      50.86936764603165,
      33.3062773958674,
      56.32668079675153,
      54.84840043285227,
      60.41027125116544,
      55.66026613776607,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      42.51934605796936,
      40.64826504208355,
      33.3062773958674,
      53.46408420659776,
      42.802873768958435,
      57.744108099921704,
      55.8774892217961,
      54.206997641118576,
      52.907275772327665,
      54.45623946049044,
      57.33275100169614,
      41.124454101015544,
      47.61729899415241,
      33.3062773958674,
      60.41126999458179,
      59.1452665034646,
      57.319028603980755,
      33.3062773958674,
      53.6788304030015,
      49.40128326709075,
      54.66816850686534,
      52.06736650371059,
      39.30600500724502,
      53.96587331952833,
      57.74771372057498,
      35.30618659965994,
      55.92429610768188,
      53.20977846371554,
      51.49324202617214,
      55.65970321686113,
      57.69255050439297,
      55.8259417941114,
      59.59593655277369,
      52.909610799251226,
      60.41083886007783,
      57.30717513528147,
      58.745659139460784,
      57.304434151186825,
      56.683339896620595,
      57.731904347721496,
      41.305914211037575,
      60.41090297002029,
      47.206934030383394,
      55.059084137136196,
      54.945984726309305,
      60.41126975246898,
      59.145273477707164,
      57.76625280434284,
      54.48687436709159,
      39.30600500724503,
      42.80164044237863,
      56.0193425564748,
      39.306005007245034,
      57.79980539918547,
      60.41084790226864,
      55.92964088096252,
      48.174373759064835,
      58.559387746809776,
      51.334135066550644,
      37.306095803452486,
      60.657748783746484,
      56.107299096700174,
      60.41126983112021,
      57.66220109247409,
      39.30600500724503,
      60.65762405742991,
      56.332132896048606,
      56.42590859008932,
      59.14577354030811,
      51.91075478251271,
      60.65727506013046,
      37.30608980693812,
      57.67313616216187,
      53.90334149689778
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.655\n- sensitivity: r = 0.015\n- gamma: r = -0.028",
  "previous_models": [
    "Specification: U_i = bias + sensitivity * sign((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i))) * abs((split_self_i/combined_earning_i) - (token_self_i/(token_self_i+token_opp_i)))^(gamma)\np_i = 1/(1+exp(-U_i))\naccept_i ~ Bernoulli(p_i)\nSummary: A dual-component utility model for responder decision-making, combining a baseline bias and a nonlinearly transformed fairness gap. The fairness gap is defined as the difference between the normalized offered share (split_self divided by combined_earning) and the normalized expected share based on individual token contributions. The model applies a learnable nonlinearity exponent (gamma) to this gap, scaled by sensitivity, and adds a bias term. The resulting latent utility is converted to a choice probability via a logistic function, thereby predicting binary accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 51.437816348561505\nOverall Accuracy: 0.5800\n\nParameter Recovery:\n- bias: r = 0.655\n- sensitivity: r = 0.015\n- gamma: r = -0.028"
  ]
}