{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 22, we want to build on our previous approach by experimenting with even more unconventional tweaks that might improve accuracy, lower BIC, and deliver better parameter recovery. In this run, encourage incorporating an additional multiplicative factor applied to the entire transformation, and consider adjusting the compression exponent slightly (for example, using 0.93 instead of 0.94) to explore different sensitivity profiles. Also, invite the inclusion of an optional extra trigonometric modulation term (e.g., an extra cosine modulation) within the nonlinear transformation to capture subtle oscillatory behavior. Keep the basic structure intact: compute normalized offer (N_offer) and normalized fair share (N_share), derive the fairness gap F, scale it by phi with x = F/phi, then apply the fixed nonlinear transformation. The transformation should sum the fixed terms (|x|^(0.5), ln(1+3.4\u00d7|x|), 0.2\u00d7atan(1.1\u00d7|x|), 0.1\u00d7(1\u2013exp(\u2013|x|)), 0.05\u00d7(1\u2013exp(\u20132\u00d7|x|)), 0.03\u00d7tanh(|x|), 0.02\u00d7sin(0.5\u00d7|x|), 0.01\u00d7(1\u2013cos(0.3\u00d7|x|)), 0.005\u00d7exp(\u2013|x|)) and optionally include 0.005\u00d7cos(2.0\u00d7|x|), then multiply the entire sum by a fixed constant (e.g., 1.05) before adding a tiny constant for stability. Finally, compress the sum by raising it to a new fixed exponent (e.g., 0.93) while preserving the sign. Define the latent utility U = beta + gamma \u00d7 f(x) and map it to p_accept via the logistic function. Ensure the learnable parameters beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Be creative and explicit in your mathematical specification.\n</think>\n\nFor run 22 of 200, please develop a computational model for responder decision-making with the following requirements:\n\n1. Compute the normalized offer percentage:\n\u2003\u2003N_offer = split_self / combined_earning,\n\u2003\u2003and the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n2. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2013 N_share.\n\n3. Scale the fairness gap by phi (learnable within [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n4. Apply a fixed nonlinear transformation f(\u00b7) to x that incorporates the following fixed terms:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2013 exp(\u2013|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2013 exp(\u20132\u00d7|x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.01 \u00d7 (1 \u2013 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2013|x|)\nOptionally, include an extra fixed cosine modulation term such as 0.005 \u00d7 cos(2.0 \u00d7 |x|) in the sum.\nThen, multiply the entire summed value by a fixed factor of 1.05, add a tiny constant (e.g., 1e-6) for numerical stability, and compress the overall magnitude by raising the result to a fixed compression exponent\u2014now set to 0.93 to explore a modified sensitivity profile\u2014while preserving the sign. Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 (1.05 \u00d7 ([|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2013 exp(\u2013|x|)) + 0.05\u00d7(1 \u2013 exp(\u20132\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.01\u00d7(1 \u2013 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2013|x|) [ + 0.005\u00d7cos(2.0\u00d7|x|) ] + 1e-6))^(0.93).\n\n5. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling) \u2208 [0.5, 1.5].\n\n6. Define the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n7. Convert U into a choice probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2013U)).\n\n8. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags, and detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n9. Clearly indicate the predicted target variable in <target_variable> tags (set to \u201caccept\u201d).\n\nKeep the overall structure intact while allowing these unconventional tweaks to encourage out-of-the-box thinking that may further improve accuracy, lower BIC, and enhance parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 22, we want to build on our previous approach by experimenting with even more unconventional tweaks that might improve accuracy, lower BIC, and deliver better parameter recovery. In this run, encourage incorporating an additional multiplicative factor applied to the entire transformation, and consider adjusting the compression exponent slightly (for example, using 0.93 instead of 0.94) to explore different sensitivity profiles. Also, invite the inclusion of an optional extra trigonometric modulation term (e.g., an extra cosine modulation) within the nonlinear transformation to capture subtle oscillatory behavior. Keep the basic structure intact: compute normalized offer (N_offer) and normalized fair share (N_share), derive the fairness gap F, scale it by phi with x = F/phi, then apply the fixed nonlinear transformation. The transformation should sum the fixed terms (|x|^(0.5), ln(1+3.4\u00d7|x|), 0.2\u00d7atan(1.1\u00d7|x|), 0.1\u00d7(1\u2013exp(\u2013|x|)), 0.05\u00d7(1\u2013exp(\u20132\u00d7|x|)), 0.03\u00d7tanh(|x|), 0.02\u00d7sin(0.5\u00d7|x|), 0.01\u00d7(1\u2013cos(0.3\u00d7|x|)), 0.005\u00d7exp(\u2013|x|)) and optionally include 0.005\u00d7cos(2.0\u00d7|x|), then multiply the entire sum by a fixed constant (e.g., 1.05) before adding a tiny constant for stability. Finally, compress the sum by raising it to a new fixed exponent (e.g., 0.93) while preserving the sign. Define the latent utility U = beta + gamma \u00d7 f(x) and map it to p_accept via the logistic function. Ensure the learnable parameters beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Be creative and explicit in your mathematical specification.\n</think>\n\nFor run 22 of 200, please develop a computational model for responder decision-making with the following requirements:\n\n1. Compute the normalized offer percentage:\n\u2003\u2003N_offer = split_self / combined_earning,\n\u2003\u2003and the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n2. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2013 N_share.\n\n3. Scale the fairness gap by phi (learnable within [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n4. Apply a fixed nonlinear transformation f(\u00b7) to x that incorporates the following fixed terms:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2013 exp(\u2013|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2013 exp(\u20132\u00d7|x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.01 \u00d7 (1 \u2013 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2013|x|)\nOptionally, include an extra fixed cosine modulation term such as 0.005 \u00d7 cos(2.0 \u00d7 |x|) in the sum.\nThen, multiply the entire summed value by a fixed factor of 1.05, add a tiny constant (e.g., 1e-6) for numerical stability, and compress the overall magnitude by raising the result to a fixed compression exponent\u2014now set to 0.93 to explore a modified sensitivity profile\u2014while preserving the sign. Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 (1.05 \u00d7 ([|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2013 exp(\u2013|x|)) + 0.05\u00d7(1 \u2013 exp(\u20132\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.01\u00d7(1 \u2013 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2013|x|) [ + 0.005\u00d7cos(2.0\u00d7|x|) ] + 1e-6))^(0.93).\n\n5. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling) \u2208 [0.5, 1.5].\n\n6. Define the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n7. Convert U into a choice probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2013U)).\n\n8. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags, and detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n9. Clearly indicate the predicted target variable in <target_variable> tags (set to \u201caccept\u201d).\n\nKeep the overall structure intact while allowing these unconventional tweaks to encourage out-of-the-box thinking that may further improve accuracy, lower BIC, and enhance parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer percentage computed as split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer - N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for fairness gap, adjusts sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation applied to x using mixed power, logarithmic, trigonometric and exponential terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma * f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Choice probability for acceptance computed from U via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision-making where normalized offer and normalized fair share are used to calculate a fairness gap. The gap is scaled by a learnable parameter phi and then transformed nonlinearly via a fixed combination of power, logarithmic, arctan, exponential, and trigonometric functions (including an optional cosine modulation). This transformation output, weighted by gamma and combined with a baseline bias beta, defines the latent utility which is converted into a binary acceptance probability via the logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (each token is \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer percentage computed as split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer - N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for fairness gap, adjusts sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation applied to x using mixed power, logarithmic, trigonometric and exponential terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma * f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Choice probability for acceptance computed from U via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp + 1e-9) # avoid division by zero\n        F = N_offer - N_share\n        x = F / phi\n        abs_x = abs(x)\n\n        fx_intermediate = (\n            abs_x**(0.5) +\n            math.log(1 + 3.4 * abs_x) +\n            0.2 * math.atan(1.1 * abs_x) +\n            0.1 * (1 - math.exp(-abs_x)) +\n            0.05 * (1 - math.exp(-2 * abs_x)) +\n            0.03 * math.tanh(abs_x) +\n            0.02 * math.sin(0.5 * abs_x) +\n            0.01 * (1 - math.cos(0.3 * abs_x)) +\n            0.005 * math.exp(-abs_x) +\n            0.005 * math.cos(2.0 * abs_x) +\n            1e-6\n        )\n\n        f_x = (1.0 if x >= 0 else -1.0) * (1.05 * fx_intermediate**0.93)\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743539321.8382568
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Scaling parameter for fairness gap, adjusts sensitivity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning (each token is \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "N_offer": {
      "description": "Normalized offer percentage computed as split_self / combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share computed as token_self / (token_self + token_opp)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap computed as N_offer - N_share",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Scaling parameter for fairness gap, adjusts sensitivity",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "x": {
      "description": "Scaled fairness gap computed as F / phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Nonlinear transformation applied to x using mixed power, logarithmic, trigonometric and exponential terms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta + gamma * f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Choice probability for acceptance computed from U via the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model for responder decision-making where normalized offer and normalized fair share are used to calculate a fairness gap. The gap is scaled by a learnable parameter phi and then transformed nonlinearly via a fixed combination of power, logarithmic, arctan, exponential, and trigonometric functions (including an optional cosine modulation). This transformation output, weighted by gamma and combined with a baseline bias beta, defines the latent utility which is converted into a binary acceptance probability via the logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer percentage computed as split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer - N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for fairness gap, adjusts sensitivity\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F / phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation applied to x using mixed power, logarithmic, trigonometric and exponential terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma * f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Choice probability for acceptance computed from U via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision-making where normalized offer and normalized fair share are used to calculate a fairness gap. The gap is scaled by a learnable parameter phi and then transformed nonlinearly via a fixed combination of power, logarithmic, arctan, exponential, and trigonometric functions (including an optional cosine modulation). This transformation output, weighted by gamma and combined with a baseline bias beta, defines the latent utility which is converted into a binary acceptance probability via the logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A computational model for responder decision-making where normalized offer and normalized fair share are used to calculate a fairness gap. The gap is scaled by a learnable parameter phi and then transformed nonlinearly via a fixed combination of power, logarithmic, arctan, exponential, and trigonometric functions (including an optional cosine modulation). This transformation output, weighted by gamma and combined with a baseline bias beta, defines the latent utility which is converted into a binary acceptance probability via the logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp + 1e-9) # avoid division by zero\n        F = N_offer - N_share\n        x = F / phi\n        abs_x = abs(x)\n\n        fx_intermediate = (\n            abs_x**(0.5) +\n            math.log(1 + 3.4 * abs_x) +\n            0.2 * math.atan(1.1 * abs_x) +\n            0.1 * (1 - math.exp(-abs_x)) +\n            0.05 * (1 - math.exp(-2 * abs_x)) +\n            0.03 * math.tanh(abs_x) +\n            0.02 * math.sin(0.5 * abs_x) +\n            0.01 * (1 - math.cos(0.3 * abs_x)) +\n            0.005 * math.exp(-abs_x) +\n            0.005 * math.cos(2.0 * abs_x) +\n            1e-6\n        )\n\n        f_x = (1.0 if x >= 0 else -1.0) * (1.05 * fx_intermediate**0.93)\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6025641025641026,
  "fitting_results": [
    {
      "phi": 0.6649492442041806,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618502264250345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7062662927650214,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.06105414592319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0154907843189112,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -19.749190822171137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5362559568836672,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.738188856532545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8936205645520334,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.449492587861034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3948509990572477,
      "beta": 10.0,
      "gamma": 9.957739714928945,
      "success": true,
      "log_likelihood": -19.801539301542746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2244592578282105,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -19.241929004902605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5685539216093359,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.70351644855645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9144826696663356,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.61452903347786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649554108719191,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.61850214859526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7293133148209856,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.076862090348317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.5137837585326475,
      "success": true,
      "log_likelihood": -15.586462235096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.447104860273004,
      "success": true,
      "log_likelihood": -14.600764972695735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0125351149532469,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.19738272381654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.950986817845177,
      "success": true,
      "log_likelihood": -15.770411498667011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 2.2612410442680297,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.52398514856178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8948798701698745,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.678136714340045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9593179218505359,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.28648253121314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9831785722408574,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -19.89922670058996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7868107964861796,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.020567937045065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 8.679393174306412,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.173505992014192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 6.998329362419477,
      "success": true,
      "log_likelihood": -15.055705462582779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 8.724954350265477,
      "success": true,
      "log_likelihood": -18.202505244493878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6648734336398145,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618502274425957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -3.1196595061726393,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.195237707814762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5008009229211879,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.72247600357692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4615850716267473,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.139019166137093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 9.722344196688827,
      "success": true,
      "log_likelihood": -18.303482028782113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8268668465117549,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.7936005367722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1126619761710088,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.078526619389645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8712033265921755,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.959790430767345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 5.727744907207371,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.17531629797009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 8.735357622268936,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.164515079170958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3914288744683505,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -20.698269219936943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 8.102063778956433,
      "success": true,
      "log_likelihood": -20.195570680424503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7037241127218765,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.93285602961868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 8.37048409924776,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.12568304099412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8129441407266667,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.433719309071783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649594124604302,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618449205752096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 9.011422873829568,
      "success": true,
      "log_likelihood": -20.95068423035756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649517872895832,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.6185022599876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5084182111734258,
      "beta": 10.0,
      "gamma": 8.117895860970522,
      "success": true,
      "log_likelihood": -22.929328534782375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649546658541605,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.61844909427624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 7.611377211054441,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.811223527192983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5349676202588336,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.75183941788483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 3.7586123036769004,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.451077568199157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649532979005572,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618502259988365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.907001392732192,
      "beta": 9.755264368909696,
      "gamma": 4.8340337449451045,
      "success": true,
      "log_likelihood": -18.213609212438616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9262458894709387,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.389513450934484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7745684304719567,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.029544405816804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6648181334481573,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618502293464466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -3.1726681872777625,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.19540528498296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 2.35970328358788,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.516411444594997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7866159280039741,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.020714405448228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 7.1854654476585065,
      "success": true,
      "log_likelihood": -15.81371600577927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6761713695359216,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.190063289419186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 2.257378712806628,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.524293798835167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6640112150688512,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.61850368276432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7905504127613184,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.01457634073144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 8.649243780881271,
      "success": true,
      "log_likelihood": -18.30318034742883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6733545728250138,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.19374874658706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 9.959217162687015,
      "success": true,
      "log_likelihood": -19.854675712259855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 1.9786804902143558,
      "success": true,
      "log_likelihood": -24.953602511016467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 8.73324337961613,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.16484315131701,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6649797955506175,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.618502265354767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 3.7590709258862525,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.451072778045535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 1.8225136705771041,
      "success": true,
      "log_likelihood": -24.953558311521046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1024623734940835,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.190912993551247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6098353678401611,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.314320236016222,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": -3.186261040619712,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.19544094449978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 9.180465311858956,
      "success": true,
      "log_likelihood": -20.295565362257594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 9.337839107556722,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.995426206466373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0085271732325374,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 2.487191463124739,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.507571149704873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3951434833845393,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.45861558516726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.016162785564524926,
        "p": 0.8731912927000389
      },
      "beta": {
        "r": 0.4560065038540992,
        "p": 1.8625816684076363e-06
      },
      "gamma": {
        "r": 0.2695052208362047,
        "p": 0.006697274562994131
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.61630683468744,
  "bic_results": {
    "average_bic": 50.61630683468744,
    "individual_bics": [
      59.98756134386902,
      52.872665107214715,
      50.2489384597106,
      56.22693452843342,
      51.6495419910904,
      50.35363541845382,
      33.3062773958674,
      49.234414825173545,
      33.3062773958674,
      54.157589712481226,
      51.97961488232406,
      59.98756111255885,
      52.90428099606497,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.92348128556033,
      39.9520867607598,
      33.3062773958674,
      51.145322263001404,
      42.29137981270235,
      57.7985271124919,
      54.106830244048425,
      51.323521877794605,
      50.549010216548254,
      52.79169268945846,
      55.09756879939671,
      40.861967740533885,
      47.15556730435608,
      33.3062773958674,
      59.98756136422024,
      59.14103223099785,
      56.19550882252217,
      33.3062773958674,
      53.02859514764252,
      47.357520872932554,
      52.33775788891273,
      50.907610054147625,
      39.30600500724502,
      52.670137676903025,
      57.10118941130851,
      35.30618659965994,
      55.07958697371025,
      52.14709525524222,
      51.14169817621733,
      54.616268874605694,
      57.001922897356565,
      53.617995433511894,
      59.98745522687253,
      52.651925276083446,
      59.98756133534353,
      56.609213884933084,
      59.987455003920815,
      56.3730038697543,
      54.25423565113799,
      57.65271195176665,
      41.305914211037575,
      59.98756133534506,
      47.177775240245566,
      53.5295837172373,
      52.80964562700194,
      59.98756140229726,
      59.14136738533425,
      57.78337970455833,
      52.79198562626479,
      39.30600500724503,
      42.37798882692687,
      55.1306833942067,
      39.306005007245034,
      57.79914441303866,
      59.98756418089697,
      54.77970949683122,
      47.356917510226,
      57.13805430854245,
      50.45990823988804,
      37.306095803452486,
      60.65776183740127,
      55.08024311800236,
      59.98756134607787,
      57.6527023714594,
      39.30600500724503,
      60.65767343841043,
      55.13238280247083,
      55.37919728740077,
      59.141438704367886,
      51.34168753988352,
      58.74140922830108,
      37.306095803452486,
      57.76569911477807,
      53.667787985702844
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.016\n- beta: r = 0.456\n- gamma: r = 0.270",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * ( 1.05 * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.01 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * cos(2.0 * |x|) + 1e-6 ) )^(0.93)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A computational model for responder decision-making where normalized offer and normalized fair share are used to calculate a fairness gap. The gap is scaled by a learnable parameter phi and then transformed nonlinearly via a fixed combination of power, logarithmic, arctan, exponential, and trigonometric functions (including an optional cosine modulation). This transformation output, weighted by gamma and combined with a baseline bias beta, defines the latent utility which is converted into a binary acceptance probability via the logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.61630683468744\nOverall Accuracy: 0.6026\n\nParameter Recovery:\n- phi: r = -0.016\n- beta: r = 0.456\n- gamma: r = 0.270"
  ]
}