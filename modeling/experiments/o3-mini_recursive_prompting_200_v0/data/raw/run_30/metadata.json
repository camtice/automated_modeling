{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 29, our goal is to push the model designer to explore a broader and more flexible nonlinear transformation while adhering strictly to a three-parameter scheme. We want the transformation to include all the fixed nonlinear components as before, but now with explicit encouragement to experiment with additional optional modulation terms (for example, extra sin or cos components) and adaptive modifications such as slightly different constant multipliers and compression exponents. Emphasize that only beta, gamma, and phi remain learnable with their original bounds. Encourage creativity in combining fixed components, considering hybrid or multiplicative interactions to smooth out the transformation\u2019s curvature and bring improvements in accuracy, BIC, and parameter recovery.\n</think>\nFor run 29 of 200, please develop a computational model for responder decision\u2010making that meets the following requirements:\n\n1. Compute the normalized offer percentage:\n\u2003\u2003N_offer = split_self / combined_earning,\n\u2003\u2003and the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n2. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n3. Scale the fairness gap with phi (with phi learnable within [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n4. Apply a fixed nonlinear transformation f(\u00b7) to x that must include these fixed terms:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2013|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u20132 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.01 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2013|x|)\n\n\u2003Additionally, you are encouraged to explore adaptive weighting on the oscillatory components by:\n\u2003\u2003\u2013 Assigning possibly distinct fixed multipliers to terms like sin(0.5\u00d7|x|) and (1 \u2212 cos(0.3\u00d7|x|)).\n\u2003\u2003\u2013 Optionally including an extra modulation term (for example, 0.005 \u00d7 sin(2.2 \u00d7 |x|) or 0.002 \u00d7 cos(3.0 \u00d7 |x|)) to capture subtle oscillatory effects.\n\u2003\u2003\u2013 Experimenting with a modest adjustment to the constant multiplier (suggest a value between 1.05 and 1.10) and tweaking the compression exponent (suggest a value between 0.90 and 0.94).\n\n\u2003Formally, define the transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 ( C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2013|x|)) + 0.05\u00d7(1 \u2212 exp(\u20132\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.01\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2013|x|) [ + optionally, extra modulation terms ] ) + 1e-6 )^(E),\n\u2003where C is a fixed constant (suggest testing a value near 1.08) and E is the fixed compression exponent (suggest near 0.92). Feel free to be creative with the optional terms and their fixed multipliers as long as no additional learnable parameters are introduced.\n\n5. Use exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\n6. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n7. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2013U)).\n\n8. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags and supply detailed JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n9. Clearly designate the predicted target variable using <target_variable> tags (set to \u201caccept\u201d).\n\nEncourage experimentation with novel combinations and adaptive weighting strategies within the fixed transformation. Think outside the box to capture nuanced aspects of the data while maintaining the integrity of the three learnable parameters.\n\nGood luck!",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 29, our goal is to push the model designer to explore a broader and more flexible nonlinear transformation while adhering strictly to a three-parameter scheme. We want the transformation to include all the fixed nonlinear components as before, but now with explicit encouragement to experiment with additional optional modulation terms (for example, extra sin or cos components) and adaptive modifications such as slightly different constant multipliers and compression exponents. Emphasize that only beta, gamma, and phi remain learnable with their original bounds. Encourage creativity in combining fixed components, considering hybrid or multiplicative interactions to smooth out the transformation\u2019s curvature and bring improvements in accuracy, BIC, and parameter recovery.\n</think>\nFor run 29 of 200, please develop a computational model for responder decision\u2010making that meets the following requirements:\n\n1. Compute the normalized offer percentage:\n\u2003\u2003N_offer = split_self / combined_earning,\n\u2003\u2003and the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n2. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n3. Scale the fairness gap with phi (with phi learnable within [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n4. Apply a fixed nonlinear transformation f(\u00b7) to x that must include these fixed terms:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2013|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u20132 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.01 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2013|x|)\n\n\u2003Additionally, you are encouraged to explore adaptive weighting on the oscillatory components by:\n\u2003\u2003\u2013 Assigning possibly distinct fixed multipliers to terms like sin(0.5\u00d7|x|) and (1 \u2212 cos(0.3\u00d7|x|)).\n\u2003\u2003\u2013 Optionally including an extra modulation term (for example, 0.005 \u00d7 sin(2.2 \u00d7 |x|) or 0.002 \u00d7 cos(3.0 \u00d7 |x|)) to capture subtle oscillatory effects.\n\u2003\u2003\u2013 Experimenting with a modest adjustment to the constant multiplier (suggest a value between 1.05 and 1.10) and tweaking the compression exponent (suggest a value between 0.90 and 0.94).\n\n\u2003Formally, define the transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 ( C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2013|x|)) + 0.05\u00d7(1 \u2212 exp(\u20132\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.01\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2013|x|) [ + optionally, extra modulation terms ] ) + 1e-6 )^(E),\n\u2003where C is a fixed constant (suggest testing a value near 1.08) and E is the fixed compression exponent (suggest near 0.92). Feel free to be creative with the optional terms and their fixed multipliers as long as no additional learnable parameters are introduced.\n\n5. Use exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\n6. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n7. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2013U)).\n\n8. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags and supply detailed JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n9. Clearly designate the predicted target variable using <target_variable> tags (set to \u201caccept\u201d).\n\nEncourage experimentation with novel combinations and adaptive weighting strategies within the fixed transformation. Think outside the box to capture nuanced aspects of the data while maintaining the integrity of the three learnable parameters.\n\nGood luck!\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"N_offer\": {\n      \"description\": \"Normalized offer: ratio of participant's proposed share to combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share: ratio of participant's tokens to the total tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between the normalized offer and normalized fair share.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap: fairness gap divided by phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing multiple fixed nonlinearities including oscillatory components.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of a base bias and the sensitivity-scaled nonlinear transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed using the logistic function.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sign(x)\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the value of x.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs(x)\": {\n      \"description\": \"Absolute value of x.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making. The model computes a fairness gap from normalized offer and fair share, scales it by a learnable phi, and applies a composite nonlinear transformation featuring fixed power, logarithmic, trigonometric, exponential, and oscillatory components with adaptive modulation. The transformed gap is then combined with a baseline bias (beta) and scaled by sensitivity (gamma) to generate latent utility, which is converted to acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"N_offer\": {\n      \"description\": \"Normalized offer: ratio of participant's proposed share to combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share: ratio of participant's tokens to the total tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between the normalized offer and normalized fair share.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap: fairness gap divided by phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing multiple fixed nonlinearities including oscillatory components.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of a base bias and the sensitivity-scaled nonlinear transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed using the logistic function.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sign(x)\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the value of x.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs(x)\": {\n      \"description\": \"Absolute value of x.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=1, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n        sign_x = -1 if x < 0 else (1 if x > 0 else 0)\n\n        f_x = sign_x * ((1e-6 + 1.08 * (abs_x**(0.5) + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.01 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x)))**(0.92))\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n```",
      "timestamp": 1743539719.528012
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor applied to the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "N_offer": {
      "description": "Normalized offer: ratio of participant's proposed share to combined earning.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share: ratio of participant's tokens to the total tokens (participant + opponent).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap: difference between the normalized offer and normalized fair share.",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap: fairness gap divided by phi.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Nonlinear transformation of x capturing multiple fixed nonlinearities including oscillatory components.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as the sum of a base bias and the sensitivity-scaled nonlinear transformation.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Probability of accepting the proposal computed using the logistic function.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor applied to the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sign(x)": {
      "description": "Sign function returning -1, 0, or 1 based on the value of x.",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "abs(x)": {
      "description": "Absolute value of x.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for responder decision\u2010making. The model computes a fairness gap from normalized offer and fair share, scales it by a learnable phi, and applies a composite nonlinear transformation featuring fixed power, logarithmic, trigonometric, exponential, and oscillatory components with adaptive modulation. The transformed gap is then combined with a baseline bias (beta) and scaled by sensitivity (gamma) to generate latent utility, which is converted to acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"N_offer\": {\n      \"description\": \"Normalized offer: ratio of participant's proposed share to combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share: ratio of participant's tokens to the total tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between the normalized offer and normalized fair share.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap: fairness gap divided by phi.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing multiple fixed nonlinearities including oscillatory components.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as the sum of a base bias and the sensitivity-scaled nonlinear transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed using the logistic function.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sign(x)\": {\n      \"description\": \"Sign function returning -1, 0, or 1 based on the value of x.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs(x)\": {\n      \"description\": \"Absolute value of x.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making. The model computes a fairness gap from normalized offer and fair share, scales it by a learnable phi, and applies a composite nonlinear transformation featuring fixed power, logarithmic, trigonometric, exponential, and oscillatory components with adaptive modulation. The transformed gap is then combined with a baseline bias (beta) and scaled by sensitivity (gamma) to generate latent utility, which is converted to acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making. The model computes a fairness gap from normalized offer and fair share, scales it by a learnable phi, and applies a composite nonlinear transformation featuring fixed power, logarithmic, trigonometric, exponential, and oscillatory components with adaptive modulation. The transformed gap is then combined with a baseline bias (beta) and scaled by sensitivity (gamma) to generate latent utility, which is converted to acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=1, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n        sign_x = -1 if x < 0 else (1 if x > 0 else 0)\n\n        f_x = sign_x * ((1e-6 + 1.08 * (abs_x**(0.5) + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.01 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x)))**(0.92))\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5998168498168498,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882337997971887,
      "success": true,
      "log_likelihood": -24.619049414386225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7310867772063799,
      "success": true,
      "log_likelihood": -21.06333804696599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0505895560634917,
      "success": true,
      "log_likelihood": -19.753215599611895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5547120132287481,
      "success": true,
      "log_likelihood": -22.739273154089506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9239933348210504,
      "success": true,
      "log_likelihood": -20.452792374606233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4522155420601075,
      "success": true,
      "log_likelihood": -19.804354186871585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.2677175213566712,
      "success": true,
      "log_likelihood": -19.24386479026011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.655337657642291e-16,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.994656787896435,
      "phi": 0.587542816416735,
      "success": true,
      "log_likelihood": -21.704636938640878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9453694665483421,
      "success": true,
      "log_likelihood": -20.61752048319146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882456094866541,
      "success": true,
      "log_likelihood": -24.61904930076228,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7544958885800337,
      "success": true,
      "log_likelihood": -21.07877300552755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.0293917511385955,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.1160833353755246,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.368485236338916,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.590078964035389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.300452612353722,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.605941650502697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.047309658758438,
      "success": true,
      "log_likelihood": -20.19977716274386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.78587370318202,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.772829479170804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4058940225307874,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.524031175960253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9253092440003351,
      "success": true,
      "log_likelihood": -21.680474597227658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.991928332381849,
      "success": true,
      "log_likelihood": -20.28962325645241,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0176031071971918,
      "success": true,
      "log_likelihood": -19.90269202714966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8144523121619964,
      "success": true,
      "log_likelihood": -21.021597616887536,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.87058511016832,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.167250743288395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.8613370535411216,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.057705245962538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.54921052564916,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.202753590013184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882096081631702,
      "success": true,
      "log_likelihood": -24.61904941522636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.096178986917061,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19489618480833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5175775559275024,
      "success": true,
      "log_likelihood": -22.723215928682436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.96322304408468,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.14049774469059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.521814628705808,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.310095599869847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8555627679667068,
      "success": true,
      "log_likelihood": -20.795254562765695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1519050738804582,
      "success": true,
      "log_likelihood": -20.079648241803756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9011624112771781,
      "success": true,
      "log_likelihood": -20.960356168981953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.892989649499929,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.168913598925972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.92270445597278,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.158979417674203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4388621708767664,
      "success": true,
      "log_likelihood": -20.700225743497313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.944819950416137,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.197704173125526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7277936875951616,
      "success": true,
      "log_likelihood": -21.933003927798147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.57372110949812,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.12201399501926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8399242570197438,
      "success": true,
      "log_likelihood": -21.435508959386045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.927032017977674,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.4504362700822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.822977626461563,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.951735970830544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882733507357298,
      "success": true,
      "log_likelihood": -24.61904941255984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.909337690321621,
      "phi": 0.727626126044449,
      "success": true,
      "log_likelihood": -22.929198872942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5746805675116715,
      "gamma": 2.5106647277364282,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.101561805618438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.755291040485548,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.809568890253978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5532966143637176,
      "success": true,
      "log_likelihood": -21.7532189314374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9046347169760316,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.45104876506061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882612221184047,
      "success": true,
      "log_likelihood": -24.61904941133003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.283769054397542,
      "phi": 1.0451774608687188,
      "success": true,
      "log_likelihood": -18.213273643828252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9581057859250393,
      "success": true,
      "log_likelihood": -21.391987317998232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8015000531931398,
      "success": true,
      "log_likelihood": -21.030784077198266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882334367103146,
      "success": true,
      "log_likelihood": -24.619049414385877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.155172131067308,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195045744266583,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5018142531508585,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.516645879425084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.814102624618478,
      "success": true,
      "log_likelihood": -21.021749763364056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.046560790555198,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.817224101280333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7000016354153347,
      "success": true,
      "log_likelihood": -22.19172459411775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4023529152001872,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.524313429903327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882374379538769,
      "success": true,
      "log_likelihood": -24.619049410186626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8182719905713044,
      "success": true,
      "log_likelihood": -22.01545929916138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.470223666117862,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.306846936552343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6968156613747823,
      "success": true,
      "log_likelihood": -23.195531164860054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.752904872144377,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.856198879929003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.1947324404993263,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9085942672185732,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602639169148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.920982375570805,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.15927309206038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6882341155406055,
      "success": true,
      "log_likelihood": -24.619049414386847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.90428274231304,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.45104465621746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7802110123787263,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953558603216237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.752650282000708,
      "gamma": 9.999966383733236,
      "phi": 1.1749484227348233,
      "success": true,
      "log_likelihood": -22.200570555552982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6305341135129948,
      "success": true,
      "log_likelihood": -22.316785234900493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1649426880988,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195076296934236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.99821642106851,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.298478408383083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.55405937273937,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.988695783071257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.624857626796293,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.50807801473205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.447568684010917,
      "success": true,
      "log_likelihood": -21.45943037155435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.4695847192006968,
        "p": 8.27979510241016e-07
      },
      "gamma": {
        "r": 0.25324844916184863,
        "p": 0.011014731396191989
      },
      "phi": {
        "r": 0.20910716709587834,
        "p": 0.03680475672825723
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.60277776256345,
  "bic_results": {
    "average_bic": 50.60277776256345,
    "individual_bics": [
      59.98865564414078,
      52.877232909300304,
      50.256988014592125,
      56.22910312354735,
      51.65614156458079,
      50.3592651891115,
      33.3062773958674,
      49.23828639588855,
      33.3062773958674,
      54.15983069265009,
      51.98559778175125,
      59.9886554168929,
      52.90810282642343,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.93071474343911,
      39.96244011637373,
      33.3062773958674,
      51.150111140856055,
      42.29621577370994,
      57.798619167288834,
      54.11150600982364,
      51.329803328273144,
      50.55594086966765,
      52.79375204914341,
      55.085058301945125,
      40.8659673072934,
      47.1560639953947,
      33.3062773958674,
      59.988655645821055,
      59.140349184984984,
      56.1969886727332,
      33.3062773958674,
      53.03155230474951,
      47.37074801510802,
      52.341065940899725,
      50.90985329897585,
      39.30600500724502,
      52.67126915333223,
      57.08838401322028,
      35.30618659965994,
      55.06851565071673,
      52.15100830236295,
      51.14596516161939,
      54.61656467096462,
      56.994584805406845,
      53.621574734140424,
      59.65142935553273,
      52.65402875702942,
      59.988655640488005,
      56.60895456125233,
      58.9536804266052,
      56.36969459587628,
      54.25699467824313,
      57.65265434548955,
      41.305914211037575,
      59.98865563802839,
      47.17710410302483,
      53.5345314513648,
      52.81212496976487,
      59.98865564414008,
      59.1406483039015,
      57.783848574218496,
      52.79405634209644,
      39.30600500724503,
      42.385005017929,
      55.13400600360383,
      39.306005007245034,
      57.79918367517499,
      59.98865563574158,
      54.78147541369108,
      47.36425068847302,
      57.14161914508844,
      50.462954575226334,
      37.306095803452486,
      60.65776209370662,
      55.06910299948909,
      59.98865564414203,
      57.65264612780325,
      39.30600500724503,
      60.6576740218008,
      55.1516979264743,
      55.38412728516931,
      59.140709409236806,
      51.34751363213449,
      58.72794838151084,
      37.306095803452486,
      57.766712844832426,
      53.669417558477036
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.470\n- gamma: r = 0.253\n- phi: r = 0.209",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\nf_x = sign(x)*((1e-6 + 1.08*(abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.01*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))) )^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making. The model computes a fairness gap from normalized offer and fair share, scales it by a learnable phi, and applies a composite nonlinear transformation featuring fixed power, logarithmic, trigonometric, exponential, and oscillatory components with adaptive modulation. The transformed gap is then combined with a baseline bias (beta) and scaled by sensitivity (gamma) to generate latent utility, which is converted to acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.60277776256345\nOverall Accuracy: 0.5998\n\nParameter Recovery:\n- beta: r = 0.470\n- gamma: r = 0.253\n- phi: r = 0.209"
  ]
}