{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 33, we want to further push the boundaries of creativity while retaining strict adherence to using exactly three learnable parameters (beta, gamma, phi). We aim for improved overall performance (lower BIC, better accuracy, and improved parameter recovery) by encouraging innovative hybrid modulations that blend additive and multiplicative interactions. Consider subtle tweaks to the fixed transformation terms (e.g., adjusting fixed constant multipliers, compression exponents, and including additional oscillatory modulation terms) and consider adding a slight constant inside the additive summation before applying multiplicative factors. The model should still compute a normalized offer (N_offer) and a normalized fair share (N_share), derive the fairness gap F, and then scale it by phi to compute x = F/phi. The transformation f(x) must include all required fixed terms: a power-law term (|x|^(0.5)), logarithmic term (ln(1+3.4\u00d7|x|)), arctan, exponential decay, tanh, and two stated oscillatory terms (0.02\u00d7sin(0.5\u00d7|x|) and 0.012\u00d7[1-cos(0.3\u00d7|x|)]), plus an extra oscillatory term (choose between 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)). Then, creatively combine these with an extra multiplicative modulation factor [1 + 0.012\u00d7sin(|x|)] and multiply the entire sum by a constant C between 1.05 and 1.10. Finally, add a tiny offset (1e-6) and compress the resulting sum by raising it to an exponent E (within [0.90, 0.94], e.g. near 0.92). Use the result in computing the latent utility U = beta + gamma \u00d7 f(F/phi), from which the acceptance probability is derived via the logistic transform. \n\nIn this run, you are encouraged to explore alternative ways to combine additive and multiplicative modulations in f(x) \u2013 for example, by introducing a secondary additive term inside the transformation that might account for subtle curvature effects. This may include integrating a small constant bias within the summation prior to the multiplicative modulation. Be creative while ensuring that the final model still uses strictly only the three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Document your complete model specification between <MODEL> and </MODEL> tags, provide JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags, and clearly denote the target variable using <target_variable> tags (set to \"accept\").\n\nYour goal is to innovate with hybrid interactions to better capture the subtle behavioral effects in the fairness gap.\n</think>\n\nFor run 33, please develop a computational model for responder decision\u2010making with the following updated instructions:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap as:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the fairness gap with phi (learnable, bounds [0.5, 1.5]) to obtain:\u2003\u2003x = F / phi.\n5. Apply a fixed nonlinear transformation f(x) that must include:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Additionally, optionally include an extra oscillatory modulation term such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\u2003\u2003Combine the sum of these fixed components with a multiplicative modulation factor [1 + 0.012\u00d7sin(|x|)], multiply the total by a fixed constant C (choose a value between 1.05 and 1.10), add an offset of 1e-6, and compress by raising the sum to an exponent E (set within [0.90, 0.94], e.g., near 0.92).\n\u2003\u2003Formally, define f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1+3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1\u2212exp(\u2212|x|)) + 0.05\u00d7(1\u2212exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1\u2212cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] ) \u00d7 (1 + 0.012\u00d7sin(|x|)) + 1e-6 }^(E).\n6. Compute the latent utility as:\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n7. Derive the acceptance probability using a logistic function:\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n8. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n9. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags, along with detailed JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n10. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nChallenge yourself to explore innovative combinations of additive and multiplicative terms in f(x) that may yield more accurate predictions, lower BIC values, and improved parameter recovery. Think out of the box about how small additive shifts or combined multiplicative modulations can account for subtle effects in the data.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 33, we want to further push the boundaries of creativity while retaining strict adherence to using exactly three learnable parameters (beta, gamma, phi). We aim for improved overall performance (lower BIC, better accuracy, and improved parameter recovery) by encouraging innovative hybrid modulations that blend additive and multiplicative interactions. Consider subtle tweaks to the fixed transformation terms (e.g., adjusting fixed constant multipliers, compression exponents, and including additional oscillatory modulation terms) and consider adding a slight constant inside the additive summation before applying multiplicative factors. The model should still compute a normalized offer (N_offer) and a normalized fair share (N_share), derive the fairness gap F, and then scale it by phi to compute x = F/phi. The transformation f(x) must include all required fixed terms: a power-law term (|x|^(0.5)), logarithmic term (ln(1+3.4\u00d7|x|)), arctan, exponential decay, tanh, and two stated oscillatory terms (0.02\u00d7sin(0.5\u00d7|x|) and 0.012\u00d7[1-cos(0.3\u00d7|x|)]), plus an extra oscillatory term (choose between 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)). Then, creatively combine these with an extra multiplicative modulation factor [1 + 0.012\u00d7sin(|x|)] and multiply the entire sum by a constant C between 1.05 and 1.10. Finally, add a tiny offset (1e-6) and compress the resulting sum by raising it to an exponent E (within [0.90, 0.94], e.g. near 0.92). Use the result in computing the latent utility U = beta + gamma \u00d7 f(F/phi), from which the acceptance probability is derived via the logistic transform. \n\nIn this run, you are encouraged to explore alternative ways to combine additive and multiplicative modulations in f(x) \u2013 for example, by introducing a secondary additive term inside the transformation that might account for subtle curvature effects. This may include integrating a small constant bias within the summation prior to the multiplicative modulation. Be creative while ensuring that the final model still uses strictly only the three learnable parameters with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Document your complete model specification between <MODEL> and </MODEL> tags, provide JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags, and clearly denote the target variable using <target_variable> tags (set to \"accept\").\n\nYour goal is to innovate with hybrid interactions to better capture the subtle behavioral effects in the fairness gap.\n</think>\n\nFor run 33, please develop a computational model for responder decision\u2010making with the following updated instructions:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap as:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the fairness gap with phi (learnable, bounds [0.5, 1.5]) to obtain:\u2003\u2003x = F / phi.\n5. Apply a fixed nonlinear transformation f(x) that must include:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Additionally, optionally include an extra oscillatory modulation term such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\u2003\u2003Combine the sum of these fixed components with a multiplicative modulation factor [1 + 0.012\u00d7sin(|x|)], multiply the total by a fixed constant C (choose a value between 1.05 and 1.10), add an offset of 1e-6, and compress by raising the sum to an exponent E (set within [0.90, 0.94], e.g., near 0.92).\n\u2003\u2003Formally, define f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1+3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1\u2212exp(\u2212|x|)) + 0.05\u00d7(1\u2212exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1\u2212cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] ) \u00d7 (1 + 0.012\u00d7sin(|x|)) + 1e-6 }^(E).\n6. Compute the latent utility as:\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n7. Derive the acceptance probability using a logistic function:\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n8. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n9. Provide the complete mathematical model specification between <MODEL> and </MODEL> tags, along with detailed JSON\u2010formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n10. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nChallenge yourself to explore innovative combinations of additive and multiplicative terms in f(x) that may yield more accurate predictions, lower BIC values, and improved parameter recovery. Think out of the box about how small additive shifts or combined multiplicative modulations can account for subtle effects in the data.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier, chosen within [1.05, 1.10]\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression, set within [0.90, 0.94]\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap defined as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing combined fixed additive and multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal after logistic transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA hybrid utility model for responder decision-making that computes a normalized fairness gap from offer and contribution tokens. The fairness gap is scaled and transformed using a fixed nonlinear function combining power-law, logarithmic, trigonometric, and exponential decay terms, with additive and multiplicative modulations. The latent utility is then computed as a linear combination of a baseline bias and a sensitivity-scaled transformed fairness gap. The acceptance probability is derived via a logistic transform.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier, chosen within [1.05, 1.10]\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression, set within [0.90, 0.94]\",\n      \"range\": {\n        \"min\": 0.9,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap defined as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing combined fixed additive and multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal after logistic transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075  # Fixed constant, midpoint of [1.05, 1.10]\n    E = 0.92  # Fixed exponent, midpoint of [0.90, 0.94]\n\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n        \n        # Nonlinear transformation\n        term1 = abs_x**0.5\n        term2 = math.log(1 + 3.4 * abs_x)\n        term3 = 0.2 * math.atan(1.1 * abs_x)\n        term4 = 0.1 * (1 - math.exp(-abs_x))\n        term5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        term6 = 0.03 * math.tanh(abs_x)\n        term7 = 0.02 * math.sin(0.5 * abs_x)\n        term8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        term9 = 0.005 * math.exp(-abs_x)\n        term10 = 0.005 * math.sin(2.2 * abs_x)\n        term11 = 0.002 * math.cos(3.0 * abs_x)\n        \n        nonlinear_part = C * (term1 + term2 + term3 + term4 + term5 + term6 + term7 + term8 + term9 + term10 + term11) * (1 + 0.012 * math.sin(abs_x)) + 1e-6\n        \n        f_x = (1 if x >= 0 else -1) * (nonlinear_part ** E)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n\n    return model_predictions\n```",
      "timestamp": 1743539878.575969
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned (each token is \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "C": {
      "description": "Fixed constant multiplier, chosen within [1.05, 1.10]",
      "range": {
        "min": 1.05,
        "max": 1.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": false,
      "source": "fixed"
    },
    "E": {
      "description": "Fixed exponent for compression, set within [0.90, 0.94]",
      "range": {
        "min": 0.9,
        "max": 0.94,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": false,
      "source": "fixed"
    },
    "F": {
      "description": "Fairness gap between normalized offer and normalized fair share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap defined as F divided by phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Nonlinear transformation of x capturing combined fixed additive and multiplicative modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Probability of accepting the proposal after logistic transformation",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "logistic",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A hybrid utility model for responder decision-making that computes a normalized fairness gap from offer and contribution tokens. The fairness gap is scaled and transformed using a fixed nonlinear function combining power-law, logarithmic, trigonometric, and exponential decay terms, with additive and multiplicative modulations. The latent utility is then computed as a linear combination of a baseline bias and a sensitivity-scaled transformed fairness gap. The acceptance probability is derived via a logistic transform.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier, chosen within [1.05, 1.10]\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression, set within [0.90, 0.94]\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap defined as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Nonlinear transformation of x capturing combined fixed additive and multiplicative modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal after logistic transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA hybrid utility model for responder decision-making that computes a normalized fairness gap from offer and contribution tokens. The fairness gap is scaled and transformed using a fixed nonlinear function combining power-law, logarithmic, trigonometric, and exponential decay terms, with additive and multiplicative modulations. The latent utility is then computed as a linear combination of a baseline bias and a sensitivity-scaled transformed fairness gap. The acceptance probability is derived via a logistic transform.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A hybrid utility model for responder decision-making that computes a normalized fairness gap from offer and contribution tokens. The fairness gap is scaled and transformed using a fixed nonlinear function combining power-law, logarithmic, trigonometric, and exponential decay terms, with additive and multiplicative modulations. The latent utility is then computed as a linear combination of a baseline bias and a sensitivity-scaled transformed fairness gap. The acceptance probability is derived via a logistic transform.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075  # Fixed constant, midpoint of [1.05, 1.10]\n    E = 0.92  # Fixed exponent, midpoint of [0.90, 0.94]\n\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n        \n        # Nonlinear transformation\n        term1 = abs_x**0.5\n        term2 = math.log(1 + 3.4 * abs_x)\n        term3 = 0.2 * math.atan(1.1 * abs_x)\n        term4 = 0.1 * (1 - math.exp(-abs_x))\n        term5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        term6 = 0.03 * math.tanh(abs_x)\n        term7 = 0.02 * math.sin(0.5 * abs_x)\n        term8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        term9 = 0.005 * math.exp(-abs_x)\n        term10 = 0.005 * math.sin(2.2 * abs_x)\n        term11 = 0.002 * math.cos(3.0 * abs_x)\n        \n        nonlinear_part = C * (term1 + term2 + term3 + term4 + term5 + term6 + term7 + term8 + term9 + term10 + term11) * (1 + 0.012 * math.sin(abs_x)) + 1e-6\n        \n        f_x = (1 if x >= 0 else -1) * (nonlinear_part ** E)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5989010989010989,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855684648295262,
      "success": true,
      "log_likelihood": -24.618752996033884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7283413483851874,
      "success": true,
      "log_likelihood": -21.06198651054084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.046709281526242,
      "success": true,
      "log_likelihood": -19.75073920351749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5527665118397311,
      "success": true,
      "log_likelihood": -22.73860361056999,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9241974147781067,
      "success": true,
      "log_likelihood": -20.45063196374389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4470118229148963,
      "success": true,
      "log_likelihood": -19.802305544287904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.3629099900315706e-16,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.2626364833239245,
      "success": true,
      "log_likelihood": -19.242857032042153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5860942775802875,
      "success": true,
      "log_likelihood": -21.70393042245275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9424238442036781,
      "success": true,
      "log_likelihood": -20.615372740099016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855572396336687,
      "success": true,
      "log_likelihood": -24.618752881730114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7519312338348906,
      "success": true,
      "log_likelihood": -21.077508166664153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.3783700698742285,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.58792365495922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.311773739573515,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.602933787436662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0436377961317733,
      "success": true,
      "log_likelihood": -20.198238907980524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.802365463112143,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.771705859587547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3414727869381182,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.520180374612508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.696240856340513,
      "phi": 0.8774677496143403,
      "success": true,
      "log_likelihood": -21.680635631767128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9886645497186507,
      "success": true,
      "log_likelihood": -20.287476187806504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0135986513674413,
      "success": true,
      "log_likelihood": -19.90073101396468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8113061835099522,
      "success": true,
      "log_likelihood": -21.021022841796444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.847659613498182,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.16737268474914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.871446676210237,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.056563661260528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.564578954964174,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.202647081254455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855375672578824,
      "success": true,
      "log_likelihood": -24.618752997557536,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1534443435792916,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19502366965284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5161205743855928,
      "success": true,
      "log_likelihood": -22.722588684988423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.8778347275413252,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.679360855297773,
      "gamma": 7.085265740522829,
      "phi": 0.8951166785308794,
      "success": true,
      "log_likelihood": -21.16297947435018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.541532313121017,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.30694009004384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8524492021119305,
      "success": true,
      "log_likelihood": -20.79423602937966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.147264545675188,
      "success": true,
      "log_likelihood": -20.07907146445912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8982657241866644,
      "success": true,
      "log_likelihood": -20.96000074930722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.869907503728173,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.169370045661417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.899453017358844,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.159183665518455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.977183532695795,
      "phi": 1.4289121123701616,
      "success": true,
      "log_likelihood": -20.698898687267953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.955988142452038,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.19639186956397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7253482705680729,
      "success": true,
      "log_likelihood": -21.932885221545003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.549657457975394,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.122002784943138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8375769354810525,
      "success": true,
      "log_likelihood": -21.43405530243798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8717654114431608,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.44952214298414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.842491345541172,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.951226353664644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855685634021916,
      "success": true,
      "log_likelihood": -24.618752991798004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.402877991547262,
      "gamma": 8.084315688546688,
      "phi": 0.5678524961277728,
      "success": true,
      "log_likelihood": -22.93069492274115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4416364354330866,
      "gamma": 2.2412904156466467,
      "phi": 1.3301113063645726,
      "success": true,
      "log_likelihood": -24.100779341251936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.736316698422247,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.809692670148884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5514034669810028,
      "success": true,
      "log_likelihood": -21.75234703597563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8496788987442008,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.450115529002662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6860637999456852,
      "success": true,
      "log_likelihood": -24.618753360421575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.530464411566345,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.213385742997016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9546675821714276,
      "success": true,
      "log_likelihood": -21.39049762728497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7983187317894846,
      "success": true,
      "log_likelihood": -21.0300293030061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6853863867700709,
      "success": true,
      "log_likelihood": -24.618753046548907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.21130527616588,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195167231860403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4371951213685477,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.513091987842234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8111205998297306,
      "success": true,
      "log_likelihood": -21.021168798633212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.056111303677453,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.81505211855247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6972062925419265,
      "success": true,
      "log_likelihood": -22.19086095305505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.337953246812638,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.520451167818475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855745143366812,
      "success": true,
      "log_likelihood": -24.618752991838846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8151194299696989,
      "success": true,
      "log_likelihood": -22.0149908459341,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.488091804921122,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.305090442179022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6941181625805553,
      "success": true,
      "log_likelihood": -23.194540555977373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.773904792713687,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.85548313361884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9243984990613412,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602570847025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.897650129825921,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.159470230491873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6855671446298202,
      "success": true,
      "log_likelihood": -24.618752996040072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8482902972576825,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.45011163026966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8046348413259723,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953558508191445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1362988864075572,
      "success": true,
      "log_likelihood": -22.191404081583304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6283850066936207,
      "success": true,
      "log_likelihood": -22.31512575206446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.2178106749123097,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19519679989804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.01375704204214,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.2968393493195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.531808001701167,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.988447425121798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5597972575587917,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.504870978982133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.978553299924567,
      "phi": 1.43371075138851,
      "success": true,
      "log_likelihood": -21.4590863660905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.46559210971805676,
        "p": 1.0546961378591503e-06
      },
      "gamma": {
        "r": 0.24434697887672335,
        "p": 0.014285286839752621
      },
      "phi": {
        "r": 0.07295052490060042,
        "p": 0.4707277795446446
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.60153686050313,
  "bic_results": {
    "average_bic": 50.60153686050313,
    "individual_bics": [
      59.988062807436094,
      52.87452983645001,
      50.25203522240331,
      56.227764036508304,
      51.65182074285612,
      50.355167903944135,
      33.3062773958674,
      49.23627087945263,
      33.3062773958674,
      54.15841766027383,
      51.981302295566366,
      59.98806257882856,
      52.90557314869663,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.926404125286766,
      39.95642439024165,
      33.3062773958674,
      51.147034631329376,
      42.293968534543424,
      57.79091756459334,
      54.11182807890259,
      51.325509190981336,
      50.55201884329769,
      52.792602498961216,
      55.085302184866606,
      40.863684137889386,
      47.155850977877236,
      33.3062773958674,
      59.9880628104834,
      59.14060415467401,
      56.195734185345174,
      33.3062773958674,
      53.07651576406869,
      47.36443699545602,
      52.33902887412765,
      50.908699744286565,
      39.30600500724502,
      52.67055831398277,
      57.08929690669116,
      35.30618659965994,
      55.06892414640524,
      52.14835418990424,
      51.14334055449628,
      54.61632725845834,
      56.99456238525461,
      53.61866742024429,
      59.649601101336614,
      52.653009522697616,
      59.988062798964336,
      56.611946660850634,
      58.9521154978722,
      56.369942155666095,
      54.25525088731959,
      57.65078787337366,
      41.305914211037575,
      59.988063536211484,
      47.177328301362365,
      53.53155206993827,
      52.81061542138053,
      59.98806290846615,
      59.14089127908913,
      57.7767407910528,
      52.79289441263475,
      39.30600500724503,
      42.38066105247327,
      55.13227872147843,
      39.306005007245034,
      57.791459151005284,
      59.98806279904602,
      54.78053850723653,
      47.36073769972637,
      57.13963792732308,
      50.46152308260601,
      37.306095803452486,
      60.65776195706238,
      55.06949727635208,
      59.98806280744847,
      57.65078007590765,
      39.30600500724503,
      60.657673831751225,
      55.13336497853494,
      55.38080831949725,
      59.14095041516441,
      51.34423551400734,
      58.72745166561192,
      37.306095803452486,
      57.76029877333259,
      53.66872954754933
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.466\n- gamma: r = 0.244\n- phi: r = 0.073",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4*|x|) + 0.2*atan(1.1*|x|) + 0.1*(1 - exp(-|x|)) + 0.05*(1 - exp(-2*|x|)) + 0.03*tanh(|x|) + 0.02*sin(0.5*|x|) + 0.012*(1 - cos(0.3*|x|)) + 0.005*exp(-|x|) + 0.005*sin(2.2*|x|) + 0.002*cos(3.0*|x|) ) * (1 + 0.012*sin(|x|)) + 1e-6 }^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A hybrid utility model for responder decision-making that computes a normalized fairness gap from offer and contribution tokens. The fairness gap is scaled and transformed using a fixed nonlinear function combining power-law, logarithmic, trigonometric, and exponential decay terms, with additive and multiplicative modulations. The latent utility is then computed as a linear combination of a baseline bias and a sensitivity-scaled transformed fairness gap. The acceptance probability is derived via a logistic transform.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.60153686050313\nOverall Accuracy: 0.5989\n\nParameter Recovery:\n- beta: r = 0.466\n- gamma: r = 0.244\n- phi: r = 0.073"
  ]
}