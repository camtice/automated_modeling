{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 35, we want to push the creative boundaries even further. In these instructions, encourage the model designer to experiment with additional modifications in the fixed nonlinear transformation f(x) without introducing new learnable parameters. Consider allowing a secondary modulation stage after the initial summation that might capture nonlinear curvature, and permit the inclusion of an extra additive constant (delta) inside the summation to slightly shift the transformation. Emphasize the possibility of experimenting with altered phase shifts in the oscillatory modulation component (for example, a sine term with an adjustable phase) or even applying a modulation factor both before and after the power compression. Remind the designer that the overall structure must remain: compute normalized offer and fair share, determine the fairness gap F, scale by phi, apply a fixed transformation with all required components (including |x|^(0.5), ln(1+3.4|x|), 0.2\u00d7atan(1.1|x|), etc.), then add an extra small constant (delta \u2248 0.01), multiply by a factor that can include a phase-shifted sine modulation [e.g., 1 + 0.012\u00d7sin(|x| + 0.03)], further multiply by a fixed constant C within [1.05, 1.10] (you may even allow a two-tier multiplication where one factor is applied immediately after summation and another after an intermediary transformation), add a tiny offset (1e-6), and finally compress the total with an exponent E (in the vicinity of 0.92). Conclude with computing the latent utility U = beta + gamma \u00d7 f(F/phi) and mapping U to a probability with the logistic function. Emphasize that exactly three learnable parameters must be used (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Encourage out-of-the-box thinking while keeping the core mathematical structure intact.\n</think>\n\nFor run 35, please develop a computational model for responder decision\u2010making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap with phi (learnable, bounds [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n5. Apply a fixed nonlinear transformation f(x) that must include the following components computed on |x|:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include additional oscillatory modulation terms such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Enhance f(x) by adding a secondary additive shift (for example, add a constant delta = 0.01) inside the summation before any modulation is applied.\n\n7. Multiply the resulting sum by a multiplicative modulation factor of the form [1 + 0.012\u00d7sin(|x| + 0.03)] to allow slight phase shifting. Then, further multiply by a fixed constant C chosen within the range [1.05, 1.10]. Optionally, consider applying a secondary modulation after an initial transformation step to capture potential curvature effects.\n\n8. Add a final offset of 1e-6.\n\n9. Compress the resulting total by raising it to a fixed exponent E (set near 0.92, within the range [0.90, 0.94]). Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1+3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1\u2212exp(\u2212|x|)) + 0.05\u00d7(1\u2212exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1\u2212cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1+0.012\u00d7sin(|x|+0.03)) + 1e-6 }^(E).\n\n10. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n11. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n12. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n\n13. Present your complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n14. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nChallenge yourself to incorporate non-obvious interactions, such as dual-modulation stages or innovative phase shifts in the sine terms, to capture subtle behavioral nuances that may lead to improved prediction accuracy, lower BIC values, and better parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 35, we want to push the creative boundaries even further. In these instructions, encourage the model designer to experiment with additional modifications in the fixed nonlinear transformation f(x) without introducing new learnable parameters. Consider allowing a secondary modulation stage after the initial summation that might capture nonlinear curvature, and permit the inclusion of an extra additive constant (delta) inside the summation to slightly shift the transformation. Emphasize the possibility of experimenting with altered phase shifts in the oscillatory modulation component (for example, a sine term with an adjustable phase) or even applying a modulation factor both before and after the power compression. Remind the designer that the overall structure must remain: compute normalized offer and fair share, determine the fairness gap F, scale by phi, apply a fixed transformation with all required components (including |x|^(0.5), ln(1+3.4|x|), 0.2\u00d7atan(1.1|x|), etc.), then add an extra small constant (delta \u2248 0.01), multiply by a factor that can include a phase-shifted sine modulation [e.g., 1 + 0.012\u00d7sin(|x| + 0.03)], further multiply by a fixed constant C within [1.05, 1.10] (you may even allow a two-tier multiplication where one factor is applied immediately after summation and another after an intermediary transformation), add a tiny offset (1e-6), and finally compress the total with an exponent E (in the vicinity of 0.92). Conclude with computing the latent utility U = beta + gamma \u00d7 f(F/phi) and mapping U to a probability with the logistic function. Emphasize that exactly three learnable parameters must be used (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Encourage out-of-the-box thinking while keeping the core mathematical structure intact.\n</think>\n\nFor run 35, please develop a computational model for responder decision\u2010making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap with phi (learnable, bounds [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n5. Apply a fixed nonlinear transformation f(x) that must include the following components computed on |x|:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include additional oscillatory modulation terms such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Enhance f(x) by adding a secondary additive shift (for example, add a constant delta = 0.01) inside the summation before any modulation is applied.\n\n7. Multiply the resulting sum by a multiplicative modulation factor of the form [1 + 0.012\u00d7sin(|x| + 0.03)] to allow slight phase shifting. Then, further multiply by a fixed constant C chosen within the range [1.05, 1.10]. Optionally, consider applying a secondary modulation after an initial transformation step to capture potential curvature effects.\n\n8. Add a final offset of 1e-6.\n\n9. Compress the resulting total by raising it to a fixed exponent E (set near 0.92, within the range [0.90, 0.94]). Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1+3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1\u2212exp(\u2212|x|)) + 0.05\u00d7(1\u2212exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1\u2212cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1+0.012\u00d7sin(|x|+0.03)) + 1e-6 }^(E).\n\n10. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n11. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n12. Use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n\n13. Present your complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n14. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nChallenge yourself to incorporate non-obvious interactions, such as dual-modulation stages or innovative phase shifts in the sine terms, to capture subtle behavioral nuances that may lead to improved prediction accuracy, lower BIC values, and better parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter affecting latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F affecting the transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units (\u00a3)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\u00a3), derived from tokens\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant in the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent used in the final compression of the transformation\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision\u2010making that computes a normalized offer and fair share to derive a fairness gap. This gap is scaled by a learnable factor phi and transformed nonlinearly using multiple fixed functions (including power, logarithmic, trigonometric, and exponential components) with dual-modulation stages encompassing an additive delta and phase-shifted sine modulation, followed by multiplicative scaling with a constant C and exponentiation. The latent utility is computed as a linear combination of the transformed fairness gap with baseline bias beta and sensitivity gamma, and is mapped to an acceptance probability using the logistic function. Only three parameters (beta, gamma, phi) are learnable.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter affecting latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F affecting the transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units (\\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\\u00a3), derived from tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant in the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent used in the final compression of the transformation\",\n      \"range\": {\n        \"min\": 0.9,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075  # Midpoint of 1.05 and 1.1\n    E = 0.92  # Midpoint of 0.9 and 0.94\n\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\")\n        combined_earning = trial.get(\"combined_earning\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n\n        # Handle edge cases to avoid division by zero\n        if combined_earning == 0:\n            N_offer = 0  # Or some other reasonable default\n        else:\n            N_offer = split_self / combined_earning\n\n        if (token_self + token_opp) == 0:\n            N_share = 0  # Or some other reasonable default\n        else:\n            N_share = token_self / (token_self + token_opp)\n\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        # Sign function\n        if x > 0:\n            sign_x = 1\n        elif x < 0:\n            sign_x = -1\n        else:\n            sign_x = 0\n\n        # Nonlinear transformation\n        term1 = abs_x**0.5\n        term2 = math.log(1 + 3.4 * abs_x)\n        term3 = 0.2 * math.atan(1.1 * abs_x)\n        term4 = 0.1 * (1 - math.exp(-abs_x))\n        term5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        term6 = 0.03 * math.tanh(abs_x)\n        term7 = 0.02 * math.sin(0.5 * abs_x)\n        term8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        term9 = 0.005 * math.exp(-abs_x)\n        term10 = 0.005 * math.sin(2.2 * abs_x)\n        term11 = 0.002 * math.cos(3.0 * abs_x)\n        term12 = 0.01\n\n        base_transformation = term1 + term2 + term3 + term4 + term5 + term6 + term7 + term8 + term9 + term10 + term11 + term12\n        modulation_term = 1 + 0.012 * math.sin(abs_x + 0.03)\n\n        f_x = sign_x * ( (C * base_transformation * modulation_term + 1e-6)**E )\n\n\n        # Utility calculation\n        U = beta + gamma * f_x\n\n        # Probability of acceptance (logistic function)\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0 #Handle overflow, approach to limit\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"2\",\"trial_number\":1,\"trial_type\":0,\"trial_role\":0,\"token_opp\":9,\"token_self\":6,\"combined_earning\":15,\"split_opp\":2.5,\"split_self\":2.5,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":2.5,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":2.5},{\"ID\":2,\"group\":\"2\",\"trial_number\":2,\"trial_type\":0,\"trial_role\":0,\"token_opp\":9,\"token_self\":6,\"combined_earning\":15,\"split_opp\":2.5,\"split_self\":2.5,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":2.5,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":2.5},{\"ID\":3,\"group\":\"2\",\"trial_number\":3,\"trial_type\":0,\"trial_role\":0,\"token_opp\":9,\"token_self\":6,\"combined_earning\":15,\"split_opp\":2.5,\"split_self\":2.5,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":2.5,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":2.5}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743540043.797787
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter affecting latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the transformed fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap F affecting the transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline bias parameter affecting latent utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the transformed fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap F affecting the transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant in monetary units (\u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (\u00a3), derived from tokens",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "C": {
      "description": "Fixed multiplicative constant in the nonlinear transformation",
      "range": {
        "min": 1.05,
        "max": 1.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    },
    "E": {
      "description": "Fixed exponent used in the final compression of the transformation",
      "range": {
        "min": 0.9,
        "max": 0.94,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "A computational model for responder decision\u2010making that computes a normalized offer and fair share to derive a fairness gap. This gap is scaled by a learnable factor phi and transformed nonlinearly using multiple fixed functions (including power, logarithmic, trigonometric, and exponential components) with dual-modulation stages encompassing an additive delta and phase-shifted sine modulation, followed by multiplicative scaling with a constant C and exponentiation. The latent utility is computed as a linear combination of the transformed fairness gap with baseline bias beta and sensitivity gamma, and is mapped to an acceptance probability using the logistic function. Only three parameters (beta, gamma, phi) are learnable.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter affecting latent utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F affecting the transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units (\u00a3)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\u00a3), derived from tokens\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant in the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent used in the final compression of the transformation\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision\u2010making that computes a normalized offer and fair share to derive a fairness gap. This gap is scaled by a learnable factor phi and transformed nonlinearly using multiple fixed functions (including power, logarithmic, trigonometric, and exponential components) with dual-modulation stages encompassing an additive delta and phase-shifted sine modulation, followed by multiplicative scaling with a constant C and exponentiation. The latent utility is computed as a linear combination of the transformed fairness gap with baseline bias beta and sensitivity gamma, and is mapped to an acceptance probability using the logistic function. Only three parameters (beta, gamma, phi) are learnable.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A computational model for responder decision\u2010making that computes a normalized offer and fair share to derive a fairness gap. This gap is scaled by a learnable factor phi and transformed nonlinearly using multiple fixed functions (including power, logarithmic, trigonometric, and exponential components) with dual-modulation stages encompassing an additive delta and phase-shifted sine modulation, followed by multiplicative scaling with a constant C and exponentiation. The latent utility is computed as a linear combination of the transformed fairness gap with baseline bias beta and sensitivity gamma, and is mapped to an acceptance probability using the logistic function. Only three parameters (beta, gamma, phi) are learnable.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075  # Midpoint of 1.05 and 1.1\n    E = 0.92  # Midpoint of 0.9 and 0.94\n\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\")\n        combined_earning = trial.get(\"combined_earning\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n\n        # Handle edge cases to avoid division by zero\n        if combined_earning == 0:\n            N_offer = 0  # Or some other reasonable default\n        else:\n            N_offer = split_self / combined_earning\n\n        if (token_self + token_opp) == 0:\n            N_share = 0  # Or some other reasonable default\n        else:\n            N_share = token_self / (token_self + token_opp)\n\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        # Sign function\n        if x > 0:\n            sign_x = 1\n        elif x < 0:\n            sign_x = -1\n        else:\n            sign_x = 0\n\n        # Nonlinear transformation\n        term1 = abs_x**0.5\n        term2 = math.log(1 + 3.4 * abs_x)\n        term3 = 0.2 * math.atan(1.1 * abs_x)\n        term4 = 0.1 * (1 - math.exp(-abs_x))\n        term5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        term6 = 0.03 * math.tanh(abs_x)\n        term7 = 0.02 * math.sin(0.5 * abs_x)\n        term8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        term9 = 0.005 * math.exp(-abs_x)\n        term10 = 0.005 * math.sin(2.2 * abs_x)\n        term11 = 0.002 * math.cos(3.0 * abs_x)\n        term12 = 0.01\n\n        base_transformation = term1 + term2 + term3 + term4 + term5 + term6 + term7 + term8 + term9 + term10 + term11 + term12\n        modulation_term = 1 + 0.012 * math.sin(abs_x + 0.03)\n\n        f_x = sign_x * ( (C * base_transformation * modulation_term + 1e-6)**E )\n\n\n        # Utility calculation\n        U = beta + gamma * f_x\n\n        # Probability of acceptance (logistic function)\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0 #Handle overflow, approach to limit\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5787545787545787,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6980842628988246,
      "success": true,
      "log_likelihood": -24.619991114760417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7398457010262427,
      "success": true,
      "log_likelihood": -21.066849565148246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0628551764867116,
      "success": true,
      "log_likelihood": -19.75916062044171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.561287498376526,
      "success": true,
      "log_likelihood": -22.740825142924308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9344209974652897,
      "success": true,
      "log_likelihood": -20.45723708218548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4690630401306974,
      "success": true,
      "log_likelihood": -19.80862485872474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.2842357957597212,
      "success": true,
      "log_likelihood": -19.247354917510258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5953227919033609,
      "success": true,
      "log_likelihood": -21.70634338237219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9556624429723345,
      "success": true,
      "log_likelihood": -20.621296149590872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6967590994930142,
      "success": true,
      "log_likelihood": -24.61998945892377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7635624943714525,
      "success": true,
      "log_likelihood": -21.081546481156767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.321187663622504,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.592208122658537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.252220858579838,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.609080063712142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0596401770924144,
      "success": true,
      "log_likelihood": -20.20327794004379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.727530915972246,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.775356510823983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4497562356293567,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.520418626505666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9356827069752985,
      "success": true,
      "log_likelihood": -21.683650434543512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0031496790804706,
      "success": true,
      "log_likelihood": -20.293863983994264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0299940087452066,
      "success": true,
      "log_likelihood": -19.90815336689051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.687333850439797,
      "phi": 0.7834590377886584,
      "success": true,
      "log_likelihood": -21.023895116608763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.951032132653902,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.16762784181539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.815771943626521,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.059064258962696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.48829189095157,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.203339994448267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.697024458461699,
      "success": true,
      "log_likelihood": -24.619989466721616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1188372242741895,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19482751376064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5229052836430688,
      "success": true,
      "log_likelihood": -22.723891765240086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.891044075958165,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.142305603777377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.452351551772013,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.316697092000105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.866161616678648,
      "success": true,
      "log_likelihood": -20.797853222951773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1667560026493677,
      "success": true,
      "log_likelihood": -20.081720363545994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9137562225262595,
      "success": true,
      "log_likelihood": -20.96138391035124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.974379463172963,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.16971174884533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.002933780492501,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.159415799082524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.455014974110995,
      "success": true,
      "log_likelihood": -20.70241337824549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.894526090922406,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.198688168143295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.993997857498757,
      "phi": 0.7357325633758786,
      "success": true,
      "log_likelihood": -21.933235944833005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.652450906930396,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.122139541233302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.848248708423594,
      "success": true,
      "log_likelihood": -21.437402409959784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.978799531206987,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.449578046645904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.757701515370279,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.952642628458356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.697022234366241,
      "success": true,
      "log_likelihood": -24.61998946250946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.055363113331405,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.194655865103805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6073843800230017,
      "gamma": 2.5227504574911825,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.100690618859065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.8401931747484594,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.809781372606416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5598751696753859,
      "success": true,
      "log_likelihood": -21.755288655789347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.95595576073841,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.450174368975816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6978542462435551,
      "success": true,
      "log_likelihood": -24.619990473934145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.202974121396769,
      "phi": 0.6987708407007042,
      "success": true,
      "log_likelihood": -18.21335374022761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9693328085267122,
      "success": true,
      "log_likelihood": -21.395678435560924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.116721776041553,
      "phi": 0.6977586037813892,
      "success": true,
      "log_likelihood": -21.035044347557843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.697394527221794,
      "success": true,
      "log_likelihood": -24.619989669033618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.178492737396006,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.194961289190918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.545613481623462,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.513300577679317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.648714362934996,
      "gamma": 9.213196371800578,
      "phi": 0.7594468820222573,
      "success": true,
      "log_likelihood": -21.03344315973603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.001831198774334,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.818964825103249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7087338237778135,
      "success": true,
      "log_likelihood": -22.194444897916302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4462431526793016,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.52069121927596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6970213391192129,
      "success": true,
      "log_likelihood": -24.619989462513935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8287695966884769,
      "success": true,
      "log_likelihood": -22.017012240698058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.408108802313377,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.31040505932675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7054776736142614,
      "success": true,
      "log_likelihood": -23.198329325449773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.6807605677043,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.857973748176565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8929136225481753,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602615974614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.001051984258298,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.159703366334586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.6969999343549442,
      "success": true,
      "log_likelihood": -24.619989467476852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9557749892235097,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.45017046847036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.5307362340842299,
      "phi": 1.3106095446978543,
      "success": true,
      "log_likelihood": -24.953560001373848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1534984239723998,
      "success": true,
      "log_likelihood": -22.194715921591317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6374291047202265,
      "success": true,
      "log_likelihood": -22.319894478413502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1889901330490225,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.194988822442017,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.94083555510119,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.300117337030027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.634248591502521,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.9886898170546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6681015113970306,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.505042547614867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4632551500653828,
      "success": true,
      "log_likelihood": -21.46089694098266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.4899206049748216,
        "p": 2.2988872013139876e-07
      },
      "gamma": {
        "r": 0.2731642073348528,
        "p": 0.005963112795677929
      },
      "phi": {
        "r": -0.07041047980782253,
        "p": 0.4863554890082673
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.63300182223844,
  "bic_results": {
    "average_bic": 50.63300182223844,
    "individual_bics": [
      59.99053904488916,
      52.88425594566482,
      50.26887805625175,
      56.23220710121694,
      51.665030979739285,
      50.36780653281781,
      33.3062773958674,
      49.24526665038884,
      33.3062773958674,
      54.163243580112706,
      51.99314911455008,
      59.990535733215864,
      52.91364977768187,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.93497306068541,
      39.96871694279261,
      33.3062773958674,
      51.15711269545591,
      42.30126983701629,
      57.79139406837966,
      54.11785768445536,
      51.338284783356855,
      50.566863549149346,
      52.79834704858585,
      55.085812498999104,
      40.868685333293726,
      47.15723680426487,
      33.3062773958674,
      59.99053574881157,
      59.14021184288961,
      56.19834034584851,
      33.3062773958674,
      53.03516802292309,
      47.38395099936854,
      52.34626326127187,
      50.91399754246032,
      39.30600500724502,
      52.67332463607082,
      57.08998031305899,
      35.30618659965994,
      55.069388413533375,
      52.15538357185932,
      51.147933151654925,
      54.61702870503434,
      56.99483589783493,
      53.6253616352879,
      59.649712908660135,
      52.65584207228504,
      59.990535740387244,
      59.139868545575936,
      58.951938053086465,
      56.37011956058116,
      54.26113412694703,
      57.65090555331996,
      41.305914211037575,
      59.99053776323662,
      47.17726429582355,
      53.541913686490176,
      52.82064551048401,
      59.99053615343557,
      59.14047939375017,
      57.77715797072696,
      52.81744313484039,
      39.30600500724503,
      42.38848646557483,
      55.13944661120094,
      39.306005007245034,
      57.79193925392025,
      59.9905357403962,
      54.78458129676444,
      47.371366934021836,
      57.14721546626788,
      50.466504311721465,
      37.306095803452486,
      60.65776204731756,
      55.06996354803751,
      59.99053575032204,
      57.65089775230905,
      39.30600500724503,
      60.65767681811603,
      55.13998865855096,
      55.39034577219533,
      59.14053446025237,
      51.35079148942839,
      58.727936449477525,
      37.306095803452486,
      57.76064191059807,
      53.672350697333655
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.490\n- gamma: r = 0.273\n- phi: r = -0.070",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf_x = sign(x) * { [ C * ( abs(x)^(0.5) + ln(1 + 3.4 * abs(x)) + 0.2 * atan(1.1 * abs(x)) + 0.1 * (1 - exp(-abs(x))) + 0.05 * (1 - exp(-2 * abs(x))) + 0.03 * tanh(abs(x)) + 0.02 * sin(0.5 * abs(x)) + 0.012 * (1 - cos(0.3 * abs(x))) + 0.005 * exp(-abs(x)) + 0.005 * sin(2.2 * abs(x)) + 0.002 * cos(3.0 * abs(x)) + 0.01 ) * (1 + 0.012 * sin(abs(x) + 0.03)) + 1e-6 ]^(E)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A computational model for responder decision\u2010making that computes a normalized offer and fair share to derive a fairness gap. This gap is scaled by a learnable factor phi and transformed nonlinearly using multiple fixed functions (including power, logarithmic, trigonometric, and exponential components) with dual-modulation stages encompassing an additive delta and phase-shifted sine modulation, followed by multiplicative scaling with a constant C and exponentiation. The latent utility is computed as a linear combination of the transformed fairness gap with baseline bias beta and sensitivity gamma, and is mapped to an acceptance probability using the logistic function. Only three parameters (beta, gamma, phi) are learnable.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.63300182223844\nOverall Accuracy: 0.5788\n\nParameter Recovery:\n- beta: r = 0.490\n- gamma: r = 0.273\n- phi: r = -0.070"
  ]
}