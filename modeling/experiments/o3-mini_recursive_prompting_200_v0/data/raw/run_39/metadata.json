{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 39, let's push the nonlinear transformation further by adding an extra modulation stage after the initial modulation. Experiment with adding a secondary oscillatory modulation (for example, an extra sine term with a small amplitude and phase shift) that multiplies the already modulated signal. This extra modulation may help capture additional curvature effects and subtle nonlinearities, potentially enhancing accuracy, lowering BIC, and improving parameter recovery. Retain all mandatory components, but allow the optional oscillatory terms to be used or omitted as the modeler sees fit. Encourage creative reordering of additive constants and multiplicative modulations. Also, invite exploration of phase shifts in the sine and cosine adjustments to expose intricate patterns. Use exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]) and ensure the full formal specification is provided between the <MODEL> and </MODEL> tags, with detailed JSON variable descriptions between <VARIABLES> and </VARIABLES> and the target variable clearly marked within <target_variable> tags.\n</think>\n\nFor run 39, please develop a computational model for responder decision\u2010making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n5. Compute a fixed nonlinear transformation f(x) on |x| that must include these mandatory components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include additional oscillatory modulation terms (e.g., 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)).\n\n6. Enhance the summation by adding an additive constant delta = 0.01 to the above sum before any modulations.\n\n7. Multiply the constant-shifted sum by a multiplicative modulation factor of the form [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Further multiply by a fixed constant C (choose any value within [1.05, 1.10]).\n\n9. Introduce an additional modulation stage by multiplying the result by another curvature factor [1 + 0.008\u00d7cos(|x| + 0.05)].\n\n10. To further allow for fine adjustment of nonlinear curvature, multiply by a secondary modulation factor [1 + 0.005\u00d7sin(|x| + 0.10)].\n\n11. Add a final tiny offset 1e-6.\n\n12. Compress the resulting total by raising it to a fixed exponent E (choose a value near 0.92 within the interval [0.90, 0.94]). Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2212|x|)) + 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1 + 0.012\u00d7sin(|x| + 0.03)) \u00d7 (1 + 0.008\u00d7cos(|x| + 0.05)) \u00d7 (1 + 0.005\u00d7sin(|x| + 0.10)) + 1e-6 ]^(E).\n\n13. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n14. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n15. Use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n\n16. Present the complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n17. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nPlease be creative, explore alternative phase shifts and modulation stages, and consider innovative reordering of additive and multiplicative operations to expose subtle nonlinear patterns that may improve overall model performance.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 39, let's push the nonlinear transformation further by adding an extra modulation stage after the initial modulation. Experiment with adding a secondary oscillatory modulation (for example, an extra sine term with a small amplitude and phase shift) that multiplies the already modulated signal. This extra modulation may help capture additional curvature effects and subtle nonlinearities, potentially enhancing accuracy, lowering BIC, and improving parameter recovery. Retain all mandatory components, but allow the optional oscillatory terms to be used or omitted as the modeler sees fit. Encourage creative reordering of additive constants and multiplicative modulations. Also, invite exploration of phase shifts in the sine and cosine adjustments to expose intricate patterns. Use exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]) and ensure the full formal specification is provided between the <MODEL> and </MODEL> tags, with detailed JSON variable descriptions between <VARIABLES> and </VARIABLES> and the target variable clearly marked within <target_variable> tags.\n</think>\n\nFor run 39, please develop a computational model for responder decision\u2010making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap as:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]) to obtain:\n\u2003\u2003x = F / phi.\n\n5. Compute a fixed nonlinear transformation f(x) on |x| that must include these mandatory components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include additional oscillatory modulation terms (e.g., 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)).\n\n6. Enhance the summation by adding an additive constant delta = 0.01 to the above sum before any modulations.\n\n7. Multiply the constant-shifted sum by a multiplicative modulation factor of the form [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Further multiply by a fixed constant C (choose any value within [1.05, 1.10]).\n\n9. Introduce an additional modulation stage by multiplying the result by another curvature factor [1 + 0.008\u00d7cos(|x| + 0.05)].\n\n10. To further allow for fine adjustment of nonlinear curvature, multiply by a secondary modulation factor [1 + 0.005\u00d7sin(|x| + 0.10)].\n\n11. Add a final tiny offset 1e-6.\n\n12. Compress the resulting total by raising it to a fixed exponent E (choose a value near 0.92 within the interval [0.90, 0.94]). Formally, define:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2212|x|)) + 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1 + 0.012\u00d7sin(|x| + 0.03)) \u00d7 (1 + 0.008\u00d7cos(|x| + 0.05)) \u00d7 (1 + 0.005\u00d7sin(|x| + 0.10)) + 1e-6 ]^(E).\n\n13. Compute the latent utility as:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n14. Derive the acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n15. Use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor for F) \u2208 [0.5, 1.5].\n\n16. Present the complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags.\n\n17. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nPlease be creative, explore alternative phase shifts and modulation stages, and consider innovative reordering of additive and multiplicative operations to expose subtle nonlinear patterns that may improve overall model performance.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {\"p\": \"p_accept\"}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision-making that integrates fairness considerations. Normalized offers and token-based fair shares yield a fairness gap F that is scaled by a learnable factor phi. The gap is transformed through a fixed complex nonlinear function including power, logarithmic, trigonometric, and exponential components with secondary oscillatory modulations. The resulting transformed value is scaled by sensitivity gamma and added to a baseline beta to produce a latent utility, which is converted via the logistic function into an acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {\n          \"p\": \"p_accept\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        A = abs_x**0.5 + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.012 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x)\n        M = (A + 0.01) * (1 + 0.012 * math.sin(abs_x + 0.03)) * (1 + 0.008 * math.cos(abs_x + 0.05)) * (1 + 0.005 * math.sin(abs_x + 0.10))\n\n        sign_x = 1 if x >= 0 else -1\n        f_x = sign_x * ((1.07 * M + 1e-6)**0.92)\n        U = beta + gamma * f_x\n\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0 #Handle overflow errors by setting p_accept to 0 or 1 based on sign of U\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 4, \"token_self\": 5, \"combined_earning\": 9, \"split_opp\": 4.5, \"split_self\": 4.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 4.5, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 4.5}, {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 4, \"token_self\": 3, \"combined_earning\": 7, \"split_opp\": 3.5, \"split_self\": 3.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 3.5, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 3.5}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743540180.300469
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap F",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant in pounds",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap F",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "p_accept": {
      "description": "Probability of accepting the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "bernoulli",
        "parameters": {
          "p": "p_accept"
        }
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for responder decision-making that integrates fairness considerations. Normalized offers and token-based fair shares yield a fairness gap F that is scaled by a learnable factor phi. The gap is transformed through a fixed complex nonlinear function including power, logarithmic, trigonometric, and exponential components with secondary oscillatory modulations. The resulting transformed value is scaled by sensitivity gamma and added to a baseline beta to produce a latent utility, which is converted via the logistic function into an acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": -10, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0, \"max\": 10}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap F\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"min\": 0.5, \"max\": 1.5}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"bernoulli\",\n        \"parameters\": {\"p\": \"p_accept\"}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision-making that integrates fairness considerations. Normalized offers and token-based fair shares yield a fairness gap F that is scaled by a learnable factor phi. The gap is transformed through a fixed complex nonlinear function including power, logarithmic, trigonometric, and exponential components with secondary oscillatory modulations. The resulting transformed value is scaled by sensitivity gamma and added to a baseline beta to produce a latent utility, which is converted via the logistic function into an acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision-making that integrates fairness considerations. Normalized offers and token-based fair shares yield a fairness gap F that is scaled by a learnable factor phi. The gap is transformed through a fixed complex nonlinear function including power, logarithmic, trigonometric, and exponential components with secondary oscillatory modulations. The resulting transformed value is scaled by sensitivity gamma and added to a baseline beta to produce a latent utility, which is converted via the logistic function into an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        A = abs_x**0.5 + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.012 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x)\n        M = (A + 0.01) * (1 + 0.012 * math.sin(abs_x + 0.03)) * (1 + 0.008 * math.cos(abs_x + 0.05)) * (1 + 0.005 * math.sin(abs_x + 0.10))\n\n        sign_x = 1 if x >= 0 else -1\n        f_x = sign_x * ((1.07 * M + 1e-6)**0.92)\n        U = beta + gamma * f_x\n\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0 #Handle overflow errors by setting p_accept to 0 or 1 based on sign of U\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5815018315018314,
  "fitting_results": [
    {
      "beta": -9.931085134289598,
      "gamma": 10.0,
      "phi": 0.7071729911654379,
      "success": true,
      "log_likelihood": -24.620687569603888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7447748534803076,
      "success": true,
      "log_likelihood": -21.06632292797431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.070215877037104,
      "success": true,
      "log_likelihood": -19.758199105292586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.879933410582506,
      "phi": 0.5540810961858869,
      "success": true,
      "log_likelihood": -22.74079585160597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9408191942564864,
      "success": true,
      "log_likelihood": -20.456372397080827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4789583413495788,
      "success": true,
      "log_likelihood": -19.80782185941735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.2928826703090182,
      "success": true,
      "log_likelihood": -19.246969283910687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5993362059451037,
      "success": true,
      "log_likelihood": -21.70607749776281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9622886067707825,
      "success": true,
      "log_likelihood": -20.62047307114968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7016107746736447,
      "success": true,
      "log_likelihood": -24.61987552797883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7687583556066863,
      "success": true,
      "log_likelihood": -21.08106569949274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.0191911541428455e-16,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.289687521699623,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.591782803047858,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.221327393846866,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.608467523866597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.066809792930889,
      "success": true,
      "log_likelihood": -20.202685000371474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.695568920490488,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.77507132617801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.339042615696033,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.509639002699792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9420357075668958,
      "success": true,
      "log_likelihood": -21.68304865280019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.010025496326185,
      "success": true,
      "log_likelihood": -20.293038188837812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.036501933620348,
      "success": true,
      "log_likelihood": -19.907388182716435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8303331599582164,
      "success": true,
      "log_likelihood": -21.02319210435303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.986352925399517,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.16582405151713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.7866165547933734,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.05882836518439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.45254424278134,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.203309985116523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7016386456079438,
      "success": true,
      "log_likelihood": -24.619875636816463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.297965558896492,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19502638604329,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.526579118625276,
      "success": true,
      "log_likelihood": -22.72365012712371,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.850190429146258,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.142059438263722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.413099212726786,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.315918838071894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8719927061642179,
      "success": true,
      "log_likelihood": -20.797465295021386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1744052122916893,
      "success": true,
      "log_likelihood": -20.081498217863356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9187437777999159,
      "success": true,
      "log_likelihood": -20.961246263823988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.000419880388079,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.167907111668494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.036915938260941,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.157858156457443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4649045159088567,
      "success": true,
      "log_likelihood": -20.701844819732514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.8605976392505195,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.198431571046754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.526008360278885,
      "phi": 0.6857913748899174,
      "success": true,
      "log_likelihood": -21.933363289643413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.690430287827708,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.12098751550664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.854588849550109,
      "success": true,
      "log_likelihood": -21.43685138528542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.8965580217601046,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.44708745942518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.721753430690628,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.952516165733364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7019229324157843,
      "success": true,
      "log_likelihood": -24.619875749751117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.935686184550405,
      "phi": 0.5149648719039919,
      "success": true,
      "log_likelihood": -22.92950735833776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5739773527308896,
      "gamma": 2.489986233110141,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.095371523436548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.863180130386053,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.80935379857959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5636908527182337,
      "success": true,
      "log_likelihood": -21.754953723866084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.872487248552044,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.44761096592033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7016003326193385,
      "success": true,
      "log_likelihood": -24.619875634671633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.449342046575924,
      "phi": 1.4978985019876174,
      "success": true,
      "log_likelihood": -18.213465621843852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9758130962142938,
      "success": true,
      "log_likelihood": -21.395092074804122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8170323379849203,
      "success": true,
      "log_likelihood": -21.032518866592167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7016372486259638,
      "success": true,
      "log_likelihood": -24.619875636817113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3400337599336467,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195136928278053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4328664984782487,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.503445208871756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8300643551471986,
      "success": true,
      "log_likelihood": -21.023345831150586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.97170067667905,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.818553821621757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7133573886243331,
      "success": true,
      "log_likelihood": -22.194098772123894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3356504232988757,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.509871474606157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.998300402383652,
      "phi": 0.7014138678182904,
      "success": true,
      "log_likelihood": -24.619876861158158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8343379247925196,
      "success": true,
      "log_likelihood": -22.01682879937739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.373263706991654,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.309970685638962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7101148297299458,
      "success": true,
      "log_likelihood": -23.197937955240437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.377955109856016,
      "gamma": 6.056004950670835,
      "phi": 0.750880884025089,
      "success": true,
      "log_likelihood": -19.89161132768924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8971846621859183,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602618874267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.035128027446245,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.15813329022182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7016384052130504,
      "success": true,
      "log_likelihood": -24.61987563681618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.872305399642162,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.447607649592833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7626254301478486,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953558891569163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.581785964397492,
      "gamma": 9.999997466020538,
      "phi": 1.2281928397886708,
      "success": true,
      "log_likelihood": -22.20804884661237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6417659332517417,
      "success": true,
      "log_likelihood": -22.319236304510717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3441636854455106,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195159692596395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.90295036549359,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.299759525769883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.677898719278328,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.98654671453094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.3984330708129544,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5527380952476957,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.496282625563342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4726827651860512,
      "success": true,
      "log_likelihood": -21.460753261634196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.4496027127021489,
        "p": 2.6976947436244273e-06
      },
      "gamma": {
        "r": 0.20447607928332567,
        "p": 0.04128387495217943
      },
      "phi": {
        "r": 0.13700020683055858,
        "p": 0.1740844893248329
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.60418184631819,
  "bic_results": {
    "average_bic": 50.60418184631819,
    "individual_bics": [
      59.9919319545761,
      52.88320267131695,
      50.26695502595351,
      56.232148518580274,
      51.66330160952998,
      50.36620053420303,
      33.3062773958674,
      49.2444953831897,
      33.3062773958674,
      54.16271181089395,
      51.99150295766769,
      59.990307871325996,
      52.91268821435381,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.934122421464046,
      39.96749186310153,
      33.3062773958674,
      51.155926816111275,
      42.30069946772435,
      57.76983482076791,
      54.116654120968704,
      51.33663319304395,
      50.565333180801204,
      52.796941024074385,
      55.082204918402596,
      40.868213545737106,
      47.15717678560138,
      33.3062773958674,
      59.99030808900126,
      59.140609587454904,
      56.19785706961575,
      33.3062773958674,
      53.03467569189577,
      47.382394491512116,
      52.345487405411106,
      50.91355325109504,
      39.30600500724502,
      52.6730493430163,
      57.08637103870532,
      35.30618659965994,
      55.066273128283214,
      52.154246454833356,
      51.147419957461835,
      54.61728339465516,
      56.99253184638161,
      53.62425958593917,
      59.644731734218695,
      52.655589146835055,
      59.99030831487056,
      56.609571532043844,
      58.94129986224142,
      56.369264412527514,
      54.2604642631005,
      57.64577874720899,
      41.305914211037575,
      59.9903080847116,
      47.17748805905603,
      53.54074096497658,
      52.81559454855267,
      59.99030808900255,
      59.140830671924434,
      57.75744723311185,
      52.7972484776695,
      39.30600500724503,
      42.387664458611845,
      55.138754359616115,
      39.306005007245034,
      57.77029976458064,
      59.99031053768465,
      54.78421441412311,
      47.37049818664626,
      57.14643272584921,
      50.53377947074681,
      37.306095803452486,
      60.65776205311687,
      55.066823395811966,
      59.99030808900069,
      57.64577211455399,
      39.30600500724503,
      60.65767459850666,
      55.16665450859307,
      55.38902942438976,
      59.140876200561124,
      51.3500758669081,
      58.72365024443022,
      37.306095803452486,
      57.74312206649502,
      53.67206333863672
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.450\n- gamma: r = 0.204\n- phi: r = 0.137",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nA = abs(x)^(0.5) + ln(1+3.4*abs(x)) + 0.2*atan(1.1*abs(x)) + 0.1*(1-exp(-abs(x))) + 0.05*(1-exp(-2*abs(x))) + 0.03*tanh(abs(x)) + 0.02*sin(0.5*abs(x)) + 0.012*(1-cos(0.3*abs(x))) + 0.005*exp(-abs(x)) + 0.005*sin(2.2*abs(x)) + 0.002*cos(3.0*abs(x))  \nM = (A + 0.01)*(1+0.012*sin(abs(x)+0.03))*(1+0.008*cos(abs(x)+0.05))*(1+0.005*sin(abs(x)+0.10))  \nf_x = sign(x)*((1.07 * M + 1e-6)^0.92)  \nU = beta + gamma * f_x  \np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision-making that integrates fairness considerations. Normalized offers and token-based fair shares yield a fairness gap F that is scaled by a learnable factor phi. The gap is transformed through a fixed complex nonlinear function including power, logarithmic, trigonometric, and exponential components with secondary oscillatory modulations. The resulting transformed value is scaled by sensitivity gamma and added to a baseline beta to produce a latent utility, which is converted via the logistic function into an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.60418184631819\nOverall Accuracy: 0.5815\n\nParameter Recovery:\n- beta: r = 0.450\n- gamma: r = 0.204\n- phi: r = 0.137"
  ]
}