{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 4, we want to push the envelope by encouraging models that use normalized fairness measures based on ratios rather than absolute differences, which can help decouple parameters and improve recovery. In addition to the non-linear transformation, consider operating on percentages to mitigate scaling issues. Also, encourage use of alternative transformations (e.g., logarithm or power transforms) that can capture diminishing sensitivity, provided the transformation is well-motivated and maintains interpretability. Adjust the finite bounds for the scaling parameter to a tighter range and explain the rationale behind using these bounds.\n</think>\n\nFor run 4 of 200, please develop a computational model for responder decision-making that:\n1. Computes the fairness difference using normalized percentages rather than monetary amounts. Specifically, derive the normalized offer as (split_self / combined_earning) and the normalized fair share as (token_self / (token_self + token_opp)).\n2. Calculates the fairness gap as the difference between these normalized values.\n3. Applies a non-linear transformation (for example, a logarithmic transformation or a power transform with a fixed exponent between 0 and 1) to the fairness gap after optionally offsetting the values to ensure positiveness. This transformation is intended to reflect diminishing sensitivity to fairness deviations.\n4. Introduces three learnable parameters:\n   - A baseline bias parameter (beta) with finite bounds of [\u201310, 10].\n   - A sensitivity parameter (gamma) with bounds of [0, 10].\n   - A scaling parameter (phi) used to normalize or transform the fairness gap with bounds tightened to [0.5, 1.5] (to better decouple it from the bias and sensitivity parameters).\n5. Defines latent utility as: \n   U = beta + gamma \u00d7 f((normalized_fairness_gap) / phi) \n   where f(\u00b7) represents the chosen non-linear transformation.\n6. Converts the latent utility U to a probability using the logistic function:\n   p_accept = 1 / (1 + exp(\u2013U)).\n7. Provides the complete mathematical model between <MODEL> and </MODEL> tags and includes detailed variable descriptions between <VARIABLES> and </VARIABLES> tags in JSON format. Ensure that all learnable parameters have explicit finite bounds, and every parameter is clearly connected to observable trial variables.\n\nEmphasize that by using a normalized fairness difference (expressed in percentages) and an alternative transformation with appropriately tightened bounds, your model aims to reduce parameter covariance, improve recovery, and enhance overall fitting metrics such as BIC and accuracy. Be creative in your choice of the non-linear function while ensuring the model remains parsimonious and interpretable from a psychological standpoint.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 4, we want to push the envelope by encouraging models that use normalized fairness measures based on ratios rather than absolute differences, which can help decouple parameters and improve recovery. In addition to the non-linear transformation, consider operating on percentages to mitigate scaling issues. Also, encourage use of alternative transformations (e.g., logarithm or power transforms) that can capture diminishing sensitivity, provided the transformation is well-motivated and maintains interpretability. Adjust the finite bounds for the scaling parameter to a tighter range and explain the rationale behind using these bounds.\n</think>\n\nFor run 4 of 200, please develop a computational model for responder decision-making that:\n1. Computes the fairness difference using normalized percentages rather than monetary amounts. Specifically, derive the normalized offer as (split_self / combined_earning) and the normalized fair share as (token_self / (token_self + token_opp)).\n2. Calculates the fairness gap as the difference between these normalized values.\n3. Applies a non-linear transformation (for example, a logarithmic transformation or a power transform with a fixed exponent between 0 and 1) to the fairness gap after optionally offsetting the values to ensure positiveness. This transformation is intended to reflect diminishing sensitivity to fairness deviations.\n4. Introduces three learnable parameters:\n   - A baseline bias parameter (beta) with finite bounds of [\u201310, 10].\n   - A sensitivity parameter (gamma) with bounds of [0, 10].\n   - A scaling parameter (phi) used to normalize or transform the fairness gap with bounds tightened to [0.5, 1.5] (to better decouple it from the bias and sensitivity parameters).\n5. Defines latent utility as: \n   U = beta + gamma \u00d7 f((normalized_fairness_gap) / phi) \n   where f(\u00b7) represents the chosen non-linear transformation.\n6. Converts the latent utility U to a probability using the logistic function:\n   p_accept = 1 / (1 + exp(\u2013U)).\n7. Provides the complete mathematical model between <MODEL> and </MODEL> tags and includes detailed variable descriptions between <VARIABLES> and </VARIABLES> tags in JSON format. Ensure that all learnable parameters have explicit finite bounds, and every parameter is clearly connected to observable trial variables.\n\nEmphasize that by using a normalized fairness difference (expressed in percentages) and an alternative transformation with appropriately tightened bounds, your model aims to reduce parameter covariance, improve recovery, and enhance overall fitting metrics such as BIC and accuracy. Be creative in your choice of the non-linear function while ensuring the model remains parsimonious and interpretable from a psychological standpoint.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter representing the inherent tendency to accept, constrained to [-10, 10]\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that scales the impact of the transformed normalized fairness gap, bounded between 0 and 10\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter used to normalize the fairness gap before transformation, bounded between 0.5 and 1.5 to reduce parameter covariance\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sgn\": {\n      \"description\": \"The sign function, returning -1 for negative inputs, 0 for zero, and 1 for positive inputs\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"log\": {\n      \"description\": \"Natural logarithm function used for the non-linear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model for responder decision-making that calculates a normalized fairness gap as the difference between the offered share percentage (split_self/combined_earning) and the fair share percentage based on tokens (token_self/(token_self+token_opp)). The fairness gap is scaled by a learnable parameter phi and transformed using a signed logarithmic function to capture diminishing sensitivity. Utility is modeled as a linear combination of a baseline bias (beta) and fairness sensitivity (gamma) multiplied by the transformed gap. The latent utility is then passed through a logistic function to compute the probability of accepting the offer.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter representing the inherent tendency to accept, constrained to [-10, 10]\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that scales the impact of the transformed normalized fairness gap, bounded between 0 and 10\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter used to normalize the fairness gap before transformation, bounded between 0.5 and 1.5 to reduce parameter covariance\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sgn\": {\n      \"description\": \"The sign function, returning -1 for negative inputs, 0 for zero, and 1 for positive inputs\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"log\": {\n      \"description\": \"Natural logarithm function used for the non-linear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle edge case to avoid division by zero, if both token_self and token_opp are zero\n        if (token_self + token_opp) == 0:\n          fairness_ratio = 0\n        else:\n          fairness_ratio = token_self / (token_self + token_opp)\n        \n        #Handle edge case to avoid division by zero\n        if combined_earning == 0:\n            offered_ratio = 0\n        else:\n            offered_ratio = split_self / combined_earning\n\n        gap = (offered_ratio - fairness_ratio) / phi\n\n        if gap > 0:\n            sgn = 1\n        elif gap < 0:\n            sgn = -1\n        else:\n            sgn = 0\n\n        abs_gap = abs(gap)\n        transformed_gap = sgn * math.log(1 + abs_gap)\n        \n        U = beta + gamma * transformed_gap\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 8, \"combined_earning\": 10, \"split_opp\": 4.99, \"split_self\": 5.01, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.01, \"accepted_perc\": 50, \"proposed_perc\": 50, \"proposed_amount\": 5.01}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 8, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0, \"proposed_perc\": 30, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 8, \"combined_earning\": 10, \"split_opp\": 3.0, \"split_self\": 7.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 7.0, \"accepted_perc\": 70, \"proposed_perc\": 70, \"proposed_amount\": 7.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743537920.9186618
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter representing the inherent tendency to accept, constrained to [-10, 10]",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter that scales the impact of the transformed normalized fairness gap, bounded between 0 and 10",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter used to normalize the fairness gap before transformation, bounded between 0.5 and 1.5 to reduce parameter covariance",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))",
  "variable_descriptions": {
    "U": {
      "description": "Latent utility for accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter representing the inherent tendency to accept, constrained to [-10, 10]",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter that scales the impact of the transformed normalized fairness gap, bounded between 0 and 10",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter used to normalize the fairness gap before transformation, bounded between 0.5 and 1.5 to reduce parameter covariance",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant in \u00a3",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning in \u00a3",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sgn": {
      "description": "The sign function, returning -1 for negative inputs, 0 for zero, and 1 for positive inputs",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "log": {
      "description": "Natural logarithm function used for the non-linear transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "abs": {
      "description": "Absolute value function",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model for responder decision-making that calculates a normalized fairness gap as the difference between the offered share percentage (split_self/combined_earning) and the fair share percentage based on tokens (token_self/(token_self+token_opp)). The fairness gap is scaled by a learnable parameter phi and transformed using a signed logarithmic function to capture diminishing sensitivity. Utility is modeled as a linear combination of a baseline bias (beta) and fairness sensitivity (gamma) multiplied by the transformed gap. The latent utility is then passed through a logistic function to compute the probability of accepting the offer.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter representing the inherent tendency to accept, constrained to [-10, 10]\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter that scales the impact of the transformed normalized fairness gap, bounded between 0 and 10\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter used to normalize the fairness gap before transformation, bounded between 0.5 and 1.5 to reduce parameter covariance\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sgn\": {\n      \"description\": \"The sign function, returning -1 for negative inputs, 0 for zero, and 1 for positive inputs\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"log\": {\n      \"description\": \"Natural logarithm function used for the non-linear transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"abs\": {\n      \"description\": \"Absolute value function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model for responder decision-making that calculates a normalized fairness gap as the difference between the offered share percentage (split_self/combined_earning) and the fair share percentage based on tokens (token_self/(token_self+token_opp)). The fairness gap is scaled by a learnable parameter phi and transformed using a signed logarithmic function to capture diminishing sensitivity. Utility is modeled as a linear combination of a baseline bias (beta) and fairness sensitivity (gamma) multiplied by the transformed gap. The latent utility is then passed through a logistic function to compute the probability of accepting the offer.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))\nSummary: A computational model for responder decision-making that calculates a normalized fairness gap as the difference between the offered share percentage (split_self/combined_earning) and the fair share percentage based on tokens (token_self/(token_self+token_opp)). The fairness gap is scaled by a learnable parameter phi and transformed using a signed logarithmic function to capture diminishing sensitivity. Utility is modeled as a linear combination of a baseline bias (beta) and fairness sensitivity (gamma) multiplied by the transformed gap. The latent utility is then passed through a logistic function to compute the probability of accepting the offer.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle edge case to avoid division by zero, if both token_self and token_opp are zero\n        if (token_self + token_opp) == 0:\n          fairness_ratio = 0\n        else:\n          fairness_ratio = token_self / (token_self + token_opp)\n        \n        #Handle edge case to avoid division by zero\n        if combined_earning == 0:\n            offered_ratio = 0\n        else:\n            offered_ratio = split_self / combined_earning\n\n        gap = (offered_ratio - fairness_ratio) / phi\n\n        if gap > 0:\n            sgn = 1\n        elif gap < 0:\n            sgn = -1\n        else:\n            sgn = 0\n\n        abs_gap = abs(gap)\n        transformed_gap = sgn * math.log(1 + abs_gap)\n        \n        U = beta + gamma * transformed_gap\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7637362637362637,
  "fitting_results": [
    {
      "beta": -1.1464449199795512,
      "gamma": 10.0,
      "phi": 0.7347795970518947,
      "success": true,
      "log_likelihood": -7.245907095625524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.85663645727222,
      "gamma": 8.728336775800134,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.62919256339777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.4872038806759296,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -10.30307243253256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.2267234202866857,
      "gamma": 10.0,
      "phi": 0.6054768266817612,
      "success": true,
      "log_likelihood": -16.03322774495376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.879970477978268,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -9.126102611201231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.290215564569839,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.897260551613462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.496859889796582,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.701723755292042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.457432995148701,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.450988258623248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.879970577487857,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -9.385857475177813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7245580939425362,
      "gamma": 10.0,
      "phi": 0.7457136582512826,
      "success": true,
      "log_likelihood": -8.826087367751466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6711998444129095,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.673909359737557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.21323505422994,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.704690384699862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.552212371802407,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -6.419844845184773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6866435822692143,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.55485741217384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.213234944441618,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -9.190437086177628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.792593380302305,
      "gamma": 10.0,
      "phi": 1.1976662406267389,
      "success": true,
      "log_likelihood": -19.592100268798056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.345842584010663,
      "gamma": 6.738466931211948,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.840486615979554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.2869410520171463,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.383389708262024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.886260252146623,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.771962509438875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1457980628243987,
      "gamma": 8.515646259791689,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.884281114748564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.52530215364248,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.141157147021762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.552212423452992,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.118083982436817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.55395610599183,
      "gamma": 8.201049061138015,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.030423544156092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1464422240663024,
      "gamma": 10.0,
      "phi": 0.734780445626583,
      "success": true,
      "log_likelihood": -7.245907095638373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6762716284501346,
      "gamma": 8.463269546841273,
      "phi": 1.4635310325049946,
      "success": true,
      "log_likelihood": -22.148347921494064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9457788726930172,
      "gamma": 8.187545295836353,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.272151299192057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -0.0016343567716418062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.777907287300554,
      "gamma": 8.746941867306537,
      "phi": 0.7621751883896272,
      "success": true,
      "log_likelihood": -18.63222125768905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.708386517331338,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.01931496917196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.2869410792354654,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.034187211482704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.4091325915350073,
      "gamma": 7.362852195658655,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -17.125574823574173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.066301271146185,
      "gamma": 6.365721788606621,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.736642284657671,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.688040405254027,
      "gamma": 6.376258659914566,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.828305557084263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9857520730542436,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -10.735509459029366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.7067803199916947,
      "gamma": 0.466076151501363,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -4.564323374995356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.204044045048406,
      "gamma": 5.895615973903476,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.760109245822747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.7501208314514103,
      "gamma": 10.0,
      "phi": 0.5583015596024707,
      "success": true,
      "log_likelihood": -15.873804136520576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.491905203927325,
      "gamma": 4.275616879788136,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.871573802425424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3399657152828213,
      "gamma": 6.721266305746538,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.859632006143663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2078427776866882,
      "gamma": 5.601155401428935,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.243690020532867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.671199805437881,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.414154496516753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.650506789291432,
      "gamma": 4.394629819817286,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.227177375869406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3073040851207884,
      "gamma": 4.198587119879109,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.67521249443602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7709930595514525,
      "gamma": 10.0,
      "phi": 1.258875980222407,
      "success": true,
      "log_likelihood": -12.333523725786263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6142506287567235,
      "gamma": 10.0,
      "phi": 1.228220975523429,
      "success": true,
      "log_likelihood": -21.041981992668845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8847362251259908,
      "gamma": 4.398949049134123,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.80016899149762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.11084459099938,
      "gamma": 8.770778937303612,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.663839517531713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0098735498676494,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.763736468902144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5253021908998081,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.789955426099091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0794398715231748,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.55795544315411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8201881076492041,
      "gamma": 10.0,
      "phi": 0.8605503683482273,
      "success": true,
      "log_likelihood": -9.396941342326803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0494836378989305,
      "gamma": 4.352112467791748,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.843145022182934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0203161163685386,
      "gamma": 4.586604794021199,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.79012827991243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.242131428115548,
      "gamma": 9.867756140181429,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.514148543959976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1464449973634674,
      "gamma": 10.0,
      "phi": 0.7347796684677319,
      "success": true,
      "log_likelihood": -7.2459070956254825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0326665231153738,
      "gamma": 10.0,
      "phi": 1.4078895895982255,
      "success": true,
      "log_likelihood": -21.352410693603737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8498154597528372,
      "gamma": 9.234366429939255,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.760334167195069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0340558462900296,
      "gamma": 8.207205091198592,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -17.19978934928915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.00380593168523,
      "gamma": 6.239288190593899,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -8.780256937047263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.843140795246892,
      "gamma": 10.0,
      "phi": 0.5507317987992699,
      "success": true,
      "log_likelihood": -10.40802967976334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1390465652681097,
      "gamma": 9.962101177516757,
      "phi": 0.9635947566342955,
      "success": true,
      "log_likelihood": -19.67722505784982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.504680519791558,
      "gamma": 5.208521023872759,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -9.134655451091602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4431275778868408,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -4.083702725379963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.792063049764385,
      "gamma": 8.16159018743275,
      "phi": 1.0391748857470473,
      "success": true,
      "log_likelihood": -12.446236916874081,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5121730560263926,
      "gamma": 10.0,
      "phi": 0.7365678181955936,
      "success": true,
      "log_likelihood": -17.916441681687047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.904446291890779,
      "gamma": 10.0,
      "phi": 1.2955731290212595,
      "success": true,
      "log_likelihood": -16.609027957845974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7468819649392434,
      "gamma": 2.360098976833094,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.79555729283559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.258259116018302,
      "gamma": 10.0,
      "phi": 0.8295120925252327,
      "success": true,
      "log_likelihood": -17.113635629839152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.4753570221472785,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -5.2807557927232285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.403557369886214,
      "gamma": 1.5458925866049544,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -7.599540215688372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3070354573264786,
      "gamma": 2.5896595159074614,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.79681734614318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1464443829669202,
      "gamma": 10.0,
      "phi": 0.7347793923402987,
      "success": true,
      "log_likelihood": -7.24590709562602,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8982604771670587,
      "gamma": 2.4604178600379654,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.663179115901283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3978979164319796,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -10.326095382831365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.173613329196979,
      "gamma": 9.948969771693937,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.188786698662392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.697108723664162,
      "gamma": 10.0,
      "phi": 0.6284316192296292,
      "success": true,
      "log_likelihood": -16.62618812822948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2952534416431412,
      "gamma": 2.5556361798580096,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.82618420759309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.44312759580964267,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -6.960523447227045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.963123798632009,
      "gamma": 5.847076433757893,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.096530582635097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.3651423103911497,
      "gamma": 10.0,
      "phi": 0.7963854133318288,
      "success": true,
      "log_likelihood": -13.806213241115627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.475356904075838,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -4.747559417638471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7064780736423135,
      "gamma": 10.0,
      "phi": 0.9547271255863753,
      "success": true,
      "log_likelihood": -19.38337322147557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.698081811210051,
      "gamma": 2.581965964864976,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.062257737387423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.9168559460048863,
        "p": 7.256235956154107e-41
      },
      "gamma": {
        "r": 0.4408352353918818,
        "p": 4.426185954049873e-06
      },
      "phi": {
        "r": -0.03083175716855302,
        "p": 0.7607365876440121
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 36.109155472489924,
  "bic_results": {
    "average_bic": 36.109155472489924,
    "individual_bics": [
      25.24237100661938,
      44.00894194216387,
      31.35670168043345,
      42.81701230527585,
      29.002762037770793,
      40.545077918595254,
      10.753825528911614,
      38.154004325952414,
      10.753825528911614,
      33.65253333261482,
      29.522271765723957,
      28.402731550871263,
      34.09837553484344,
      10.753825528911614,
      10.753825528911614,
      10.753825528911614,
      10.753825528911614,
      28.159937584768056,
      23.590246505737877,
      10.753825528911614,
      37.86027163971601,
      29.131430987723586,
      49.93475735296444,
      48.43153004732744,
      35.51733623189238,
      38.294481834246085,
      44.51911904486546,
      27.032871109411854,
      26.986724780241964,
      38.811403903680514,
      10.753825528911614,
      25.242371006645076,
      55.047252658356456,
      43.29485941375245,
      10.753825528911614,
      48.014999330746434,
      34.78918675371225,
      38.81893123833374,
      45.00170646251668,
      28.223841384683674,
      48.407167929536854,
      32.22157573342706,
      19.87920356535904,
      50.27077530701382,
      42.49816508840948,
      48.493704420219174,
      48.46982082765565,
      49.23793685643406,
      33.57886580840184,
      59.204911567107146,
      50.10098180424038,
      35.417604266940856,
      52.83452080070602,
      58.35089479836357,
      42.07823585043175,
      28.278029753172618,
      34.33046766756651,
      35.866467701676555,
      29.544439500021937,
      42.4368468597342,
      52.33081337519319,
      41.77885390328828,
      25.242371006619294,
      53.4553782025758,
      34.271225149758465,
      45.15013551394664,
      28.311070689462856,
      31.56661617489501,
      50.105006931067976,
      29.019867717551534,
      18.917962266128256,
      35.6430306491165,
      46.58344017874242,
      43.968612731060276,
      58.341671401039505,
      44.97782807504663,
      21.312068400814788,
      25.949637246745077,
      56.344191507654685,
      25.24237100662037,
      58.0769150471709,
      31.40274758103106,
      33.128130212693115,
      44.002933071827286,
      56.402925230554516,
      24.67160370982242,
      46.94361798063852,
      38.362983297599584,
      20.245675650645275,
      49.51730325831947,
      52.87507229014318
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.917\n- gamma: r = 0.441\n- phi: r = -0.031",
  "previous_models": [
    "Specification: U = beta + gamma * sgn((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * log(1 + abs((split_self/combined_earning - token_self/(token_self+token_opp))/phi))\nSummary: A computational model for responder decision-making that calculates a normalized fairness gap as the difference between the offered share percentage (split_self/combined_earning) and the fair share percentage based on tokens (token_self/(token_self+token_opp)). The fairness gap is scaled by a learnable parameter phi and transformed using a signed logarithmic function to capture diminishing sensitivity. Utility is modeled as a linear combination of a baseline bias (beta) and fairness sensitivity (gamma) multiplied by the transformed gap. The latent utility is then passed through a logistic function to compute the probability of accepting the offer.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 36.109155472489924\nOverall Accuracy: 0.7637\n\nParameter Recovery:\n- beta: r = 0.917\n- gamma: r = 0.441\n- phi: r = -0.031"
  ]
}