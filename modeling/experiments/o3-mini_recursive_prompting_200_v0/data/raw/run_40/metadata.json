{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 40, we want to encourage even more creative nonlinear modulation stages while still strictly using only three learnable parameters (beta, gamma, phi). In this iteration, ask the modeler to experiment with reordering the additive and multiplicative steps and consider an extra modulation stage that uses a different oscillatory function (for instance, a cosine modulation with a phase shift, or even a product that includes both sine and cosine together). Emphasize the possibility to adjust the order of operations to capture subtle nonlinear curvature effects. Encourage out\u2010of\u2010the-box thinking such as dynamically interleaving logarithmic and power-law components before performing the multiplicative modulations, or even introducing an extra modulation term (for instance, [1+0.004\u00d7cos(|x|+0.07)]) after the secondary sine modulation. The goal is to improve overall accuracy, reduce the BIC, and enhance parameter recovery by providing additional degrees of fixed nonlinear adjustments while preserving exactly three free parameters.\n</think>\n\nFor run 40, please develop an innovative computational model for responder decision\u2010making following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. Compute a fixed nonlinear transformation on |x| that must include these mandatory components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include one or more additional oscillatory terms (for example, 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)).\n\n6. Add an additive constant delta = 0.01 to the sum of these components before any modulations.\n\n7. Multiply the result by a modulation factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Multiply by a fixed constant C chosen from [1.05, 1.10].\n\n9. Introduce a first additional modulation: multiply by [1 + 0.008\u00d7cos(|x| + 0.05)].\n\n10. Introduce a secondary modulation stage by multiplying by [1 + 0.005\u00d7sin(|x| + 0.10)].\n\n11. For run 40, add an extra modulation stage to explore subtle curvature effects: multiply by an extra factor [1 + 0.004\u00d7cos(|x| + 0.07)].\n\n12. Add a final tiny offset 1e-6.\n\n13. Compress the fully modulated signal by raising it to a fixed exponent E (choose E \u2208 [0.90, 0.94], near 0.92).\n\n14. Define the nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2212|x|)) + 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1 + 0.012\u00d7sin(|x| + 0.03)) \u00d7 (1 + 0.008\u00d7cos(|x| + 0.05)) \u00d7 (1 + 0.005\u00d7sin(|x| + 0.10)) \u00d7 (1 + 0.004\u00d7cos(|x| + 0.07)) + 1e-6 ]^(E).\n\n15. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n16. Derive the acceptance probability:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n17. Use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\n18. Present the complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nEncourage creative exploration of alternative phase shifts, reordering of additive and multiplicative operations, and extra modulation stages to capture intricate nonlinearities that enhance model fit, lower BIC, and improve parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 40, we want to encourage even more creative nonlinear modulation stages while still strictly using only three learnable parameters (beta, gamma, phi). In this iteration, ask the modeler to experiment with reordering the additive and multiplicative steps and consider an extra modulation stage that uses a different oscillatory function (for instance, a cosine modulation with a phase shift, or even a product that includes both sine and cosine together). Emphasize the possibility to adjust the order of operations to capture subtle nonlinear curvature effects. Encourage out\u2010of\u2010the-box thinking such as dynamically interleaving logarithmic and power-law components before performing the multiplicative modulations, or even introducing an extra modulation term (for instance, [1+0.004\u00d7cos(|x|+0.07)]) after the secondary sine modulation. The goal is to improve overall accuracy, reduce the BIC, and enhance parameter recovery by providing additional degrees of fixed nonlinear adjustments while preserving exactly three free parameters.\n</think>\n\nFor run 40, please develop an innovative computational model for responder decision\u2010making following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. Compute a fixed nonlinear transformation on |x| that must include these mandatory components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally include one or more additional oscillatory terms (for example, 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|)).\n\n6. Add an additive constant delta = 0.01 to the sum of these components before any modulations.\n\n7. Multiply the result by a modulation factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Multiply by a fixed constant C chosen from [1.05, 1.10].\n\n9. Introduce a first additional modulation: multiply by [1 + 0.008\u00d7cos(|x| + 0.05)].\n\n10. Introduce a secondary modulation stage by multiplying by [1 + 0.005\u00d7sin(|x| + 0.10)].\n\n11. For run 40, add an extra modulation stage to explore subtle curvature effects: multiply by an extra factor [1 + 0.004\u00d7cos(|x| + 0.07)].\n\n12. Add a final tiny offset 1e-6.\n\n13. Compress the fully modulated signal by raising it to a fixed exponent E (choose E \u2208 [0.90, 0.94], near 0.92).\n\n14. Define the nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (|x|^(0.5) + ln(1 + 3.4\u00d7|x|) + 0.2\u00d7atan(1.1\u00d7|x|) + 0.1\u00d7(1 \u2212 exp(\u2212|x|)) + 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|)) + 0.03\u00d7tanh(|x|) + 0.02\u00d7sin(0.5\u00d7|x|) + 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|)) + 0.005\u00d7exp(\u2212|x|) [ + optionally 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|) ] + 0.01 ) \u00d7 (1 + 0.012\u00d7sin(|x| + 0.03)) \u00d7 (1 + 0.008\u00d7cos(|x| + 0.05)) \u00d7 (1 + 0.005\u00d7sin(|x| + 0.10)) \u00d7 (1 + 0.004\u00d7cos(|x| + 0.07)) + 1e-6 ]^(E).\n\n15. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n16. Derive the acceptance probability:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n17. Use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\n18. Present the complete mathematical model specification between <MODEL> and </MODEL> tags, and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nEncourage creative exploration of alternative phase shifts, reordering of additive and multiplicative operations, and extra modulation stages to capture intricate nonlinearities that enhance model fit, lower BIC, and improve parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.08\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression of the modulated signal\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.92\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn innovative nonlinear utility model for responder decision\u2010making that computes a fairness gap between the normalized offer and the normalized fair share, scales it by a learnable factor phi, and applies a fixed complex nonlinear transformation incorporating multiple mandatory components and extra oscillatory modulations. The latent utility U is then determined by a baseline bias beta and sensitivity gamma applied to the transformed fairness gap, with acceptance probability derived through a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.08\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression of the modulated signal\",\n      \"range\": {\n        \"min\": 0.9,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.92\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.08\n    E = 0.92\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        # Nonlinear transformation\n        base_term = C * (abs_x**(0.5) + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.012 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x) + 0.01)\n        modulation_term1 = (1 + 0.012 * math.sin(abs_x + 0.03))\n        modulation_term2 = (1 + 0.008 * math.cos(abs_x + 0.05))\n        modulation_term3 = (1 + 0.005 * math.sin(abs_x + 0.10))\n        modulation_term4 = (1 + 0.004 * math.cos(abs_x + 0.07))\n\n        f_val = math.copysign(1, x) * (base_term * modulation_term1 * modulation_term2 * modulation_term3 * modulation_term4 + 1e-6)**E\n\n        U = beta + gamma * f_val\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0  # Handle overflow for extreme U values\n\n        model_predictions.append(p_accept)\n    return model_predictions\n```",
      "timestamp": 1743540262.7118561
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "C": {
      "description": "Fixed multiplicative constant for the nonlinear transformation",
      "range": {
        "min": 1.05,
        "max": 1.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1.08
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "E": {
      "description": "Fixed exponent for compression of the modulated signal",
      "range": {
        "min": 0.9,
        "max": 0.94,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.92
        }
      },
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "An innovative nonlinear utility model for responder decision\u2010making that computes a fairness gap between the normalized offer and the normalized fair share, scales it by a learnable factor phi, and applies a fixed complex nonlinear transformation incorporating multiple mandatory components and extra oscillatory modulations. The latent utility U is then determined by a baseline bias beta and sensitivity gamma applied to the transformed fairness gap, with acceptance probability derived through a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed multiplicative constant for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.08\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compression of the modulated signal\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.92\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn innovative nonlinear utility model for responder decision\u2010making that computes a fairness gap between the normalized offer and the normalized fair share, scales it by a learnable factor phi, and applies a fixed complex nonlinear transformation incorporating multiple mandatory components and extra oscillatory modulations. The latent utility U is then determined by a baseline bias beta and sensitivity gamma applied to the transformed fairness gap, with acceptance probability derived through a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\nSummary: An innovative nonlinear utility model for responder decision\u2010making that computes a fairness gap between the normalized offer and the normalized fair share, scales it by a learnable factor phi, and applies a fixed complex nonlinear transformation incorporating multiple mandatory components and extra oscillatory modulations. The latent utility U is then determined by a baseline bias beta and sensitivity gamma applied to the transformed fairness gap, with acceptance probability derived through a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.08\n    E = 0.92\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        abs_x = abs(x)\n\n        # Nonlinear transformation\n        base_term = C * (abs_x**(0.5) + math.log(1 + 3.4 * abs_x) + 0.2 * math.atan(1.1 * abs_x) + 0.1 * (1 - math.exp(-abs_x)) + 0.05 * (1 - math.exp(-2 * abs_x)) + 0.03 * math.tanh(abs_x) + 0.02 * math.sin(0.5 * abs_x) + 0.012 * (1 - math.cos(0.3 * abs_x)) + 0.005 * math.exp(-abs_x) + 0.005 * math.sin(2.2 * abs_x) + 0.002 * math.cos(3.0 * abs_x) + 0.01)\n        modulation_term1 = (1 + 0.012 * math.sin(abs_x + 0.03))\n        modulation_term2 = (1 + 0.008 * math.cos(abs_x + 0.05))\n        modulation_term3 = (1 + 0.005 * math.sin(abs_x + 0.10))\n        modulation_term4 = (1 + 0.004 * math.cos(abs_x + 0.07))\n\n        f_val = math.copysign(1, x) * (base_term * modulation_term1 * modulation_term2 * modulation_term3 * modulation_term4 + 1e-6)**E\n\n        U = beta + gamma * f_val\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0  # Handle overflow for extreme U values\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5839438339438339,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7153822480910766,
      "success": true,
      "log_likelihood": -24.619814728055296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7595333314011553,
      "success": true,
      "log_likelihood": -21.066002385818027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.7482428313851495,
      "gamma": 3.932321310181796,
      "phi": 0.5340247402040547,
      "success": true,
      "log_likelihood": -20.415575065928465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5761890691977221,
      "success": true,
      "log_likelihood": -22.740389307841443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9596005974667454,
      "success": true,
      "log_likelihood": -20.45578039432084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.979773405532105,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.807439243710295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.3184462349961363,
      "success": true,
      "log_likelihood": -19.24678306155855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.881236537612414,
      "phi": 0.5995077943576389,
      "success": true,
      "log_likelihood": -21.70613967179753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.957993972095705,
      "phi": 0.9747433082270411,
      "success": true,
      "log_likelihood": -20.62016088536591,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.715540324016165,
      "success": true,
      "log_likelihood": -24.619814582256065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7840948070363303,
      "success": true,
      "log_likelihood": -21.080755101852485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.2000216506602543,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.202617048398104,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.592026072600934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.134918614349272,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.608796337180092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0880410566367582,
      "success": true,
      "log_likelihood": -20.20230322348118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.603071961755495,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.775170095089535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3757344004468686,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.50685109083647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9608157934106809,
      "success": true,
      "log_likelihood": -21.682641046394558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0301949426023156,
      "success": true,
      "log_likelihood": -20.292473276005587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0573248013597545,
      "success": true,
      "log_likelihood": -19.90693476879437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8467729378319762,
      "success": true,
      "log_likelihood": -21.023079770558905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.09408907829512,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.161266070053713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.70542400096963,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.058953407002306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.35035675775964,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.203322708524457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7155436875298808,
      "success": true,
      "log_likelihood": -24.619814692186438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3358508137120335,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.1949258250776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5371672637015225,
      "success": true,
      "log_likelihood": -22.72346013019651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.731668232437066,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.142149388786137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.299972383254397,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.3162034170947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8892743224755831,
      "success": true,
      "log_likelihood": -20.797233331202897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1975854154018923,
      "success": true,
      "log_likelihood": -20.08139611284913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9369960126641569,
      "success": true,
      "log_likelihood": -20.961177405905563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.088069435977966,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.16370363372117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.8306633715024571,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.141612229883695,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.15385444154366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4940685848117081,
      "success": true,
      "log_likelihood": -20.701418741574354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.7666653011576665,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.198580971937755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7565494401676635,
      "success": true,
      "log_likelihood": -21.933162301953114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.805785995378436,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.118142586395106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8717266977935417,
      "success": true,
      "log_likelihood": -21.43643032115946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.942058448057168,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.44646588003346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.616877648236093,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.952563374160356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7155421145215658,
      "success": true,
      "log_likelihood": -24.619814687972504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.978107071189314,
      "phi": 0.6429057361096466,
      "success": true,
      "log_likelihood": -22.929382799313323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5741437715952649,
      "gamma": 2.4602306479956835,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.09542492406291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.9371583675814845,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.80829790501823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5748806664407821,
      "success": true,
      "log_likelihood": -21.754744836798977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.917654389985371,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.44694178613882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.9615296410900129,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7154974981426777,
      "success": true,
      "log_likelihood": -24.61981469084553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.578128317481429,
      "phi": 0.8426574599334181,
      "success": true,
      "log_likelihood": -18.213304879094927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.594736379264811,
      "phi": 0.632761475409746,
      "success": true,
      "log_likelihood": -21.41172392339933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8333070185682926,
      "success": true,
      "log_likelihood": -21.032354331969668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7155443745484578,
      "success": true,
      "log_likelihood": -24.61981469218851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3742137336370486,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195024905556586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.467657702134618,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.500983288117297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8465563343752038,
      "success": true,
      "log_likelihood": -21.023231703133458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.888398619613243,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.818805623178283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7274159915544228,
      "success": true,
      "log_likelihood": -22.193908581469106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.1328499213783522e-16,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3725758751383412,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.50706050407022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7155469531649921,
      "success": true,
      "log_likelihood": -24.619814687995753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8508648162371834,
      "success": true,
      "log_likelihood": -22.016737932675664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.272601594705378,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.31012874026233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7243942503387412,
      "success": true,
      "log_likelihood": -23.1977098295176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.524765576322146,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.857855997922364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8545678107881942,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602600814857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.140124395481976,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.154103023135217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7155434893526407,
      "success": true,
      "log_likelihood": -24.619814692186072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.917796947795508,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.446938967696394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7495827034612426,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95355891450822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1844534929286272,
      "success": true,
      "log_likelihood": -22.193901458862776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6545429574871641,
      "success": true,
      "log_likelihood": -22.318770348886073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3824582119741207,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195044827774364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.79615934110706,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.299924925338612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.806028047134781,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.981328574272695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.584295374781238,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.494228028109816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.995917163950967,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.460698338892424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.5023954189764324,
        "p": 1.0043686425624442e-07
      },
      "gamma": {
        "r": 0.27129817437537,
        "p": 0.0063280869153836085
      },
      "phi": {
        "r": -0.05590103454704928,
        "p": 0.5806644365568594
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.6169441203364,
  "bic_results": {
    "average_bic": 50.6169441203364,
    "individual_bics": [
      59.99018627147892,
      52.88256158700439,
      51.58170694722526,
      56.23133543105122,
      51.66211760401001,
      50.365435302788924,
      33.3062773958674,
      49.24412293848543,
      33.3062773958674,
      54.16283615896339,
      51.99087858610015,
      59.990185979880465,
      52.912067019073305,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.9346089605702,
      39.96814948972852,
      33.3062773958674,
      51.15516326233069,
      42.3008970055474,
      57.76425899704127,
      54.11583890815744,
      51.3355033673795,
      50.56442635295707,
      52.796716356486144,
      55.073088955475754,
      40.86846362937294,
      47.15720223241725,
      33.3062773958674,
      59.9901861997412,
      59.140408465523535,
      56.197477075761356,
      33.3062773958674,
      53.0348555929406,
      47.38296364955774,
      52.34502347777412,
      50.913349041066596,
      39.30600500724502,
      52.67291162717946,
      57.07796408281067,
      35.30618659965994,
      55.058265698455656,
      52.15339429851704,
      51.147718759243844,
      54.61688141927456,
      56.986841988158545,
      53.62341745768725,
      59.643488575435256,
      52.65568356368904,
      59.99018619131334,
      56.609322413994974,
      58.94140666349415,
      56.367152625404785,
      54.26004648896628,
      57.64444038764597,
      41.305914211037575,
      59.99018619705939,
      47.17716657355818,
      53.574004662166985,
      52.81526547930767,
      59.99018619974535,
      59.1406066264815,
      57.75252339160292,
      52.79702022163525,
      39.30600500724503,
      42.3881680617249,
      55.13837397830655,
      39.306005007245034,
      57.76467782350878,
      59.99018619135984,
      54.78403268071966,
      47.370814295892984,
      57.145976474403525,
      50.466268811213055,
      37.306095803452486,
      60.65776201699805,
      55.05876286163877,
      59.99018619974048,
      57.64443475076112,
      39.30600500724503,
      60.65767464438477,
      55.13835973309388,
      55.38809751314048,
      59.14064647091706,
      51.35040666604556,
      58.71321396391372,
      37.306095803452486,
      57.73901287158796,
      53.67195349315318
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.502\n- gamma: r = 0.271\n- phi: r = -0.056",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nf = sign(x) * { [ C * ( |x|^(0.5) + ln(1 + 3.4 * |x|) + 0.2 * atan(1.1 * |x|) + 0.1 * (1 - exp(-|x|)) + 0.05 * (1 - exp(-2 * |x|)) + 0.03 * tanh(|x|) + 0.02 * sin(0.5 * |x|) + 0.012 * (1 - cos(0.3 * |x|)) + 0.005 * exp(-|x|) + 0.005 * sin(2.2 * |x|) + 0.002 * cos(3.0 * |x|) + 0.01 ) \n* (1 + 0.012 * sin(|x| + 0.03))\n* (1 + 0.008 * cos(|x| + 0.05))\n* (1 + 0.005 * sin(|x| + 0.10))\n* (1 + 0.004 * cos(|x| + 0.07))\n+ 1e-6 }^(E)\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\nSummary: An innovative nonlinear utility model for responder decision\u2010making that computes a fairness gap between the normalized offer and the normalized fair share, scales it by a learnable factor phi, and applies a fixed complex nonlinear transformation incorporating multiple mandatory components and extra oscillatory modulations. The latent utility U is then determined by a baseline bias beta and sensitivity gamma applied to the transformed fairness gap, with acceptance probability derived through a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.6169441203364\nOverall Accuracy: 0.5839\n\nParameter Recovery:\n- beta: r = 0.502\n- gamma: r = 0.271\n- phi: r = -0.056"
  ]
}