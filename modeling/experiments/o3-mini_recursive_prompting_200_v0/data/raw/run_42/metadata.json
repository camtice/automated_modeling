{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 42, let's encourage even more creative exploration. The new instructions should invite the modeler to experiment with reordering the additive and multiplicative stages, to combine fixed nonlinear components in a more interwoven manner, and even introduce additional modulation stages (for instance, a secondary nonlinear blending stage that mixes a logarithmic term directly with a power-law term) before applying the final multiplicative modulations. Emphasize exploring alternative phase shifts and combining sine and cosine modulations at multiple points. The goal remains to predict the responder acceptance using only three learnable parameters (beta, gamma, phi) with strict bounds, but we now push for innovative compositions that may capture subtle nonlinearities better, potentially lowering BIC and improving parameter recovery. Encourage out-of-the-box thinking and non-obvious reordering.\n</think>\n\nFor run 42, please develop an innovative computational model for responder decision\u2010making with these updated instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. Create a fixed nonlinear transformation for |x| that interleaves additive and multiplicative modulations. Start by computing the following mandatory components on |x|:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally, include additional oscillatory terms such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Sum these computed components and add a constant delta = 0.01.\n\n7. Now introduce a first modulation by multiplying this sum with a factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Before applying further modulations, reorder the operations by interleaving the logarithmic term with the power-law component. For example, allow an intermediate aggregation such as:\n\u2003\u2003Intermediate_Signal = (|x|^(0.5) + ln(1 + 3.4\u00d7|x|)) \nand then add the remaining terms, so that the order of operations is not purely sequential.\n\n9. Multiply the resulting signal by a fixed constant C chosen from [1.05, 1.10].\n\n10. Next, apply additional modulation stages in sequence:\n\u2003\u2003a. Multiply with [1 + 0.008\u00d7cos(|x| + 0.05)].\n\u2003\u2003b. Multiply with [1 + 0.005\u00d7sin(|x| + 0.10)].\n\u2003\u2003c. Multiply with [1 + 0.004\u00d7cos(|x| + 0.07)].\n\u2003\u2003d. Incorporate a combined sine-cosine modulation by multiplying with [1 + 0.006\u00d7(sin(|x| + 0.02)\u00d7cos(|x| + 0.04))].\n\u2003\u2003e. Optionally, explore an extra modulation stage which applies a phase-shifted sine-cosine mix at a different offset (e.g., [1 + 0.003\u00d7(sin(|x| + 0.015)\u00d7cos(|x| + 0.035))]).\n\n11. Add a final tiny offset of 1e-6 to maintain numerical stability.\n\n12. Compress the fully modulated signal by raising it to a fixed exponent E (choose E \u2208 [0.90, 0.94], for example, E \u2248 0.92).\n\n13. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined components as above with the added delta) \u00d7 all modulation factors combined in the reordering described + 1e-6 ]^(E) }.\n\u2003\u2003Be sure to allow creative reordering of the additive and multiplicative operations as long as all mandatory components appear.\n\n14. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n15. Derive the acceptance probability:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n16. The model must use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10].\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10].\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nPresent the complete mathematical model between <MODEL> and </MODEL> tags and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nEncourage the modeler to experiment with alternative phase shifts, non-standard orderings of additive and multiplicative operations, and extra modulation stages to capture complex nonlinearities that may improve accuracy, lower BIC, and enhance parameter recovery. Think beyond the obvious to uncover subtle interactions within the data.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 42, let's encourage even more creative exploration. The new instructions should invite the modeler to experiment with reordering the additive and multiplicative stages, to combine fixed nonlinear components in a more interwoven manner, and even introduce additional modulation stages (for instance, a secondary nonlinear blending stage that mixes a logarithmic term directly with a power-law term) before applying the final multiplicative modulations. Emphasize exploring alternative phase shifts and combining sine and cosine modulations at multiple points. The goal remains to predict the responder acceptance using only three learnable parameters (beta, gamma, phi) with strict bounds, but we now push for innovative compositions that may capture subtle nonlinearities better, potentially lowering BIC and improving parameter recovery. Encourage out-of-the-box thinking and non-obvious reordering.\n</think>\n\nFor run 42, please develop an innovative computational model for responder decision\u2010making with these updated instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by phi (learnable, bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. Create a fixed nonlinear transformation for |x| that interleaves additive and multiplicative modulations. Start by computing the following mandatory components on |x|:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally, include additional oscillatory terms such as 0.005\u00d7sin(2.2\u00d7|x|) and/or 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Sum these computed components and add a constant delta = 0.01.\n\n7. Now introduce a first modulation by multiplying this sum with a factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Before applying further modulations, reorder the operations by interleaving the logarithmic term with the power-law component. For example, allow an intermediate aggregation such as:\n\u2003\u2003Intermediate_Signal = (|x|^(0.5) + ln(1 + 3.4\u00d7|x|)) \nand then add the remaining terms, so that the order of operations is not purely sequential.\n\n9. Multiply the resulting signal by a fixed constant C chosen from [1.05, 1.10].\n\n10. Next, apply additional modulation stages in sequence:\n\u2003\u2003a. Multiply with [1 + 0.008\u00d7cos(|x| + 0.05)].\n\u2003\u2003b. Multiply with [1 + 0.005\u00d7sin(|x| + 0.10)].\n\u2003\u2003c. Multiply with [1 + 0.004\u00d7cos(|x| + 0.07)].\n\u2003\u2003d. Incorporate a combined sine-cosine modulation by multiplying with [1 + 0.006\u00d7(sin(|x| + 0.02)\u00d7cos(|x| + 0.04))].\n\u2003\u2003e. Optionally, explore an extra modulation stage which applies a phase-shifted sine-cosine mix at a different offset (e.g., [1 + 0.003\u00d7(sin(|x| + 0.015)\u00d7cos(|x| + 0.035))]).\n\n11. Add a final tiny offset of 1e-6 to maintain numerical stability.\n\n12. Compress the fully modulated signal by raising it to a fixed exponent E (choose E \u2208 [0.90, 0.94], for example, E \u2248 0.92).\n\n13. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined components as above with the added delta) \u00d7 all modulation factors combined in the reordering described + 1e-6 ]^(E) }.\n\u2003\u2003Be sure to allow creative reordering of the additive and multiplicative operations as long as all mandatory components appear.\n\n14. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n15. Derive the acceptance probability:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\n16. The model must use exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10].\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10].\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nPresent the complete mathematical model between <MODEL> and </MODEL> tags and provide detailed JSON-formatted variable descriptions between <VARIABLES> and </VARIABLES> tags. Clearly designate the predicted target variable using <target_variable> tags (set to \"accept\").\n\nEncourage the modeler to experiment with alternative phase shifts, non-standard orderings of additive and multiplicative operations, and extra modulation stages to capture complex nonlinearities that may improve accuracy, lower BIC, and enhance parameter recovery. Think beyond the obvious to uncover subtle interactions within the data.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in pounds)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant for multiplicative scaling\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compressing the modulated signal\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn innovative nonlinear utility model for responder decision\u2010making that normalizes offer and fair share, computes a fairness gap, and scales it via a learnable parameter phi. The absolute scaled gap undergoes a complex, interleaved nonlinear transformation combining power\u2010law, logarithmic, and oscillatory modulations with additive and multiplicative stages. The final signal, compressed with a fixed exponent and modulated by fixed constants, is integrated with the baseline bias beta and sensitivity gamma to yield a latent utility that is transformed via a logistic function into the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in pounds)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant for multiplicative scaling\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compressing the modulated signal\",\n      \"range\": {\n        \"min\": 0.9,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075\n    E = 0.92\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n        \n        abs_x = abs(x)\n        \n        a1 = abs_x**0.5\n        a2 = math.log(1 + 3.4 * abs_x)\n        Intermediate_Signal = a1 + a2\n        a3 = 0.2 * math.atan(1.1 * abs_x)\n        a4 = 0.1 * (1 - math.exp(-abs_x))\n        a5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        a6 = 0.03 * math.tanh(abs_x)\n        a7 = 0.02 * math.sin(0.5 * abs_x)\n        a8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        a9 = 0.005 * math.exp(-abs_x)\n        a10 = 0.005 * math.sin(2.2 * abs_x)\n        a11 = 0.002 * math.cos(3.0 * abs_x)\n        Sum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\n        Modulation1 = 1 + 0.012 * math.sin(abs_x + 0.03)\n        S1 = Sum_Components * Modulation1\n        S2 = C * S1\n        Modulation2 = (1 + 0.008 * math.cos(abs_x + 0.05)) * (1 + 0.005 * math.sin(abs_x + 0.10)) * (1 + 0.004 * math.cos(abs_x + 0.07)) * (1 + 0.006 * (math.sin(abs_x + 0.02) * math.cos(abs_x + 0.04))) * (1 + 0.003 * (math.sin(abs_x + 0.015) * math.cos(abs_x + 0.035)))\n        S3 = S2 * Modulation2\n        S4 = S3 + 1e-6\n        T = S4**E\n        f = (1 if x >= 0 else -1) * T\n        U = beta + gamma * f\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 6.0, \"split_self\": 4.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743540434.0542452
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant in pounds",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (in pounds)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "C": {
      "description": "Fixed constant for multiplicative scaling",
      "range": {
        "min": 1.05,
        "max": 1.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E": {
      "description": "Fixed exponent for compressing the modulated signal",
      "range": {
        "min": 0.9,
        "max": 0.94,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted probability of accepting the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An innovative nonlinear utility model for responder decision\u2010making that normalizes offer and fair share, computes a fairness gap, and scales it via a learnable parameter phi. The absolute scaled gap undergoes a complex, interleaved nonlinear transformation combining power\u2010law, logarithmic, and oscillatory modulations with additive and multiplicative stages. The final signal, compressed with a fixed exponent and modulated by fixed constants, is integrated with the baseline bias beta and sensitivity gamma to yield a latent utility that is transformed via a logistic function into the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in pounds)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant for multiplicative scaling\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Fixed exponent for compressing the modulated signal\",\n      \"range\": {\n        \"min\": 0.90,\n        \"max\": 0.94,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn innovative nonlinear utility model for responder decision\u2010making that normalizes offer and fair share, computes a fairness gap, and scales it via a learnable parameter phi. The absolute scaled gap undergoes a complex, interleaved nonlinear transformation combining power\u2010law, logarithmic, and oscillatory modulations with additive and multiplicative stages. The final signal, compressed with a fixed exponent and modulated by fixed constants, is integrated with the baseline bias beta and sensitivity gamma to yield a latent utility that is transformed via a logistic function into the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\nSummary: An innovative nonlinear utility model for responder decision\u2010making that normalizes offer and fair share, computes a fairness gap, and scales it via a learnable parameter phi. The absolute scaled gap undergoes a complex, interleaved nonlinear transformation combining power\u2010law, logarithmic, and oscillatory modulations with additive and multiplicative stages. The final signal, compressed with a fixed exponent and modulated by fixed constants, is integrated with the baseline bias beta and sensitivity gamma to yield a latent utility that is transformed via a logistic function into the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    C = 1.075\n    E = 0.92\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n        \n        abs_x = abs(x)\n        \n        a1 = abs_x**0.5\n        a2 = math.log(1 + 3.4 * abs_x)\n        Intermediate_Signal = a1 + a2\n        a3 = 0.2 * math.atan(1.1 * abs_x)\n        a4 = 0.1 * (1 - math.exp(-abs_x))\n        a5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        a6 = 0.03 * math.tanh(abs_x)\n        a7 = 0.02 * math.sin(0.5 * abs_x)\n        a8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        a9 = 0.005 * math.exp(-abs_x)\n        a10 = 0.005 * math.sin(2.2 * abs_x)\n        a11 = 0.002 * math.cos(3.0 * abs_x)\n        Sum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\n        Modulation1 = 1 + 0.012 * math.sin(abs_x + 0.03)\n        S1 = Sum_Components * Modulation1\n        S2 = C * S1\n        Modulation2 = (1 + 0.008 * math.cos(abs_x + 0.05)) * (1 + 0.005 * math.sin(abs_x + 0.10)) * (1 + 0.004 * math.cos(abs_x + 0.07)) * (1 + 0.006 * (math.sin(abs_x + 0.02) * math.cos(abs_x + 0.04))) * (1 + 0.003 * (math.sin(abs_x + 0.015) * math.cos(abs_x + 0.035)))\n        S3 = S2 * Modulation2\n        S4 = S3 + 1e-6\n        T = S4**E\n        f = (1 if x >= 0 else -1) * T\n        U = beta + gamma * f\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5903540903540904,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122987501828774,
      "success": true,
      "log_likelihood": -24.61961450534423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7561524420149084,
      "success": true,
      "log_likelihood": -21.06511291082231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0865305388206323,
      "success": true,
      "log_likelihood": -19.755968268286473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5737624599728712,
      "success": true,
      "log_likelihood": -22.739952028664614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9556192701066989,
      "success": true,
      "log_likelihood": -20.45433531931363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.8059603028081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.3123273241404736,
      "success": true,
      "log_likelihood": -19.24610164042091,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6086007841251919,
      "success": true,
      "log_likelihood": -21.705465373439708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9775726678670841,
      "success": true,
      "log_likelihood": -20.618520330907888,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122982442047578,
      "success": true,
      "log_likelihood": -24.61961439492771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7807483259687582,
      "success": true,
      "log_likelihood": -21.07993990539559,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.217428406162276,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.590620403203063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.798217065492071,
      "phi": 1.377994227835511,
      "success": true,
      "log_likelihood": -14.612042828106551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0833705733346024,
      "success": true,
      "log_likelihood": -20.201303148341033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.581308758777791,
      "phi": 1.4865853543676857,
      "success": true,
      "log_likelihood": -15.774557940680065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.365198404744754,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.50765322965086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9567630816264663,
      "success": true,
      "log_likelihood": -21.681643704286518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0259238403014108,
      "success": true,
      "log_likelihood": -20.291092554025315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0524965302433489,
      "success": true,
      "log_likelihood": -19.905634099356234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8430308688862933,
      "success": true,
      "log_likelihood": -21.02269559294018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.067978841199194,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.161755691304467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.71991796892138,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.05820157505724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.37078708429001,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.203246904049294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.868906938895282,
      "phi": 0.6973357269850741,
      "success": true,
      "log_likelihood": -24.619704873640917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3273650882446386,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19495013142138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5350855479225118,
      "success": true,
      "log_likelihood": -22.72307462915656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.802293938002628e-16,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.757139864747394,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.141462576367914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.323550299157569,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.314010916386856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8854063839307756,
      "success": true,
      "log_likelihood": -20.796568400211676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.1921417394888398,
      "success": true,
      "log_likelihood": -20.081004721253457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9331996489586246,
      "success": true,
      "log_likelihood": -20.960942038485577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.06424144133651,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.16448840017916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.115577374832544,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.154341365320704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4877378350660415,
      "success": true,
      "log_likelihood": -20.70050216988793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.782926522456398,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.197729123207797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7532736495754925,
      "success": true,
      "log_likelihood": -21.933090180565685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.778426317970384,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.11839418460762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8684097484870225,
      "success": true,
      "log_likelihood": -21.435526514103927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122999517392591,
      "success": true,
      "log_likelihood": -24.619555398749345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.645448291681138,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.95221792166542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7121563160151589,
      "success": true,
      "log_likelihood": -24.619614529053795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7640645858119521,
      "success": true,
      "log_likelihood": -22.92933065764089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.571154263767141,
      "gamma": 2.4626947742214083,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.09519535019065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.916752273973974,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.80849294001218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5724107587785459,
      "success": true,
      "log_likelihood": -21.754178959597912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9047384390089848,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.447128730049286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122749452820173,
      "success": true,
      "log_likelihood": -24.61961450183868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.5493331439377895,
      "phi": 0.8315154221888628,
      "success": true,
      "log_likelihood": -18.213281534658513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9909698963701677,
      "success": true,
      "log_likelihood": -21.393742056670753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.958843965538994,
      "phi": 0.8243561422269722,
      "success": true,
      "log_likelihood": -21.031935571358915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122684555150395,
      "success": true,
      "log_likelihood": -24.61961450652255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3376695951281636,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.19505349803647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4575257986559413,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.50170077636139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8427858200508632,
      "success": true,
      "log_likelihood": -21.022843939174038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.90265572502983,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.817406445089341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7240037412016009,
      "success": true,
      "log_likelihood": -22.193325608176675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.362016836365086,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.507866566316753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.7122824051995785,
      "success": true,
      "log_likelihood": -24.61961450144295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.8470335906576576,
      "success": true,
      "log_likelihood": -22.01642176858696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.293790911464237,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.308909568863985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.7208096112341582,
      "success": true,
      "log_likelihood": -23.19705135843283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.561484845947739,
      "gamma": 4.144137762898791,
      "phi": 0.7511195924898258,
      "success": true,
      "log_likelihood": -20.047702424240132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8882794255245143,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953602599798618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.113913632285994,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.154588717129457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.712211941388967,
      "success": true,
      "log_likelihood": -24.61961451559575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9045027951582663,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.447125890385344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.739193142282845,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953558815618326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.179403557664319,
      "success": true,
      "log_likelihood": -22.193124454068833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.6517867042282698,
      "success": true,
      "log_likelihood": -22.317699544329095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3680909624888327,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.195072998180315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.816300571273464,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -20.298830795664333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.778643983940096,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.981630768892302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.574837371698933,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.494843369741094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.4947668745053169,
      "success": true,
      "log_likelihood": -21.46044940022959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.5585054273113912,
        "p": 1.5600243612464422e-09
      },
      "gamma": {
        "r": 0.2770820666002026,
        "p": 0.005257002222764548
      },
      "phi": {
        "r": -0.05618198158363914,
        "p": 0.5787611852783243
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.609489462237704,
  "bic_results": {
    "average_bic": 50.609489462237704,
    "individual_bics": [
      59.98978582605679,
      52.880782637012956,
      50.26249335194127,
      56.23046087269756,
      51.659227453995584,
      50.36247742098453,
      33.3062773958674,
      49.24276009621015,
      33.3062773958674,
      54.16148756224774,
      51.98759747718411,
      59.989785605223744,
      52.91043662615951,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      41.93179762177446,
      39.97464247158143,
      33.3062773958674,
      51.15316311205039,
      42.299672696728464,
      57.76586327467005,
      54.11384422394137,
      51.332741923418965,
      50.561825014080796,
      52.79594800124869,
      55.07406819797727,
      40.866959965482806,
      47.157050623466915,
      33.3062773958674,
      59.98996656265017,
      59.140457078211085,
      56.196706073681455,
      33.3062773958674,
      53.033481968104155,
      47.37857864814204,
      52.34369361579168,
      50.91256625787524,
      39.30600500724502,
      52.67244089233948,
      57.079533615726646,
      35.30618659965994,
      55.059239546009735,
      52.15156115514419,
      51.14601506178393,
      54.6167371764997,
      56.987345184583575,
      53.62160984357618,
      59.989667612867024,
      52.65499265869917,
      59.989785873475924,
      56.609218130650106,
      58.94094751574963,
      56.367542695392686,
      54.25891473456416,
      57.6448142754669,
      41.305914211037575,
      59.98978581904569,
      47.177119884685354,
      53.53804092870983,
      52.814427958086156,
      59.98978582841343,
      59.14066381144127,
      57.753958368091105,
      52.7962446937164,
      39.30600500724503,
      42.38536970554701,
      55.137208031721684,
      39.306005007245034,
      57.76628994800184,
      59.989785818254234,
      54.783400352542245,
      47.368375953096304,
      57.14465953223399,
      50.8459616638486,
      37.306095803452486,
      60.65776201496557,
      55.05973424962724,
      59.989785846559826,
      57.644808596139015,
      39.30600500724503,
      60.657674446604986,
      55.136805723506,
      55.38595590402652,
      59.14070281172896,
      51.348218406697,
      58.71381835315293,
      37.306095803452486,
      57.74024355485052,
      53.67145561582751
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.559\n- gamma: r = 0.277\n- phi: r = -0.056",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na1 = |x|^(0.5)\na2 = ln(1 + 3.4 * |x|)\nIntermediate_Signal = a1 + a2\na3 = 0.2 * atan(1.1 * |x|)\na4 = 0.1 * (1 - exp(-|x|))\na5 = 0.05 * (1 - exp(-2 * |x|))\na6 = 0.03 * tanh(|x|)\na7 = 0.02 * sin(0.5 * |x|)\na8 = 0.012 * (1 - cos(0.3 * |x|))\na9 = 0.005 * exp(-|x|)\na10 = 0.005 * sin(2.2 * |x|)\na11 = 0.002 * cos(3.0 * |x|)\nSum_Components = Intermediate_Signal + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + 0.01\nModulation1 = 1 + 0.012 * sin(|x| + 0.03)\nS1 = Sum_Components * Modulation1\nC = 1.075\nS2 = C * S1\nModulation2 = (1 + 0.008 * cos(|x| + 0.05)) * (1 + 0.005 * sin(|x| + 0.10)) * (1 + 0.004 * cos(|x| + 0.07)) * (1 + 0.006 * (sin(|x| + 0.02) * cos(|x| + 0.04))) * (1 + 0.003 * (sin(|x| + 0.015) * cos(|x| + 0.035)))\nS3 = S2 * Modulation2\nS4 = S3 + 1e-6\nE = 0.92\nT = S4^E\nf = sign(x) * T\nU = beta + gamma * f\np_accept = 1 / (1 + exp(-U))\nSummary: An innovative nonlinear utility model for responder decision\u2010making that normalizes offer and fair share, computes a fairness gap, and scales it via a learnable parameter phi. The absolute scaled gap undergoes a complex, interleaved nonlinear transformation combining power\u2010law, logarithmic, and oscillatory modulations with additive and multiplicative stages. The final signal, compressed with a fixed exponent and modulated by fixed constants, is integrated with the baseline bias beta and sensitivity gamma to yield a latent utility that is transformed via a logistic function into the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.609489462237704\nOverall Accuracy: 0.5904\n\nParameter Recovery:\n- beta: r = 0.559\n- gamma: r = 0.277\n- phi: r = -0.056"
  ]
}