{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 45, push the model to explore even more creative nonlinear blending and reordering of operations. Encourage the inclusion of additional nonlinear compression stages\u2014such as an extra tanh modulation prior to the final exponentiation\u2014and permit unconventional combinations of additive and multiplicative factors. Emphasize testing alternative phase shifts in the oscillatory modulations. Remind the model that exactly three learnable parameters must be used (beta, gamma, phi) with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. The goal is to improve overall prediction accuracy, lower BIC, and enhance parameter recovery. \n</think>\n\nFor run 45, please develop an innovative computational model for responder decision\u2010making by following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the mandatory nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally, implement additional terms like 0.005\u00d7sin(2.2\u00d7|x|) and 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Sum all these computed components and add a constant delta = 0.01.\n\n7. Modulate this sum by multiplying with a factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Reorder operations by forming an Intermediate_Signal that multiplies the power-law term with the logarithmic term and then adds the remaining components (atan, exponential, tanh, sine, cosine, etc.).\n\n9. Multiply the resulting signal by a fixed constant C chosen from [1.05, 1.10].\n\n10. Apply additional sequential modulation stages:\n\u2003\u2003a. Multiply with [1 + 0.008\u00d7cos(|x| + 0.05)].\n\u2003\u2003b. Multiply with [1 + 0.005\u00d7sin(|x| + 0.10)].\n\u2003\u2003c. Multiply with [1 + 0.004\u00d7cos(|x| + 0.07)].\n\u2003\u2003d. Multiply with [1 + 0.006\u00d7(sin(|x| + 0.02)\u00d7cos(|x| + 0.04))].\n\u2003\u2003e. Optionally, include an extra stage such as [1 + 0.003\u00d7(sin(|x| + 0.015)\u00d7cos(|x| + 0.035))].\n\n11. Introduce an extra nonlinear blending stage: apply a hyperbolic tangent to the blended signal to compress extreme values before final compression.\n\n12. Add a final tiny offset of 1e-6 for numerical stability.\n\n13. Compress the fully modulated signal by raising it to a fixed exponent E (choose E from approximately 0.90 to 0.94, e.g., E = 0.92).\n\n14. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (Combined Sums of the mandatory components with delta and the power-log blend) \u00d7 (Product of all modulation factors, including the extra tanh blending) + 1e-6 ]^(E) }.\n\n15. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n16. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure that exactly three learnable parameters are used:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5]\n\nThink boldly and creatively about the ordering and blending of all additive and multiplicative operations, exploring alternative phase shifts and extra nonlinear compressions that may capture subtle interactions\u2014this out-of-the-box approach is intended to improve overall accuracy, reduce the BIC, and enhance the parameter recovery correlations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 45, push the model to explore even more creative nonlinear blending and reordering of operations. Encourage the inclusion of additional nonlinear compression stages\u2014such as an extra tanh modulation prior to the final exponentiation\u2014and permit unconventional combinations of additive and multiplicative factors. Emphasize testing alternative phase shifts in the oscillatory modulations. Remind the model that exactly three learnable parameters must be used (beta, gamma, phi) with bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. The goal is to improve overall prediction accuracy, lower BIC, and enhance parameter recovery. \n</think>\n\nFor run 45, please develop an innovative computational model for responder decision\u2010making by following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the mandatory nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4\u00d7|x|)\n\u2003\u2003\u2022 0.2\u00d7atan(1.1\u00d7|x|)\n\u2003\u2003\u2022 0.1\u00d7(1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05\u00d7(1 \u2212 exp(\u22122\u00d7|x|))\n\u2003\u2003\u2022 0.03\u00d7tanh(|x|)\n\u2003\u2003\u2022 0.02\u00d7sin(0.5\u00d7|x|)\n\u2003\u2003\u2022 0.012\u00d7(1 \u2212 cos(0.3\u00d7|x|))\n\u2003\u2003\u2022 0.005\u00d7exp(\u2212|x|)\n\u2003\u2003Optionally, implement additional terms like 0.005\u00d7sin(2.2\u00d7|x|) and 0.002\u00d7cos(3.0\u00d7|x|).\n\n6. Sum all these computed components and add a constant delta = 0.01.\n\n7. Modulate this sum by multiplying with a factor [1 + 0.012\u00d7sin(|x| + 0.03)].\n\n8. Reorder operations by forming an Intermediate_Signal that multiplies the power-law term with the logarithmic term and then adds the remaining components (atan, exponential, tanh, sine, cosine, etc.).\n\n9. Multiply the resulting signal by a fixed constant C chosen from [1.05, 1.10].\n\n10. Apply additional sequential modulation stages:\n\u2003\u2003a. Multiply with [1 + 0.008\u00d7cos(|x| + 0.05)].\n\u2003\u2003b. Multiply with [1 + 0.005\u00d7sin(|x| + 0.10)].\n\u2003\u2003c. Multiply with [1 + 0.004\u00d7cos(|x| + 0.07)].\n\u2003\u2003d. Multiply with [1 + 0.006\u00d7(sin(|x| + 0.02)\u00d7cos(|x| + 0.04))].\n\u2003\u2003e. Optionally, include an extra stage such as [1 + 0.003\u00d7(sin(|x| + 0.015)\u00d7cos(|x| + 0.035))].\n\n11. Introduce an extra nonlinear blending stage: apply a hyperbolic tangent to the blended signal to compress extreme values before final compression.\n\n12. Add a final tiny offset of 1e-6 for numerical stability.\n\n13. Compress the fully modulated signal by raising it to a fixed exponent E (choose E from approximately 0.90 to 0.94, e.g., E = 0.92).\n\n14. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (Combined Sums of the mandatory components with delta and the power-log blend) \u00d7 (Product of all modulation factors, including the extra tanh blending) + 1e-6 ]^(E) }.\n\n15. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F / phi).\n\n16. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure that exactly three learnable parameters are used:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10]\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5]\n\nThink boldly and creatively about the ordering and blending of all additive and multiplicative operations, exploring alternative phase shifts and extra nonlinear compressions that may capture subtle interactions\u2014this out-of-the-box approach is intended to improve overall accuracy, reduce the BIC, and enhance the parameter recovery correlations.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning (each token yields \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first normalizes the monetary offer and fair share based on tokens, computes their difference (fairness gap), and scales it by a learnable parameter phi. The model then applies a series of nonlinear transformations\u2014including power-law, logarithmic, trigonometric, and exponential components\u2014reordered into an intermediate signal. This signal is further modulated by multiple multiplicative factors and compressed via a hyperbolic tangent and a power-law exponent before being linearly combined with baseline bias (beta) and sensitivity (gamma). The latent utility is mapped to an acceptance probability using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning (each token yields \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        A = abs(x)**0.5\n        B = math.log(1 + 3.4 * abs(x))\n        C1 = 0.2 * math.atan(1.1 * abs(x))\n        D = 0.1 * (1 - math.exp(-abs(x)))\n        E1 = 0.05 * (1 - math.exp(-2 * abs(x)))\n        F1 = 0.03 * math.tanh(abs(x))\n        G1 = 0.02 * math.sin(0.5 * abs(x))\n        H1 = 0.012 * (1 - math.cos(0.3 * abs(x)))\n        I1 = 0.005 * math.exp(-abs(x))\n        J1 = 0.005 * math.sin(2.2 * abs(x))\n        K1 = 0.002 * math.cos(3.0 * abs(x))\n        delta = 0.01\n        IS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\n        M1 = 1 + 0.012 * math.sin(abs(x) + 0.03)\n        X_signal = IS * M1\n        C_fixed = 1.07\n        S2 = C_fixed * X_signal * (1 + 0.008 * math.cos(abs(x) + 0.05)) * (1 + 0.005 * math.sin(abs(x) + 0.10)) * (1 + 0.004 * math.cos(abs(x) + 0.07)) * (1 + 0.006 * (math.sin(abs(x) + 0.02) * math.cos(abs(x) + 0.04))) * (1 + 0.003 * (math.sin(abs(x) + 0.015) * math.cos(abs(x) + 0.035)))\n        S3 = math.tanh(S2)\n        S4 = S3 + 1e-6\n        f_x = (1 if x >= 0 else -1) * (abs(S4)**0.92)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 170, \"token_self\": 147, \"combined_earning\": 951, \"split_opp\": 542.0, \"split_self\": 409.0, \"splitperc_opp\": 57, \"splitperc_self\": 43, \"accept\": 1.0, \"accepted_amount\": 409.0, \"accepted_perc\": 43.0, \"proposed_perc\": 43.0, \"proposed_amount\": 409.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 170, \"token_self\": 147, \"combined_earning\": 951, \"split_opp\": 542.0, \"split_self\": 409.0, \"splitperc_opp\": 57, \"splitperc_self\": 43, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 57.0, \"proposed_amount\": 542.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743540712.619308
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 500,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer_uniform",
        "parameters": {
          "min": 0,
          "max": 500
        }
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 500,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer_uniform",
        "parameters": {
          "min": 0,
          "max": 500
        }
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary earning (each token yields \u00a33)",
      "range": {
        "min": 0,
        "max": 5000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer_uniform",
        "parameters": {
          "min": 0,
          "max": 5000
        }
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 5000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "continuous_uniform",
        "parameters": {
          "min": 0,
          "max": 5000
        }
      },
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A complex nonlinear utility model that first normalizes the monetary offer and fair share based on tokens, computes their difference (fairness gap), and scales it by a learnable parameter phi. The model then applies a series of nonlinear transformations\u2014including power-law, logarithmic, trigonometric, and exponential components\u2014reordered into an intermediate signal. This signal is further modulated by multiple multiplicative factors and compressed via a hyperbolic tangent and a power-law exponent before being linearly combined with baseline bias (beta) and sensitivity (gamma). The latent utility is mapped to an acceptance probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 500,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 500\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earning (each token yields \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous_uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 5000\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that first normalizes the monetary offer and fair share based on tokens, computes their difference (fairness gap), and scales it by a learnable parameter phi. The model then applies a series of nonlinear transformations\u2014including power-law, logarithmic, trigonometric, and exponential components\u2014reordered into an intermediate signal. This signal is further modulated by multiple multiplicative factors and compressed via a hyperbolic tangent and a power-law exponent before being linearly combined with baseline bias (beta) and sensitivity (gamma). The latent utility is mapped to an acceptance probability using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that first normalizes the monetary offer and fair share based on tokens, computes their difference (fairness gap), and scales it by a learnable parameter phi. The model then applies a series of nonlinear transformations\u2014including power-law, logarithmic, trigonometric, and exponential components\u2014reordered into an intermediate signal. This signal is further modulated by multiple multiplicative factors and compressed via a hyperbolic tangent and a power-law exponent before being linearly combined with baseline bias (beta) and sensitivity (gamma). The latent utility is mapped to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n\n        A = abs(x)**0.5\n        B = math.log(1 + 3.4 * abs(x))\n        C1 = 0.2 * math.atan(1.1 * abs(x))\n        D = 0.1 * (1 - math.exp(-abs(x)))\n        E1 = 0.05 * (1 - math.exp(-2 * abs(x)))\n        F1 = 0.03 * math.tanh(abs(x))\n        G1 = 0.02 * math.sin(0.5 * abs(x))\n        H1 = 0.012 * (1 - math.cos(0.3 * abs(x)))\n        I1 = 0.005 * math.exp(-abs(x))\n        J1 = 0.005 * math.sin(2.2 * abs(x))\n        K1 = 0.002 * math.cos(3.0 * abs(x))\n        delta = 0.01\n        IS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\n        M1 = 1 + 0.012 * math.sin(abs(x) + 0.03)\n        X_signal = IS * M1\n        C_fixed = 1.07\n        S2 = C_fixed * X_signal * (1 + 0.008 * math.cos(abs(x) + 0.05)) * (1 + 0.005 * math.sin(abs(x) + 0.10)) * (1 + 0.004 * math.cos(abs(x) + 0.07)) * (1 + 0.006 * (math.sin(abs(x) + 0.02) * math.cos(abs(x) + 0.04))) * (1 + 0.003 * (math.sin(abs(x) + 0.015) * math.cos(abs(x) + 0.035)))\n        S3 = math.tanh(S2)\n        S4 = S3 + 1e-6\n        f_x = (1 if x >= 0 else -1) * (abs(S4)**0.92)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5897435897435898,
  "fitting_results": [
    {
      "beta": -4.693706670687948,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696645960575378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.459953638574799,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.38468323492219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.439818254009267,
      "gamma": 10.0,
      "phi": 0.5503309589838762,
      "success": true,
      "log_likelihood": -20.21287035217409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.2922858892085576,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.93316640329942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.083760351246556,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.896930499177852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.556295400456555,
      "gamma": 10.0,
      "phi": 0.7393495013927462,
      "success": true,
      "log_likelihood": -20.121517564592796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.007673227873383,
      "gamma": 10.0,
      "phi": 0.6137467657236432,
      "success": true,
      "log_likelihood": -19.472261033857095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6280978487078266,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.01353196533273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.030140425467696,
      "gamma": 10.0,
      "phi": 0.5050572955901563,
      "success": true,
      "log_likelihood": -21.02521247150627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.677251489704204,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.69529569392676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.367250089332437,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.441830874329,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.3541697615335881,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.174613204167393,
      "gamma": 10.0,
      "phi": 0.9759347070202468,
      "success": true,
      "log_likelihood": -15.717236393507408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.3454484966410565,
      "gamma": 10.0,
      "phi": 0.9801681391820191,
      "success": true,
      "log_likelihood": -14.75629605854227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.420121365903874,
      "gamma": 10.0,
      "phi": 0.5434370468904567,
      "success": true,
      "log_likelihood": -20.523075020898638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.710351982601343,
      "gamma": 10.0,
      "phi": 0.8092870894666669,
      "success": true,
      "log_likelihood": -15.837788736590463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.43031371626915027,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.065954633656744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.193423716959797,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.94407496615253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.2454737497571005,
      "gamma": 10.0,
      "phi": 0.5205270744038811,
      "success": true,
      "log_likelihood": -20.705111837786674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.677693917720278,
      "gamma": 10.0,
      "phi": 0.5230470529697874,
      "success": true,
      "log_likelihood": -20.24310062007231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.938614062297325,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.21249168729838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5393192180321407,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.64185043036007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.989485235831117,
      "gamma": 10.0,
      "phi": 0.94750863015685,
      "success": true,
      "log_likelihood": -15.099638823787906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.916761288173519,
      "gamma": 10.0,
      "phi": 0.7543713370887931,
      "success": true,
      "log_likelihood": -18.25569993942659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.693667432766491,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696645960551233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9476666501291493,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.27506272130847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6548903527719157,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.91936881787747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.8032781027434971,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.163999054759998,
      "gamma": 10.0,
      "phi": 0.8339503557411999,
      "success": true,
      "log_likelihood": -21.280573092773945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.988939904589539,
      "gamma": 10.0,
      "phi": 0.7807830330557458,
      "success": true,
      "log_likelihood": -18.71231720103951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.96276538099898,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.081137309018388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.09830247293766,
      "gamma": 10.0,
      "phi": 0.5447135707554572,
      "success": true,
      "log_likelihood": -20.21339954986991,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.289105836636219,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.091096668297038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8249852035816171,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.626936281595583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1654511826781335,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.445413182651386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.986034422397282,
      "gamma": 10.0,
      "phi": 0.7938958448743969,
      "success": true,
      "log_likelihood": -20.912364212794564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.009871488644063,
      "gamma": 10.0,
      "phi": 1.0529580289439373,
      "success": true,
      "log_likelihood": -20.297062598256563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.3008245570212615,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.027822168746834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.964164032429348,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.34305385226268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.385428175167791,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.712910827466512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.12120458222204658,
      "gamma": 8.389519935323568,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.5138749142859,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.768843696228805,
      "gamma": 10.0,
      "phi": 0.9463962113736111,
      "success": true,
      "log_likelihood": -21.01651016114149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.691248916252881,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696438853723357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.437346470005992,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.98475037128348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9025548482042862,
      "gamma": 5.512484719544881,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.06295435673714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4838033294297817,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.99531767690721,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.3680316259650773,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.12999709286404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8814171616184907,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.69840165721779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5073567753976698,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.691205773759135,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696442725413245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.802083472798794,
      "phi": 0.535267347493523,
      "success": true,
      "log_likelihood": -18.21017639363931,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.599000499967367,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.61193121513115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.739645014920726,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.28263076423587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.693561285228911,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696645961123327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5158521322596878,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.334457019222675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.12087706904512967,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.98985986922144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.929782748959586,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.215366465449655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.32668761695552,
      "gamma": 10.0,
      "phi": 1.038529126882221,
      "success": true,
      "log_likelihood": -15.916894355370118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.566051750517735,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.34736552913848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5884460963566084,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.10020152958602,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.691310290276203,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696439740333805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.9370629593144,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.161523171899567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.107191797023204,
      "gamma": 10.0,
      "phi": 0.7912108982398246,
      "success": true,
      "log_likelihood": -18.439257499539966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.336238841471485,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.410974556838443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.05446613475263,
      "gamma": 10.0,
      "phi": 0.7314066701154873,
      "success": true,
      "log_likelihood": -19.99223668477662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.780805201864049,
      "phi": 1.304440103609039,
      "success": true,
      "log_likelihood": -24.953595330757693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0701761134452252,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.466861676717627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.693701779189741,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.696645960565412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9283045784643812,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.689200688424826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.306806199404526,
      "phi": 1.2676815819675205,
      "success": true,
      "log_likelihood": -24.953539915574538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.662461921427144,
      "gamma": 10.0,
      "phi": 0.674107286653803,
      "success": true,
      "log_likelihood": -22.42369815891975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.592797531270248,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.582161579056176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8818544725362256,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.37789014246702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.412328862525265,
      "gamma": 10.0,
      "phi": 0.9292954264310371,
      "success": true,
      "log_likelihood": -20.432853740804713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.470164859215687,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.4869221803066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4033958049918618,
      "gamma": 10.0,
      "phi": 1.1874789763852154,
      "success": true,
      "log_likelihood": -23.68305882548265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.334330953842021,
      "gamma": 10.0,
      "phi": 0.5542954244705969,
      "success": true,
      "log_likelihood": -21.454793268226794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6452308939932198,
        "p": 4.2861843684070106e-13
      },
      "gamma": {
        "r": 0.10745220438299305,
        "p": 0.2872847457586456
      },
      "phi": {
        "r": 0.010653023129325452,
        "p": 0.916221987651222
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.94079794180199,
  "bic_results": {
    "average_bic": 50.94079794180199,
    "individual_bics": [
      60.14384873651909,
      53.51992328521271,
      51.17629751971651,
      56.616889621967175,
      52.54441781372404,
      50.99359194455393,
      33.3062773958674,
      49.695078883082516,
      33.3062773958674,
      54.77762074603379,
      52.80098175838087,
      60.141148203221846,
      53.63421856402633,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      42.185029602383146,
      40.26314893245287,
      33.3062773958674,
      51.7967068571656,
      42.42613428854926,
      58.882466082681816,
      54.638706747673396,
      52.160780490941676,
      51.23675805551295,
      53.17554018996509,
      56.03425767608847,
      40.94983446294414,
      47.26195669422151,
      33.3062773958674,
      60.1438487364708,
      59.30068225798527,
      56.589294451123266,
      33.3062773958674,
      53.311703000916225,
      48.17519121744735,
      52.9128314334051,
      51.17735591510815,
      39.30600500724502,
      52.93275015196241,
      58.00442937855949,
      35.30618659965994,
      55.6413831806711,
      52.575285240957456,
      51.34468201188146,
      54.806201152862,
      57.4366645198937,
      54.17637847030136,
      59.77830664394013,
      52.78357713765131,
      60.14343452281504,
      56.72005755793529,
      58.876465528842616,
      56.74119216918275,
      55.01055100109642,
      58.147360129803914,
      41.305914211037575,
      60.143442266194825,
      47.170909602646944,
      53.97441924563063,
      53.315818343840064,
      60.14384873761499,
      59.41947085381368,
      58.73027655381121,
      53.18128974626764,
      39.30600500724503,
      42.584345526108564,
      55.445287873645285,
      39.306005007245034,
      58.950959874540374,
      60.143436296035944,
      55.07360315916746,
      47.62907181444827,
      57.57250592904522,
      50.73503018492157,
      37.306095803452486,
      60.65774747688371,
      55.68428016880358,
      60.14384873649915,
      58.12895819221798,
      39.30600500724503,
      60.6576366465174,
      55.597953133207824,
      55.91487997348068,
      59.506337100302375,
      51.61626429697776,
      59.72440117598153,
      37.306095803452486,
      58.116674466333635,
      53.660143351821915
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.645\n- gamma: r = 0.107\n- phi: r = 0.011",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\nA = abs(x)^0.5\nB = ln(1 + 3.4 * abs(x))\nC1 = 0.2 * arctan(1.1 * abs(x))\nD = 0.1 * (1 - exp(-abs(x)))\nE1 = 0.05 * (1 - exp(-2 * abs(x)))\nF1 = 0.03 * tanh(abs(x))\nG1 = 0.02 * sin(0.5 * abs(x))\nH1 = 0.012 * (1 - cos(0.3 * abs(x)))\nI1 = 0.005 * exp(-abs(x))\nJ1 = 0.005 * sin(2.2 * abs(x))\nK1 = 0.002 * cos(3.0 * abs(x))\ndelta = 0.01\nIS = (A * B) + (C1 + D + E1 + F1 + G1 + H1 + I1 + J1 + K1) + delta\nM1 = 1 + 0.012 * sin(abs(x) + 0.03)\nX_signal = IS * M1\nC_fixed = 1.07\nS2 = C_fixed * X_signal * (1 + 0.008 * cos(abs(x) + 0.05)) * (1 + 0.005 * sin(abs(x) + 0.10)) * (1 + 0.004 * cos(abs(x) + 0.07)) * (1 + 0.006 * (sin(abs(x) + 0.02) * cos(abs(x) + 0.04))) * (1 + 0.003 * (sin(abs(x) + 0.015) * cos(abs(x) + 0.035)))\nS3 = tanh(S2)\nS4 = S3 + 1e-6\nf_x = sign(x) * (abs(S4)^0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that first normalizes the monetary offer and fair share based on tokens, computes their difference (fairness gap), and scales it by a learnable parameter phi. The model then applies a series of nonlinear transformations\u2014including power-law, logarithmic, trigonometric, and exponential components\u2014reordered into an intermediate signal. This signal is further modulated by multiple multiplicative factors and compressed via a hyperbolic tangent and a power-law exponent before being linearly combined with baseline bias (beta) and sensitivity (gamma). The latent utility is mapped to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.94079794180199\nOverall Accuracy: 0.5897\n\nParameter Recovery:\n- beta: r = 0.645\n- gamma: r = 0.107\n- phi: r = 0.011"
  ]
}