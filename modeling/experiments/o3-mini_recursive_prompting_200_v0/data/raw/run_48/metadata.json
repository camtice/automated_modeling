{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 48, we want to push further by mixing additional nonlinear mapping functions with slight modifications on phase shifts and modulation constants. Encourage exploration of alternative functions beyond tanh\u2014such as softplus, softsign, or even a relu-like transform in the extra blending layer\u2014to better capture the subtle variations in fairness sensitivity. Also, suggest integrating an extra multiplicative layer that blends an exponential decay factor with a softsign mapping before the final compression, and adjust the phase shift constants in the sinusoidal modulators slightly (e.g., add 0.005 to each phase shift) to capture any unmodeled variability. Ensure that the model still has exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). These modifications are meant to improve prediction accuracy, lower the BIC, and enhance parameter recovery correlations by capturing nonlinearities in a more flexible and layered manner.\n</think>\n\nFor run 48, please develop an innovative computational model for responder decision-making by following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n\n6. Sum all computed terms and add a constant delta = 0.01.\n\n7. Modulate the sum with a factor [1 + 0.012 \u00d7 sin(|x| + 0.035)] (note the slight phase shift adjustment).\n\n8. Combine operations by forming an Intermediate_Signal that multiplies the power-law term and the logarithmic term, then adds the other components (atan, exponential, tanh, and additional sinusoidal terms).\n\n9. Multiply the Intermediate_Signal by a fixed constant C chosen in the range [1.05, 1.10].\n\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.055)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.105)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.075)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n\u2003\u2003e. Optionally, include an extra stage [1 + 0.003 \u00d7 (sin(|x| + 0.02) \u00d7 cos(|x| + 0.04))].\n\n11. Introduce an extra nonlinear blending layer by applying an alternative mapping function (e.g., softplus or softsign, or a relu-like transformation if appropriate) to compress extreme values before the final combination.\n\n12. Further blend the signal by incorporating an extra multiplicative layer that combines an exponential decay factor (e.g., exp(\u2212|x|/k) for a small constant k) with a softsign transform of the signal, thereby amplifying small differences.\n\n13. Add a small constant offset of 1e-6 for numerical stability.\n\n14. Compress the fully modulated signal by raising it to a fixed exponent E (suggest using E = 0.92, but values between 0.90 and 0.94 may also be explored).\n\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory components from the power-log blend with delta) \u00d7 (product of all modulation factors, including the extra blending layer with softplus/softsign and the exponential decay modulation) + 1e-6 ]^(E) }.\n\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, use exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage out-of-the-box thinking and creative layering of nonlinear processes to further improve prediction accuracy, reduce the BIC, and enhance parameter recovery correlations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 48, we want to push further by mixing additional nonlinear mapping functions with slight modifications on phase shifts and modulation constants. Encourage exploration of alternative functions beyond tanh\u2014such as softplus, softsign, or even a relu-like transform in the extra blending layer\u2014to better capture the subtle variations in fairness sensitivity. Also, suggest integrating an extra multiplicative layer that blends an exponential decay factor with a softsign mapping before the final compression, and adjust the phase shift constants in the sinusoidal modulators slightly (e.g., add 0.005 to each phase shift) to capture any unmodeled variability. Ensure that the model still has exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). These modifications are meant to improve prediction accuracy, lower the BIC, and enhance parameter recovery correlations by capturing nonlinearities in a more flexible and layered manner.\n</think>\n\nFor run 48, please develop an innovative computational model for responder decision-making by following these instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n\n6. Sum all computed terms and add a constant delta = 0.01.\n\n7. Modulate the sum with a factor [1 + 0.012 \u00d7 sin(|x| + 0.035)] (note the slight phase shift adjustment).\n\n8. Combine operations by forming an Intermediate_Signal that multiplies the power-law term and the logarithmic term, then adds the other components (atan, exponential, tanh, and additional sinusoidal terms).\n\n9. Multiply the Intermediate_Signal by a fixed constant C chosen in the range [1.05, 1.10].\n\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.055)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.105)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.075)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n\u2003\u2003e. Optionally, include an extra stage [1 + 0.003 \u00d7 (sin(|x| + 0.02) \u00d7 cos(|x| + 0.04))].\n\n11. Introduce an extra nonlinear blending layer by applying an alternative mapping function (e.g., softplus or softsign, or a relu-like transformation if appropriate) to compress extreme values before the final combination.\n\n12. Further blend the signal by incorporating an extra multiplicative layer that combines an exponential decay factor (e.g., exp(\u2212|x|/k) for a small constant k) with a softsign transform of the signal, thereby amplifying small differences.\n\n13. Add a small constant offset of 1e-6 for numerical stability.\n\n14. Compress the fully modulated signal by raising it to a fixed exponent E (suggest using E = 0.92, but values between 0.90 and 0.94 may also be explored).\n\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory components from the power-log blend with delta) \u00d7 (product of all modulation factors, including the extra blending layer with softplus/softsign and the exponential decay modulation) + 1e-6 ]^(E) }.\n\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, use exactly three learnable parameters with the following bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage out-of-the-box thinking and creative layering of nonlinear processes to further improve prediction accuracy, reduce the BIC, and enhance parameter recovery correlations.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self over the sum of token_self and token_opp\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap, the difference between the normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"A\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t1\": {\n      \"description\": \"Power-law component: square root of A\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t2\": {\n      \"description\": \"Logarithmic component: natural log of (1 + 3.4*A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t3\": {\n      \"description\": \"Scaled arctan component: 0.2*atan(1.1*A)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t4\": {\n      \"description\": \"Exponential decay component: 0.1*(1-exp(-A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t5\": {\n      \"description\": \"Faster exponential decay component: 0.05*(1-exp(-2*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.05\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t6\": {\n      \"description\": \"Hyperbolic tangent component: 0.03*tanh(A)\",\n      \"range\": {\n        \"min\": -0.03,\n        \"max\": 0.03\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t7\": {\n      \"description\": \"Sinusoidal component: 0.02*sin(0.5*A)\",\n      \"range\": {\n        \"min\": -0.02,\n        \"max\": 0.02\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t8\": {\n      \"description\": \"Cosine-based component: 0.012*(1-cos(0.3*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.024\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t9\": {\n      \"description\": \"Exponential decay factor: 0.005*exp(-A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.005\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t10\": {\n      \"description\": \"Additional sinusoidal term: 0.005*sin(2.2*A)\",\n      \"range\": {\n        \"min\": -0.005,\n        \"max\": 0.005\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t11\": {\n      \"description\": \"Additional cosine term: 0.002*cos(3.0*A)\",\n      \"range\": {\n        \"min\": -0.002,\n        \"max\": 0.002\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to mandatory components\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Sum_mand\": {\n      \"description\": \"Sum of all mandatory non\u2010linear components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M1\": {\n      \"description\": \"Modulation factor based on a slight sinusoidal phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Intermediate signal combining multiplicative (t1*t2) and additive non-linear components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier (set within [1.05, 1.10])\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S1\": {\n      \"description\": \"Scaled intermediate signal after multiplication by constant C\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M2\": {\n      \"description\": \"Sequential modulation factor from cosine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M3\": {\n      \"description\": \"Sequential modulation factor from sine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M4\": {\n      \"description\": \"Additional modulation factor from cosine with phase adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M5\": {\n      \"description\": \"Modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M6\": {\n      \"description\": \"Optional additional modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod2\": {\n      \"description\": \"Signal after applying all sequential modulation factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_soft\": {\n      \"description\": \"Result of applying a softsign transformation to S_mod2\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Extra\": {\n      \"description\": \"Extra multiplicative layer combining an exponential decay factor with the softsign output\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_final\": {\n      \"description\": \"Blended signal after applying the extra multiplicative layer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_offset\": {\n      \"description\": \"Final signal after adding a small offset for numerical stability\",\n      \"range\": {\n        \"min\": \"1e-6\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_val\": {\n      \"description\": \"Compressed amplitude after raising S_offset to exponent 0.92\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final non-linear transformation applied to x (with sign preservation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the non-linear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the non-linear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Acceptance probability obtained via the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA layered non\u2010linear utility model for responder decisions. The model first computes a fairness gap from normalized proposals and token shares, scales it by a learnable factor phi, and then applies a cascade of non-linear transformations (power, logarithmic, trigonometric, and exponential) with multiple modulation stages\u2014including an extra blending layer using a softsign transform and an exponential decay factor. The final transformed signal, preserving the sign of the fairness gap, is scaled by learnable sensitivity gamma and shifted by learnable bias beta to yield a latent utility that is converted via a logistic function into an acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self over the sum of token_self and token_opp\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap, the difference between the normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"A\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t1\": {\n      \"description\": \"Power-law component: square root of A\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t2\": {\n      \"description\": \"Logarithmic component: natural log of (1 + 3.4*A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t3\": {\n      \"description\": \"Scaled arctan component: 0.2*atan(1.1*A)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t4\": {\n      \"description\": \"Exponential decay component: 0.1*(1-exp(-A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t5\": {\n      \"description\": \"Faster exponential decay component: 0.05*(1-exp(-2*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.05,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t6\": {\n      \"description\": \"Hyperbolic tangent component: 0.03*tanh(A)\",\n      \"range\": {\n        \"min\": -0.03,\n        \"max\": 0.03,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t7\": {\n      \"description\": \"Sinusoidal component: 0.02*sin(0.5*A)\",\n      \"range\": {\n        \"min\": -0.02,\n        \"max\": 0.02,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t8\": {\n      \"description\": \"Cosine-based component: 0.012*(1-cos(0.3*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.024,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t9\": {\n      \"description\": \"Exponential decay factor: 0.005*exp(-A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.005,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t10\": {\n      \"description\": \"Additional sinusoidal term: 0.005*sin(2.2*A)\",\n      \"range\": {\n        \"min\": -0.005,\n        \"max\": 0.005,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t11\": {\n      \"description\": \"Additional cosine term: 0.002*cos(3.0*A)\",\n      \"range\": {\n        \"min\": -0.002,\n        \"max\": 0.002,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to mandatory components\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Sum_mand\": {\n      \"description\": \"Sum of all mandatory non\\u2010linear components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M1\": {\n      \"description\": \"Modulation factor based on a slight sinusoidal phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Intermediate signal combining multiplicative (t1*t2) and additive non-linear components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier (set within [1.05, 1.10])\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S1\": {\n      \"description\": \"Scaled intermediate signal after multiplication by constant C\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M2\": {\n      \"description\": \"Sequential modulation factor from cosine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M3\": {\n      \"description\": \"Sequential modulation factor from sine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M4\": {\n      \"description\": \"Additional modulation factor from cosine with phase adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M5\": {\n      \"description\": \"Modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M6\": {\n      \"description\": \"Optional additional modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod2\": {\n      \"description\": \"Signal after applying all sequential modulation factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_soft\": {\n      \"description\": \"Result of applying a softsign transformation to S_mod2\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Extra\": {\n      \"description\": \"Extra multiplicative layer combining an exponential decay factor with the softsign output\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_final\": {\n      \"description\": \"Blended signal after applying the extra multiplicative layer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_offset\": {\n      \"description\": \"Final signal after adding a small offset for numerical stability\",\n      \"range\": {\n        \"min\": \"1e-6\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_val\": {\n      \"description\": \"Compressed amplitude after raising S_offset to exponent 0.92\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final non-linear transformation applied to x (with sign preservation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the non-linear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the non-linear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Acceptance probability obtained via the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        A = abs(x)\n        \n        t1 = A**0.5\n        t2 = math.log(1 + 3.4 * A)\n        t3 = 0.2 * math.atan(1.1 * A)\n        t4 = 0.1 * (1 - math.exp(-A))\n        t5 = 0.05 * (1 - math.exp(-2 * A))\n        t6 = 0.03 * math.tanh(A)\n        t7 = 0.02 * math.sin(0.5 * A)\n        t8 = 0.012 * (1 - math.cos(0.3 * A))\n        t9 = 0.005 * math.exp(-A)\n        t10 = 0.005 * math.sin(2.2 * A)\n        t11 = 0.002 * math.cos(3.0 * A)\n        delta = 0.01\n        Sum_mand = t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + delta\n        M1 = 1 + 0.012 * math.sin(A + 0.035)\n        Intermediate = (t1 * t2) + (t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11) + delta\n        C = 1.075\n        S1 = C * Intermediate\n        M2 = 1 + 0.008 * math.cos(A + 0.055)\n        M3 = 1 + 0.005 * math.sin(A + 0.105)\n        M4 = 1 + 0.004 * math.cos(A + 0.075)\n        M5 = 1 + 0.006 * math.sin(A + 0.025) * math.cos(A + 0.045)\n        M6 = 1 + 0.003 * math.sin(A + 0.02) * math.cos(A + 0.04)\n        S_mod2 = S1 * M2 * M3 * M4 * M5 * M6\n        \n        def softsign(z):\n            return z / (1 + abs(z))\n\n        S_soft = softsign(S_mod2)\n        Extra = math.exp(-A / 0.1) * S_soft\n        S_final = S_soft * Extra\n        S_offset = S_final + 1e-6\n        f_val = S_offset**0.92\n        f = (1 if x >= 0 else -1) * f_val  #sign(x)\n\n        U = beta + gamma * f\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 3, \"split_opp\": 2.5, \"split_self\": 0.5, \"splitperc_opp\": 83, \"splitperc_self\": 17, \"accept\": 1.0, \"accepted_amount\": 0.5, \"accepted_perc\": 17.0, \"proposed_perc\": 17.0, \"proposed_amount\": 0.5}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 5, \"split_opp\": 4.5, \"split_self\": 0.5, \"splitperc_opp\": 90, \"splitperc_self\": 10, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 10.0, \"proposed_amount\": 0.5}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743540995.222913
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the non-linear signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "N_offer": {
      "description": "Normalized offer computed as split_self divided by combined_earning",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share computed as token_self over the sum of token_self and token_opp",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap, the difference between the normalized offer and normalized fair share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "x": {
      "description": "Scaled fairness gap computed as F divided by phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "A": {
      "description": "Absolute value of the scaled fairness gap",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t1": {
      "description": "Power-law component: square root of A",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t2": {
      "description": "Logarithmic component: natural log of (1 + 3.4*A)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t3": {
      "description": "Scaled arctan component: 0.2*atan(1.1*A)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t4": {
      "description": "Exponential decay component: 0.1*(1-exp(-A))",
      "range": {
        "min": 0,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t5": {
      "description": "Faster exponential decay component: 0.05*(1-exp(-2*A))",
      "range": {
        "min": 0,
        "max": 0.05,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t6": {
      "description": "Hyperbolic tangent component: 0.03*tanh(A)",
      "range": {
        "min": -0.03,
        "max": 0.03,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t7": {
      "description": "Sinusoidal component: 0.02*sin(0.5*A)",
      "range": {
        "min": -0.02,
        "max": 0.02,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t8": {
      "description": "Cosine-based component: 0.012*(1-cos(0.3*A))",
      "range": {
        "min": 0,
        "max": 0.024,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t9": {
      "description": "Exponential decay factor: 0.005*exp(-A)",
      "range": {
        "min": 0,
        "max": 0.005,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t10": {
      "description": "Additional sinusoidal term: 0.005*sin(2.2*A)",
      "range": {
        "min": -0.005,
        "max": 0.005,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "t11": {
      "description": "Additional cosine term: 0.002*cos(3.0*A)",
      "range": {
        "min": -0.002,
        "max": 0.002,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "delta": {
      "description": "Constant offset added to mandatory components",
      "range": {
        "min": 0.01,
        "max": 0.01,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Sum_mand": {
      "description": "Sum of all mandatory non\u2010linear components plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M1": {
      "description": "Modulation factor based on a slight sinusoidal phase shift",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Intermediate": {
      "description": "Intermediate signal combining multiplicative (t1*t2) and additive non-linear components",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "C": {
      "description": "Fixed constant multiplier (set within [1.05, 1.10])",
      "range": {
        "min": 1.05,
        "max": 1.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S1": {
      "description": "Scaled intermediate signal after multiplication by constant C",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M2": {
      "description": "Sequential modulation factor from cosine with phase shift",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M3": {
      "description": "Sequential modulation factor from sine with phase shift",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M4": {
      "description": "Additional modulation factor from cosine with phase adjustment",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M5": {
      "description": "Modulation factor combining sine and cosine with phase shifts",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "M6": {
      "description": "Optional additional modulation factor combining sine and cosine with phase shifts",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S_mod2": {
      "description": "Signal after applying all sequential modulation factors",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S_soft": {
      "description": "Result of applying a softsign transformation to S_mod2",
      "range": {
        "min": "-1",
        "max": "1",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Extra": {
      "description": "Extra multiplicative layer combining an exponential decay factor with the softsign output",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S_final": {
      "description": "Blended signal after applying the extra multiplicative layer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S_offset": {
      "description": "Final signal after adding a small offset for numerical stability",
      "range": {
        "min": "1e-6",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_val": {
      "description": "Compressed amplitude after raising S_offset to exponent 0.92",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final non-linear transformation applied to x (with sign preservation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the non-linear signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma times the non-linear transformation f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Acceptance probability obtained via the logistic transformation of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A layered non\u2010linear utility model for responder decisions. The model first computes a fairness gap from normalized proposals and token shares, scales it by a learnable factor phi, and then applies a cascade of non-linear transformations (power, logarithmic, trigonometric, and exponential) with multiple modulation stages\u2014including an extra blending layer using a softsign transform and an exponential decay factor. The final transformed signal, preserving the sign of the fairness gap, is scaled by learnable sensitivity gamma and shifted by learnable bias beta to yield a latent utility that is converted via a logistic function into an acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self over the sum of token_self and token_opp\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap, the difference between the normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"A\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t1\": {\n      \"description\": \"Power-law component: square root of A\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t2\": {\n      \"description\": \"Logarithmic component: natural log of (1 + 3.4*A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t3\": {\n      \"description\": \"Scaled arctan component: 0.2*atan(1.1*A)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t4\": {\n      \"description\": \"Exponential decay component: 0.1*(1-exp(-A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t5\": {\n      \"description\": \"Faster exponential decay component: 0.05*(1-exp(-2*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.05\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t6\": {\n      \"description\": \"Hyperbolic tangent component: 0.03*tanh(A)\",\n      \"range\": {\n        \"min\": -0.03,\n        \"max\": 0.03\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t7\": {\n      \"description\": \"Sinusoidal component: 0.02*sin(0.5*A)\",\n      \"range\": {\n        \"min\": -0.02,\n        \"max\": 0.02\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t8\": {\n      \"description\": \"Cosine-based component: 0.012*(1-cos(0.3*A))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.024\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t9\": {\n      \"description\": \"Exponential decay factor: 0.005*exp(-A)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.005\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t10\": {\n      \"description\": \"Additional sinusoidal term: 0.005*sin(2.2*A)\",\n      \"range\": {\n        \"min\": -0.005,\n        \"max\": 0.005\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"t11\": {\n      \"description\": \"Additional cosine term: 0.002*cos(3.0*A)\",\n      \"range\": {\n        \"min\": -0.002,\n        \"max\": 0.002\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Constant offset added to mandatory components\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 0.01\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Sum_mand\": {\n      \"description\": \"Sum of all mandatory non\u2010linear components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M1\": {\n      \"description\": \"Modulation factor based on a slight sinusoidal phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Intermediate signal combining multiplicative (t1*t2) and additive non-linear components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"C\": {\n      \"description\": \"Fixed constant multiplier (set within [1.05, 1.10])\",\n      \"range\": {\n        \"min\": 1.05,\n        \"max\": 1.10\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S1\": {\n      \"description\": \"Scaled intermediate signal after multiplication by constant C\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M2\": {\n      \"description\": \"Sequential modulation factor from cosine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M3\": {\n      \"description\": \"Sequential modulation factor from sine with phase shift\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M4\": {\n      \"description\": \"Additional modulation factor from cosine with phase adjustment\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M5\": {\n      \"description\": \"Modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"M6\": {\n      \"description\": \"Optional additional modulation factor combining sine and cosine with phase shifts\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod2\": {\n      \"description\": \"Signal after applying all sequential modulation factors\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_soft\": {\n      \"description\": \"Result of applying a softsign transformation to S_mod2\",\n      \"range\": {\n        \"min\": \"-1\",\n        \"max\": \"1\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Extra\": {\n      \"description\": \"Extra multiplicative layer combining an exponential decay factor with the softsign output\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_final\": {\n      \"description\": \"Blended signal after applying the extra multiplicative layer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_offset\": {\n      \"description\": \"Final signal after adding a small offset for numerical stability\",\n      \"range\": {\n        \"min\": \"1e-6\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_val\": {\n      \"description\": \"Compressed amplitude after raising S_offset to exponent 0.92\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final non-linear transformation applied to x (with sign preservation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the non-linear signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the non-linear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Acceptance probability obtained via the logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA layered non\u2010linear utility model for responder decisions. The model first computes a fairness gap from normalized proposals and token shares, scales it by a learnable factor phi, and then applies a cascade of non-linear transformations (power, logarithmic, trigonometric, and exponential) with multiple modulation stages\u2014including an extra blending layer using a softsign transform and an exponential decay factor. The final transformed signal, preserving the sign of the fairness gap, is scaled by learnable sensitivity gamma and shifted by learnable bias beta to yield a latent utility that is converted via a logistic function into an acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))\nSummary: A layered non\u2010linear utility model for responder decisions. The model first computes a fairness gap from normalized proposals and token shares, scales it by a learnable factor phi, and then applies a cascade of non-linear transformations (power, logarithmic, trigonometric, and exponential) with multiple modulation stages\u2014including an extra blending layer using a softsign transform and an exponential decay factor. The final transformed signal, preserving the sign of the fairness gap, is scaled by learnable sensitivity gamma and shifted by learnable bias beta to yield a latent utility that is converted via a logistic function into an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1.0, beta=0.0, gamma=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        A = abs(x)\n        \n        t1 = A**0.5\n        t2 = math.log(1 + 3.4 * A)\n        t3 = 0.2 * math.atan(1.1 * A)\n        t4 = 0.1 * (1 - math.exp(-A))\n        t5 = 0.05 * (1 - math.exp(-2 * A))\n        t6 = 0.03 * math.tanh(A)\n        t7 = 0.02 * math.sin(0.5 * A)\n        t8 = 0.012 * (1 - math.cos(0.3 * A))\n        t9 = 0.005 * math.exp(-A)\n        t10 = 0.005 * math.sin(2.2 * A)\n        t11 = 0.002 * math.cos(3.0 * A)\n        delta = 0.01\n        Sum_mand = t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + delta\n        M1 = 1 + 0.012 * math.sin(A + 0.035)\n        Intermediate = (t1 * t2) + (t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11) + delta\n        C = 1.075\n        S1 = C * Intermediate\n        M2 = 1 + 0.008 * math.cos(A + 0.055)\n        M3 = 1 + 0.005 * math.sin(A + 0.105)\n        M4 = 1 + 0.004 * math.cos(A + 0.075)\n        M5 = 1 + 0.006 * math.sin(A + 0.025) * math.cos(A + 0.045)\n        M6 = 1 + 0.003 * math.sin(A + 0.02) * math.cos(A + 0.04)\n        S_mod2 = S1 * M2 * M3 * M4 * M5 * M6\n        \n        def softsign(z):\n            return z / (1 + abs(z))\n\n        S_soft = softsign(S_mod2)\n        Extra = math.exp(-A / 0.1) * S_soft\n        S_final = S_soft * Extra\n        S_offset = S_final + 1e-6\n        f_val = S_offset**0.92\n        f = (1 if x >= 0 else -1) * f_val  #sign(x)\n\n        U = beta + gamma * f\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.561965811965812,
  "fitting_results": [
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 7.2108913604312574,
      "success": true,
      "log_likelihood": -24.953927542758183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.6272801159423116,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.93333426752978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.5851781866806136,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.825240005625584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 6.350333732847818,
      "success": true,
      "log_likelihood": -24.953412198212412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 4.52678362214696,
      "success": true,
      "log_likelihood": -24.953370954691547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.3470378040866745,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.452877108930487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 1.7481992671646625,
      "success": true,
      "log_likelihood": -11.277863503007424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.8263974950910511,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.831495228765267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 5.747586671254189,
      "success": true,
      "log_likelihood": -11.277871124371407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2734556264934076,
      "beta": -9.816508187117973,
      "gamma": 9.52565899471279,
      "success": true,
      "log_likelihood": -24.9534685763386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 5.931469129426505,
      "success": true,
      "log_likelihood": -24.95336574575353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.588279488170143,
      "success": true,
      "log_likelihood": -24.953867380548882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4460064771441894,
      "beta": -10.0,
      "gamma": 4.924375979046337,
      "success": true,
      "log_likelihood": -24.95341275011515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3223322518210388,
      "beta": 10.0,
      "gamma": 0.34030294742376666,
      "success": true,
      "log_likelihood": -11.27786163700029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5989932847061235,
      "beta": 10.0,
      "gamma": 0.590015007601714,
      "success": true,
      "log_likelihood": -11.27786161502055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 4.948304691715032,
      "success": true,
      "log_likelihood": -11.277869570615211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 4.1342030023943375,
      "success": true,
      "log_likelihood": -11.277868003876568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 1.7754539886420766,
      "success": true,
      "log_likelihood": -16.277636318978004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 4.924576794619157,
      "success": true,
      "log_likelihood": -15.277687710594606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 7.469108902704371,
      "success": true,
      "log_likelihood": -11.277874523684808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.9888129079606061,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.627533824417032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2749034181349164,
      "beta": 10.0,
      "gamma": 1.727116716313149,
      "success": true,
      "log_likelihood": -16.27763619714394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.586198516506256,
      "success": true,
      "log_likelihood": -24.953493806697033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.6515984698646837,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.84165741759878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.5604876532700658,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.93052154431361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.5142270556592695,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.332536083165163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.9999764778617871,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.635354327141442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 7.038333837204289,
      "success": true,
      "log_likelihood": -24.953615081838624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 3.5364521202377333,
      "success": true,
      "log_likelihood": -15.277684936995593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 4.435298472706688,
      "success": true,
      "log_likelihood": -19.277494886539067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.112067227532242,
      "beta": 10.0,
      "gamma": 3.2484255519235345,
      "success": true,
      "log_likelihood": -11.277872634287327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1727307831394145,
      "beta": -10.0,
      "gamma": 6.871592929217062,
      "success": true,
      "log_likelihood": -24.953932420268252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 7.83917175427854,
      "success": true,
      "log_likelihood": -24.953415577571285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.00005793167566,
      "success": true,
      "log_likelihood": -24.953444060676528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 4.031001241149585,
      "success": true,
      "log_likelihood": -11.277867806400051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.3528874309990971,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.471804119413854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.015049558688927,
      "beta": 7.601095808142528,
      "gamma": 5.275814407444786,
      "success": true,
      "log_likelihood": -22.276747680548205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4951585642859702,
      "beta": -5.9771559493939215,
      "gamma": 0.8185955947674302,
      "success": true,
      "log_likelihood": -24.95319554058718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6623547628918159,
      "beta": 6.6173046463269465,
      "gamma": 1.8901704567731348,
      "success": true,
      "log_likelihood": -23.274319536275936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9589456521992922,
      "beta": 10.0,
      "gamma": 0.26822184214463557,
      "success": true,
      "log_likelihood": -14.277724720716542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.0860320333238745,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.94309257968402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4052178183864448,
      "beta": -10.0,
      "gamma": 8.1567968457272,
      "success": true,
      "log_likelihood": -24.95369867041556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.21405908052045527,
      "success": true,
      "log_likelihood": -12.277815227484407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.0395050535160857,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.661732521494663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.08927301292326975,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.960531058502042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 2.699445277852467,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.259486993182534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9812878017438359,
      "beta": -5.8479227854918365,
      "gamma": 9.090722460162372,
      "success": true,
      "log_likelihood": -24.949898693990264,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 3.937476326324154,
      "success": true,
      "log_likelihood": -24.953464870817303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 6.105022239441178,
      "success": true,
      "log_likelihood": -24.953408266505377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9084307397219881,
      "beta": -2.077502102944408,
      "gamma": 0.21080315763525456,
      "success": true,
      "log_likelihood": -24.897727121733023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.4919592420637027,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.1219992734764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4051016551970545,
      "beta": -10.0,
      "gamma": 7.948644707870885,
      "success": true,
      "log_likelihood": -24.95383977190101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.7294321176029879,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.85809074709468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.6186190186400499,
      "gamma": 6.311844534422438,
      "success": true,
      "log_likelihood": -24.445316294033713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 8.97694293063821,
      "success": true,
      "log_likelihood": -24.953443535000712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 7.657547722949437,
      "success": true,
      "log_likelihood": -24.95352622164906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 8.420383941225387,
      "success": true,
      "log_likelihood": -24.953612513507622,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 7.109789089445313,
      "success": true,
      "log_likelihood": -15.277676430297342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.129493091641198,
      "success": true,
      "log_likelihood": -24.95387207071117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 3.1544758011025054,
      "success": true,
      "log_likelihood": -18.277542693605227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.0880294844385075,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.95992629656154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.606904075609829,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.932506763455656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2699383563475082,
      "beta": -10.0,
      "gamma": 9.635917779505117,
      "success": true,
      "log_likelihood": -24.953912760647217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 8.754358754825095,
      "success": true,
      "log_likelihood": -24.95337457836281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 7.971919434013685,
      "success": true,
      "log_likelihood": -24.95370187554407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.9970158010889572,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.633472692438204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4254970429218938,
      "beta": 10.0,
      "gamma": 1.7865179183337914,
      "success": true,
      "log_likelihood": -14.27772816996965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.8738061129346085,
      "beta": 10.0,
      "gamma": 1.63878055200974,
      "success": true,
      "log_likelihood": -16.27763637683388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.0414135723892928,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.663308636984194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.007119694146605,
      "beta": 10.0,
      "gamma": 3.109806431394464,
      "success": true,
      "log_likelihood": -14.277731306223476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.0002791568141292,
      "beta": -10.0,
      "gamma": 7.291377920760273,
      "success": true,
      "log_likelihood": -24.95388060908275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2140378363067241,
      "beta": -10.0,
      "gamma": 8.855663630154789,
      "success": true,
      "log_likelihood": -24.953836712895413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.6875076546176675,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.849440066841417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 10.0,
      "gamma": 2.2413882368539144,
      "success": true,
      "log_likelihood": -19.277497317608198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4132117515450173,
      "beta": 8.320510371753384,
      "gamma": 8.049638506337468,
      "success": true,
      "log_likelihood": -29.275175394897943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.4712428656731773,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.114595900189027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4344825954917775,
      "beta": 10.0,
      "gamma": 8.376025098681072,
      "success": true,
      "log_likelihood": -13.277796497301692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1054628278529641,
      "beta": -10.0,
      "gamma": 8.712315208989972,
      "success": true,
      "log_likelihood": -24.953972168922714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2124013195974956,
      "beta": -0.0925156005869764,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.95885326770356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4412557145193292,
      "beta": -10.0,
      "gamma": 4.238226424733441,
      "success": true,
      "log_likelihood": -24.95394853076894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.7942114776377396,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.86979944462677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 6.133281399106864,
      "success": true,
      "log_likelihood": -14.277731573694295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.26851600509867,
      "success": true,
      "log_likelihood": -24.953878023699666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.981306456878473,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.943495796822578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.064285099291012,
      "beta": -0.09953793935600186,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.97397890294604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.2880566797654789,
      "beta": -10.0,
      "gamma": 7.448634557292985,
      "success": true,
      "log_likelihood": -24.953879746548537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.4578063885730754,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.110115493619414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.034138240602877,
      "success": true,
      "log_likelihood": -24.953699148863272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1550925378714818,
      "beta": 9.999999999999998,
      "gamma": 0.7626757349979206,
      "success": true,
      "log_likelihood": -13.277771921328146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 5.936806058964734,
      "success": true,
      "log_likelihood": -24.953333004458997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.496052514829606,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.12323660640381,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": -0.04849689278424741,
        "p": 0.6318292427617119
      },
      "beta": {
        "r": 0.6705922698264525,
        "p": 2.307834779619461e-14
      },
      "gamma": {
        "r": -0.008080792264340582,
        "p": 0.9364016860589048
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.990095477134126,
  "bic_results": {
    "average_bic": 53.990095477134126,
    "individual_bics": [
      60.6584119008847,
      60.61722535042789,
      60.4010368266195,
      60.65738121179315,
      60.65729872475143,
      57.6563110332293,
      33.306283821383175,
      56.41354727289887,
      33.306299064111144,
      60.65749396804553,
      60.65728830687539,
      60.6582915764661,
      60.657382315598625,
      33.30628008936891,
      33.30628004540943,
      33.30629595659875,
      33.30629282312147,
      43.305829453324336,
      41.30593223655754,
      33.30630586273794,
      60.0056244642024,
      43.30582920965621,
      60.65754442876239,
      60.43387165056589,
      60.611599903995554,
      59.41562898169866,
      60.02126546965121,
      60.65778697904558,
      41.30592668935952,
      49.30554658844646,
      33.30630208394298,
      60.65842165590483,
      60.6573879705109,
      60.65744493672139,
      33.30629242816843,
      57.694165054196034,
      55.30405217646474,
      60.65694789654269,
      57.299195887920206,
      39.30600625680141,
      58.63674197473637,
      60.65795415619945,
      35.30618727033715,
      60.07402185835765,
      58.67161893237241,
      53.269530801733396,
      60.650354203348854,
      60.65748655700294,
      60.65737334837908,
      60.54601105883438,
      54.99455536232114,
      60.658236359170346,
      60.466738309557684,
      59.64118940343576,
      60.65744388536976,
      60.657609258666454,
      60.65778184238357,
      41.305909675963015,
      60.65830095679067,
      47.30564220257878,
      58.67040940849141,
      60.61557034227964,
      60.65838233666277,
      60.65730597209395,
      60.65796056645647,
      60.017502200244735,
      39.30601315530763,
      43.30582956903609,
      60.07717408933672,
      39.306019427815286,
      60.65831803353383,
      60.65823024115916,
      60.44943694905116,
      49.30555145058473,
      69.30090760516421,
      54.97974861574639,
      37.306149809971714,
      60.65850115321376,
      58.66826335077545,
      60.65845387690621,
      60.49015570462187,
      39.30601996275692,
      60.65831286276766,
      60.63754840901349,
      58.698514621260415,
      60.6583163084654,
      54.97078780260716,
      60.65795511309487,
      37.30610065802462,
      60.65722282428632,
      54.997030028175956
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = -0.048\n- beta: r = 0.671\n- gamma: r = -0.008",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning;  \nN_share = token_self/(token_self+token_opp);  \nF = N_offer - N_share;  \nx = F/phi;  \nA = abs(x);  \nt1 = A^(0.5);  \nt2 = ln(1+3.4*A);  \nt3 = 0.2*atan(1.1*A);  \nt4 = 0.1*(1-exp(-A));  \nt5 = 0.05*(1-exp(-2*A));  \nt6 = 0.03*tanh(A);  \nt7 = 0.02*sin(0.5*A);  \nt8 = 0.012*(1-cos(0.3*A));  \nt9 = 0.005*exp(-A);  \nt10 = 0.005*sin(2.2*A);  \nt11 = 0.002*cos(3.0*A);  \ndelta = 0.01;  \nSum_mand = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11+delta;  \nM1 = 1+0.012*sin(A+0.035);  \nIntermediate = (t1*t2) + (t3+t4+t5+t6+t7+t8+t9+t10+t11) + delta;  \nC = 1.075;  \nS1 = C * Intermediate;  \nM2 = 1+0.008*cos(A+0.055);  \nM3 = 1+0.005*sin(A+0.105);  \nM4 = 1+0.004*cos(A+0.075);  \nM5 = 1+0.006*sin(A+0.025)*cos(A+0.045);  \nM6 = 1+0.003*sin(A+0.02)*cos(A+0.04);  \nS_mod2 = S1 * M2 * M3 * M4 * M5 * M6;  \nsoftsign(z) = z/(1+abs(z));  \nS_soft = softsign(S_mod2);  \nExtra = exp(-A/0.1)*S_soft;  \nS_final = S_soft * Extra;  \nS_offset = S_final + 1e-6;  \nf_val = (S_offset)^(0.92);  \nf = sign(x)*f_val;  \nU = beta + gamma * f;  \np_accept = 1/(1+exp(-U))\nSummary: A layered non\u2010linear utility model for responder decisions. The model first computes a fairness gap from normalized proposals and token shares, scales it by a learnable factor phi, and then applies a cascade of non-linear transformations (power, logarithmic, trigonometric, and exponential) with multiple modulation stages\u2014including an extra blending layer using a softsign transform and an exponential decay factor. The final transformed signal, preserving the sign of the fairness gap, is scaled by learnable sensitivity gamma and shifted by learnable bias beta to yield a latent utility that is converted via a logistic function into an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.990095477134126\nOverall Accuracy: 0.5620\n\nParameter Recovery:\n- phi: r = -0.048\n- beta: r = 0.671\n- gamma: r = -0.008"
  ]
}