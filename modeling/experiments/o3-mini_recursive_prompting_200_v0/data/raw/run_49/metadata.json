{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 49, further enhance the nonlinear transformation by exploring alternative mapping functions. In particular, replace the extra blending layer with a softplus transform (or experiment with a ReLU-like transformation) to compress extreme values more smoothly. Also, add an extra multiplicative modulation by blending an exponential decay factor (with a small decay constant k, e.g., k = 0.1) with a softsign mapping of the intermediate signal. Additionally, slightly adjust all phase-shift constants in the sinusoidal modulation factors by adding 0.005 to each (e.g., instead of sin(|x|+0.035), use sin(|x|+0.04)). Ensure the overall structure remains: compute the normalized offer, normalized fair share, fairness gap F, and then scale by phi (with bounds [0.5, 1.5]). Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\n\nFor run 49, please develop an innovative computational model for responder decision-making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n\n6. Sum all computed terms and add a constant delta = 0.01.\n\n7. Modulate the sum with a factor [1 + 0.012 \u00d7 sin(|x| + 0.04)] (note the phase shift adjustment).\n\n8. Form an Intermediate_Signal by multiplying the power-law term with the logarithmic term and adding the remaining nonlinear components (atan, exponential, tanh, and additional sinusoidal terms).\n\n9. Multiply the Intermediate_Signal by a fixed constant C (selected in the range [1.05, 1.10]).\n\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.03) \u00d7 cos(|x| + 0.05))].\n\u2003\u2003e. Optionally, add an extra modulation stage [1 + 0.003 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n\n11. Introduce an extra nonlinear blending layer by applying a softplus transformation (or experiment with a ReLU-like alternative) to the modulated signal, compressing extreme values.\n\n12. Further blend the signal with an extra multiplicative layer that combines an exponential decay factor exp(\u2212|x|/0.1) with a softsign mapping of the intermediate modulated signal.\n\n13. Add a small constant offset of 1e-6 for numerical stability.\n\n14. Compress the final blended signal by raising it to a fixed exponent E (use E = 0.92).\n\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory components from the power-log blend with delta) \u00d7 (product of all modulation factors\u2014including the extra blending layer with softplus (or ReLU-like) and the exponential decay\u2013softsign modulation) + 1e-6 ]^(E) }.\n\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember to use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage out-of-the-box thinking in layering these nonlinear processes to further improve prediction accuracy, lower BIC, and enhance parameter recovery correlations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 49, further enhance the nonlinear transformation by exploring alternative mapping functions. In particular, replace the extra blending layer with a softplus transform (or experiment with a ReLU-like transformation) to compress extreme values more smoothly. Also, add an extra multiplicative modulation by blending an exponential decay factor (with a small decay constant k, e.g., k = 0.1) with a softsign mapping of the intermediate signal. Additionally, slightly adjust all phase-shift constants in the sinusoidal modulation factors by adding 0.005 to each (e.g., instead of sin(|x|+0.035), use sin(|x|+0.04)). Ensure the overall structure remains: compute the normalized offer, normalized fair share, fairness gap F, and then scale by phi (with bounds [0.5, 1.5]). Use exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\n</think>\n\nFor run 49, please develop an innovative computational model for responder decision-making with the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n\n5. For the absolute value |x|, compute the core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 atan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n\n6. Sum all computed terms and add a constant delta = 0.01.\n\n7. Modulate the sum with a factor [1 + 0.012 \u00d7 sin(|x| + 0.04)] (note the phase shift adjustment).\n\n8. Form an Intermediate_Signal by multiplying the power-law term with the logarithmic term and adding the remaining nonlinear components (atan, exponential, tanh, and additional sinusoidal terms).\n\n9. Multiply the Intermediate_Signal by a fixed constant C (selected in the range [1.05, 1.10]).\n\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.03) \u00d7 cos(|x| + 0.05))].\n\u2003\u2003e. Optionally, add an extra modulation stage [1 + 0.003 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n\n11. Introduce an extra nonlinear blending layer by applying a softplus transformation (or experiment with a ReLU-like alternative) to the modulated signal, compressing extreme values.\n\n12. Further blend the signal with an extra multiplicative layer that combines an exponential decay factor exp(\u2212|x|/0.1) with a softsign mapping of the intermediate modulated signal.\n\n13. Add a small constant offset of 1e-6 for numerical stability.\n\n14. Compress the final blended signal by raising it to a fixed exponent E (use E = 0.92).\n\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory components from the power-log blend with delta) \u00d7 (product of all modulation factors\u2014including the extra blending layer with softplus (or ReLU-like) and the exponential decay\u2013softsign modulation) + 1e-6 ]^(E) }.\n\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember to use exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage out-of-the-box thinking in layering these nonlinear processes to further improve prediction accuracy, lower BIC, and enhance parameter recovery correlations.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias for the latent utility.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA nonlinear utility model for responder decision-making that first normalizes the offer relative to the fair share (based on token counts) to produce a fairness gap. This gap is scaled by a learnable factor and processed via a composite nonlinear transformation incorporating power\u2010law, logarithmic, trigonometric, and exponential components, enhanced by multiple sequential modulation layers and extra nonlinear blending (via a softplus and exponential\u2013softsign modulation). The resulting transformed signal, combined linearly with a baseline bias and scaled by a sensitivity parameter, is mapped through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias for the latent utility.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \\u00a3).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        abs_x = abs(x)\n\n        T1 = abs_x**0.5\n        T2 = math.log(1 + 3.4 * abs_x)\n        T3 = 0.2 * math.atan(1.1 * abs_x)\n        T4 = 0.1 * (1 - math.exp(-abs_x))\n        T5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        T6 = 0.03 * math.tanh(abs_x)\n        T7 = 0.02 * math.sin(0.5 * abs_x)\n        T8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        T9 = 0.005 * math.exp(-abs_x)\n        T10 = 0.005 * math.sin(2.2 * abs_x)\n        T11 = 0.002 * math.cos(3.0 * abs_x)\n        delta = 0.01\n        Intermediate_Signal = T1 * T2 + (T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11) + delta\n        M1 = 1 + 0.012 * math.sin(abs_x + 0.04)\n        M2 = 1 + 0.008 * math.cos(abs_x + 0.06)\n        M3 = 1 + 0.005 * math.sin(abs_x + 0.11)\n        M4 = 1 + 0.004 * math.cos(abs_x + 0.08)\n        M5 = 1 + 0.006 * (math.sin(abs_x + 0.03) * math.cos(abs_x + 0.05))\n        M6 = 1 + 0.003 * (math.sin(abs_x + 0.025) * math.cos(abs_x + 0.045))\n        M_total = M1 * M2 * M3 * M4 * M5 * M6\n        C = 1.075\n        s_modulated = Intermediate_Signal * M_total\n        s_softplus = math.log(1 + math.exp(s_modulated))\n        extra_mod = math.exp(-abs_x / 0.1) * (s_modulated / (1 + abs(s_modulated))) if (1 + abs(s_modulated)) != 0 else 0\n        s_final = s_softplus * extra_mod\n        f_x_pre = C * s_final + 1e-6\n        f_x = (1 if x >= 0 else -1) * (f_x_pre)**0.92\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 4, \"combined_earning\": 7300, \"split_opp\": 4978.8, \"split_self\": 2321.2, \"splitperc_opp\": 68, \"splitperc_self\": 32, \"accept\": 1.0, \"accepted_amount\": 2321.2, \"accepted_perc\": 32.0, \"proposed_perc\": 32.0, \"proposed_amount\": 2321.2}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 7500, \"split_opp\": 4200.0, \"split_self\": 3300.0, \"splitperc_opp\": 56, \"splitperc_self\": 44, \"accept\": 1.0, \"accepted_amount\": 3300.0, \"accepted_perc\": 44.0, \"proposed_perc\": 44.0, \"proposed_amount\": 3300.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 8, \"combined_earning\": 5800, \"split_opp\": 3132.0, \"split_self\": 2668.0, \"splitperc_opp\": 54, \"splitperc_self\": 46, \"accept\": 1.0, \"accepted_amount\": 2668.0, \"accepted_perc\": 46.0, \"proposed_perc\": 46.0, \"proposed_amount\": 2668.0}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 4, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 6800, \"split_opp\": 3808.0, \"split_self\": 2992.0, \"splitperc_opp\": 56, \"splitperc_self\": 44, \"accept\": 1.0, \"accepted_amount\": 2992.0, \"accepted_perc\": 44.0, \"proposed_perc\": 44.0, \"proposed_amount\": 2992.0}, {\"ID\": 4, \"group\": \"treatment\", \"trial_number\": 5, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 7, \"combined_earning\": 6300, \"split_opp\": 3276.0, \"split_self\": 3024.0, \"splitperc_opp\": 52, \"splitperc_self\": 48, \"accept\": 1.0, \"accepted_amount\": 3024.0, \"accepted_perc\": 48.0, \"proposed_perc\": 48.0, \"proposed_amount\": 3024.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541070.1901162
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias for the latent utility.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline bias for the latent utility.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the nonlinear transformation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (in \u00a3).",
      "range": {
        "min": 1,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 10000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 10000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A nonlinear utility model for responder decision-making that first normalizes the offer relative to the fair share (based on token counts) to produce a fairness gap. This gap is scaled by a learnable factor and processed via a composite nonlinear transformation incorporating power\u2010law, logarithmic, trigonometric, and exponential components, enhanced by multiple sequential modulation layers and extra nonlinear blending (via a softplus and exponential\u2013softsign modulation). The resulting transformed signal, combined linearly with a baseline bias and scaled by a sensitivity parameter, is mapped through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline bias for the latent utility.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the nonlinear transformation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA nonlinear utility model for responder decision-making that first normalizes the offer relative to the fair share (based on token counts) to produce a fairness gap. This gap is scaled by a learnable factor and processed via a composite nonlinear transformation incorporating power\u2010law, logarithmic, trigonometric, and exponential components, enhanced by multiple sequential modulation layers and extra nonlinear blending (via a softplus and exponential\u2013softsign modulation). The resulting transformed signal, combined linearly with a baseline bias and scaled by a sensitivity parameter, is mapped through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision-making that first normalizes the offer relative to the fair share (based on token counts) to produce a fairness gap. This gap is scaled by a learnable factor and processed via a composite nonlinear transformation incorporating power\u2010law, logarithmic, trigonometric, and exponential components, enhanced by multiple sequential modulation layers and extra nonlinear blending (via a softplus and exponential\u2013softsign modulation). The resulting transformed signal, combined linearly with a baseline bias and scaled by a sensitivity parameter, is mapped through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        abs_x = abs(x)\n\n        T1 = abs_x**0.5\n        T2 = math.log(1 + 3.4 * abs_x)\n        T3 = 0.2 * math.atan(1.1 * abs_x)\n        T4 = 0.1 * (1 - math.exp(-abs_x))\n        T5 = 0.05 * (1 - math.exp(-2 * abs_x))\n        T6 = 0.03 * math.tanh(abs_x)\n        T7 = 0.02 * math.sin(0.5 * abs_x)\n        T8 = 0.012 * (1 - math.cos(0.3 * abs_x))\n        T9 = 0.005 * math.exp(-abs_x)\n        T10 = 0.005 * math.sin(2.2 * abs_x)\n        T11 = 0.002 * math.cos(3.0 * abs_x)\n        delta = 0.01\n        Intermediate_Signal = T1 * T2 + (T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11) + delta\n        M1 = 1 + 0.012 * math.sin(abs_x + 0.04)\n        M2 = 1 + 0.008 * math.cos(abs_x + 0.06)\n        M3 = 1 + 0.005 * math.sin(abs_x + 0.11)\n        M4 = 1 + 0.004 * math.cos(abs_x + 0.08)\n        M5 = 1 + 0.006 * (math.sin(abs_x + 0.03) * math.cos(abs_x + 0.05))\n        M6 = 1 + 0.003 * (math.sin(abs_x + 0.025) * math.cos(abs_x + 0.045))\n        M_total = M1 * M2 * M3 * M4 * M5 * M6\n        C = 1.075\n        s_modulated = Intermediate_Signal * M_total\n        s_softplus = math.log(1 + math.exp(s_modulated))\n        extra_mod = math.exp(-abs_x / 0.1) * (s_modulated / (1 + abs(s_modulated))) if (1 + abs(s_modulated)) != 0 else 0\n        s_final = s_softplus * extra_mod\n        f_x_pre = C * s_final + 1e-6\n        f_x = (1 if x >= 0 else -1) * (f_x_pre)**0.92\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5641025641025641,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 8.173484208357761,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953779610817538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.617611210341529,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.83186297904751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2621262018471886,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.754933089195667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953330756145213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.280999919975612,
      "gamma": 9.464964029960495,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953310713627005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5486006324611065,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.44326526379034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.497519316806403,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277881958567301,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0650600475214203,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.849906003757248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.36392066292141145,
      "phi": 0.515371571661347,
      "success": true,
      "log_likelihood": -11.277862443438499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953352549615882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.861537667516497,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953301100881774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953712041757314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.260423376361114,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.9533398086129,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.7734216962713523,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277870786734162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.25162565953357,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277909863880293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.202891450079034,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27789400260749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.4834882014684667,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277875269217207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.2330660304588554,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277691814666273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.4062821489956232,
      "phi": 1.1209736343272936,
      "success": true,
      "log_likelihood": -11.277865557269289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7377059588203825,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.535556580663503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.466129845264709,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.277653684605525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953400004625923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.282288415789164,
      "gamma": 9.908373710129531,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.726419325344544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7300164865219299,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.854290433284262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.31318697130336937,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.261506203849883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6960150583784127,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.502742090352772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95346271858969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.980452408808378,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277732375482941,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.150753782839825,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.27750414568514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.061014071523355896,
      "phi": 1.365018443011909,
      "success": true,
      "log_likelihood": -11.27786117376639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953743408297083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953352811945873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.158520663211892,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953412341416133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.4883560936292954,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27787530051403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5455302020466687,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.403763231111174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6260666453040227,
      "gamma": 3.593974978991553,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.153597740859297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6959718892364148,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.84810135749347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.017662746934857,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.785945741471505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.8653842770097695,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277740201660531,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.12837427002517338,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.80722179052348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953525176567087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.862886546673894,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277836595438725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7081274761297351,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.51253923222173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.10255128165219186,
      "gamma": 9.876966005299106,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.90596377211163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.583032225834682,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.238813416646995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1205948188347103,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.6966162375003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95335150862674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953324668104937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5615597020805676,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.856873846751576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.590089215807385,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.062460936936994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953687701946603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3848706974396217,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.805402865971185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.42772604940437153,
      "gamma": 7.668199223845799,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.437517018035415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.681188514793355,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95337086413975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953407554980206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953474302742976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.631318250353092,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277672766483615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953715677217755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.035076521943967,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.277560785141578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.1247151825088063,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.822512014194956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6534104775822138,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.839344734444282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953743408297083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95333801659682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953533906062297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6879583365835931,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.495265372340146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.31782741313403,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277750006944611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.7848348073675202,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.277637163178458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7371510381377046,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.537261566398637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.102931766516431,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277740659120068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953646369858323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953687203980465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2449619054686782,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.749715050045968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.795043540232742,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.27750994048728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.003547744052435,
      "gamma": 1.0439666788487123,
      "phi": 1.2751078540493235,
      "success": true,
      "log_likelihood": -24.95328493391771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7001368810085828,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.110547684655117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.8976660869436035,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277815661843913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953818045828807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.14583328646781657,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.708556791202888,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953743408297083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.134028745888347,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.702619286951805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8067918967226562,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277729167971174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95376200675494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9499491211586535,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.887595079945182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.14151033730997659,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.74349410993368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953674254493755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6158780508637518,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.07505126343137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.12930731532548,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953630375908137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.3603241039289684,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277777376479847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.609622414718455,
      "gamma": 6.53190672008617,
      "phi": 1.3819907753478526,
      "success": true,
      "log_likelihood": -24.95331413275584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5846706223497182,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.062409006777546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7491847654833647,
        "p": 3.1231178068134433e-19
      },
      "gamma": {
        "r": 0.11155745728839034,
        "p": 0.2691585757317605
      },
      "phi": {
        "r": 0.04367539711683502,
        "p": 0.6661274766827225
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.81574548573244,
  "bic_results": {
    "average_bic": 53.81574548573244,
    "individual_bics": [
      60.65811603700341,
      60.414282773463356,
      60.26042299375966,
      60.657218327658754,
      60.65717824262234,
      57.637087342949016,
      33.30632073250293,
      56.45036882288282,
      33.30628170224533,
      60.6572619146001,
      60.657159017131875,
      60.657980898882954,
      60.65723643259413,
      33.30629838883665,
      33.30637654312892,
      33.306344820583305,
      33.306307353802744,
      43.305823414830115,
      41.30594044470088,
      33.30628792990691,
      59.82166997669533,
      43.30586418457938,
      60.65735682462018,
      60.203395466057415,
      60.45913768193685,
      59.273569223068094,
      59.75604099607388,
      60.65748225254771,
      41.30602156633421,
      49.30556510673861,
      33.306279162901106,
      60.6580436319625,
      60.65726243926008,
      60.65738149820059,
      33.30630741639639,
      57.55808327759068,
      55.05775229708692,
      60.446759530355266,
      56.32244829831134,
      39.3060372186894,
      58.3650003964153,
      60.65760716850251,
      35.306230006245784,
      59.775635279811794,
      58.56248435959159,
      53.22818364866232,
      60.14378929036893,
      60.657259832621804,
      60.65720615157821,
      60.46430450887148,
      54.875478689242314,
      60.65793221926154,
      60.361362547310705,
      59.625590851439156,
      60.657298543647826,
      60.657371925328746,
      60.65750542085428,
      41.305902348335565,
      60.65798816980384,
      47.30567838565149,
      58.39558084375824,
      60.42924628425689,
      60.6580436319625,
      60.657232848561975,
      60.65762462749292,
      59.741087560048626,
      39.30605682925756,
      43.30583114172525,
      59.82507994816561,
      39.30603813360847,
      60.65784955508498,
      60.65793122332926,
      60.24998691546027,
      49.3055766963429,
      60.65712668320376,
      54.97165218467856,
      37.30618813905616,
      60.65819290702595,
      58.1676703977741,
      60.6580436319625,
      60.155795389271944,
      39.306015151310675,
      60.65808082887821,
      60.5257469752587,
      58.237545035235684,
      60.65790532435584,
      54.900659342231066,
      60.65781756718461,
      37.30611156832802,
      60.65718508088001,
      54.87537482892343
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.749\n- gamma: r = 0.112\n- phi: r = 0.044",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning  \nN_share = token_self/(token_self+token_opp)  \nF = N_offer - N_share  \nx = F/phi  \nabs_x = |x|  \nT1 = abs_x^0.5  \nT2 = ln(1+3.4*abs_x)  \nT3 = 0.2*atan(1.1*abs_x)  \nT4 = 0.1*(1-exp(-abs_x))  \nT5 = 0.05*(1-exp(-2*abs_x))  \nT6 = 0.03*tanh(abs_x)  \nT7 = 0.02*sin(0.5*abs_x)  \nT8 = 0.012*(1-cos(0.3*abs_x))  \nT9 = 0.005*exp(-abs_x)  \nT10 = 0.005*sin(2.2*abs_x)  \nT11 = 0.002*cos(3.0*abs_x)  \ndelta = 0.01  \nIntermediate_Signal = T1*T2 + (T3+T4+T5+T6+T7+T8+T9+T10+T11) + delta  \nM1 = 1 + 0.012*sin(abs_x+0.04)  \nM2 = 1 + 0.008*cos(abs_x+0.06)  \nM3 = 1 + 0.005*sin(abs_x+0.11)  \nM4 = 1 + 0.004*cos(abs_x+0.08)  \nM5 = 1 + 0.006*(sin(abs_x+0.03)*cos(abs_x+0.05))  \nM6 = 1 + 0.003*(sin(abs_x+0.025)*cos(abs_x+0.045))  \nM_total = M1*M2*M3*M4*M5*M6  \nC = 1.075  \ns_modulated = Intermediate_Signal * M_total  \ns_softplus = ln(1+exp(s_modulated))  \nextra_mod = exp(-abs_x/0.1)*(s_modulated/(1+abs(s_modulated)))  \ns_final = s_softplus * extra_mod  \nf_x = sign(x)*[C*s_final+1e-6]^0.92  \nU = beta + gamma*f_x  \np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision-making that first normalizes the offer relative to the fair share (based on token counts) to produce a fairness gap. This gap is scaled by a learnable factor and processed via a composite nonlinear transformation incorporating power\u2010law, logarithmic, trigonometric, and exponential components, enhanced by multiple sequential modulation layers and extra nonlinear blending (via a softplus and exponential\u2013softsign modulation). The resulting transformed signal, combined linearly with a baseline bias and scaled by a sensitivity parameter, is mapped through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.81574548573244\nOverall Accuracy: 0.5641\n\nParameter Recovery:\n- beta: r = 0.749\n- gamma: r = 0.112\n- phi: r = 0.044"
  ]
}