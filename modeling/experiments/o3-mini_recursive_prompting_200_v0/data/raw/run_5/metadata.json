{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 5, we want to encourage even more innovative transformations while still maintaining the core approach of a normalized fairness gap. Instead of the logarithmic transformation used previously, we can suggest a power transformation\u2014a non-linear function such as f(x) = sign(x) \u00d7 |x|^0.5\u2014to capture diminishing sensitivity. This transformation is simple yet effective and might improve parameter recovery (especially for gamma and phi) and overall model fit (BIC and accuracy). Emphasize that the fairness gap should be calculated based on percentages (split_self/combined_earning compared to token_self/(token_self + token_opp)). Ask the model to be creative, consider potential offsets if necessary, and clearly justify the chosen transformation. The learnable parameters remain beta (with bounds [-10, 10]), gamma (bounds [0,10]), and phi (bounds [0.5,1.5]), and these should be explicitly connected in the mathematical model with a clear description of each parameter\u2019s role. Also, ensure that after the utility function is computed, the probability of acceptance is derived via a logistic function with temperature 1. The resulting math should be fully encapsulated between <MODEL> and </MODEL> tags, and the variable descriptions should be provided in detailed JSON format between <VARIABLES> and </VARIABLES> tags. Avoid redundant information and strive for clarity and parsimony in your presentation.\n</think>\n\nFor run 5 of 200, please develop a computational model for responder decision-making that:\n1. Computes the normalized offer as split_self/combined_earning and the normalized fair share as token_self/(token_self+token_opp), both expressed as percentages.\n2. Calculates the fairness gap as: normalized_fairness_gap = (split_self/combined_earning) - (token_self/(token_self+token_opp)).\n3. Applies a power transformation to the fairness gap to capture diminishing sensitivity. Specifically, use f(x) = sgn(x) \u00d7 |x|^0.5. (Consider any necessary adjustments, such as an offset if required, to ensure numerical stability.)\n4. Introduces three learnable parameters with explicit finite bounds:\n   \u2022 A baseline bias parameter (beta) bounded between -10 and 10.\n   \u2022 A sensitivity parameter (gamma) bounded between 0 and 10.\n   \u2022 A scaling parameter (phi) bounded between 0.5 and 1.5 that standardizes the fairness gap before transformation.\n5. Defines the latent utility as:\n   U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi)\n   where f(\u00b7) represents the power transformation defined above.\n6. Converts the latent utility to a probability using the logistic function:\n   p_accept = 1/(1 + exp(\u2013U)).\n7. Provides the full mathematical model between <MODEL> and </MODEL> tags and the variable descriptions in detailed JSON format between <VARIABLES> and </VARIABLES> tags. Ensure that every variable and learnable parameter is clearly defined and connected to the observable trial variables.\n\nBy using a power transformation on the normalized fairness gap, your model aims to capture diminishing sensitivity more robustly. This approach may lower the BIC, improve parameter recovery, and increase overall accuracy. Experiment with creative yet interpretable modifications if needed, and ensure that all components and bounds are explicitly stated.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 5, we want to encourage even more innovative transformations while still maintaining the core approach of a normalized fairness gap. Instead of the logarithmic transformation used previously, we can suggest a power transformation\u2014a non-linear function such as f(x) = sign(x) \u00d7 |x|^0.5\u2014to capture diminishing sensitivity. This transformation is simple yet effective and might improve parameter recovery (especially for gamma and phi) and overall model fit (BIC and accuracy). Emphasize that the fairness gap should be calculated based on percentages (split_self/combined_earning compared to token_self/(token_self + token_opp)). Ask the model to be creative, consider potential offsets if necessary, and clearly justify the chosen transformation. The learnable parameters remain beta (with bounds [-10, 10]), gamma (bounds [0,10]), and phi (bounds [0.5,1.5]), and these should be explicitly connected in the mathematical model with a clear description of each parameter\u2019s role. Also, ensure that after the utility function is computed, the probability of acceptance is derived via a logistic function with temperature 1. The resulting math should be fully encapsulated between <MODEL> and </MODEL> tags, and the variable descriptions should be provided in detailed JSON format between <VARIABLES> and </VARIABLES> tags. Avoid redundant information and strive for clarity and parsimony in your presentation.\n</think>\n\nFor run 5 of 200, please develop a computational model for responder decision-making that:\n1. Computes the normalized offer as split_self/combined_earning and the normalized fair share as token_self/(token_self+token_opp), both expressed as percentages.\n2. Calculates the fairness gap as: normalized_fairness_gap = (split_self/combined_earning) - (token_self/(token_self+token_opp)).\n3. Applies a power transformation to the fairness gap to capture diminishing sensitivity. Specifically, use f(x) = sgn(x) \u00d7 |x|^0.5. (Consider any necessary adjustments, such as an offset if required, to ensure numerical stability.)\n4. Introduces three learnable parameters with explicit finite bounds:\n   \u2022 A baseline bias parameter (beta) bounded between -10 and 10.\n   \u2022 A sensitivity parameter (gamma) bounded between 0 and 10.\n   \u2022 A scaling parameter (phi) bounded between 0.5 and 1.5 that standardizes the fairness gap before transformation.\n5. Defines the latent utility as:\n   U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi)\n   where f(\u00b7) represents the power transformation defined above.\n6. Converts the latent utility to a probability using the logistic function:\n   p_accept = 1/(1 + exp(\u2013U)).\n7. Provides the full mathematical model between <MODEL> and </MODEL> tags and the variable descriptions in detailed JSON format between <VARIABLES> and </VARIABLES> tags. Ensure that every variable and learnable parameter is clearly defined and connected to the observable trial variables.\n\nBy using a power transformation on the normalized fairness gap, your model aims to capture diminishing sensitivity more robustly. This approach may lower the BIC, improve parameter recovery, and increase overall accuracy. Experiment with creative yet interpretable modifications if needed, and ensure that all components and bounds are explicitly stated.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter influencing overall acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the effect of the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap before transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transform of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"beta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision-making that computes a normalized fairness gap by comparing the participant\u2019s relative offer (split_self/combined_earning) with their relative tokens (token_self/(token_self+token_opp)). This gap is standardized by phi, transformed via a power function (sign(x)\u00d7|x|^0.5) to capture diminishing sensitivity, and then weighted by a sensitivity parameter gamma. A baseline bias beta is added before the latent utility is passed through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter influencing overall acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the effect of the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap before transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transform of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"beta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Ensure token_self and token_opp are non-negative\n        token_self = max(0, token_self)\n        token_opp = max(0, token_opp)\n        \n        # Prevent division by zero if both tokens are zero\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            token_ratio = 0.0\n        else:\n            token_ratio = token_self / total_tokens\n\n        fairness_gap = (split_self / combined_earning) - token_ratio\n        \n        # Standardize the fairness gap\n        scaled_fairness_gap = fairness_gap / phi\n        \n        # Apply the transformation\n        abs_scaled_fairness_gap = abs(scaled_fairness_gap)\n        transformed_fairness_gap = math.copysign(abs_scaled_fairness_gap**0.5, scaled_fairness_gap)\n\n        # Calculate utility\n        U = beta + gamma * transformed_fairness_gap\n\n        # Calculate probability of acceptance\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions\n```",
      "timestamp": 1743537965.254752
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter influencing overall acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the effect of the transformed fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter that standardizes the fairness gap before transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant in pounds",
      "range": {
        "min": 0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (each token is worth \u00a33)",
      "range": {
        "min": 0,
        "max": 1000000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 10000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 10000.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter influencing overall acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the effect of the transformed fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter that standardizes the fairness gap before transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "p_accept": {
      "description": "Probability of accepting the proposal, computed via a logistic transform of latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "beta",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model for responder decision-making that computes a normalized fairness gap by comparing the participant\u2019s relative offer (split_self/combined_earning) with their relative tokens (token_self/(token_self+token_opp)). This gap is standardized by phi, transformed via a power function (sign(x)\u00d7|x|^0.5) to capture diminishing sensitivity, and then weighted by a sensitivity parameter gamma. A baseline bias beta is added before the latent utility is passed through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in pounds\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1e4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter influencing overall acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the effect of the transformed fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap before transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal, computed via a logistic transform of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"beta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model for responder decision-making that computes a normalized fairness gap by comparing the participant\u2019s relative offer (split_self/combined_earning) with their relative tokens (token_self/(token_self+token_opp)). This gap is standardized by phi, transformed via a power function (sign(x)\u00d7|x|^0.5) to capture diminishing sensitivity, and then weighted by a sensitivity parameter gamma. A baseline bias beta is added before the latent utility is passed through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))\nSummary: A computational model for responder decision-making that computes a normalized fairness gap by comparing the participant\u2019s relative offer (split_self/combined_earning) with their relative tokens (token_self/(token_self+token_opp)). This gap is standardized by phi, transformed via a power function (sign(x)\u00d7|x|^0.5) to capture diminishing sensitivity, and then weighted by a sensitivity parameter gamma. A baseline bias beta is added before the latent utility is passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Ensure token_self and token_opp are non-negative\n        token_self = max(0, token_self)\n        token_opp = max(0, token_opp)\n        \n        # Prevent division by zero if both tokens are zero\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            token_ratio = 0.0\n        else:\n            token_ratio = token_self / total_tokens\n\n        fairness_gap = (split_self / combined_earning) - token_ratio\n        \n        # Standardize the fairness gap\n        scaled_fairness_gap = fairness_gap / phi\n        \n        # Apply the transformation\n        abs_scaled_fairness_gap = abs(scaled_fairness_gap)\n        transformed_fairness_gap = math.copysign(abs_scaled_fairness_gap**0.5, scaled_fairness_gap)\n\n        # Calculate utility\n        U = beta + gamma * transformed_fairness_gap\n\n        # Calculate probability of acceptance\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5943223443223443,
  "fitting_results": [
    {
      "beta": -5.198398906143518,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.7761295050402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.643983636781742,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.787742474043586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.617261177142756,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.6705168950876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.645786955164765,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.089651480229794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.950835255638215,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.40807666671028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.636839057759684,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.288807051343323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.631279261533271,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.691115097259654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9460653274676094,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.373129056081275,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.930178733543681,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.483491413819305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.1945648872451455,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.77589543542669,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.411040100699067,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.93209236031368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.372832538792315,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.74497262404512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.571941744055836,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.798184334475751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.592871013758441,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.873498337146017,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.257301946899496,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.903418323107502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5156414468503866,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.849624849966553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.082463283394263,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.25045143045305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.2222797210907625,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.166373422696736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.769679809226854,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.61280275945737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.1076529014557375,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.495361314889355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0038790110970073,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.959357598204964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.118734475289937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.202249588191,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.29205906367897,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.198366935725467,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.776129504983484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.161089774987361,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.23253531465262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.078024659788554,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.08334722224233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.699375497065544,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.31995923857536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.311255662700018,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.922381480984985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.987954455919367,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.475011127170813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.316537468875524,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.389526764421102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5699297417893067,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.384081846005874,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.32234389800241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4028922955666685,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.608370406176117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.30616702509432,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.47580631419425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.29126828378287,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.975760486954382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.472445523767906,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.305907003460504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.558152855123366,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.18908787787263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3834204173239013,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.424042992512558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.383797344531025,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.07753964717152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1332562655631753,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.52393591829446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.827125896559935,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.029408322536714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.197487671687663,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.77606167328339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.781070339797933,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.092882573727056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1107710976640726,
      "gamma": 7.721415754670049,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.094563477620202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.1155044618015513,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.091443709150713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6767800613052115,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.531141459920306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.480218127643625,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.62604928962961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.196820633928452,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.77606640201268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.973078003074395,
      "phi": 0.5139173738174482,
      "success": true,
      "log_likelihood": -18.215690690568966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.507350375669285,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.909728626856523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.839117212143137,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.64851639741726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.19802012594135,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.776129510371863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4082111044873937,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.24662120693486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6417158876910276,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.81843609845216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.089409065574806,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.504763745561167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.753753966933093,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.928638196916502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.038350264732332,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.471242160400948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2639656655471742,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.905580883597477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.197646258829629,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.776062644522607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.0986513552070285,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.349032338275837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.48046686083256,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.544966158458102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.521123835080939,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.657421616992366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.203774710027549,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.08123788690317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.428648800859401,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953607539478433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.965062829505079,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.56932740570214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.198341540198361,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.776129505004995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6689739915150885,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.595154450086678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.256905810042684,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953568001053295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.424916647744246,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.56530531505599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9590479522672797,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.759760540340842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7132696086733303,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.266621613005867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.278204179074165,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.450798852609104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.8839769687804804,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.884792104669977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.2410704680909164,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6803485793370718,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.63914013359122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.2104340926467545,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.54015262360358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6732879006814202,
        "p": 1.6633571783777654e-14
      },
      "gamma": {
        "r": 0.15680435158764466,
        "p": 0.11923711274005834
      },
      "phi": {
        "r": -0.0005098357125447768,
        "p": 0.9959832604585256
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 51.16752134052905,
  "bic_results": {
    "average_bic": 51.16752134052905,
    "individual_bics": [
      60.30281582544873,
      54.32604176345551,
      52.09159060554353,
      56.92985977582792,
      53.566710148788886,
      51.32817091805498,
      33.3062773958674,
      50.132787009887636,
      33.3062773958674,
      55.49681492753088,
      53.717539643006944,
      60.30234768622171,
      54.61474153599569,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      42.24050206345857,
      40.34692548431983,
      33.3062773958674,
      52.49755348966036,
      42.55739346158333,
      58.44980651530143,
      55.251459676274436,
      53.0833036607618,
      51.976162334283075,
      53.74127944514704,
      56.66927201177826,
      40.98802576594821,
      47.33467494272627,
      33.3062773958674,
      60.3028158253353,
      59.21562744467357,
      56.91725125985299,
      33.3062773958674,
      53.390475292519056,
      48.595319777338304,
      53.70057906970996,
      51.52961034421054,
      39.30600500724502,
      53.395244611373144,
      57.96729762772057,
      35.30618659965994,
      55.70216944375683,
      52.7020777892771,
      51.362370822289336,
      55.12873257111359,
      57.59864280039345,
      54.90563610971137,
      59.79842865195725,
      52.80937346044176,
      60.302680161935115,
      56.93632196282245,
      58.93968377060874,
      56.93344423366976,
      55.81283973520894,
      58.00265539462755,
      41.305914211037575,
      60.30268961939369,
      47.181938196506266,
      54.57001406908138,
      54.04758961020285,
      60.30281583611206,
      59.24379922923805,
      58.38742901227265,
      53.76008430649067,
      39.30600500724503,
      42.60783320920133,
      55.69304113617022,
      39.306005007245034,
      58.56171858256329,
      60.30268210441355,
      55.44862149192001,
      47.84048913228453,
      58.06540004935306,
      50.913032589174676,
      37.306095803452486,
      60.657771894325194,
      55.88921162677261,
      60.30281582537832,
      57.94086571554169,
      39.30600500724503,
      60.657692817474924,
      55.881167445480315,
      56.27007789605001,
      59.28380004138006,
      51.652154520586535,
      60.52014102470828,
      37.306095803452486,
      58.028837082550766,
      53.83086206257549
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.673\n- gamma: r = 0.157\n- phi: r = -0.001",
  "previous_models": [
    "Specification: U = beta + gamma * sign((split_self/combined_earning - token_self/(token_self+token_opp))/phi) * |(split_self/combined_earning - token_self/(token_self+token_opp))/phi|^(0.5)\np_accept = 1/(1+exp(-U))\nSummary: A computational model for responder decision-making that computes a normalized fairness gap by comparing the participant\u2019s relative offer (split_self/combined_earning) with their relative tokens (token_self/(token_self+token_opp)). This gap is standardized by phi, transformed via a power function (sign(x)\u00d7|x|^0.5) to capture diminishing sensitivity, and then weighted by a sensitivity parameter gamma. A baseline bias beta is added before the latent utility is passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 51.16752134052905\nOverall Accuracy: 0.5943\n\nParameter Recovery:\n- beta: r = 0.673\n- gamma: r = 0.157\n- phi: r = -0.001"
  ]
}