{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 51, I will maintain the same basic structure but further encourage creativity in the nonlinear blending. I will emphasize using an adaptive ReLU-like operation (for example, a capped ReLU or one with a dynamic threshold based on the magnitude of the input), and I will introduce an additional modulation layer that uses a combined exponential decay and softsign mapping, explicitly suggesting that the decay constant remain fixed (k = 0.1) but that the model consider nonlinearly blending the modulated signal with its own adaptive capped activation. I will also encourage the use of slight alterations in the phase shifts (by adding 0.005) for all sine and cosine modulation factors. The instructions for the final nonlinearity f(x) should clearly state that the signal is generated by taking the product of the core power-log blend (plus delta), the sequential modulations, the new adaptive ReLU-like compression, and then an extra modulation that multiplies an exponential decay with the softsign of the intermediate signal. Finally, the transformed signal is raised to exponent E = 0.92, and used in the latent utility U = beta + gamma\u00d7f(x). I must retain exactly three learnable parameters: beta, gamma, and phi with their fixed bounds.\n</think>\nFor run 51, please develop an innovative computational model for responder decision-making using the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. For the absolute value |x|, compute the following core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally, include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n6. Sum all computed terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(|x| + 0.04)] (note the phase shift adjustment).\n8. Form the Intermediate_Signal by combining the product of the power-law and the logarithmic terms with the additive nonlinear components (arctan, exponential, tanh, and additional sinusoidal terms).\n9. Multiply the Intermediate_Signal by a fixed constant C (choose a value in [1.05, 1.10], e.g., 1.08).\n10. Apply sequential modulation stages with the following slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.03) \u00d7 cos(|x| + 0.05))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n11. Introduce an extra nonlinear blending layer by applying an adaptive ReLU-like transformation (for example, f_relu(z) = max(0, z) with a dynamic cap based on the magnitude of z) to the modulated signal, thereby sharply compressing extreme values.\n12. Further blend this signal via an extra multiplicative modulation that multiplies:\n\u2003\u2003\u2022 An exponential decay factor, exp(\u2212|x|/0.1), with\n\u2003\u2003\u2022 A softsign mapping of the intermediate modulated signal (softsign(z) = z/(1+|z|)).\nCombine these two factors to create a composite modulation.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to a fixed exponent E, with E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory nonlinear components from the power-log blend plus delta) \u00d7 (product of all modulation factors \u2013 including sequential modulations, the adaptive ReLU-like compression, and the extra exponential\u2013softsign blend) + 1e-6 ]^(E) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, exactly three learnable parameters are allowed:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage creative and out-of-the-box methods in designing the nonlinear blending layers to achieve improved prediction accuracy, lower BIC, and enhanced parameter recovery correlations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 51, I will maintain the same basic structure but further encourage creativity in the nonlinear blending. I will emphasize using an adaptive ReLU-like operation (for example, a capped ReLU or one with a dynamic threshold based on the magnitude of the input), and I will introduce an additional modulation layer that uses a combined exponential decay and softsign mapping, explicitly suggesting that the decay constant remain fixed (k = 0.1) but that the model consider nonlinearly blending the modulated signal with its own adaptive capped activation. I will also encourage the use of slight alterations in the phase shifts (by adding 0.005) for all sine and cosine modulation factors. The instructions for the final nonlinearity f(x) should clearly state that the signal is generated by taking the product of the core power-log blend (plus delta), the sequential modulations, the new adaptive ReLU-like compression, and then an extra modulation that multiplies an exponential decay with the softsign of the intermediate signal. Finally, the transformed signal is raised to exponent E = 0.92, and used in the latent utility U = beta + gamma\u00d7f(x). I must retain exactly three learnable parameters: beta, gamma, and phi with their fixed bounds.\n</think>\nFor run 51, please develop an innovative computational model for responder decision-making using the following instructions:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the fairness gap by the learnable parameter phi (with bounds [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. For the absolute value |x|, compute the following core nonlinear components:\n\u2003\u2003\u2022 |x|^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 |x|)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 |x|)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212|x|))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 |x|))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(|x|)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 |x|)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 |x|))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212|x|)\n\u2003\u2003Optionally, include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 |x|) and 0.002 \u00d7 cos(3.0 \u00d7 |x|).\n6. Sum all computed terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(|x| + 0.04)] (note the phase shift adjustment).\n8. Form the Intermediate_Signal by combining the product of the power-law and the logarithmic terms with the additive nonlinear components (arctan, exponential, tanh, and additional sinusoidal terms).\n9. Multiply the Intermediate_Signal by a fixed constant C (choose a value in [1.05, 1.10], e.g., 1.08).\n10. Apply sequential modulation stages with the following slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(|x| + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(|x| + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(|x| + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(|x| + 0.03) \u00d7 cos(|x| + 0.05))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(|x| + 0.025) \u00d7 cos(|x| + 0.045))].\n11. Introduce an extra nonlinear blending layer by applying an adaptive ReLU-like transformation (for example, f_relu(z) = max(0, z) with a dynamic cap based on the magnitude of z) to the modulated signal, thereby sharply compressing extreme values.\n12. Further blend this signal via an extra multiplicative modulation that multiplies:\n\u2003\u2003\u2022 An exponential decay factor, exp(\u2212|x|/0.1), with\n\u2003\u2003\u2022 A softsign mapping of the intermediate modulated signal (softsign(z) = z/(1+|z|)).\nCombine these two factors to create a composite modulation.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to a fixed exponent E, with E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (combined mandatory nonlinear components from the power-log blend plus delta) \u00d7 (product of all modulation factors \u2013 including sequential modulations, the adaptive ReLU-like compression, and the extra exponential\u2013softsign blend) + 1e-6 ]^(E) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(F/phi).\n17. Convert U to an acceptance probability using the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, exactly three learnable parameters are allowed:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nEncourage creative and out-of-the-box methods in designing the nonlinear blending layers to achieve improved prediction accuracy, lower BIC, and enhanced parameter recovery correlations.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making that calculates a fairness gap from normalized offer and fair share, scales it by a learnable factor, and applies a complex cascade of nonlinear operations including power\u2010law, logarithmic, trigonometric, exponential, sequential modulation, an adaptive ReLU-like compression, and an extra exponential\u2013softsign blend. The final transformed signal is raised to a fixed exponent and combined with a baseline bias and sensitivity parameter to yield latent utility, which is then passed through a logistic function to predict accept/reject behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 1)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        t1 = a**0.5\n        t2 = math.log(1 + 3.4 * a)\n        t3 = 0.2 * math.atan(1.1 * a)\n        t4 = 0.1 * (1 - math.exp(-a))\n        t5 = 0.05 * (1 - math.exp(-2 * a))\n        t6 = 0.03 * math.tanh(a)\n        t7 = 0.02 * math.sin(0.5 * a)\n        t8 = 0.012 * (1 - math.cos(0.3 * a))\n        t9 = 0.005 * math.exp(-a)\n        t10 = 0.005 * math.sin(2.2 * a)\n        t11 = 0.002 * math.cos(3.0 * a)\n        S_total = t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + 0.01\n        mod1 = 1 + 0.012 * math.sin(a + 0.04)\n        S_mod = S_total * mod1\n        C = 1.08\n        signal = C * S_mod\n        m1 = 1 + 0.008 * math.cos(a + 0.06)\n        m2 = 1 + 0.005 * math.sin(a + 0.11)\n        m3 = 1 + 0.004 * math.cos(a + 0.08)\n        m4 = 1 + 0.006 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        m5 = 1 + 0.003 * (math.sin(a + 0.025) * math.cos(a + 0.045))\n        S_seq = signal * m1 * m2 * m3 * m4 * m5\n        R = max(0, S_seq)**0.8\n        M_extra = math.exp(-a / 0.1) * (S_seq / (1 + abs(S_seq)))\n        f_x = (1 if x >= 0 else -1) * ( (S_seq * R * M_extra + 1e-6)**0.92 )\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = '[{\"ID\":0,\"group\":\"group1\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":6,\"token_self\":2,\"combined_earning\":17,\"split_opp\":7.7,\"split_self\":9.3,\"splitperc_opp\":45,\"splitperc_self\":55,\"accept\":1.0,\"accepted_amount\":9.3,\"accepted_perc\":55.0,\"proposed_perc\":55.0,\"proposed_amount\":9.3},{\"ID\":1,\"group\":\"group1\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":6,\"token_self\":2,\"combined_earning\":17,\"split_opp\":7.7,\"split_self\":9.3,\"splitperc_opp\":45,\"splitperc_self\":55,\"accept\":1.0,\"accepted_amount\":9.3,\"accepted_perc\":55.0,\"proposed_perc\":55.0,\"proposed_amount\":9.3}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541202.379099
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter for modulating the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning in \u00a3",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter for modulating the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A nonlinear utility model for responder decision\u2010making that calculates a fairness gap from normalized offer and fair share, scales it by a learnable factor, and applies a complex cascade of nonlinear operations including power\u2010law, logarithmic, trigonometric, exponential, sequential modulation, an adaptive ReLU-like compression, and an extra exponential\u2013softsign blend. The final transformed signal is raised to a fixed exponent and combined with a baseline bias and sensitivity parameter to yield latent utility, which is then passed through a logistic function to predict accept/reject behavior.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making that calculates a fairness gap from normalized offer and fair share, scales it by a learnable factor, and applies a complex cascade of nonlinear operations including power\u2010law, logarithmic, trigonometric, exponential, sequential modulation, an adaptive ReLU-like compression, and an extra exponential\u2013softsign blend. The final transformed signal is raised to a fixed exponent and combined with a baseline bias and sensitivity parameter to yield latent utility, which is then passed through a logistic function to predict accept/reject behavior.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making that calculates a fairness gap from normalized offer and fair share, scales it by a learnable factor, and applies a complex cascade of nonlinear operations including power\u2010law, logarithmic, trigonometric, exponential, sequential modulation, an adaptive ReLU-like compression, and an extra exponential\u2013softsign blend. The final transformed signal is raised to a fixed exponent and combined with a baseline bias and sensitivity parameter to yield latent utility, which is then passed through a logistic function to predict accept/reject behavior.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 1)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        t1 = a**0.5\n        t2 = math.log(1 + 3.4 * a)\n        t3 = 0.2 * math.atan(1.1 * a)\n        t4 = 0.1 * (1 - math.exp(-a))\n        t5 = 0.05 * (1 - math.exp(-2 * a))\n        t6 = 0.03 * math.tanh(a)\n        t7 = 0.02 * math.sin(0.5 * a)\n        t8 = 0.012 * (1 - math.cos(0.3 * a))\n        t9 = 0.005 * math.exp(-a)\n        t10 = 0.005 * math.sin(2.2 * a)\n        t11 = 0.002 * math.cos(3.0 * a)\n        S_total = t1 + t2 + t3 + t4 + t5 + t6 + t7 + t8 + t9 + t10 + t11 + 0.01\n        mod1 = 1 + 0.012 * math.sin(a + 0.04)\n        S_mod = S_total * mod1\n        C = 1.08\n        signal = C * S_mod\n        m1 = 1 + 0.008 * math.cos(a + 0.06)\n        m2 = 1 + 0.005 * math.sin(a + 0.11)\n        m3 = 1 + 0.004 * math.cos(a + 0.08)\n        m4 = 1 + 0.006 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        m5 = 1 + 0.003 * (math.sin(a + 0.025) * math.cos(a + 0.045))\n        S_seq = signal * m1 * m2 * m3 * m4 * m5\n        R = max(0, S_seq)**0.8\n        M_extra = math.exp(-a / 0.1) * (S_seq / (1 + abs(S_seq)))\n        f_x = (1 if x >= 0 else -1) * ( (S_seq * R * M_extra + 1e-6)**0.92 )\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5671550671550671,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953541801176616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4668752220506231,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.273766972361695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.25267484219913267,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.121549434733126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.638930380996838,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.80328790061442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9463110574710061,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.555170518737444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8755331590027681,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.98388650966262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2718218694678025,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.420005693921468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5491164774565678,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.771958939103225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9611324487082125,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.563274885595575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953510790665153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.170433338174836,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.649766284892443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.2588469639044166,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.012208625795661782,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.88562768297796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.164247210142445,
      "gamma": 1.9811569406008085,
      "phi": 1.057740148894599,
      "success": true,
      "log_likelihood": -24.9544565836256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3579487669570574,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.271712390517788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4478646600395294,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.257104849422923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2825377851870906,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.61159623733965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.0037289851448590945,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.909568249444696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.045503929484258,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.9367502825366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.592668655828402,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.277485807286283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953541801176616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5739383014020696,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.922341420129428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.871598308250347,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.844123376567318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.87888600380442,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.083077486127397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.835171921451827,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.946449379886758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.46961231867922554,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.276232812291024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2568951693714654,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.352019888249956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5823574284249317,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.25312091030342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.4372159228557069,
      "success": true,
      "log_likelihood": -24.953332585958528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.14365773627637712,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.09828776233698,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5210663912103641,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.41921154601819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.595210414545349,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.17624803549746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3106382099633959,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.188797452448583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.030119486598915,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.869666515261592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2477596036837224,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.681896445416115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1179376442436952,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.780932328495638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.812422739352049,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.921630384804192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95350836802722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5242176124893974,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.433111401137506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2282682327371339,
      "gamma": 6.404360974890519,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.427025523326744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8696602724415818,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.844133345454217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.072418618546772,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.868424033153925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953301130174136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.5719425654227233,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.277669504870644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.938603206844524,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95355190461524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.5513264290223246,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.277546725831737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5923131075544312,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.40096820996689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4630219549643377,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.267652720854052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95354180117662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.366487148846373,
      "gamma": 8.932168272165852,
      "phi": 1.3120155567166807,
      "success": true,
      "log_likelihood": -24.95321125609386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.4967753543533049,
      "success": true,
      "log_likelihood": -24.95335439305097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.007453321269986956,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.892334128143606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.4726972084123888,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.15526529182348692,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.15363022661591,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.3784108572375218,
      "success": true,
      "log_likelihood": -24.953431147059646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953508188113954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4568791446996569,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.34905057595896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.4758204994169813,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.277498293029073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8408307297384813,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.822505796038982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8083708460393935,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.899830513325444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953685553439158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5568282409618935,
      "gamma": 10.0,
      "phi": 1.384845903477839,
      "success": true,
      "log_likelihood": -23.31330101883888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.78768730018964,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953548100857855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.2131721866998655,
      "gamma": 5.874526134227279,
      "phi": 0.6151802090903462,
      "success": true,
      "log_likelihood": -24.949361454749894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.168169408251737,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953658028006664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.828710273218075,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.555305700804404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5371435258898267,
      "gamma": 10.0,
      "phi": 1.408140156788361,
      "success": true,
      "log_likelihood": -23.438913997040615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.4761654854345883,
      "success": true,
      "log_likelihood": -24.953463941714713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7216366233644937,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.83029116328003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95345180317134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4351859516611158,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.775521404064275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8912338450240962,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.93742610981335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6920525443300352,
        "p": 1.5420818256044785e-15
      },
      "gamma": {
        "r": -0.0049950178335963335,
        "p": 0.9606623037823562
      },
      "phi": {
        "r": 0.07326167858014225,
        "p": 0.46883234373113736
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.47791724566451,
  "bic_results": {
    "average_bic": 53.47791724566451,
    "individual_bics": [
      60.65764041772157,
      59.298090760091725,
      58.99365568483458,
      60.35713261659717,
      59.86089785284322,
      56.71832983469358,
      33.3062773958674,
      55.59056820321126,
      33.3062773958674,
      60.294474693574784,
      59.87710658655948,
      60.65757839669864,
      60.050089385153214,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      58.52181218132425,
      43.305823414830115,
      60.65946998261953,
      59.29398159640391,
      59.26476651421417,
      57.973749290047635,
      58.56969331425772,
      60.62405738044153,
      41.305914211037575,
      49.30552842994089,
      33.3062773958674,
      60.65764041772157,
      60.59523965562718,
      60.43880356850296,
      33.3062773958674,
      56.91671178762313,
      54.64345557514184,
      59.30302243995038,
      55.45459659186824,
      39.30600500724502,
      57.25679863597517,
      60.65722198728538,
      35.30618659965994,
      58.94713234004229,
      57.588979907404706,
      53.103052886363244,
      59.12815172026549,
      60.48988984589151,
      60.11434970620056,
      60.3124214723596,
      54.59381758497672,
      60.65757355142277,
      59.616779617643346,
      59.60460786202182,
      60.43882350627676,
      60.487404881676184,
      60.657159075716606,
      41.305895825109616,
      60.657660624598805,
      47.30565026703181,
      57.55249323530211,
      59.28586225707643,
      60.65764041772157,
      60.656979327556044,
      60.65726560147027,
      58.535225071655546,
      39.30600500724503,
      43.3058234148301,
      59.05781726860015,
      39.306005007245034,
      60.65741910948762,
      60.65757319159624,
      59.44865796728625,
      49.30555340142648,
      60.39556840744629,
      54.55021784201922,
      37.306095803452486,
      60.65792792224664,
      57.3771588530461,
      60.657653017084044,
      60.64927972486812,
      39.30600500724503,
      60.657872871381656,
      59.861168216977134,
      57.62838480944956,
      60.65748469879776,
      54.41113914192839,
      60.65746042171101,
      37.306095803452486,
      60.301599623496884,
      54.62540903499503
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.692\n- gamma: r = -0.005\n- phi: r = 0.073",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nt1 = a^(0.5)\nt2 = ln(1+3.4*a)\nt3 = 0.2*arctan(1.1*a)\nt4 = 0.1*(1-exp(-a))\nt5 = 0.05*(1-exp(-2*a))\nt6 = 0.03*tanh(a)\nt7 = 0.02*sin(0.5*a)\nt8 = 0.012*(1-cos(0.3*a))\nt9 = 0.005*exp(-a)\nt10 = 0.005*sin(2.2*a)\nt11 = 0.002*cos(3.0*a)\nS_total = t1+t2+t3+t4+t5+t6+t7+t8+t9+t10+t11 + 0.01\nmod1 = 1+0.012*sin(a+0.04)\nS_mod = S_total*mod1\nC = 1.08\nsignal = C*S_mod\nm1 = 1+0.008*cos(a+0.06)\nm2 = 1+0.005*sin(a+0.11)\nm3 = 1+0.004*cos(a+0.08)\nm4 = 1+0.006*(sin(a+0.03)*cos(a+0.05))\nm5 = 1+0.003*(sin(a+0.025)*cos(a+0.045))\nS_seq = signal*m1*m2*m3*m4*m5\nR = (max(0,S_seq))^(0.8)\nM_extra = exp(-a/0.1)*(S_seq/(1+|S_seq|))\nf_x = sign(x)*[ S_seq*R*M_extra + 1e-6 ]^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making that calculates a fairness gap from normalized offer and fair share, scales it by a learnable factor, and applies a complex cascade of nonlinear operations including power\u2010law, logarithmic, trigonometric, exponential, sequential modulation, an adaptive ReLU-like compression, and an extra exponential\u2013softsign blend. The final transformed signal is raised to a fixed exponent and combined with a baseline bias and sensitivity parameter to yield latent utility, which is then passed through a logistic function to predict accept/reject behavior.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.47791724566451\nOverall Accuracy: 0.5672\n\nParameter Recovery:\n- beta: r = 0.692\n- gamma: r = -0.005\n- phi: r = 0.073"
  ]
}