{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 52, adapt the previous nonlinear model by introducing an adaptive ReLU-like transformation that is sensitive to the signal\u2019s magnitude (for example, one that dynamically caps the output based on a log\u2010scale of the input). In addition, adjust all the phase offsets in the sinusoidal modulations by increasing them slightly (e.g., add 0.005 more than before) to induce minor shifts. Also, add an extra modulation stage that multiplies the signal by a composite factor: the product of a fixed exponential decay (with decay constant k = 0.1) and a softsign function of the intermediate modulated signal. Then, use the product of the original power\u2013log blend (plus delta), all the sequential modulation stages (with the new phase shifts), the adaptive ReLU-like compression, and the extra exponential\u2013softsign blend. Raise this entire blended signal to exponent E = 0.92. Finally, compute the latent utility as U = beta + gamma \u00d7 f(x) (with x = F/phi) and transform it with the logistic function into an acceptance probability. Retain exactly three learnable parameters (beta, gamma, phi) with the bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. The instructions should encourage creative, non\u2010obvious integration of these nonlinear blending stages to push for improved accuracy, lower BIC, and more robust parameter recovery.\n</think>\n\nFor run 52, please develop an innovative computational model for responder decision-making using the following instructions:\n\n1. Compute the normalized offer as:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share as:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (bounded in [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. For a, compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003Optionally, include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 a) and 0.002 \u00d7 cos(3.0 \u00d7 a).\n6. Sum all these terms and add a constant delta = 0.01.\n7. Modulate the sum with the factor [1 + 0.012 \u00d7 sin(a + 0.04)] (note the slight phase shift).\n8. Form an Intermediate_Signal by conceptually combining the multiplicative (power-law \u00d7 logarithmic) term with the additive nonlinear components.\n9. Multiply the Intermediate_Signal by a fixed constant C (for example, C = 1.08).\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.025) \u00d7 cos(a + 0.045))].\n11. Introduce an adaptive ReLU-like transformation to the modulated signal. That is, set f_relu(z) to a capped version of z (for example, f_relu(z) = min(max(0, z), 1 + ln(1 + z))) so that extreme values are sharply compressed in a dynamic, input-sensitive way.\n12. Further blend the signal using an extra modulation layer formed by multiplying:\n\u2003\u2003\u2022 An exponential decay factor exp(\u2212a/0.1), and\n\u2003\u2003\u2022 A softsign mapping of the intermediate modulated signal (softsign(z) = z/(1 + |z|)).\nCombine these two factors to create a composite modulation.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulation factors, adaptive ReLU-like output, and the extra exponential\u2013softsign blend) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility by:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, there are exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nBe creative in your design of the adaptive ReLU-like operation and the extra modulation layer. Consider blending alternative activation shapes or variable dynamic caps to explore out-of-the-box nonlinear behavior. Your goal is to improve predictive accuracy, lower the Bayesian Information Criterion, and achieve robust parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 52, adapt the previous nonlinear model by introducing an adaptive ReLU-like transformation that is sensitive to the signal\u2019s magnitude (for example, one that dynamically caps the output based on a log\u2010scale of the input). In addition, adjust all the phase offsets in the sinusoidal modulations by increasing them slightly (e.g., add 0.005 more than before) to induce minor shifts. Also, add an extra modulation stage that multiplies the signal by a composite factor: the product of a fixed exponential decay (with decay constant k = 0.1) and a softsign function of the intermediate modulated signal. Then, use the product of the original power\u2013log blend (plus delta), all the sequential modulation stages (with the new phase shifts), the adaptive ReLU-like compression, and the extra exponential\u2013softsign blend. Raise this entire blended signal to exponent E = 0.92. Finally, compute the latent utility as U = beta + gamma \u00d7 f(x) (with x = F/phi) and transform it with the logistic function into an acceptance probability. Retain exactly three learnable parameters (beta, gamma, phi) with the bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. The instructions should encourage creative, non\u2010obvious integration of these nonlinear blending stages to push for improved accuracy, lower BIC, and more robust parameter recovery.\n</think>\n\nFor run 52, please develop an innovative computational model for responder decision-making using the following instructions:\n\n1. Compute the normalized offer as:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share as:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (bounded in [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. For a, compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003Optionally, include extra terms such as 0.005 \u00d7 sin(2.2 \u00d7 a) and 0.002 \u00d7 cos(3.0 \u00d7 a).\n6. Sum all these terms and add a constant delta = 0.01.\n7. Modulate the sum with the factor [1 + 0.012 \u00d7 sin(a + 0.04)] (note the slight phase shift).\n8. Form an Intermediate_Signal by conceptually combining the multiplicative (power-law \u00d7 logarithmic) term with the additive nonlinear components.\n9. Multiply the Intermediate_Signal by a fixed constant C (for example, C = 1.08).\n10. Apply sequential modulation stages with slight phase modifications:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.06)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.11)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.08)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.025) \u00d7 cos(a + 0.045))].\n11. Introduce an adaptive ReLU-like transformation to the modulated signal. That is, set f_relu(z) to a capped version of z (for example, f_relu(z) = min(max(0, z), 1 + ln(1 + z))) so that extreme values are sharply compressed in a dynamic, input-sensitive way.\n12. Further blend the signal using an extra modulation layer formed by multiplying:\n\u2003\u2003\u2022 An exponential decay factor exp(\u2212a/0.1), and\n\u2003\u2003\u2022 A softsign mapping of the intermediate modulated signal (softsign(z) = z/(1 + |z|)).\nCombine these two factors to create a composite modulation.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulation factors, adaptive ReLU-like output, and the extra exponential\u2013softsign blend) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility by:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, there are exactly three learnable parameters:\n\u2003\u2003\u2022 beta (baseline bias) \u2208 [\u201310, 10],\n\u2003\u2003\u2022 gamma (sensitivity) \u2208 [0, 10],\n\u2003\u2003\u2022 phi (scaling factor) \u2208 [0.5, 1.5].\n\nBe creative in your design of the adaptive ReLU-like operation and the extra modulation layer. Consider blending alternative activation shapes or variable dynamic caps to explore out-of-the-box nonlinear behavior. Your goal is to improve predictive accuracy, lower the Bayesian Information Criterion, and achieve robust parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nLet N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_offer\": {\n      \"description\": \"Intermediate computed normalized offer (split_self / combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Intermediate computed normalized fair share (token_self/(token_self+token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via logistic transformation of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear model that assesses responder decisions by first normalizing the offer and fair share to establish a fairness gap. This gap is scaled and transformed through a complex series of nonlinear operations including power\u2010law blends, logarithmic and trigonometric modulations with phase shifts, an adaptive ReLU-like compression, and an extra modulation stage combining exponential decay and softsign mapping. The output is raised to a fixed exponent before being scaled by a learnable sensitivity parameter and offset by a baseline bias. Finally, the latent utility is transformed via a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                Let N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_offer\": {\n      \"description\": \"Intermediate computed normalized offer (split_self / combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Intermediate computed normalized fair share (token_self/(token_self+token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via logistic transformation of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        T1 = a**(0.5)\n        T2 = math.log(1 + 3.4 * a)\n        T3 = 0.2 * math.atan(1.1 * a)\n        T4 = 0.1 * (1 - math.exp(-a))\n        T5 = 0.05 * (1 - math.exp(-2 * a))\n        T6 = 0.03 * math.tanh(a)\n        T7 = 0.02 * math.sin(0.5 * a)\n        T8 = 0.012 * (1 - math.cos(0.3 * a))\n        T9 = 0.005 * math.exp(-a)\n        T10 = 0.005 * math.sin(2.2 * a)\n        T11 = 0.002 * math.cos(3.0 * a)\n\n        Core = T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\n        delta = 0.01\n        S = Core + delta\n\n        M0 = S * (1 + 0.012 * math.sin(a + 0.04))\n        C = 1.08\n        M1 = C * M0\n        M2 = M1 * (1 + 0.008 * math.cos(a + 0.06)) * (1 + 0.005 * math.sin(a + 0.11)) * (1 + 0.004 * math.cos(a + 0.08)) * (1 + 0.006 * (math.sin(a + 0.03) * math.cos(a + 0.05))) * (1 + 0.003 * (math.sin(a + 0.025) * math.cos(a + 0.045)))\n\n        def f_relu(M2_val):\n            if M2_val < 0:\n                return 0\n            else:\n                return min(M2_val, 1 + math.log(1 + M2_val))\n\n        composite_mod = math.exp(-a / 0.1) * (M2 / (1 + abs(M2)))\n        Y = f_relu(M2) * composite_mod + 1e-6\n        Blended = Y**(0.92)\n\n        def f(x_val):\n            return (1 if x_val >= 0 else -1) * Blended\n\n        U = beta + gamma * f(x)\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n    {\n        \"ID\": 0,\n        \"group\": \"treatment\",\n        \"trial_number\": 1,\n        \"trial_type\": 0,\n        \"trial_role\": 1,\n        \"token_opp\": 7,\n        \"token_self\": 6,\n        \"combined_earning\": 9,\n        \"split_opp\": 4.0,\n        \"split_self\": 5.0,\n        \"splitperc_opp\": 44,\n        \"splitperc_self\": 56,\n        \"accept\": 1.0,\n        \"accepted_amount\": 4.0,\n        \"accepted_perc\": 44.0,\n        \"proposed_perc\": 56.0,\n        \"proposed_amount\": 5.0\n    },\n    {\n        \"ID\": 1,\n        \"group\": \"treatment\",\n        \"trial_number\": 2,\n        \"trial_type\": 0,\n        \"trial_role\": 1,\n        \"token_opp\": 7,\n        \"token_self\": 6,\n        \"combined_earning\": 9,\n        \"split_opp\": 4.0,\n        \"split_self\": 5.0,\n        \"splitperc_opp\": 44,\n        \"splitperc_self\": 56,\n        \"accept\": 1.0,\n        \"accepted_amount\": 4.0,\n        \"accepted_perc\": 44.0,\n        \"proposed_perc\": 56.0,\n        \"proposed_amount\": 5.0\n    }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta=1, gamma=1, phi=1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541285.634115
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the transformed fairness signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor applied to the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter scaling the transformed fairness signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling factor applied to the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_offer": {
      "description": "Intermediate computed normalized offer (split_self / combined_earning)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Intermediate computed normalized fair share (token_self/(token_self+token_opp))",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap: difference between normalized offer and normalized fair share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Absolute value of scaled fairness gap",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted acceptance probability computed via logistic transformation of latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A highly nonlinear model that assesses responder decisions by first normalizing the offer and fair share to establish a fairness gap. This gap is scaled and transformed through a complex series of nonlinear operations including power\u2010law blends, logarithmic and trigonometric modulations with phase shifts, an adaptive ReLU-like compression, and an extra modulation stage combining exponential decay and softsign mapping. The output is raised to a fixed exponent before being scaled by a learnable sensitivity parameter and offset by a baseline bias. Finally, the latent utility is transformed via a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nLet N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter scaling the transformed fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_offer\": {\n      \"description\": \"Intermediate computed normalized offer (split_self / combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Intermediate computed normalized fair share (token_self/(token_self+token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and normalized fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via logistic transformation of latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA highly nonlinear model that assesses responder decisions by first normalizing the offer and fair share to establish a fairness gap. This gap is scaled and transformed through a complex series of nonlinear operations including power\u2010law blends, logarithmic and trigonometric modulations with phase shifts, an adaptive ReLU-like compression, and an extra modulation stage combining exponential decay and softsign mapping. The output is raised to a fixed exponent before being scaled by a learnable sensitivity parameter and offset by a baseline bias. Finally, the latent utility is transformed via a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: Let N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))\nSummary: A highly nonlinear model that assesses responder decisions by first normalizing the offer and fair share to establish a fairness gap. This gap is scaled and transformed through a complex series of nonlinear operations including power\u2010law blends, logarithmic and trigonometric modulations with phase shifts, an adaptive ReLU-like compression, and an extra modulation stage combining exponential decay and softsign mapping. The output is raised to a fixed exponent before being scaled by a learnable sensitivity parameter and offset by a baseline bias. Finally, the latent utility is transformed via a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        T1 = a**(0.5)\n        T2 = math.log(1 + 3.4 * a)\n        T3 = 0.2 * math.atan(1.1 * a)\n        T4 = 0.1 * (1 - math.exp(-a))\n        T5 = 0.05 * (1 - math.exp(-2 * a))\n        T6 = 0.03 * math.tanh(a)\n        T7 = 0.02 * math.sin(0.5 * a)\n        T8 = 0.012 * (1 - math.cos(0.3 * a))\n        T9 = 0.005 * math.exp(-a)\n        T10 = 0.005 * math.sin(2.2 * a)\n        T11 = 0.002 * math.cos(3.0 * a)\n\n        Core = T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\n        delta = 0.01\n        S = Core + delta\n\n        M0 = S * (1 + 0.012 * math.sin(a + 0.04))\n        C = 1.08\n        M1 = C * M0\n        M2 = M1 * (1 + 0.008 * math.cos(a + 0.06)) * (1 + 0.005 * math.sin(a + 0.11)) * (1 + 0.004 * math.cos(a + 0.08)) * (1 + 0.006 * (math.sin(a + 0.03) * math.cos(a + 0.05))) * (1 + 0.003 * (math.sin(a + 0.025) * math.cos(a + 0.045)))\n\n        def f_relu(M2_val):\n            if M2_val < 0:\n                return 0\n            else:\n                return min(M2_val, 1 + math.log(1 + M2_val))\n\n        composite_mod = math.exp(-a / 0.1) * (M2 / (1 + abs(M2)))\n        Y = f_relu(M2) * composite_mod + 1e-6\n        Blended = Y**(0.92)\n\n        def f(x_val):\n            return (1 if x_val >= 0 else -1) * Blended\n\n        U = beta + gamma * f(x)\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5586080586080586,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953526156145955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8532390070879957,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.514000967628533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4682180868925947,
      "gamma": 3.267262564749262,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.811298791486013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.006350899130699,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.840106371975033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6348258829192843,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.768707663243966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7414891498187816,
      "gamma": 6.790645888235519,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.458711140165153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1440877902838027,
      "gamma": 4.668732800970899,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.87215516614857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.044762766569803e-18,
      "phi": 1.0154884538671778,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.056723701118512,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.845498697810644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.638745579517287,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.769616565333003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953506165401937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7304530678025856,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.786830809522783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.429912316144247,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.40122549174068184,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.32541210750942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.133721706077477,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.933857748639454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7315960783616752,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.48319939042565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0062303759811049,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.581913931710535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.01623043275079632,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.116603765519066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.28258011046035214,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.246645582032677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.176955648271895,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.934652835050443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352615614596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.437210362461422,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.896262541241548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.120034813662164,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.85512889915001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.962127378237934,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.36458161213519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5377309086507365,
      "gamma": 0.1751356323805227,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.157879675039503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9615196692036292,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.563654235817665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4832779496478485,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.735376485484185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5519677413956816,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.591125888806996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953293833671975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.7918787345696465,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3179757404649283,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.270822860176555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4272703864288147,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.84628029046815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.9553572471705176,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.214575153341595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5814305261331911,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.392653186589726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077364044439566,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.84904474625136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8123596011175933,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.804310584110716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4930554262632683,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.858774694218642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0408217748277093,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.000184176593656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953499337880643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9191326589291712,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.599538884973423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6789841790498531,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.450957569590475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1516584938622936,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.859448298199403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.55765883877216,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.901436517583612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.948611533588383,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.948719150823756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.074127683591416,
      "phi": 0.501264739146532,
      "success": true,
      "log_likelihood": -15.27766525510686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953512939936466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5300383377561945,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.664949965405032,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9043397931067946,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.535411370273863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352615614596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.6178819563483002,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.910982102389156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953312134809288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2621019518627136,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.22722073579467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.6918546512773576,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277788615415885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.4005399021496823,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.42515219701914425,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.3560194959315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95336894448768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953498630663493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8659146387728301,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.54949980807134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.183895761616936,
      "gamma": 5.240511866625764,
      "phi": 0.8005051793484994,
      "success": true,
      "log_likelihood": -19.27834911049351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.029255414900804,
      "gamma": 8.37766999182898,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.934595765487703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8268354126807251,
      "gamma": 4.997291829429124,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.123396241283157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.85689149558554,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953700682999894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6122403725743197,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.331046001942603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352615614596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.655927485289368,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.439426376616012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95367098405331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3191256534348652,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.697457414692632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6043394942405426,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.435706213853532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953403061281627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1102158883599706,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.04027429703388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953474565334385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.730549585406536,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.796235041086824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0805702994233286,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.040905782968803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6877528625336214,
        "p": 2.7016671462695404e-15
      },
      "gamma": {
        "r": -0.0203598302996558,
        "p": 0.8406521324672235
      },
      "phi": {
        "r": 0.07395855767790512,
        "p": 0.4646023337532105
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.668794357518756,
  "bic_results": {
    "average_bic": 53.668794357518756,
    "individual_bics": [
      60.65760912766024,
      59.77855875062539,
      60.37315439834036,
      60.43076955931839,
      60.28797214185626,
      57.66797909569864,
      33.3062773958674,
      56.494867147665474,
      33.3062773958674,
      60.44155421098962,
      60.28978994603433,
      60.65756914617221,
      60.32421843441389,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      59.40138103038717,
      43.305823414830115,
      60.618272312647235,
      59.716955596219634,
      59.9143846787894,
      58.98376434640646,
      59.24384797943368,
      60.61986248546921,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.65760912766025,
      60.54308189785142,
      60.46081461366835,
      33.3062773958674,
      57.47972003963871,
      55.06631616544733,
      59.87786528700366,
      56.221309786336704,
      39.30600500724502,
      57.932808592982326,
      60.65714448271228,
      35.30618659965994,
      59.292202535721444,
      58.44311739630463,
      53.179707122051525,
      59.53586318854778,
      60.448646307871044,
      60.35917798358976,
      60.46810620380562,
      54.75092516855564,
      60.657555491129614,
      59.94963458531518,
      59.652471954549284,
      60.469453411767134,
      60.55342985053555,
      60.64799511701584,
      41.30588732558205,
      60.65758269524126,
      47.3056418224152,
      58.0804567461784,
      59.82137955591605,
      60.65760912766025,
      60.57252102014664,
      60.6571810849869,
      59.204998286957675,
      39.3061340462001,
      43.3058234148301,
      59.462595807231324,
      39.306005007245034,
      60.657294704343684,
      60.65755407669532,
      59.849556431511004,
      49.30725503635536,
      60.61974834634374,
      54.99734929793465,
      37.306095803452486,
      60.657958181368116,
      57.41264881925353,
      60.65760912766025,
      59.62940956860035,
      39.30600500724503,
      60.65789878347495,
      60.1454716447536,
      57.6219692430754,
      60.65736293793158,
      54.83110540943609,
      60.657505946037105,
      37.306095803452486,
      60.343026897541975,
      54.83236838130594
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.688\n- gamma: r = -0.020\n- phi: r = 0.074",
  "previous_models": [
    "Specification: Let N_offer = split_self / combined_earning  \nLet N_share = token_self / (token_self + token_opp)  \nLet F = N_offer \u2212 N_share  \nLet x = F / phi  \nLet a = |x|\n\nLet T\u2081 = a^(0.5)  \nLet T\u2082 = ln(1 + 3.4\u00b7a)  \nLet T\u2083 = 0.2 \u00b7 arctan(1.1\u00b7a)  \nLet T\u2084 = 0.1 \u00b7 (1 \u2212 exp(\u2212a))  \nLet T\u2085 = 0.05 \u00b7 (1 \u2212 exp(\u22122\u00b7a))  \nLet T\u2086 = 0.03 \u00b7 tanh(a)  \nLet T\u2087 = 0.02 \u00b7 sin(0.5\u00b7a)  \nLet T\u2088 = 0.012 \u00b7 (1 \u2212 cos(0.3\u00b7a))  \nLet T\u2089 = 0.005 \u00b7 exp(\u2212a)  \nLet T\u2081\u2080 = 0.005 \u00b7 sin(2.2\u00b7a)  \nLet T\u2081\u2081 = 0.002 \u00b7 cos(3.0\u00b7a)\n\nLet Core = T\u2081 + T\u2082 + T\u2083 + T\u2084 + T\u2085 + T\u2086 + T\u2087 + T\u2088 + T\u2089 + T\u2081\u2080 + T\u2081\u2081  \nLet delta = 0.01  \nLet S = Core + delta  \n\nLet M\u2080 = S \u00b7 [1 + 0.012 \u00b7 sin(a + 0.04)]  \nLet C = 1.08  \nLet M\u2081 = C \u00b7 M\u2080  \nLet M\u2082 = M\u2081 \u00b7 [1 + 0.008 \u00b7 cos(a + 0.06)] \u00b7 [1 + 0.005 \u00b7 sin(a + 0.11)] \u00b7 [1 + 0.004 \u00b7 cos(a + 0.08)] \u00b7 [1 + 0.006 \u00b7 (sin(a + 0.03) \u00b7 cos(a + 0.05))] \u00b7 [1 + 0.003 \u00b7 (sin(a + 0.025) \u00b7 cos(a + 0.045))]\n\nDefine f_relu(M\u2082) = { 0, if M\u2082 < 0; min(M\u2082, 1 + ln(1 + M\u2082)), if M\u2082 \u2265 0 }  \n\nLet composite_mod = exp(\u2212a/0.1) \u00b7 (M\u2082 / (1 + |M\u2082|))  \nLet Y = f_relu(M\u2082) \u00b7 composite_mod + 1e\u22126  \nLet Blended = Y^(0.92)\n\nDefine f(x) = sign(x) \u00b7 Blended  \nLet U = beta + gamma \u00b7 f(x)  \nLet p_accept = 1 / (1 + exp(\u2212U))\nSummary: A highly nonlinear model that assesses responder decisions by first normalizing the offer and fair share to establish a fairness gap. This gap is scaled and transformed through a complex series of nonlinear operations including power\u2010law blends, logarithmic and trigonometric modulations with phase shifts, an adaptive ReLU-like compression, and an extra modulation stage combining exponential decay and softsign mapping. The output is raised to a fixed exponent before being scaled by a learnable sensitivity parameter and offset by a baseline bias. Finally, the latent utility is transformed via a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.668794357518756\nOverall Accuracy: 0.5586\n\nParameter Recovery:\n- beta: r = 0.688\n- gamma: r = -0.020\n- phi: r = 0.074"
  ]
}