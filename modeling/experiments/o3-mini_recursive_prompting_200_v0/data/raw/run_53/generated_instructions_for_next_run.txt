<think>
For run 54, the goal is to further improve accuracy, lower BIC, and enhance robust parameter recovery by expanding the current nonlinear blending strategy. In this version, in addition to the established stages, include an extra modulation that applies an adaptive sine-based modulation based on the reciprocal of the signal magnitude (i.e. modulated by 1/(1+a)) to further refine the feedback for very small or large gaps. Retain the slightly adjusted phase offsets (all increased by 0.005 as before) and the hybrid adaptive ReLU-like transformation that now allows a small proportion of negative signal via a leaky term. You may also consider using an extra multiplicative factor based on (1/(1+a)) or a similar nonlinearity to encourage smooth transitions at low signals. Keep exactly three learnable parameters: beta ∈ [–10, 10], gamma ∈ [0, 10], and phi ∈ [0.5, 1.5]. Encourage creative integration of these extra dynamic modulations, allowing the model to capture more detailed variations in fairness gaps while ensuring that extreme outputs are appropriately dampened.
</think>

Develop your computational model for responder decision-making as follows:

1. Compute the normalized offer:  N_offer = split_self / combined_earning.
2. Compute the normalized fair share:  N_share = token_self / (token_self + token_opp).
3. Define the fairness gap:  F = N_offer − N_share.
4. Scale the gap by the learnable scaling factor phi (ϕ ∈ [0.5, 1.5]):  x = F / phi.
5. Let a = |x|. Compute the following core nonlinear components:
  • a^(0.5)
  • ln(1 + 3.4 × a)
  • 0.2 × arctan(1.1 × a)
  • 0.1 × (1 − exp(−a))
  • 0.05 × (1 − exp(−2 × a))
  • 0.03 × tanh(a)
  • 0.02 × sin(0.5 × a)
  • 0.012 × (1 − cos(0.3 × a))
  • 0.005 × exp(−a)
  • 0.005 × sin(2.2 × a)
  • 0.002 × cos(3.0 × a)
6. Sum these terms and add a constant delta = 0.01.
7. Modulate this sum with the factor [1 + 0.012 × sin(a + 0.045)].
8. Form an Intermediate_Signal by combining the multiplicative (power-law and logarithmic) and additive components.
9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).
10. Apply sequential modulation stages with updated phase shifts:
  a. Multiply by [1 + 0.008 × cos(a + 0.065)].
  b. Multiply by [1 + 0.005 × sin(a + 0.115)].
  c. Multiply by [1 + 0.004 × cos(a + 0.085)].
  d. Multiply by [1 + 0.006 × (sin(a + 0.035) × cos(a + 0.055))].
  e. Optionally, multiply by [1 + 0.003 × (sin(a + 0.03) × cos(a + 0.05))].
11. Introduce a hybrid adaptive ReLU-like transformation that is leaky for negative signals: define f_adapt(z) = { if z < 0 then 0.01 × z, else min(z, 1 + ln(1 + z)) }.
12. Further blend the signal by multiplying by an extra composite factor, the product of:
  • An exponential decay: exp(−a/0.1),
  • A softsign function: softsign(z) = z/(1 + |z|),
  • And an additional adaptive sine-based modulation: [1 + 0.005 × sin(1/(1+a))].
13. Add a small constant offset of 1e-6 for numerical stability.
14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.
15. Define the final nonlinear transformation as:
  f(x) = sign(x) × { [ C × (core nonlinear sum + delta) × (product of the sequential modulations with updated phase shifts, the adaptive ReLU-like output f_adapt, the extra exponential–softsign factor, and the reciprocal-based sine modulation) + 1e-6 ]^(0.92) }.
16. Compute the latent utility:  U = beta + gamma × f(x).
17. Convert U to an acceptance probability using the logistic function:  p_accept = 1/(1 + exp(−U)).

Maintain exactly three learnable parameters:
  • beta ∈ [–10, 10];
  • gamma ∈ [0, 10];
  • phi ∈ [0.5, 1.5].

Focus on creative, out-of-the-box integration of these dynamic nonlinear blending stages to drive improvements in predictive accuracy, overall BIC, and parameter recovery robustness.