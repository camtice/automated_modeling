{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 53, we want to push the envelope further by experimenting with more dynamic nonlinear blending stages. In this version, in addition to the previous modulation and adaptive ReLU functions, we will blend in an extra stage that incorporates a leaky modification\u2014allowing a small gradient even for negative signals\u2014and an additional adaptive sine-based modulation based on the reciprocal of the signal magnitude. Also, we tweak all phase offsets once more by adding an extra 0.005 to each previous phase shift (so that, for example, sin(a + 0.04) becomes sin(a + 0.045), cos(a + 0.06) becomes cos(a + 0.065), etc.). Finally, rather than using a simple f_relu(z) = min(max(0,z), 1+ln(1+z)), consider a hybrid adaptive function that smoothly transitions from a leaky behavior to a capped behavior for larger inputs. The idea is to let the model capture a wider dynamic range while preventing extreme outputs. Retain the structure with exactly three learnable parameters (beta, gamma, phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. The goal is to increase overall predictive accuracy, lower the BIC, and enhance robust parameter recovery.\n</think>\n\nFor run 53, please develop an innovative computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 Optionally, include 0.005 \u00d7 sin(2.2 \u00d7 a) and 0.002 \u00d7 cos(3.0 \u00d7 a).\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate the sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)] (note the phase shift increased by 0.005).\n8. Form an Intermediate_Signal by combining the multiplicative (power-law \u00d7 logarithmic) and additive nonlinear components.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce an adaptive ReLU-like transformation that is sensitive to the signal\u2019s magnitude. For example, define f_adapt(z) = { if z < 0 then 0.01\u00d7z (a leaky behavior) else min(z, 1 + ln(1 + z)) } so that for small negative inputs the function leaks a small portion while capping large positive values on a logarithmic scale.\n12. Further blend the signal using an extra modulation layer that multiplies by a composite factor; this factor is the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1)\n\u2003\u2003\u2022 A softsign function: softsign(z) = z/(1 + |z|) of the intermediate modulated signal.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations with updated phase shifts, the adaptive ReLU-like output f_adapt, and the extra exponential\u2013softsign composite factor) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility as:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative and out-of-the-box integration of these nonlinear blending and transformation stages (including alternative adaptive activation designs) to improve predictive accuracy, reduce BIC, and ensure robust parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 53, we want to push the envelope further by experimenting with more dynamic nonlinear blending stages. In this version, in addition to the previous modulation and adaptive ReLU functions, we will blend in an extra stage that incorporates a leaky modification\u2014allowing a small gradient even for negative signals\u2014and an additional adaptive sine-based modulation based on the reciprocal of the signal magnitude. Also, we tweak all phase offsets once more by adding an extra 0.005 to each previous phase shift (so that, for example, sin(a + 0.04) becomes sin(a + 0.045), cos(a + 0.06) becomes cos(a + 0.065), etc.). Finally, rather than using a simple f_relu(z) = min(max(0,z), 1+ln(1+z)), consider a hybrid adaptive function that smoothly transitions from a leaky behavior to a capped behavior for larger inputs. The idea is to let the model capture a wider dynamic range while preventing extreme outputs. Retain the structure with exactly three learnable parameters (beta, gamma, phi) with bounds beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. The goal is to increase overall predictive accuracy, lower the BIC, and enhance robust parameter recovery.\n</think>\n\nFor run 53, please develop an innovative computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 Optionally, include 0.005 \u00d7 sin(2.2 \u00d7 a) and 0.002 \u00d7 cos(3.0 \u00d7 a).\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate the sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)] (note the phase shift increased by 0.005).\n8. Form an Intermediate_Signal by combining the multiplicative (power-law \u00d7 logarithmic) and additive nonlinear components.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce an adaptive ReLU-like transformation that is sensitive to the signal\u2019s magnitude. For example, define f_adapt(z) = { if z < 0 then 0.01\u00d7z (a leaky behavior) else min(z, 1 + ln(1 + z)) } so that for small negative inputs the function leaks a small portion while capping large positive values on a logarithmic scale.\n12. Further blend the signal using an extra modulation layer that multiplies by a composite factor; this factor is the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1)\n\u2003\u2003\u2022 A softsign function: softsign(z) = z/(1 + |z|) of the intermediate modulated signal.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations with updated phase shifts, the adaptive ReLU-like output f_adapt, and the extra exponential\u2013softsign composite factor) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility as:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative and out-of-the-box integration of these nonlinear blending and transformation stages (including alternative adaptive activation designs) to improve predictive accuracy, reduce BIC, and ensure robust parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter for responder choice\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between the normalized offer and the normalized fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap obtained by dividing F by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled gap x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final nonlinear transformation of the scaled fairness gap, preserving sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility used to predict responder behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the offer, derived from U via a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dynamic, highly nonlinear model for responder decision-making that computes a normalized fairness gap from the offer and participant\u2019s token count, scales it by a learnable factor, and then processes it through a series of nonlinear transformations including power, logarithmic, trigonometric, and exponential functions. The signal is sequentially modulated through multiple adaptive and leaky stages\u2014including an adaptive ReLU-like function and an extra modulation layer\u2014before being exponentiated. The latent utility is finally obtained by a linear combination with two learnable parameters and converted to an acceptance probability using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter for responder choice\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between the normalized offer and the normalized fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap obtained by dividing F by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled gap x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final nonlinear transformation of the scaled fairness gap, preserving sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility used to predict responder behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the offer, derived from U via a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        S = (a**0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a)\n        S_total = S + 0.01\n        mod1 = 1 + 0.012 * math.sin(a + 0.045)\n        I = S_total * mod1\n        I_c = 1.08 * I\n        M1 = 1 + 0.008 * math.cos(a + 0.065)\n        M2 = 1 + 0.005 * math.sin(a + 0.115)\n        M3 = 1 + 0.004 * math.cos(a + 0.085)\n        M4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        M5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        M = M1 * M2 * M3 * M4 * M5\n        S_mod = I_c * M\n        \n        if S_mod < 0:\n            f_adapt = 0.01 * S_mod\n        else:\n            f_adapt = min(S_mod, 1 + math.log(1 + S_mod))\n        \n        M_extra = math.exp(-a / 0.1) * (S_mod / (1 + abs(S_mod)))\n        y_final = f_adapt * M_extra + 1e-6\n\n        if x >= 0:\n            f_x = math.copysign(abs(y_final)**0.92, 1)\n        else:\n             f_x = math.copysign(abs(y_final)**0.92, -1)\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, beta = 1, gamma = 1, phi = 1)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743541357.786268
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter for responder choice",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Baseline utility parameter for responder choice",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable scaling factor for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earning in the trial (in \u00a3)",
      "range": {
        "min": 1,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "N_offer": {
      "description": "Normalized offer computed as split_self divided by combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share computed as token_self divided by (token_self + token_opp)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap between the normalized offer and the normalized fair share",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap obtained by dividing F by phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Absolute value of the scaled gap x",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_x": {
      "description": "Final nonlinear transformation of the scaled fairness gap, preserving sign",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility used to predict responder behavior",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted probability of accepting the offer, derived from U via a logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A dynamic, highly nonlinear model for responder decision-making that computes a normalized fairness gap from the offer and participant\u2019s token count, scales it by a learnable factor, and then processes it through a series of nonlinear transformations including power, logarithmic, trigonometric, and exponential functions. The signal is sequentially modulated through multiple adaptive and leaky stages\u2014including an adaptive ReLU-like function and an extra modulation layer\u2014before being exponentiated. The latent utility is finally obtained by a linear combination with two learnable parameters and converted to an acceptance probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Baseline utility parameter for responder choice\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earning in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap between the normalized offer and the normalized fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap obtained by dividing F by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled gap x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_x\": {\n      \"description\": \"Final nonlinear transformation of the scaled fairness gap, preserving sign\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility used to predict responder behavior\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the offer, derived from U via a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dynamic, highly nonlinear model for responder decision-making that computes a normalized fairness gap from the offer and participant\u2019s token count, scales it by a learnable factor, and then processes it through a series of nonlinear transformations including power, logarithmic, trigonometric, and exponential functions. The signal is sequentially modulated through multiple adaptive and leaky stages\u2014including an adaptive ReLU-like function and an extra modulation layer\u2014before being exponentiated. The latent utility is finally obtained by a linear combination with two learnable parameters and converted to an acceptance probability using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A dynamic, highly nonlinear model for responder decision-making that computes a normalized fairness gap from the offer and participant\u2019s token count, scales it by a learnable factor, and then processes it through a series of nonlinear transformations including power, logarithmic, trigonometric, and exponential functions. The signal is sequentially modulated through multiple adaptive and leaky stages\u2014including an adaptive ReLU-like function and an extra modulation layer\u2014before being exponentiated. The latent utility is finally obtained by a linear combination with two learnable parameters and converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta, gamma, phi):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        S = (a**0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a)\n        S_total = S + 0.01\n        mod1 = 1 + 0.012 * math.sin(a + 0.045)\n        I = S_total * mod1\n        I_c = 1.08 * I\n        M1 = 1 + 0.008 * math.cos(a + 0.065)\n        M2 = 1 + 0.005 * math.sin(a + 0.115)\n        M3 = 1 + 0.004 * math.cos(a + 0.085)\n        M4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        M5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        M = M1 * M2 * M3 * M4 * M5\n        S_mod = I_c * M\n        \n        if S_mod < 0:\n            f_adapt = 0.01 * S_mod\n        else:\n            f_adapt = min(S_mod, 1 + math.log(1 + S_mod))\n        \n        M_extra = math.exp(-a / 0.1) * (S_mod / (1 + abs(S_mod)))\n        y_final = f_adapt * M_extra + 1e-6\n\n        if x >= 0:\n            f_x = math.copysign(abs(y_final)**0.92, 1)\n        else:\n             f_x = math.copysign(abs(y_final)**0.92, -1)\n\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5695970695970696,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953526110197238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8532440484874527,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.51393350742712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8606502599025212,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.54026521088572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.006112011814398,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.840041654801738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6430712302700128,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.768650571174376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7438234271232299,
      "gamma": 6.80954241000802,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.458739631662105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1437762139124636,
      "gamma": 4.66455581742711,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.87217364566931,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0564380895380476,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.84543038210526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6385835749217716,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.76955198265933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953506122676846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.730261499580275,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.78675743642957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.9236506541144432e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.295765173165728e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.9518946167875283e-16,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.40123667401118096,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.325391004255284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.32490543333981e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.132587883028564,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.933820756402174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7313986626940284,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.483150099674308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0061483927324701,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.581857360556924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.016180783543650268,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.116609460955644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2825974285280138,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.246612343117356,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1810997484799497,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.9346117485092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352611019723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.4368824650689223,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.89621435283929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.119702596791371,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.855060688643476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9622454016624937,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.364605981439478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5378214942175272,
      "gamma": 0.17493718973227793,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.157880114372432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9614775320586934,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.56359450666829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4834221964518712,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.735404892288933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.695583761533193e-19,
      "phi": 1.3802932155226602,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5520614918487442,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.59111206600439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953293772811556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.34778433960341476,
      "gamma": 9.744927328663886,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.280558696788628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4275755227503528,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.84630902990829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.9556763366540757,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.214574326779324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5813272562333117,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.39259379743363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.077397710699224,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.848972510141245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.81205392554187,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.8042406275764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4928238977020993,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.858777804816338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0409860157675164,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.00018173953869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953499297354092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9191725440636423,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.599504840654976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790635117079785,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.450957568510525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.151386006670817,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.859381489440914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5568353480698973,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.901378701927914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.949256750215594,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.948697938473575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.687933517524122,
      "phi": 0.5163560205478033,
      "success": true,
      "log_likelihood": -15.277660040991885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95351289694349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5301291509491113,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.66493987610417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9038295682175099,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.535346906559035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953526110197235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.61849844712454,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.910944619177556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95331207408016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.26193159435559626,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.227184716687745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4247536938429674,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.355989052665805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.6836233415391346e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953368872406834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95349859010906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8657986856819777,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.549457104982373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.3081469058790507,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.039559806735143,
      "gamma": 8.291596673732542,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.934603462120705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8266273829652229,
      "gamma": 4.994960007259757,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.12340556587421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.791434191082901,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953710111256765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6123681272842583,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.330967684935317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953526110197235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.656208985666377,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.43935280694965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.573660485777392,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953678924510708,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.319050644254704,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.69740447188173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6044825945137743,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.435643439396962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95340299189326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.110464954296537,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.04028841971299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953474551765254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.730535274483838,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.796176696786894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.568751361827791,
      "gamma": 1.5680776002678476,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.156053668016604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6794750538976295,
        "p": 7.741995365269338e-15
      },
      "gamma": {
        "r": -0.00492997772853008,
        "p": 0.9611741188651137
      },
      "phi": {
        "r": 0.08199305154563538,
        "p": 0.41737214492390334
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.66552750845463,
  "bic_results": {
    "average_bic": 53.66552750845463,
    "individual_bics": [
      60.6576090357628,
      59.778423830222565,
      59.83108723713977,
      60.4306401249718,
      60.28785795771708,
      57.66803607869254,
      33.3062773958674,
      56.494904106706954,
      33.3062773958674,
      60.441417579578854,
      60.28966078068699,
      60.657569060722025,
      60.32407168822748,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      59.4013388238789,
      43.305823414830115,
      60.61819832817268,
      59.71685701471695,
      59.914271536482175,
      58.983775737279615,
      59.24378150160304,
      60.61978031238674,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.65760903576279,
      60.542985521046916,
      60.46067819265528,
      33.3062773958674,
      57.47976877824729,
      55.06631704411319,
      59.87774582870492,
      56.221366599946194,
      39.30600500724502,
      57.93278094737711,
      60.65714436099144,
      35.30618659965994,
      59.31167420894559,
      58.44317487518491,
      53.17970546892698,
      59.535744410235594,
      60.448501835650816,
      60.35903807052114,
      60.46811242500101,
      54.750920294445706,
      60.65755541007651,
      59.94956649667829,
      59.65247195238938,
      60.469319794250154,
      60.55331421922416,
      60.647952692315485,
      41.3058768973521,
      60.657582609255314,
      47.3056418224152,
      58.08043656757667,
      59.821250628486396,
      60.6576090357628,
      60.57244605372344,
      60.657180963528646,
      59.20492624874382,
      39.30600500724503,
      43.3058234148301,
      59.46253492069994,
      39.306005007245034,
      60.657294560181995,
      60.657553995586454,
      59.849471025333074,
      49.30555102620774,
      60.61976373960974,
      54.99736794711676,
      37.306095803452486,
      60.657977037881864,
      57.41249218523896,
      60.6576090357628,
      59.62926242926763,
      39.30600500724503,
      60.65791466438975,
      60.14536575913179,
      57.62184369416225,
      60.65736279915485,
      54.831133654794314,
      60.657505918898835,
      37.306095803452486,
      60.342910208942115,
      55.062664151401535
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.679\n- gamma: r = -0.005\n- phi: r = 0.082",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)\nS_total = S + 0.01\nmod1 = 1 + 0.012*sin(a+0.045)\nI = S_total * mod1\nI_c = 1.08 * I\nM1 = 1 + 0.008*cos(a+0.065)\nM2 = 1 + 0.005*sin(a+0.115)\nM3 = 1 + 0.004*cos(a+0.085)\nM4 = 1 + 0.006*(sin(a+0.035)*cos(a+0.055))\nM5 = 1 + 0.003*(sin(a+0.03)*cos(a+0.05))\nM = M1*M2*M3*M4*M5\nS_mod = I_c * M\nf_adapt = {0.01*S_mod  if S_mod < 0;  min(S_mod, 1+ln(1+S_mod))  if S_mod \u2265 0}\nM_extra = exp(-a/0.1) * (S_mod/(1+|S_mod|))\ny_final = f_adapt * M_extra + 1e-6\nf_x = sign(x)*(|y_final|)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A dynamic, highly nonlinear model for responder decision-making that computes a normalized fairness gap from the offer and participant\u2019s token count, scales it by a learnable factor, and then processes it through a series of nonlinear transformations including power, logarithmic, trigonometric, and exponential functions. The signal is sequentially modulated through multiple adaptive and leaky stages\u2014including an adaptive ReLU-like function and an extra modulation layer\u2014before being exponentiated. The latent utility is finally obtained by a linear combination with two learnable parameters and converted to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.66552750845463\nOverall Accuracy: 0.5696\n\nParameter Recovery:\n- beta: r = 0.679\n- gamma: r = -0.005\n- phi: r = 0.082"
  ]
}