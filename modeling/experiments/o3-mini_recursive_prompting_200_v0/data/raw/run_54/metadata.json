{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 54, the goal is to further improve accuracy, lower BIC, and enhance robust parameter recovery by expanding the current nonlinear blending strategy. In this version, in addition to the established stages, include an extra modulation that applies an adaptive sine-based modulation based on the reciprocal of the signal magnitude (i.e. modulated by 1/(1+a)) to further refine the feedback for very small or large gaps. Retain the slightly adjusted phase offsets (all increased by 0.005 as before) and the hybrid adaptive ReLU-like transformation that now allows a small proportion of negative signal via a leaky term. You may also consider using an extra multiplicative factor based on (1/(1+a)) or a similar nonlinearity to encourage smooth transitions at low signals. Keep exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage creative integration of these extra dynamic modulations, allowing the model to capture more detailed variations in fairness gaps while ensuring that extreme outputs are appropriately dampened.\n</think>\n\nDevelop your computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)].\n8. Form an Intermediate_Signal by combining the multiplicative (power-law and logarithmic) and additive components.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce a hybrid adaptive ReLU-like transformation that is leaky for negative signals: define f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n12. Further blend the signal by multiplying by an extra composite factor, the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign function: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 And an additional adaptive sine-based modulation: [1 + 0.005 \u00d7 sin(1/(1+a))].\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations with updated phase shifts, the adaptive ReLU-like output f_adapt, the extra exponential\u2013softsign factor, and the reciprocal-based sine modulation) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nFocus on creative, out-of-the-box integration of these dynamic nonlinear blending stages to drive improvements in predictive accuracy, overall BIC, and parameter recovery robustness.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 54, the goal is to further improve accuracy, lower BIC, and enhance robust parameter recovery by expanding the current nonlinear blending strategy. In this version, in addition to the established stages, include an extra modulation that applies an adaptive sine-based modulation based on the reciprocal of the signal magnitude (i.e. modulated by 1/(1+a)) to further refine the feedback for very small or large gaps. Retain the slightly adjusted phase offsets (all increased by 0.005 as before) and the hybrid adaptive ReLU-like transformation that now allows a small proportion of negative signal via a leaky term. You may also consider using an extra multiplicative factor based on (1/(1+a)) or a similar nonlinearity to encourage smooth transitions at low signals. Keep exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage creative integration of these extra dynamic modulations, allowing the model to capture more detailed variations in fairness gaps while ensuring that extreme outputs are appropriately dampened.\n</think>\n\nDevelop your computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)].\n8. Form an Intermediate_Signal by combining the multiplicative (power-law and logarithmic) and additive components.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Optionally, multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce a hybrid adaptive ReLU-like transformation that is leaky for negative signals: define f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n12. Further blend the signal by multiplying by an extra composite factor, the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign function: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 And an additional adaptive sine-based modulation: [1 + 0.005 \u00d7 sin(1/(1+a))].\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations with updated phase shifts, the adaptive ReLU-like output f_adapt, the extra exponential\u2013softsign factor, and the reciprocal-based sine modulation) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nFocus on creative, out-of-the-box integration of these dynamic nonlinear blending stages to drive improvements in predictive accuracy, overall BIC, and parameter recovery robustness.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total money earned in a trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_offer\": {\n      \"description\": \"Derived normalized offer (split_self/combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by total tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer minus N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter representing base utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma multiplied by the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making that calculates a fairness gap between the offered share and the fair share based on tokens. This gap is scaled and processed through an intricate sequence of nonlinear transformations, sequential modulations with adaptive sine-based and exponential functions, and a hybrid adaptive ReLU-like transformation with leaky behavior for negative signals. The resulting transformed signal is combined with an intercept (beta) and scaled (gamma) to produce a latent utility that is passed through a logistic function to generate acceptance probabilities.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total money earned in a trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_offer\": {\n      \"description\": \"Derived normalized offer (split_self/combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by total tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer minus N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter representing base utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma multiplied by the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # N_offer\n        N_offer = split_self / combined_earning\n\n        # N_share\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        # F\n        F = N_offer - N_share\n\n        # x\n        x = F / phi\n\n        # a\n        a = abs(x)\n\n        # T1 to T11\n        T1 = a**(0.5)\n        T2 = math.log(1 + 3.4 * a)\n        T3 = 0.2 * math.atan(1.1 * a)\n        T4 = 0.1 * (1 - math.exp(-a))\n        T5 = 0.05 * (1 - math.exp(-2 * a))\n        T6 = 0.03 * math.tanh(a)\n        T7 = 0.02 * math.sin(0.5 * a)\n        T8 = 0.012 * (1 - math.cos(0.3 * a))\n        T9 = 0.005 * math.exp(-a)\n        T10 = 0.005 * math.sin(2.2 * a)\n        T11 = 0.002 * math.cos(3.0 * a)\n\n        # S\n        S = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\n\n        # S_mod\n        S_mod = S * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Y\n        Y = 1.08 * S_mod\n        Y1 = Y * (1 + 0.008 * math.cos(a + 0.065))\n        Y2 = Y1 * (1 + 0.005 * math.sin(a + 0.115))\n        Y3 = Y2 * (1 + 0.004 * math.cos(a + 0.085))\n        Y4 = Y3 * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055))\n        Y5 = Y4 * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # S6\n        S6 = Y5\n\n        # f_adapt\n        if S6 < 0:\n            f_adapt = 0.01 * S6\n        else:\n            f_adapt = min(S6, 1 + math.log(1 + S6))\n\n        # D\n        D = math.exp(-a / 0.1)\n\n        # soft\n        soft = S6 / (1 + abs(S6))\n\n        # Sine_mod\n        Sine_mod = 1 + 0.005 * math.sin(1 / (1 + a))\n\n        # K\n        K = D * soft * Sine_mod\n\n        # Z\n        Z = f_adapt * K + 1e-6\n\n        # f_x\n        f_x = (1 if x >= 0 else -1) * (Z)**(0.92)\n\n        # U\n        U = beta + gamma * f_x\n\n        # p_accept\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1743541414.95389
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Intercept parameter representing base utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness gap transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "The total money earned in a trial (in \u00a3)",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_offer": {
      "description": "Derived normalized offer (split_self/combined_earning)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_offer": {
      "description": "Normalized offer computed as split_self divided by combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share computed as token_self divided by total tokens",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap computed as N_offer minus N_share",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap computed as F divided by phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Absolute value of x",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Intercept parameter representing base utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness gap transformation",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta + gamma multiplied by the nonlinear transformation f(x)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted acceptance probability computed via the logistic function applied to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model for responder decision\u2010making that calculates a fairness gap between the offered share and the fair share based on tokens. This gap is scaled and processed through an intricate sequence of nonlinear transformations, sequential modulations with adaptive sine-based and exponential functions, and a hybrid adaptive ReLU-like transformation with leaky behavior for negative signals. The resulting transformed signal is combined with an intercept (beta) and scaled (gamma) to produce a latent utility that is passed through a logistic function to generate acceptance probabilities.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total money earned in a trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_offer\": {\n      \"description\": \"Derived normalized offer (split_self/combined_earning)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self divided by combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self divided by total tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap computed as N_offer minus N_share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap computed as F divided by phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of x\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Intercept parameter representing base utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness gap transformation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta + gamma multiplied by the nonlinear transformation f(x)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model for responder decision\u2010making that calculates a fairness gap between the offered share and the fair share based on tokens. This gap is scaled and processed through an intricate sequence of nonlinear transformations, sequential modulations with adaptive sine-based and exponential functions, and a hybrid adaptive ReLU-like transformation with leaky behavior for negative signals. The resulting transformed signal is combined with an intercept (beta) and scaled (gamma) to produce a latent utility that is passed through a logistic function to generate acceptance probabilities.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making that calculates a fairness gap between the offered share and the fair share based on tokens. This gap is scaled and processed through an intricate sequence of nonlinear transformations, sequential modulations with adaptive sine-based and exponential functions, and a hybrid adaptive ReLU-like transformation with leaky behavior for negative signals. The resulting transformed signal is combined with an intercept (beta) and scaled (gamma) to produce a latent utility that is passed through a logistic function to generate acceptance probabilities.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # N_offer\n        N_offer = split_self / combined_earning\n\n        # N_share\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        # F\n        F = N_offer - N_share\n\n        # x\n        x = F / phi\n\n        # a\n        a = abs(x)\n\n        # T1 to T11\n        T1 = a**(0.5)\n        T2 = math.log(1 + 3.4 * a)\n        T3 = 0.2 * math.atan(1.1 * a)\n        T4 = 0.1 * (1 - math.exp(-a))\n        T5 = 0.05 * (1 - math.exp(-2 * a))\n        T6 = 0.03 * math.tanh(a)\n        T7 = 0.02 * math.sin(0.5 * a)\n        T8 = 0.012 * (1 - math.cos(0.3 * a))\n        T9 = 0.005 * math.exp(-a)\n        T10 = 0.005 * math.sin(2.2 * a)\n        T11 = 0.002 * math.cos(3.0 * a)\n\n        # S\n        S = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\n\n        # S_mod\n        S_mod = S * (1 + 0.012 * math.sin(a + 0.045))\n\n        # Y\n        Y = 1.08 * S_mod\n        Y1 = Y * (1 + 0.008 * math.cos(a + 0.065))\n        Y2 = Y1 * (1 + 0.005 * math.sin(a + 0.115))\n        Y3 = Y2 * (1 + 0.004 * math.cos(a + 0.085))\n        Y4 = Y3 * (1 + 0.006 * math.sin(a + 0.035) * math.cos(a + 0.055))\n        Y5 = Y4 * (1 + 0.003 * math.sin(a + 0.03) * math.cos(a + 0.05))\n\n        # S6\n        S6 = Y5\n\n        # f_adapt\n        if S6 < 0:\n            f_adapt = 0.01 * S6\n        else:\n            f_adapt = min(S6, 1 + math.log(1 + S6))\n\n        # D\n        D = math.exp(-a / 0.1)\n\n        # soft\n        soft = S6 / (1 + abs(S6))\n\n        # Sine_mod\n        Sine_mod = 1 + 0.005 * math.sin(1 / (1 + a))\n\n        # K\n        K = D * soft * Sine_mod\n\n        # Z\n        Z = f_adapt * K + 1e-6\n\n        # f_x\n        f_x = (1 if x >= 0 else -1) * (Z)**(0.92)\n\n        # U\n        U = beta + gamma * f_x\n\n        # p_accept\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.565018315018315,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953525061939434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8507744190113256,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.512139815878133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.860179366815792,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.53908628770428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.000159746614904,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.838529317988467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.630619646763024,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.76699922359149,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7428076060519283,
      "gamma": 6.770905954531806,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.458963982968157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4235739075402258,
      "gamma": 7.998606275190428,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.890964460482866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0491970048465262,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.8438060390993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6347516817463867,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.767908964541842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95350513643336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7250048676443872,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.78496632839197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.2886987495749074e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.8513581932313455e-18,
      "phi": 0.6637967114282529,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4002489602571726,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.32442455012697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.113014556316947,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.933004977814974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7299550440807857,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.481802988039796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0040434498198187,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.58025965335675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.01529605895731351,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.116138080685744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.28105227650378006,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.245451081839775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1578589741782896,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.93367242608947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.747738502656278,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277888422097327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352506193942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.428209589960235,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.89514468656822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1120605991544754,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.853488504943304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9647345954981927,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.36477303678814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6154909926041097,
      "gamma": 1.3071035485241742,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.160338683962244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9593080648276577,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.56194731927138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.486510443718403,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.735549916149374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.48327138394699887,
      "gamma": 8.877237165694414,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.624396094882886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953292431736653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3162568605222026,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.269588029234022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4289282833535228,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.84639879581013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.95899638030642,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.21450709258544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5792699520981316,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.390993999847996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0695747797733994,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.8473422280903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8067421989483152,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.802539118899304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4926580946206018,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.858748284748447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0434204796361923,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.000014544032137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953498366299414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9183271382696302,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.598549272651475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6791889402866921,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.450957572403595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.1435317006822143,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.857838205555417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5451075568708164,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.900028628565135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.8982995382517274,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.948214368207147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.048493421376123,
      "phi": 0.5262522153131405,
      "success": true,
      "log_likelihood": -15.277658664018903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95351190900908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6250650060273674,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -18.277548134513605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5323235306466314,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.664364916390003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9018373733061322,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.533601397717227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352506193942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.6081443595548848,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.910102057308464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953310740822285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2602352419880436,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.22596160620909,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.42407535839463345,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.355051220989157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95336730335865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95349765909837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8648882393420724,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.548271493753063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0303257375416517,
      "gamma": 8.340471924314167,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.934629402568508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8264406277413916,
      "gamma": 4.972010753544289,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.123478917894328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.14170344934017,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953706117696903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6151303569002063,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.32912022058938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95352506193943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5977635881527372,
      "gamma": 9.105252681723256,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.481913659860634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.768216808738156,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953677104610946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.317258573543434,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.69605921054318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6071990893248942,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.434176649458944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953401480830475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1143792090270677,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.040349676687295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.14195424594283,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95348382858848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7271677996538017,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.79482348893954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.083734847336264,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.04095159958559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.5919582531667303,
        "p": 8.798132999514339e-11
      },
      "gamma": {
        "r": 0.13270646220697072,
        "p": 0.1881036001242728
      },
      "phi": {
        "r": -0.046795309452053784,
        "p": 0.6438495844531936
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.66392305094731,
  "bic_results": {
    "average_bic": 53.66392305094731,
    "individual_bics": [
      60.6576069392472,
      59.7748364471246,
      59.828729390776886,
      60.42761545134526,
      60.28455526255131,
      57.66848478130464,
      33.3062773958674,
      56.53248573633407,
      33.3062773958674,
      60.438168893566925,
      60.28637474445202,
      60.657567088235055,
      60.320489472152275,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      59.39940591562227,
      43.305823414830115,
      60.616566770998276,
      59.71416279144792,
      59.91107612208184,
      58.982832976739815,
      59.24145897904788,
      60.61790166754727,
      41.305914211037575,
      49.30555102620774,
      33.30633365956298,
      60.657606939247174,
      60.54084618850477,
      60.45753382525494,
      33.3062773958674,
      57.480102888944614,
      55.071234183292816,
      59.87445145391109,
      56.221656647667075,
      39.30600500724502,
      57.99934900513411,
      60.65714167884164,
      35.30618659965994,
      59.28973287383637,
      58.44335440698859,
      53.17957100053921,
      59.53254481506433,
      60.44524127154894,
      60.355635053166935,
      60.46805338486523,
      54.75058590343261,
      60.657553547967154,
      59.94765536067128,
      59.65247196017552,
      60.46623322647916,
      60.550614072498604,
      60.64698555178262,
      41.305874143406136,
      60.65758063338649,
      47.305653084395544,
      58.07928664814834,
      59.81775961080278,
      60.657606939247174,
      60.570760929985255,
      60.657178297012905,
      59.20248002778651,
      39.30600500724503,
      43.3058234148301,
      59.46065925734665,
      39.306005007245034,
      60.657291422085635,
      60.657552133565076,
      59.84709980287445,
      49.30555102620774,
      60.61981562050535,
      54.99751465115699,
      37.306095803452486,
      60.657969050762134,
      57.40879725654709,
      60.65760693924719,
      59.7143841350896,
      39.30600500724503,
      60.65791102459022,
      60.14267523645469,
      57.61891011428622,
      60.657359777029285,
      54.831256168742925,
      60.65752447254529,
      37.306095803452486,
      60.34020379324741,
      54.83246001453951
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.592\n- gamma: r = 0.133\n- phi: r = -0.047",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning\nN_share = token_self/(token_self+token_opp)\nF = N_offer - N_share\nx = F/phi\na = |x|\nT1 = a^(0.5)\nT2 = ln(1+3.4*a)\nT3 = 0.2*arctan(1.1*a)\nT4 = 0.1*(1-exp(-a))\nT5 = 0.05*(1-exp(-2*a))\nT6 = 0.03*tanh(a)\nT7 = 0.02*sin(0.5*a)\nT8 = 0.012*(1-cos(0.3*a))\nT9 = 0.005*exp(-a)\nT10 = 0.005*sin(2.2*a)\nT11 = 0.002*cos(3.0*a)\nS = 0.01 + T1 + T2 + T3 + T4 + T5 + T6 + T7 + T8 + T9 + T10 + T11\nS_mod = S*(1+0.012*sin(a+0.045))\nY = 1.08*S_mod\nY1 = Y*(1+0.008*cos(a+0.065))\nY2 = Y1*(1+0.005*sin(a+0.115))\nY3 = Y2*(1+0.004*cos(a+0.085))\nY4 = Y3*(1+0.006*sin(a+0.035)*cos(a+0.055))\nY5 = Y4*(1+0.003*sin(a+0.03)*cos(a+0.05))\nS6 = Y5\nf_adapt = { 0.01*S6   if S6 < 0 ;  min(S6, 1+ln(1+S6))   if S6 >= 0 }\nD = exp(-a/0.1)\nsoft = S6/(1+|S6|)\nSine_mod = 1+0.005*sin(1/(1+a))\nK = D * soft * Sine_mod\nZ = f_adapt * K + 1e-6\nf_x = sign(x)*(Z)^(0.92)\nU = beta + gamma*f_x\np_accept = 1/(1+exp(-U))\nSummary: A nonlinear utility model for responder decision\u2010making that calculates a fairness gap between the offered share and the fair share based on tokens. This gap is scaled and processed through an intricate sequence of nonlinear transformations, sequential modulations with adaptive sine-based and exponential functions, and a hybrid adaptive ReLU-like transformation with leaky behavior for negative signals. The resulting transformed signal is combined with an intercept (beta) and scaled (gamma) to produce a latent utility that is passed through a logistic function to generate acceptance probabilities.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.66392305094731\nOverall Accuracy: 0.5650\n\nParameter Recovery:\n- beta: r = 0.592\n- gamma: r = 0.133\n- phi: r = -0.047"
  ]
}