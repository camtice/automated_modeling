{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 55, maintain the core structure of the previous nonlinear blending strategy but push the creativity further by encouraging the inclusion of an additional adaptive modulation stage. In this new version, in addition to the established extra adaptive sine modulation based on 1/(1+a), incorporate an extra multiplicative factor that uses a smooth nonlinear function such as a logistic or hyperbolic tangent transformation of the reciprocal (e.g., tanh(1/(1+a))) to further control sensitivity at extreme gap values. Also, encourage exploring additional subtle offsets or damping factors to improve the calibration of negative signals, perhaps by introducing a tiny learnable constant (within a fixed range) or a multiplicative bias term that enhances recovery and reduces overfitting. Retain exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]) and ensure that all components are robust to small and very large fairness gap signals, while promoting smooth transitions in the nonlinear blending stages.\n</think>\n\nDevelop your computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)].\n8. Form an Intermediate_Signal from the sum.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce a hybrid adaptive ReLU-like transformation that is leaky for negative signals:\n\u2003\u2003Define f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n12. Further blend the signal by multiplying by an extra composite factor, the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 An adaptive sine-based modulation: [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 And an additional nonlinear damping factor such as tanh(1/(1+a)) for extra smoothness.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of all sequential modulations, the adaptive ReLU-like output f_adapt, the extra exponential\u2013softsign factor, the reciprocal-based sine modulation, and the additional tanh(1/(1+a)) damping) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative, out-of-the-box integration of these dynamic nonlinear blending stages (including the extra reciprocal-based damping modulation) to enhance predictive accuracy, lower BIC, and improve robust parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 55, maintain the core structure of the previous nonlinear blending strategy but push the creativity further by encouraging the inclusion of an additional adaptive modulation stage. In this new version, in addition to the established extra adaptive sine modulation based on 1/(1+a), incorporate an extra multiplicative factor that uses a smooth nonlinear function such as a logistic or hyperbolic tangent transformation of the reciprocal (e.g., tanh(1/(1+a))) to further control sensitivity at extreme gap values. Also, encourage exploring additional subtle offsets or damping factors to improve the calibration of negative signals, perhaps by introducing a tiny learnable constant (within a fixed range) or a multiplicative bias term that enhances recovery and reduces overfitting. Retain exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]) and ensure that all components are robust to small and very large fairness gap signals, while promoting smooth transitions in the nonlinear blending stages.\n</think>\n\nDevelop your computational model for responder decision-making as follows:\n\n1. Compute the normalized offer:\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\u2003\u2003F = N_offer \u2212 N_share.\n4. Scale the gap by the learnable scaling factor phi (\u03d5 \u2208 [0.5, 1.5]):\u2003\u2003x = F / phi.\n5. Let a = |x|. Compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these terms and add a constant delta = 0.01.\n7. Modulate this sum with the factor [1 + 0.012 \u00d7 sin(a + 0.045)].\n8. Form an Intermediate_Signal from the sum.\n9. Multiply the Intermediate_Signal by a fixed constant C (set C = 1.08).\n10. Apply sequential modulation stages with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n11. Introduce a hybrid adaptive ReLU-like transformation that is leaky for negative signals:\n\u2003\u2003Define f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n12. Further blend the signal by multiplying by an extra composite factor, the product of:\n\u2003\u2003\u2022 An exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 An adaptive sine-based modulation: [1 + 0.005 \u00d7 sin(1/(1+a))],\n\u2003\u2003\u2022 And an additional nonlinear damping factor such as tanh(1/(1+a)) for extra smoothness.\n13. Add a small constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the fixed exponent E = 0.92.\n15. Define the final nonlinear transformation as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of all sequential modulations, the adaptive ReLU-like output f_adapt, the extra exponential\u2013softsign factor, the reciprocal-based sine modulation, and the additional tanh(1/(1+a)) damping) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability using the logistic function:\u2003\u2003p_accept = 1/(1 + exp(\u2212U)).\n\nMaintain exactly three learnable parameters:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10];\n\u2003\u2003\u2022 gamma \u2208 [0, 10];\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5].\n\nEncourage creative, out-of-the-box integration of these dynamic nonlinear blending stages (including the extra reciprocal-based damping modulation) to enhance predictive accuracy, lower BIC, and improve robust parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in a trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self/combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self/(token_self+token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap; F divided by the parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Core nonlinear sum of signal components based on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod\": {\n      \"description\": \"Nonlinear sum modulated by a sine-based factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Signal after sequential modulation stages applied to S_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Z_adapt\": {\n      \"description\": \"Signal after applying the hybrid adaptive ReLU-like transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Composite\": {\n      \"description\": \"Composite multiplicative factor combining exponential decay, softsign, reciprocal sine modulation and tanh damping\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended\": {\n      \"description\": \"Signal after blending Z_adapt with the composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended_offset\": {\n      \"description\": \"Blended signal with a tiny constant offset for stability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_signal\": {\n      \"description\": \"Final nonlinear transformed signal after compression (exponentiation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f_signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability after applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThe model computes a fairness gap by normalizing the participant\u2019s offer and contribution, then scales it using a learnable parameter phi. A series of nonlinear transformations and sequential modulations\u2014including sine, logarithmic, arctan, exponential, and hyperbolic functions\u2014are applied to the absolute gap, followed by a hybrid adaptive ReLU-like transformation and an extra composite factor that blends exponential decay, softsign, reciprocal sine modulation, and tanh damping. The resulting compressed signal is combined with the learnable parameters beta and gamma to produce a latent utility, which is transformed via a logistic function into the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in a trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self/combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self/(token_self+token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap; F divided by the parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Core nonlinear sum of signal components based on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod\": {\n      \"description\": \"Nonlinear sum modulated by a sine-based factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Signal after sequential modulation stages applied to S_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Z_adapt\": {\n      \"description\": \"Signal after applying the hybrid adaptive ReLU-like transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Composite\": {\n      \"description\": \"Composite multiplicative factor combining exponential decay, softsign, reciprocal sine modulation and tanh damping\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended\": {\n      \"description\": \"Signal after blending Z_adapt with the composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended_offset\": {\n      \"description\": \"Blended signal with a tiny constant offset for stability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_signal\": {\n      \"description\": \"Final nonlinear transformed signal after compression (exponentiation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f_signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability after applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 1)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp)\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        S = a**(0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a) + 0.01\n        S_mod = S * (1 + 0.012 * math.sin(a + 0.045))\n        Intermediate = 1.08 * S_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        if Intermediate < 0:\n            Z_adapt = 0.01 * Intermediate\n        else:\n            Z_adapt = min(Intermediate, 1 + math.log(1 + Intermediate))\n\n        Composite = math.exp(-a / 0.1) * (Z_adapt / (1 + abs(Z_adapt))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.tanh(1 / (1 + a))\n        Blended = Z_adapt * Composite\n        Blended_offset = Blended + 1e-6\n        f_signal = (Blended_offset / abs(Blended_offset)) * (abs(Blended_offset)**0.92)\n\n        U = beta + gamma * f_signal\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541466.838359
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable scaling factor applied to the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in a trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "N_offer": {
      "description": "Normalized offer computed as split_self/combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "N_share": {
      "description": "Normalized fair share computed as token_self/(token_self+token_opp)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "Fairness gap: difference between normalized offer and fair share",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "x": {
      "description": "Scaled fairness gap; F divided by the parameter phi",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Absolute value of the scaled fairness gap",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S": {
      "description": "Core nonlinear sum of signal components based on a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "S_mod": {
      "description": "Nonlinear sum modulated by a sine-based factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Intermediate": {
      "description": "Signal after sequential modulation stages applied to S_mod",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Z_adapt": {
      "description": "Signal after applying the hybrid adaptive ReLU-like transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Composite": {
      "description": "Composite multiplicative factor combining exponential decay, softsign, reciprocal sine modulation and tanh damping",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Blended": {
      "description": "Signal after blending Z_adapt with the composite factor",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Blended_offset": {
      "description": "Blended signal with a tiny constant offset for stability",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_signal": {
      "description": "Final nonlinear transformed signal after compression (exponentiation)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Learnable base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter modulating the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable scaling factor applied to the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and gamma*f_signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted acceptance probability after applying the logistic function to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes a fairness gap by normalizing the participant\u2019s offer and contribution, then scales it using a learnable parameter phi. A series of nonlinear transformations and sequential modulations\u2014including sine, logarithmic, arctan, exponential, and hyperbolic functions\u2014are applied to the absolute gap, followed by a hybrid adaptive ReLU-like transformation and an extra composite factor that blends exponential decay, softsign, reciprocal sine modulation, and tanh damping. The resulting compressed signal is combined with the learnable parameters beta and gamma to produce a latent utility, which is transformed via a logistic function into the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in a trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N_offer\": {\n      \"description\": \"Normalized offer computed as split_self/combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"N_share\": {\n      \"description\": \"Normalized fair share computed as token_self/(token_self+token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"Fairness gap: difference between normalized offer and fair share\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"x\": {\n      \"description\": \"Scaled fairness gap; F divided by the parameter phi\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Absolute value of the scaled fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S\": {\n      \"description\": \"Core nonlinear sum of signal components based on a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"S_mod\": {\n      \"description\": \"Nonlinear sum modulated by a sine-based factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Intermediate\": {\n      \"description\": \"Signal after sequential modulation stages applied to S_mod\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Z_adapt\": {\n      \"description\": \"Signal after applying the hybrid adaptive ReLU-like transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Composite\": {\n      \"description\": \"Composite multiplicative factor combining exponential decay, softsign, reciprocal sine modulation and tanh damping\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended\": {\n      \"description\": \"Signal after blending Z_adapt with the composite factor\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Blended_offset\": {\n      \"description\": \"Blended signal with a tiny constant offset for stability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_signal\": {\n      \"description\": \"Final nonlinear transformed signal after compression (exponentiation)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter modulating the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable scaling factor applied to the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and gamma*f_signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted acceptance probability after applying the logistic function to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThe model computes a fairness gap by normalizing the participant\u2019s offer and contribution, then scales it using a learnable parameter phi. A series of nonlinear transformations and sequential modulations\u2014including sine, logarithmic, arctan, exponential, and hyperbolic functions\u2014are applied to the absolute gap, followed by a hybrid adaptive ReLU-like transformation and an extra composite factor that blends exponential decay, softsign, reciprocal sine modulation, and tanh damping. The resulting compressed signal is combined with the learnable parameters beta and gamma to produce a latent utility, which is transformed via a logistic function into the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))\nSummary: The model computes a fairness gap by normalizing the participant\u2019s offer and contribution, then scales it using a learnable parameter phi. A series of nonlinear transformations and sequential modulations\u2014including sine, logarithmic, arctan, exponential, and hyperbolic functions\u2014are applied to the absolute gap, followed by a hybrid adaptive ReLU-like transformation and an extra composite factor that blends exponential decay, softsign, reciprocal sine modulation, and tanh damping. The resulting compressed signal is combined with the learnable parameters beta and gamma to produce a latent utility, which is transformed via a logistic function into the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 1)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp)\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n\n        S = a**(0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a) + 0.01\n        S_mod = S * (1 + 0.012 * math.sin(a + 0.045))\n        Intermediate = 1.08 * S_mod * (1 + 0.008 * math.cos(a + 0.065)) * (1 + 0.005 * math.sin(a + 0.115)) * (1 + 0.004 * math.cos(a + 0.085)) * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))) * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        if Intermediate < 0:\n            Z_adapt = 0.01 * Intermediate\n        else:\n            Z_adapt = min(Intermediate, 1 + math.log(1 + Intermediate))\n\n        Composite = math.exp(-a / 0.1) * (Z_adapt / (1 + abs(Z_adapt))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.tanh(1 / (1 + a))\n        Blended = Z_adapt * Composite\n        Blended_offset = Blended + 1e-6\n        f_signal = (Blended_offset / abs(Blended_offset)) * (abs(Blended_offset)**0.92)\n\n        U = beta + gamma * f_signal\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5576923076923077,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6900435911289953,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.56295694043432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.276209183896774,
      "gamma": 10.0,
      "phi": 0.6164483535741815,
      "success": true,
      "log_likelihood": -24.147866184132763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.507540809355043,
      "success": true,
      "log_likelihood": -24.953301410317255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.181649195084511,
      "gamma": 10.0,
      "phi": 0.5475482264417568,
      "success": true,
      "log_likelihood": -24.743643935388043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.23860445886507262,
      "gamma": 10.0,
      "phi": 0.6694107897403612,
      "success": true,
      "log_likelihood": -22.87387974057346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.04515712763010153,
      "gamma": 10.0,
      "phi": 0.6664428939212469,
      "success": true,
      "log_likelihood": -22.23804773550633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.828489209802116,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.951887941912595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2131783611146645,
      "gamma": 10.0,
      "phi": 0.5442543785169938,
      "success": true,
      "log_likelihood": -24.7572003091352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.332671202691913e-16,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.816234578821939,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.886063851493493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.27764278938444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.4030221897498527,
      "phi": 1.1332237897749862,
      "success": true,
      "log_likelihood": -16.27757385318017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.2204398468608075,
      "success": true,
      "log_likelihood": -15.277522935525202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277642789384444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0493351600754568,
      "gamma": 10.0,
      "phi": 0.5899358940090641,
      "success": true,
      "log_likelihood": -23.96565182880885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 0.9694817981981687,
      "success": true,
      "log_likelihood": -16.277501541757804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.2962651882324057,
      "phi": 0.6990560416163524,
      "success": true,
      "log_likelihood": -24.95354182660534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5054432619438871,
      "gamma": 10.0,
      "phi": 0.5968198019368092,
      "success": true,
      "log_likelihood": -24.47057553621437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.432492896569616,
      "gamma": 2.839640202441696,
      "phi": 1.0509802141543372,
      "success": true,
      "log_likelihood": -24.952805744899248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7860704868984945,
      "gamma": 10.0,
      "phi": 0.6015224005968495,
      "success": true,
      "log_likelihood": -23.621716580831958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0809770947465203,
      "gamma": 10.0,
      "phi": 0.5057204612597566,
      "success": true,
      "log_likelihood": -24.1103474175625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953569126258273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.259390287368857,
      "success": true,
      "log_likelihood": -15.277532574983754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.557487419793931,
      "gamma": 10.0,
      "phi": 0.6819035704588433,
      "success": true,
      "log_likelihood": -19.27585442701916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.131652213183491,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277671372208468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.893361981585416,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95340459523903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953384231724833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -11.277642789384442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.17384896162738006,
      "gamma": 10.0,
      "phi": 0.6298652258994306,
      "success": true,
      "log_likelihood": -23.146964259371664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.3429342867220315,
      "gamma": 10.0,
      "phi": 0.7816564026110913,
      "success": true,
      "log_likelihood": -21.60122272482037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.62360190613771,
      "gamma": 10.0,
      "phi": 0.5266936204075069,
      "success": true,
      "log_likelihood": -24.501914410270984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.12972038132272276,
      "gamma": 10.0,
      "phi": 0.5747885399454304,
      "success": true,
      "log_likelihood": -22.37781207914772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277570562278802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.48982623139399856,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.457843551166548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.6182122855317361,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -12.277625576555806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.240017889710446,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.40482853622479,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5210720300595997,
      "gamma": 10.0,
      "phi": 0.6047539557714419,
      "success": true,
      "log_likelihood": -23.42534126267028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6540089824591628,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -21.20358871814965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4981728178015494,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.51022331083399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.222844245419694,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95345943316834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.980400733081237,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.905261814906325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.660252880345716,
      "gamma": 10.0,
      "phi": 1.2508255414940324,
      "success": true,
      "log_likelihood": -24.87740026511054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8771983445562481,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -22.012593124619126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4804802777933281,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.497282263479683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4387734099944336,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.44380310563311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.204430248238587,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953450824550156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953393741246508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.8809397109279438,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953667382002585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.9573981214191263,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -15.277637349167135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.325873760318099,
      "phi": 0.7363414238913226,
      "success": true,
      "log_likelihood": -18.277486708486126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5335884729388837,
      "gamma": 10.0,
      "phi": 0.5735640092598152,
      "success": true,
      "log_likelihood": -23.58918310874008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.656074665564776,
      "gamma": 10.0,
      "phi": 0.5057651835558793,
      "success": true,
      "log_likelihood": -24.537521801464095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.828585140587902,
      "phi": 1.0355432290877722,
      "success": true,
      "log_likelihood": -24.95334436974565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.99553298778998e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0804500621756026,
      "gamma": 10.0,
      "phi": 0.5034451165860694,
      "success": true,
      "log_likelihood": -24.111270550634405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277571817278929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.0437650233162183,
      "success": true,
      "log_likelihood": -16.277510310571266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2359681884575089,
      "gamma": 10.0,
      "phi": 0.5810204110723339,
      "success": true,
      "log_likelihood": -24.3339925052781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.27757245947442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 1.0240313680598627,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5358976991040365,
      "gamma": 10.0,
      "phi": 0.6142041458646109,
      "success": true,
      "log_likelihood": -24.497100997015917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.2193819033682525,
      "phi": 0.9598140560858252,
      "success": true,
      "log_likelihood": -19.277458426270783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0291791474512757,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.758484795706945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5357533725914051,
      "gamma": 10.0,
      "phi": 0.7004261564105826,
      "success": true,
      "log_likelihood": -21.8168172833386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277586754335228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5208792033922841,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.863308529313812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.427063039792146,
      "gamma": 6.139020114697557,
      "phi": 0.8982452694886646,
      "success": true,
      "log_likelihood": -24.896889818446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -14.277575302359885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9473690029031303,
      "gamma": 10.0,
      "phi": 0.720757525635939,
      "success": true,
      "log_likelihood": -24.69413316277321,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5320423041899796,
      "gamma": 10.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -23.907059879592747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6395358442566873,
      "gamma": 10.0,
      "phi": 0.5525178391880071,
      "success": true,
      "log_likelihood": -21.86530471971893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.779924077316185,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -24.95371737315803,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -13.277584002707412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.9907658822181475,
      "gamma": 10.0,
      "phi": 0.8367758634630996,
      "success": true,
      "log_likelihood": -24.909637195307305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8773955892286474,
      "gamma": 10.0,
      "phi": 0.6615498969048214,
      "success": true,
      "log_likelihood": -22.05239810625514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.673130844523965,
        "p": 1.695557521362747e-14
      },
      "gamma": {
        "r": 0.038480364936886745,
        "p": 0.7038663254332793
      },
      "phi": {
        "r": -0.16937949110860512,
        "p": 0.09204727921708675
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.61347843409751,
  "bic_results": {
    "average_bic": 53.61347843409751,
    "individual_bics": [
      60.6585157558939,
      59.876470696236964,
      59.04628918363386,
      60.657159636002845,
      60.23784468614441,
      56.498316296515256,
      33.305842394137215,
      55.226652286381,
      33.305842394137215,
      60.65433269919352,
      60.26495743363873,
      60.65842496015652,
      60.52268451835532,
      33.305842394137215,
      33.305842394137215,
      33.305842394137215,
      33.305842394137215,
      43.30570452172867,
      41.30560268641874,
      33.305842394137215,
      58.68186047298603,
      43.30555989888394,
      60.657640468579004,
      59.691707887797065,
      60.65616830516683,
      57.99398997703224,
      58.97125165049333,
      60.65769506788487,
      41.30562196533584,
      49.30226566940665,
      33.30589955978527,
      60.6585157558939,
      60.657366005846384,
      60.65732527881799,
      33.305842394137215,
      57.044485334111656,
      53.953002265009076,
      59.754385635910296,
      55.506180973663774,
      39.305697939925935,
      57.66624391770142,
      60.65806177720697,
      35.30580796847994,
      59.56021388781791,
      57.60123934070889,
      53.157734251667634,
      59.77100343703631,
      60.65747568170501,
      60.56108044518098,
      60.50535734558942,
      54.77574306460659,
      60.65833416441913,
      59.74512134232769,
      59.638163026634544,
      60.65745846446865,
      60.65734429786134,
      60.6578915793735,
      41.3058315137026,
      60.65842496015652,
      47.30553023234059,
      57.92892303284849,
      59.82560041829652,
      60.6585157558939,
      60.65724555485963,
      60.65806177720697,
      58.973097916637144,
      39.30570044992619,
      43.30557743651086,
      59.418541825924535,
      39.30570173431717,
      60.65842496015652,
      60.65833416441913,
      59.74475880940017,
      49.305473667909894,
      60.267526406782224,
      54.38419138204553,
      37.30573032403879,
      60.658606551631294,
      58.47717387399595,
      60.6585157558939,
      60.544336452260325,
      39.3057074200881,
      60.65842496015652,
      60.13882314091475,
      58.56467657455383,
      60.65842496015651,
      54.4811662548062,
      60.6579915616844,
      37.305724820783155,
      60.569831205982936,
      54.85535302787861
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.673\n- gamma: r = 0.038\n- phi: r = -0.169",
  "previous_models": [
    "Specification: N_offer = split_self/combined_earning;\nN_share = token_self/(token_self+token_opp);\nF = N_offer - N_share;\nx = F/phi;\na = |x|;\nS = a^(0.5) + ln(1+3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1-exp(-a)) + 0.05*(1-exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1-cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a) + 0.01;\nS_mod = S*(1+0.012*sin(a+0.045));\nIntermediate = 1.08 * S_mod * (1+0.008*cos(a+0.065)) * (1+0.005*sin(a+0.115)) * (1+0.004*cos(a+0.085)) * (1+0.006*(sin(a+0.035)*cos(a+0.055))) * (1+0.003*(sin(a+0.03)*cos(a+0.05)));\nf_adapt(Intermediate) = { 0.01*Intermediate, if Intermediate < 0; min(Intermediate, 1+ln(1+Intermediate)), if Intermediate \u2265 0 };\nZ_adapt = f_adapt(Intermediate);\nComposite = exp(-a/0.1) * (Z_adapt/(1+|Z_adapt|)) * (1+0.005*sin(1/(1+a))) * tanh(1/(1+a));\nBlended = Z_adapt * Composite;\nBlended_offset = Blended + 1e-6;\nf_signal = sign(Blended_offset)*(|Blended_offset|)^(0.92);\nU = beta + gamma*f_signal;\np_accept = 1/(1+exp(-U))\nSummary: The model computes a fairness gap by normalizing the participant\u2019s offer and contribution, then scales it using a learnable parameter phi. A series of nonlinear transformations and sequential modulations\u2014including sine, logarithmic, arctan, exponential, and hyperbolic functions\u2014are applied to the absolute gap, followed by a hybrid adaptive ReLU-like transformation and an extra composite factor that blends exponential decay, softsign, reciprocal sine modulation, and tanh damping. The resulting compressed signal is combined with the learnable parameters beta and gamma to produce a latent utility, which is transformed via a logistic function into the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.61347843409751\nOverall Accuracy: 0.5577\n\nParameter Recovery:\n- beta: r = 0.673\n- gamma: r = 0.038\n- phi: r = -0.169"
  ]
}