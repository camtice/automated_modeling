{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nIn this new run, we want to further improve the model\u2019s accuracy, lower BIC, and enhance parameter recovery. Continue using exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Retain the core structure where the fairness gap is normalized and transformed through a series of fixed nonlinear components and sequential modulations. Now, add an additional modulation stage that includes a squared tanh damping function\u2014such as [tanh(1/(1+a))]^2\u2014in the product stage to further smooth extreme gap values. Also, integrate an extra learnable multiplicative offset term (within a very narrow fixed range, e.g. [0.999, 1.001]) into the extra blending stage to help stabilize negative signals and prevent overfitting. Encourage creativity beyond the obvious by suggesting that alternative nonlinear functions (for example, a logistic function or softplus variant applied to 1/(1+a)) could also be considered for controlling signal extremes. The goal is to ensure that the overall transformation is robust over the entire range of a, with smooth transitions even when a is very small or very large. Do not include details from previous interactions\u2014simply state the new instructions clearly.\n</think>\nFor run 57 of 200, please design a computational model for responder decision\u2010making as follows:\n1. Calculate the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Calculate the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap by phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x|, and compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate this sum by [1 + 0.012 \u00d7 sin(a + 0.045)] to produce an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply a hybrid adaptive ReLU-like transformation defined as:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01\u00d7z, else min(z, 1+ln(1+z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying it by a composite factor that is the product of:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1+|z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1+0.005\u00d7sin(1/(1+a))],\n\u2003\u2003\u2022 A nonlinear damping factor: tanh(1/(1+a)),\n\u2003\u2003\u2022 And an additional squared damping term: [tanh(1/(1+a))]^2.\n12. Incorporate a tiny learnable multiplicative offset (with fixed bounds e.g. within [0.999, 1.001]) in this extra blending stage.\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of all sequential modulations, the adaptive ReLU-like output, the extra exponential\u2013softsign blend with the squared damping and the extra learnable offset) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1/(1+exp(\u2212U)).\n\nEnsure the model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage innovative integration of the additional modulation stage and extra learnable offset to dynamically control extreme gap signals, ensuring smooth transitions across all gap sizes and robust parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nIn this new run, we want to further improve the model\u2019s accuracy, lower BIC, and enhance parameter recovery. Continue using exactly three learnable parameters (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]). Retain the core structure where the fairness gap is normalized and transformed through a series of fixed nonlinear components and sequential modulations. Now, add an additional modulation stage that includes a squared tanh damping function\u2014such as [tanh(1/(1+a))]^2\u2014in the product stage to further smooth extreme gap values. Also, integrate an extra learnable multiplicative offset term (within a very narrow fixed range, e.g. [0.999, 1.001]) into the extra blending stage to help stabilize negative signals and prevent overfitting. Encourage creativity beyond the obvious by suggesting that alternative nonlinear functions (for example, a logistic function or softplus variant applied to 1/(1+a)) could also be considered for controlling signal extremes. The goal is to ensure that the overall transformation is robust over the entire range of a, with smooth transitions even when a is very small or very large. Do not include details from previous interactions\u2014simply state the new instructions clearly.\n</think>\nFor run 57 of 200, please design a computational model for responder decision\u2010making as follows:\n1. Calculate the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Calculate the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap by phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x|, and compute the following core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 (1 \u2212 exp(\u2212a))\n\u2003\u2003\u2022 0.05 \u00d7 (1 \u2212 exp(\u22122 \u00d7 a))\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 (1 \u2212 cos(0.3 \u00d7 a))\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate this sum by [1 + 0.012 \u00d7 sin(a + 0.045)] to produce an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply a hybrid adaptive ReLU-like transformation defined as:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01\u00d7z, else min(z, 1+ln(1+z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying it by a composite factor that is the product of:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1+|z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1+0.005\u00d7sin(1/(1+a))],\n\u2003\u2003\u2022 A nonlinear damping factor: tanh(1/(1+a)),\n\u2003\u2003\u2022 And an additional squared damping term: [tanh(1/(1+a))]^2.\n12. Incorporate a tiny learnable multiplicative offset (with fixed bounds e.g. within [0.999, 1.001]) in this extra blending stage.\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (product of all sequential modulations, the adaptive ReLU-like output, the extra exponential\u2013softsign blend with the squared damping and the extra learnable offset) + 1e-6 ]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Convert U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1/(1+exp(\u2212U)).\n\nEnsure the model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Encourage innovative integration of the additional modulation stage and extra learnable offset to dynamically control extreme gap signals, ensuring smooth transitions across all gap sizes and robust parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Additive bias parameter in the latent utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Tiny multiplicative offset in the extra blending stage to stabilize negative signals\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accept response obtained via a logistic transform of the latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA comprehensive nonlinear utility model for responder decision\u2010making that computes a normalized fairness gap and transforms it via a series of fixed nonlinear components, sequential modulations, an adaptive ReLU-like function, and an extra blending stage incorporating a squared tanh damping term and a tiny learnable multiplicative offset. The latent utility U is then generated using an additive bias (beta) and a scaling parameter (gamma) alongside the normalized gap modulated by a fairness normalization parameter (phi); U is converted to an acceptance probability p_accept via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi', 'offset_factor']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount earned in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Additive bias parameter in the latent utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Tiny multiplicative offset in the extra blending stage to stabilize negative signals\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accept response obtained via a logistic transform of the latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1, offset_factor=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Ensure non-zero to avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        \n        core_sum = a**(0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a) + 0.01\n        M1 = 1 + 0.012 * math.sin(a + 0.045)\n        I = core_sum * M1 * 1.08\n        I1 = I * (1 + 0.008 * math.cos(a + 0.065))\n        I2 = I1 * (1 + 0.005 * math.sin(a + 0.115))\n        I3 = I2 * (1 + 0.004 * math.cos(a + 0.085))\n        I4 = I3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        I5 = I4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        A = 0.01 * I5 if I5 < 0 else min(I5, 1 + math.log(1 + I5))\n        Blend = math.exp(-a / 0.1) * (A / (1 + abs(A))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.tanh(1 / (1 + a)) * (math.tanh(1 / (1 + a)))**2\n        Final = A * Blend * offset_factor + 1e-6\n        f_val = Final**(0.92)\n        f_x = (1 if x >= 0 else -1) * f_val  #sign(x)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n```",
      "timestamp": 1743541611.3729868
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Additive bias parameter in the latent utility function",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Normalization parameter for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "offset_factor": {
      "description": "Tiny multiplicative offset in the extra blending stage to stabilize negative signals",
      "range": {
        "min": 0.999,
        "max": 1.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount earned in the trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Additive bias parameter in the latent utility function",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter modulating the nonlinear transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Normalization parameter for the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "offset_factor": {
      "description": "Tiny multiplicative offset in the extra blending stage to stabilize negative signals",
      "range": {
        "min": 0.999,
        "max": 1.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "p_accept": {
      "description": "Predicted probability of accept response obtained via a logistic transform of the latent utility",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A comprehensive nonlinear utility model for responder decision\u2010making that computes a normalized fairness gap and transforms it via a series of fixed nonlinear components, sequential modulations, an adaptive ReLU-like function, and an extra blending stage incorporating a squared tanh damping term and a tiny learnable multiplicative offset. The latent utility U is then generated using an additive bias (beta) and a scaling parameter (gamma) alongside the normalized gap modulated by a fairness normalization parameter (phi); U is converted to an acceptance probability p_accept via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Additive bias parameter in the latent utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter modulating the nonlinear transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter for the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Tiny multiplicative offset in the extra blending stage to stabilize negative signals\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accept response obtained via a logistic transform of the latent utility\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA comprehensive nonlinear utility model for responder decision\u2010making that computes a normalized fairness gap and transforms it via a series of fixed nonlinear components, sequential modulations, an adaptive ReLU-like function, and an extra blending stage incorporating a squared tanh damping term and a tiny learnable multiplicative offset. The latent utility U is then generated using an additive bias (beta) and a scaling parameter (gamma) alongside the normalized gap modulated by a fairness normalization parameter (phi); U is converted to an acceptance probability p_accept via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))\nSummary: A comprehensive nonlinear utility model for responder decision\u2010making that computes a normalized fairness gap and transforms it via a series of fixed nonlinear components, sequential modulations, an adaptive ReLU-like function, and an extra blending stage incorporating a squared tanh damping term and a tiny learnable multiplicative offset. The latent utility U is then generated using an additive bias (beta) and a scaling parameter (gamma) alongside the normalized gap modulated by a fairness normalization parameter (phi); U is converted to an acceptance probability p_accept via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1, offset_factor=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Ensure non-zero to avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning else 0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) else 0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        \n        core_sum = a**(0.5) + math.log(1 + 3.4 * a) + 0.2 * math.atan(1.1 * a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2 * a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5 * a) + 0.012 * (1 - math.cos(0.3 * a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2 * a) + 0.002 * math.cos(3.0 * a) + 0.01\n        M1 = 1 + 0.012 * math.sin(a + 0.045)\n        I = core_sum * M1 * 1.08\n        I1 = I * (1 + 0.008 * math.cos(a + 0.065))\n        I2 = I1 * (1 + 0.005 * math.sin(a + 0.115))\n        I3 = I2 * (1 + 0.004 * math.cos(a + 0.085))\n        I4 = I3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        I5 = I4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        A = 0.01 * I5 if I5 < 0 else min(I5, 1 + math.log(1 + I5))\n        Blend = math.exp(-a / 0.1) * (A / (1 + abs(A))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.tanh(1 / (1 + a)) * (math.tanh(1 / (1 + a)))**2\n        Final = A * Blend * offset_factor + 1e-6\n        f_val = Final**(0.92)\n        f_x = (1 if x >= 0 else -1) * f_val  #sign(x)\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5711233211233211,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95375988458182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9124222814707124,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.884325655777335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5878646884252556,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.846225058663077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95335256773092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.78899720389007,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953333710407165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.38652992739266373,
      "gamma": 3.3409533382481507,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.542600176375522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.369909005155584,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8147988374361895,
      "gamma": 0.0,
      "phi": 1.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -22.91451005243946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1486288094456032,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277866196476682,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.391168196428925,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953381210286015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.602313968316866,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953373538564456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953728509411057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95334399822187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.562053486790748,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277885894131016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.44521251787399097,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.27786253844838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.119043205566312,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277871461368417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.335386976431794,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277884481196455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6373811296194645,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -16.277636460852957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.49815166022037e-18,
      "phi": 1.3124601148355033,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.966108522309509,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277909072962087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8929669058883132,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.64566598936488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.8123501170473186,
      "phi": 0.7069525529498398,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -16.27763890008436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.747276305207678,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953445516814025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3832788739118111,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.797717913431637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.195768215949149,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.912600218525554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4014677645476223,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.386979387921844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8052778279705708,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.592608958419266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95348518795593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.5242236225852296,
      "phi": 1.2148726852846403,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -15.277683747276244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.8375272180558637,
      "phi": 1.1097875002318023,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -19.277510251271053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2824605450923187,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277861710626588,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953759884581828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.948437897329532,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953360367330465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953373496994097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.627201779471178,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5576884588956383,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.480513044333605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.522715533649483,
      "gamma": 0.0,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -22.157938161645916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.225904440370874,
      "gamma": 6.747278602965442,
      "phi": 1.3470169563064975,
      "offset_factor": 0.9995849137745209,
      "success": true,
      "log_likelihood": -24.953026197226727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0735489406963739,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -22.866666176276663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0873919986168815,
      "phi": 1.0982409103841102,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -14.277724867289361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.10736009165166908,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.89394663386338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953545786945565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.498776087746849,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -12.27783849683707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7884063978698663,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.581503511649537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.07967166176695192,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.012743443267606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.7196424021568144,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -21.248494734771686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.270572801944695,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.76166217854765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953368700690504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.659956753699975,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953359345455905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9014630871110159,
      "gamma": 5.706680232215177,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.896565713424323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6382991728782625,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -22.086245054542147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95370397079084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4832937187370008,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.827462629915722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6787999335274819,
      "gamma": 0.0,
      "phi": 1.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -24.45095758268979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.368652289481659,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95339220297859,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953431426383634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.333123673966362,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95360314782517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.399636608190054,
      "phi": 0.5625480327419233,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -15.27766884041314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953733116629728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.495968589840115,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -18.277564585129113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.10094923015819561,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.91143893682284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.001496155936013,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.894748447673145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953759884581817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.9649023463191835,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95336028936387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.9535584294683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7950592706158025,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.584766567812665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.36778921176413,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -14.277760807611363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.560440590047223,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -16.277682834420695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8451801215064508,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.62030933207676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.6541890044263883,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -14.277737197508024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95367001265701,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953703211931714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4743391389766445,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.822565238041207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.18569401848896555,
      "phi": 1.0967145469458166,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -19.277497804680458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.37815315035234,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.950258602895357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6427369114046761,
      "gamma": 4.3245338077950395,
      "phi": 1.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -22.153084392579373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.1587043707933324,
      "phi": 0.5,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -13.277775429359545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95383310606943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.1361744004047485,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.739826861506035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95375988458182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2245488067204446,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.74422755818818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.3290401784100085,
      "phi": 0.602699351891664,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -14.27772515073307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95378016611332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.036961717550475,
      "gamma": 9.917395021454356,
      "phi": 1.4887273438991517,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.951992860430444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.1348199798636142,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -23.77406401541219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95368927088249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7155756025032145,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -22.117162990710604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.953605342466165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.479150024419449e-18,
      "phi": 1.4279300357767546,
      "offset_factor": 0.999,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.0796074877018,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -24.95331154050078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.659189853354865,
      "gamma": 10.0,
      "phi": 1.5,
      "offset_factor": 1.001,
      "success": true,
      "log_likelihood": -22.09974727581769,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7220402318652921,
        "p": 2.312025279471685e-17
      },
      "gamma": {
        "r": -0.09993556089292818,
        "p": 0.32253085018077143
      },
      "phi": {
        "r": -0.06579738603751185,
        "p": 0.5154294566209658
      },
      "offset_factor": {
        "r": 0.0531659866969547,
        "p": 0.5993417328358286
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 57.446356495874724,
  "bic_results": {
    "average_bic": 57.446356495874724,
    "individual_bics": [
      64.24159552298808,
      64.10272706537911,
      64.0265258711506,
      64.24078088928628,
      64.24074317463877,
      61.41927610657548,
      36.889796334323506,
      60.16309585870336,
      36.8898081467778,
      64.24083817439647,
      64.24082283095335,
      64.24153277264655,
      64.24076375026819,
      36.88984754208647,
      36.8898008307212,
      36.889818676561276,
      36.889844716217354,
      46.88934867553036,
      44.889433149493684,
      36.889893899748614,
      63.625407732554194,
      46.88935355399316,
      64.24096678745249,
      63.929511580687716,
      64.15927619087554,
      63.10803452966813,
      63.519293670662975,
      64.2410461297363,
      44.88944324837693,
      52.88909625636654,
      36.88979917507761,
      64.24159552298809,
      64.24079648848537,
      64.24082274781263,
      36.889796334323506,
      61.29510184249165,
      58.64995207711627,
      64.24012814827789,
      60.06740810637777,
      42.889525488403166,
      62.121969021551195,
      64.24116732771557,
      38.88975274749858,
      63.49708277712351,
      62.359562640359655,
      56.831065223367816,
      63.85740011091974,
      64.24081315520544,
      64.24079444473625,
      64.12720718067308,
      58.50656586290873,
      64.24148369540612,
      63.98900101365588,
      63.23599091920401,
      64.24086015978162,
      64.24093860659171,
      64.24128204947478,
      44.88941343465072,
      64.24154198708389,
      50.88920492408266,
      62.156953627470116,
      64.12357264917073,
      64.24159552298808,
      64.24079633255218,
      64.24119261276104,
      63.503608889449765,
      42.889597369047166,
      46.889441422665826,
      63.574694417977966,
      42.889550148840485,
      64.24141577913846,
      64.24148217768787,
      63.97920622990685,
      52.88907136318535,
      64.23459295961516,
      58.64024453898318,
      40.88962661254353,
      64.2417419659633,
      61.813729476836514,
      64.24159552298808,
      63.822530870200794,
      42.88952605529058,
      64.24163608605107,
      64.23806147468532,
      61.88220378464882,
      64.24145429558942,
      58.568401735245644,
      64.24128643875677,
      40.889614741908595,
      64.240698834826,
      58.53357030545982
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.722\n- gamma: r = -0.100\n- phi: r = -0.066\n- offset_factor: r = 0.053",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning;\nN_share = token_self / (token_self + token_opp);\nF = N_offer - N_share;\nx = F / phi;\na = |x|;\ncore_sum = a^(0.5) + ln(1 + 3.4 * a) + 0.2 * arctan(1.1 * a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2 * a)) + 0.03 * tanh(a) + 0.02 * sin(0.5 * a) + 0.012 * (1 - cos(0.3 * a)) + 0.005 * exp(-a) + 0.005 * sin(2.2 * a) + 0.002 * cos(3.0 * a) + 0.01;\nM1 = 1 + 0.012 * sin(a + 0.045);\nI = core_sum * M1 * 1.08;\nI1 = I * (1 + 0.008 * cos(a + 0.065));\nI2 = I1 * (1 + 0.005 * sin(a + 0.115));\nI3 = I2 * (1 + 0.004 * cos(a + 0.085));\nI4 = I3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)));\nI5 = I4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)));\nA = {0.01 * I5  if  I5 < 0,  else  min(I5, 1 + ln(1 + I5))};\nBlend = exp(-a / 0.1) * (A / (1 + |A|)) * (1 + 0.005 * sin(1 / (1 + a))) * tanh(1 / (1 + a)) * (tanh(1 / (1 + a)))^2;\nFinal = A * Blend * offset_factor + 1e-6;\nf_val = (Final)^(0.92);\nf_x = sign(x) * f_val;\nU = beta + gamma * f_x;\np_accept = 1 / (1 + exp(-U))\nSummary: A comprehensive nonlinear utility model for responder decision\u2010making that computes a normalized fairness gap and transforms it via a series of fixed nonlinear components, sequential modulations, an adaptive ReLU-like function, and an extra blending stage incorporating a squared tanh damping term and a tiny learnable multiplicative offset. The latent utility U is then generated using an additive bias (beta) and a scaling parameter (gamma) alongside the normalized gap modulated by a fairness normalization parameter (phi); U is converted to an acceptance probability p_accept via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 57.446356495874724\nOverall Accuracy: 0.5711\n\nParameter Recovery:\n- beta: r = 0.722\n- gamma: r = -0.100\n- phi: r = -0.066\n- offset_factor: r = 0.053"
  ]
}