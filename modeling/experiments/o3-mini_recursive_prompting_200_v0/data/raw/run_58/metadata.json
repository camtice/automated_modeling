{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 58, instruct the model designer to retain the basic structure\u2014calculating a normalized fairness gap, processing it with a fixed series of nonlinear components, sequential modulations, and an adaptive ReLU\u2010like function\u2014but now add further innovation in the extra blending stage. Specifically, require that the extra modulation stage include not only the previously used exponential decay combined with softsign, adaptive sine modulation, tanh damping, and its squared version, but also suggest that the designer experiment with an alternative nonlinear function (for example, a softplus function applied to 1/(1+a) or even a logistic transformation) to control extreme values. Encourage reduction of potentially redundant oscillatory modulations to limit overfitting and to not overly complicate the transformation for very small or very large gap values. Also stress that the new instructions must integrate the extra learnable multiplicative offset (with bounds [0.999, 1.001]) in the extra blending stage, and promote smooth transitions across the entire gap range.\nMake sure that exactly three learnable parameters are maintained (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). Ask for clear step\u2010by\u2010step instructions that target improved accuracy, lower BIC, and enhanced parameter recovery. \n</think>\n\nFor run 58 of 200, please design a computational model for responder decision\u2010making as follows:\n\n1. Compute the normalized offer as:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share as:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap via the normalization parameter phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x| and compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate the sum by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply a hybrid adaptive ReLU-like function defined by:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01\u00d7z, else min(z, 1 + ln(1+z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying it by a composite factor consisting of:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))],\n\u2003\u2003\u2022 A damping factor: tanh(1/(1 + a)),\n\u2003\u2003\u2022 A squared damping term: [tanh(1/(1 + a))]^2,\n\u2003\u2003and additionally experiment with an alternative nonlinearity (e.g., apply a softplus or logistic function to 1/(1 + a)) to control extremes.\n12. Multiply the composite factor by an extra learnable multiplicative offset (offset_factor) with fixed bounds [0.999, 1.001].\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (the product of all sequential modulations, the adaptive ReLU-like output, and the extra blending stage (including the extra nonlinearity and offset_factor)]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure your model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Strive for innovative integration of the additional modulation stage and extra learnable offset to dynamically control extreme values of a, ensuring smooth transitions over all gap sizes and robust parameter recovery. Consider out-of-the-box alternatives (such as softplus or logistic approximations) for further controlling signal extremes without overcomplicating the model.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 58, instruct the model designer to retain the basic structure\u2014calculating a normalized fairness gap, processing it with a fixed series of nonlinear components, sequential modulations, and an adaptive ReLU\u2010like function\u2014but now add further innovation in the extra blending stage. Specifically, require that the extra modulation stage include not only the previously used exponential decay combined with softsign, adaptive sine modulation, tanh damping, and its squared version, but also suggest that the designer experiment with an alternative nonlinear function (for example, a softplus function applied to 1/(1+a) or even a logistic transformation) to control extreme values. Encourage reduction of potentially redundant oscillatory modulations to limit overfitting and to not overly complicate the transformation for very small or very large gap values. Also stress that the new instructions must integrate the extra learnable multiplicative offset (with bounds [0.999, 1.001]) in the extra blending stage, and promote smooth transitions across the entire gap range.\nMake sure that exactly three learnable parameters are maintained (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). Ask for clear step\u2010by\u2010step instructions that target improved accuracy, lower BIC, and enhanced parameter recovery. \n</think>\n\nFor run 58 of 200, please design a computational model for responder decision\u2010making as follows:\n\n1. Compute the normalized offer as:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share as:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap via the normalization parameter phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x| and compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate the sum by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply a hybrid adaptive ReLU-like function defined by:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01\u00d7z, else min(z, 1 + ln(1+z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying it by a composite factor consisting of:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a/0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z/(1 + |z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))],\n\u2003\u2003\u2022 A damping factor: tanh(1/(1 + a)),\n\u2003\u2003\u2022 A squared damping term: [tanh(1/(1 + a))]^2,\n\u2003\u2003and additionally experiment with an alternative nonlinearity (e.g., apply a softplus or logistic function to 1/(1 + a)) to control extremes.\n12. Multiply the composite factor by an extra learnable multiplicative offset (offset_factor) with fixed bounds [0.999, 1.001].\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [ C \u00d7 (core nonlinear sum + delta) \u00d7 (the product of all sequential modulations, the adaptive ReLU-like output, and the extra blending stage (including the extra nonlinearity and offset_factor)]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure your model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Strive for innovative integration of the additional modulation stage and extra learnable offset to dynamically control extreme values of a, ensuring smooth transitions over all gap sizes and robust parameter recovery. Consider out-of-the-box alternatives (such as softplus or logistic approximations) for further controlling signal extremes without overcomplicating the model.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter used to scale the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of the fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Extra blending multiplicative offset controlling extreme values (fixed at 1.0 to preserve exactly three learnable parameters)\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear model for predicting responder acceptance that computes a normalized fairness gap from the participant\u2019s offer and expected fair share. The gap is scaled by a learnable parameter and then transformed through a series of fixed nonlinear components, sequential modulations, an adaptive ReLU\u2010like function, and an extra blending stage incorporating multiple nonlinearities (including a softplus element) to control extremes. The resulting signal is exponentiated and combined with a baseline (beta) and scaled (gamma) to yield latent utility, which is mapped via a logistic function to generate an acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['phi', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter used to scale the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of the fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Extra blending multiplicative offset controlling extreme values (fixed at 1.0 to preserve exactly three learnable parameters)\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp + 1e-9)\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        S_core = a**(0.5) + math.log(1 + 3.4*a) + 0.2 * math.atan(1.1*a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2*a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5*a) + 0.012 * (1 - math.cos(0.3*a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2*a) + 0.002 * math.cos(3.0*a) + 0.01\n        S_int = (1 + 0.012 * math.sin(a + 0.045)) * S_core\n        S_mod = 1.08 * S_int\n        S_mod1 = S_mod * (1 + 0.008 * math.cos(a + 0.065))\n        S_mod2 = S_mod1 * (1 + 0.005 * math.sin(a + 0.115))\n        S_mod3 = S_mod2 * (1 + 0.004 * math.cos(a + 0.085))\n        S_mod4 = S_mod3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        S_mod5 = S_mod4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        f_adapt_val = 0.01 * S_mod5 if S_mod5 < 0 else min(S_mod5, 1 + math.log(1 + S_mod5))\n        composite = math.exp(-a/0.1) * (f_adapt_val / (1 + abs(f_adapt_val))) * (1 + 0.005 * math.sin(1/(1 + a))) * math.tanh(1/(1 + a)) * (math.tanh(1/(1 + a)))**2 * math.log(1 + math.exp(1/(1 + a)))\n        composite = composite * 1.0\n        composite = composite + 1e-6\n        f_extra = composite**(0.92)\n        f_signal = (f_adapt_val * f_extra)**(0.92)\n        f_x = (1 if x >= 0 else -1) * f_signal\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 0, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 8, \"combined_earning\": 48, \"split_opp\": 11.52, \"split_self\": 12.48, \"splitperc_opp\": 24, \"splitperc_self\": 26, \"accept\": 1.0, \"accepted_amount\": 12.48, \"accepted_perc\": 26.0, \"proposed_perc\": 26.0, \"proposed_amount\": 12.48}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 10, \"combined_earning\": 48, \"split_opp\": 16.32, \"split_self\": 7.68, \"splitperc_opp\": 34, \"splitperc_self\": 16, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 16.0, \"proposed_amount\": 7.68}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743541670.769707
    }
  ],
  "learnable_parameters": {
    "phi": {
      "description": "Normalization parameter used to scale the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of the fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned (each token is \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "phi": {
      "description": "Normalization parameter used to scale the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of the fairness gap",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "offset_factor": {
      "description": "Extra blending multiplicative offset controlling extreme values (fixed at 1.0 to preserve exactly three learnable parameters)",
      "range": {
        "min": 0.999,
        "max": 1.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Predicted probability of accepting the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear model for predicting responder acceptance that computes a normalized fairness gap from the participant\u2019s offer and expected fair share. The gap is scaled by a learnable parameter and then transformed through a series of fixed nonlinear components, sequential modulations, an adaptive ReLU\u2010like function, and an extra blending stage incorporating multiple nonlinearities (including a softplus element) to control extremes. The resulting signal is exponentiated and combined with a baseline (beta) and scaled (gamma) to yield latent utility, which is mapped via a logistic function to generate an acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (each token is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter used to scale the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of the fairness gap\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Extra blending multiplicative offset controlling extreme values (fixed at 1.0 to preserve exactly three learnable parameters)\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear model for predicting responder acceptance that computes a normalized fairness gap from the participant\u2019s offer and expected fair share. The gap is scaled by a learnable parameter and then transformed through a series of fixed nonlinear components, sequential modulations, an adaptive ReLU\u2010like function, and an extra blending stage incorporating multiple nonlinearities (including a softplus element) to control extremes. The resulting signal is exponentiated and combined with a baseline (beta) and scaled (gamma) to yield latent utility, which is mapped via a logistic function to generate an acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear model for predicting responder acceptance that computes a normalized fairness gap from the participant\u2019s offer and expected fair share. The gap is scaled by a learnable parameter and then transformed through a series of fixed nonlinear components, sequential modulations, an adaptive ReLU\u2010like function, and an extra blending stage incorporating multiple nonlinearities (including a softplus element) to control extremes. The resulting signal is exponentiated and combined with a baseline (beta) and scaled (gamma) to yield latent utility, which is mapped via a logistic function to generate an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, phi=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning\n        N_share = token_self / (token_self + token_opp + 1e-9)\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        S_core = a**(0.5) + math.log(1 + 3.4*a) + 0.2 * math.atan(1.1*a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2*a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5*a) + 0.012 * (1 - math.cos(0.3*a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2*a) + 0.002 * math.cos(3.0*a) + 0.01\n        S_int = (1 + 0.012 * math.sin(a + 0.045)) * S_core\n        S_mod = 1.08 * S_int\n        S_mod1 = S_mod * (1 + 0.008 * math.cos(a + 0.065))\n        S_mod2 = S_mod1 * (1 + 0.005 * math.sin(a + 0.115))\n        S_mod3 = S_mod2 * (1 + 0.004 * math.cos(a + 0.085))\n        S_mod4 = S_mod3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        S_mod5 = S_mod4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        f_adapt_val = 0.01 * S_mod5 if S_mod5 < 0 else min(S_mod5, 1 + math.log(1 + S_mod5))\n        composite = math.exp(-a/0.1) * (f_adapt_val / (1 + abs(f_adapt_val))) * (1 + 0.005 * math.sin(1/(1 + a))) * math.tanh(1/(1 + a)) * (math.tanh(1/(1 + a)))**2 * math.log(1 + math.exp(1/(1 + a)))\n        composite = composite * 1.0\n        composite = composite + 1e-6\n        f_extra = composite**(0.92)\n        f_signal = (f_adapt_val * f_extra)**(0.92)\n        f_x = (1 if x >= 0 else -1) * f_signal\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5644078144078144,
  "fitting_results": [
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953675692277702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.4846264188007887,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.797990262919097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9391150221701151,
      "beta": -2.0782981066198074,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.897714324112584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.9533082807513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -3.7009553085594,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95002118746933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.42545022592778703,
      "gamma": 3.1593767350267226,
      "success": true,
      "log_likelihood": -23.53641467982689,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 2.3173569899408855,
      "success": true,
      "log_likelihood": -11.27787984919464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.8811712547990657,
      "gamma": 1.3721522274117999,
      "success": true,
      "log_likelihood": -22.91376757163893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.630464370306499,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953323416121552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6133825553493019,
      "beta": -10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95364955545194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -7.457494685313814,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953285101032456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 2.332366942984157,
      "success": true,
      "log_likelihood": -11.27787998703101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.7506282497456193,
      "beta": 10.0,
      "gamma": 2.6908348762114516e-18,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.3065227908166577,
      "beta": 10.0,
      "gamma": 0.27531616153101734,
      "success": true,
      "log_likelihood": -15.277683035949194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 1.8568675083660184e-16,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.7645069642671167,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.57793132446725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95336955869807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.1561252064293106,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.717661018583478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.7097111872015267,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.845847438131884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.31942100279468194,
      "gamma": 9.216190548504873,
      "success": true,
      "log_likelihood": -24.34634385738684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.6510960414626422,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.507423849899833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95340943156925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 9.999993041179552,
      "gamma": 3.4752263858274355,
      "success": true,
      "log_likelihood": -19.27751357712261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 2.3253524147102413e-17,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953675692277702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95332045382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953322129116973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.6880142468421115,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.45798074198364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 1.52235891882413,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -22.157938189183074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.631530109636635,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.8312786714635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.2094042705273333,
      "gamma": 9.906321224918338,
      "success": true,
      "log_likelihood": -22.85118480031795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.2365602870767353,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.819888447037577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953459462228835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.724414486945167,
      "beta": 10.0,
      "gamma": 0.0984335975765924,
      "success": true,
      "log_likelihood": -12.277815898744196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.6329628609278733,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.495111302473504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.18523851309602948,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.98927930030419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 2.7727962081513393,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -21.239056940789002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.0294769534288488,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.66437018817206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.9533166268707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -9.808174568998172,
      "gamma": 9.33898418766216,
      "success": true,
      "log_likelihood": -24.953313401480273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.761921008624872,
      "gamma": 7.55444667974089,
      "success": true,
      "log_likelihood": -24.891815869588076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.7590058457038886,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.06030978403635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953631697294938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.2849582413364289,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.77100904330654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.6790621012586137,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -24.45095756850575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 5.055465620710329,
      "success": true,
      "log_likelihood": -24.95339877540896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953367688580162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953425772606067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5583072968770657,
      "beta": 10.0,
      "gamma": 6.4094321767813796,
      "success": true,
      "log_likelihood": -15.277669314080205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953654927555355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 3.363211459051905,
      "success": true,
      "log_likelihood": -18.277562476390685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.22478823080712576,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.846141082884802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.5574257068521442,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.814856559714258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953675692277695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 6.9855490754947205,
      "success": true,
      "log_likelihood": -24.953346319336344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953474549005104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.6372889426349345,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.495820879900645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1954614619433692,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.1549097320126809,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.7093650150675331,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.55000463442985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953562631243667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953630837798656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.260051187157924,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.755990440659847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.9145162434605585,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -2.87938591327607,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.94663840009421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.8540286003507256,
      "gamma": 6.962142228677586,
      "success": true,
      "log_likelihood": -22.15527073985686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.6504213817832866,
      "beta": 8.544044535982595,
      "gamma": 2.621864682426532,
      "success": true,
      "log_likelihood": -13.279042742744922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 9.163194742248155,
      "success": true,
      "log_likelihood": -24.95378506954952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.282858427486537,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.603839886239776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.9536756922777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -0.9870197295597215,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.643036102995442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 3.602282862864202,
      "success": true,
      "log_likelihood": -14.277738685540749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.95373117737409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -1.978562357709474,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.88580099883606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 0.2813434608474829,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.655905445290518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953588149797273,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.8577393884140894,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.104552196970886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -24.953553291531847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 0.5,
      "beta": 10.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.4485637470879436,
      "beta": -8.18887860774123,
      "gamma": 8.084517697064843,
      "success": true,
      "log_likelihood": -24.95326396646427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "phi": 1.5,
      "beta": 1.7813999822480493,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -22.08191275306752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "phi": {
        "r": 0.1856831238463524,
        "p": 0.06437037576796877
      },
      "beta": {
        "r": 0.6815386276414542,
        "p": 5.9741000407948134e-15
      },
      "gamma": {
        "r": 0.0797274954502626,
        "p": 0.4303998838235505
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.82441342862449,
  "bic_results": {
    "average_bic": 53.82441342862449,
    "individual_bics": [
      60.65790819992374,
      60.34653734120653,
      60.545985463593496,
      60.65717337687093,
      60.65059919030699,
      57.82338617502211,
      33.30631651375761,
      56.5780919586462,
      33.3062773958674,
      60.65720364761144,
      60.65733541130787,
      60.657855926272205,
      60.65712701743324,
      33.306316789430355,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.30592288726672,
      33.3062773958674,
      59.90641946430283,
      43.305823414830115,
      60.65729593276447,
      60.18587885253528,
      60.442251691632094,
      59.44324453014201,
      59.765404515168,
      60.657375678506824,
      41.305914211037575,
      49.30558396961355,
      33.3062773958674,
      60.65790819992374,
      60.65719772300834,
      60.65720107360228,
      33.3062773958674,
      57.66651829933561,
      55.06643319373448,
      60.41311415829533,
      56.45292641600423,
      39.30600500724502,
      58.39033370944348,
      60.657475739826,
      35.30618861285672,
      59.740779420315334,
      58.72911541597671,
      53.22867069694634,
      60.079297191712456,
      60.65719006910973,
      60.65718361832887,
      60.534188554544485,
      54.871176383441025,
      60.6578202099582,
      60.29257490198141,
      59.65247195237983,
      60.657354366186254,
      60.65729219252866,
      60.65740836058046,
      41.30589544352874,
      60.65786667047904,
      47.3056817681497,
      58.44283898113794,
      60.38026993479684,
      60.657908199923725,
      60.65724945404102,
      60.65750591337854,
      59.742198575169624,
      39.30600500724503,
      43.3058234148301,
      59.850566084228035,
      39.306005007245034,
      60.65768207785567,
      60.65781849096564,
      60.26253769668803,
      49.30555102620774,
      60.643833615556744,
      55.06109829508205,
      37.308642300858175,
      60.65812695446738,
      57.95823658784788,
      60.657908199923725,
      60.03662902135922,
      39.30603418644983,
      60.65801917011652,
      60.52215881304045,
      58.06236770594937,
      60.65773311496288,
      54.9596612093101,
      60.65766339843202,
      37.306095803452486,
      60.65708474829687,
      54.91438232150337
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- phi: r = 0.186\n- beta: r = 0.682\n- gamma: r = 0.080",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nS_int = (1 + 0.012 * sin(a + 0.045)) * S_core\nS_mod = 1.08 * S_int\nS_mod1 = S_mod * (1 + 0.008 * cos(a + 0.065))\nS_mod2 = S_mod1 * (1 + 0.005 * sin(a + 0.115))\nS_mod3 = S_mod2 * (1 + 0.004 * cos(a + 0.085))\nS_mod4 = S_mod3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\nS_mod5 = S_mod4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nf_adapt = {if S_mod5 < 0 then 0.01 * S_mod5 else min(S_mod5, 1 + ln(1 + S_mod5))}\ncomposite = exp(-a/0.1) * (f_adapt / (1 + |f_adapt|)) * (1 + 0.005 * sin(1/(1 + a))) * tanh(1/(1 + a)) * (tanh(1/(1 + a)))^2 * ln(1 + exp(1/(1 + a)))\ncomposite = composite * 1.0\ncomposite = composite + 1e-6\nf_extra = composite^(0.92)\nf_signal = (f_adapt * f_extra)^(0.92)\nf_x = sign(x) * f_signal\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear model for predicting responder acceptance that computes a normalized fairness gap from the participant\u2019s offer and expected fair share. The gap is scaled by a learnable parameter and then transformed through a series of fixed nonlinear components, sequential modulations, an adaptive ReLU\u2010like function, and an extra blending stage incorporating multiple nonlinearities (including a softplus element) to control extremes. The resulting signal is exponentiated and combined with a baseline (beta) and scaled (gamma) to yield latent utility, which is mapped via a logistic function to generate an acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.82441342862449\nOverall Accuracy: 0.5644\n\nParameter Recovery:\n- phi: r = 0.186\n- beta: r = 0.682\n- gamma: r = 0.080"
  ]
}