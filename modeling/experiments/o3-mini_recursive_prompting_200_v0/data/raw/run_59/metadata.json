{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 59, instruct the model designer to build on the previous design but streamline the extra blending stage by reducing redundant oscillatory modulations and incorporating a softplus transformation applied to 1/(1+a) as an alternative nonlinearity to better control extreme values. Emphasize that the composite factor in step 11 should now include this softplus alternative along with the exponential decay and softsign, and remove the squared tanh damping. Also, clarify that exactly three learnable parameters must be maintained (beta within [\u201310, 10], gamma within [0, 10], and phi within [0.5, 1.5]) and that the extra learnable multiplicative offset (with bounds [0.999, 1.001]) should be integrated as a fixed offset to enforce smooth transitions. In summary, encourage out\u2010of\u2010the\u2010box thinking by suggesting experimentation with the softplus/logistic transformation in the extra blending stage while simplifying the sequential modulation to avoid overfitting.\n</think>\n\nFor run 59 of 200, please design a computational model for responder decision\u2010making as follows:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap by the normalization parameter phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x| and compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate the sum by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply the hybrid adaptive ReLU\u2010like function defined as:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying by a composite factor that includes:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a / 0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z / (1 + |z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))],\n\u2003\u2003\u2022 A damping factor: tanh(1/(1 + a)),\n\u2003\u2003\u2022 An alternative nonlinearity: apply the softplus function (softplus(z) = ln(1 + exp(z))) to 1/(1 + a).\n12. Multiply the resulting composite factor by an extra learnable multiplicative offset, offset_factor, with fixed bounds [0.999, 1.001].\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [C \u00d7 (core nonlinear sum + delta) \u00d7 (the product of all sequential modulations, the adaptive ReLU-like output, and the extra blending stage (including the composite factor with softplus nonlinearity and offset_factor)]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure your model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Strongly encourage innovative integration of the extra blending stage with the alternative softplus transformation to control extreme a values and smooth transitions across gap sizes, while reducing redundant oscillatory modulations to improve accuracy, lower BIC, and enhance parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 59, instruct the model designer to build on the previous design but streamline the extra blending stage by reducing redundant oscillatory modulations and incorporating a softplus transformation applied to 1/(1+a) as an alternative nonlinearity to better control extreme values. Emphasize that the composite factor in step 11 should now include this softplus alternative along with the exponential decay and softsign, and remove the squared tanh damping. Also, clarify that exactly three learnable parameters must be maintained (beta within [\u201310, 10], gamma within [0, 10], and phi within [0.5, 1.5]) and that the extra learnable multiplicative offset (with bounds [0.999, 1.001]) should be integrated as a fixed offset to enforce smooth transitions. In summary, encourage out\u2010of\u2010the\u2010box thinking by suggesting experimentation with the softplus/logistic transformation in the extra blending stage while simplifying the sequential modulation to avoid overfitting.\n</think>\n\nFor run 59 of 200, please design a computational model for responder decision\u2010making as follows:\n\n1. Compute the normalized offer:\n\u2003\u2003N_offer = split_self / combined_earning.\n2. Compute the normalized fair share:\n\u2003\u2003N_share = token_self / (token_self + token_opp).\n3. Define the fairness gap:\n\u2003\u2003F = N_offer \u2013 N_share.\n4. Scale the gap by the normalization parameter phi (\u03d5 \u2208 [0.5, 1.5]):\n\u2003\u2003x = F / phi.\n5. Let a = |x| and compute the core nonlinear components:\n\u2003\u2003\u2022 a^(0.5)\n\u2003\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)\n6. Sum these components and add a constant delta = 0.01.\n7. Modulate the sum by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n8. Multiply Intermediate_Signal by the fixed constant C = 1.08.\n9. Sequentially modulate the result with updated phase shifts:\n\u2003\u2003a. Multiply by [1 + 0.008 \u00d7 cos(a + 0.065)].\n\u2003\u2003b. Multiply by [1 + 0.005 \u00d7 sin(a + 0.115)].\n\u2003\u2003c. Multiply by [1 + 0.004 \u00d7 cos(a + 0.085)].\n\u2003\u2003d. Multiply by [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))].\n\u2003\u2003e. Multiply by [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n10. Apply the hybrid adaptive ReLU\u2010like function defined as:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }.\n\u2003\u2003Apply f_adapt to the modulated Intermediate_Signal.\n11. Further blend the signal by multiplying by a composite factor that includes:\n\u2003\u2003\u2022 Exponential decay: exp(\u2212a / 0.1),\n\u2003\u2003\u2022 A softsign transformation: softsign(z) = z / (1 + |z|),\n\u2003\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))],\n\u2003\u2003\u2022 A damping factor: tanh(1/(1 + a)),\n\u2003\u2003\u2022 An alternative nonlinearity: apply the softplus function (softplus(z) = ln(1 + exp(z))) to 1/(1 + a).\n12. Multiply the resulting composite factor by an extra learnable multiplicative offset, offset_factor, with fixed bounds [0.999, 1.001].\n13. Add a constant offset of 1e-6 for numerical stability.\n14. Compress the final blended signal by raising it to the exponent E = 0.92.\n15. Define the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [C \u00d7 (core nonlinear sum + delta) \u00d7 (the product of all sequential modulations, the adaptive ReLU-like output, and the extra blending stage (including the composite factor with softplus nonlinearity and offset_factor)]^(0.92) }.\n16. Compute the latent utility:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n17. Map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nEnsure your model retains exactly three learnable parameters: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Strongly encourage innovative integration of the extra blending stage with the alternative softplus transformation to control extreme a values and smooth transitions across gap sizes, while reducing redundant oscillatory modulations to improve accuracy, lower BIC, and enhance parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter linking the nonlinear function f(x) to the latent utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter controlling the slope of the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Fixed multiplicative offset enforcing smooth transitions in the extra blending stage.\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.0\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"probability\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n<SUMMARY>\nA complex nonlinear utility model that computes a fairness gap based on normalized offers versus expected fair share, applies a series of nonlinear transformations including power\u2010functions, logarithms, trigonometric and exponential modulations, and an adaptive ReLU-like function. The final blended signal is further refined with a composite factor incorporating exponential decay, softsign, sine modulation, tanh damping, and a softplus transformation. The latent utility is computed as a linear combination of this transformed signal with a baseline (beta) and scaling (gamma) parameter, then mapped to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) are employed.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \\u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter linking the nonlinear function f(x) to the latent utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter controlling the slope of the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Fixed multiplicative offset enforcing smooth transitions in the extra blending stage.\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.0\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"probability\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # N_offer\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n\n        # N_share\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n\n        # F\n        F = N_offer - N_share\n\n        # x\n        x = F / phi\n\n        # a\n        a = abs(x)\n\n        # S\n        S = (a**0.5) + math.log(1 + 3.4*a) + 0.2*math.atan(1.1*a) + 0.1*(1 - math.exp(-a)) + 0.05*(1 - math.exp(-2*a)) + 0.03*math.tanh(a) + 0.02*math.sin(0.5*a) + 0.012*(1 - math.cos(0.3*a)) + 0.005*math.exp(-a) + 0.005*math.sin(2.2*a) + 0.002*math.cos(3.0*a)\n\n        # T\n        T = S + 0.01\n\n        # M1\n        M1 = 1 + 0.012*math.sin(a + 0.045)\n\n        # I\n        I = T * M1 * 1.08 * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*(math.sin(a + 0.035)*math.cos(a + 0.055))) * (1 + 0.003*(math.sin(a + 0.03)*math.cos(a + 0.05)))\n\n        # f_adapt(I)\n        if I < 0:\n            R = 0.01 * I\n        else:\n            R = min(I, 1 + math.log(1 + I))\n\n        # CF\n        CF = math.exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*math.sin(1/(1 + a))) * math.tanh(1/(1 + a)) * math.log(1 + math.exp(1/(1 + a)))\n\n        # offset_factor\n        offset_factor = 1.0\n\n        # R2\n        R2 = R * CF * offset_factor\n\n        # R3\n        R3 = R2 + 1e-6\n\n        # f_val\n        f_val = (1 if x >= 0 else -1) * (R3)**0.92\n\n        # U\n        U = beta + gamma * f_val\n\n        # p_accept\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(p_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":0,\"group\":\"treatment\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":6,\"token_self\":14,\"combined_earning\":20,\"split_opp\":2.0,\"split_self\":18.0,\"splitperc_opp\":10,\"splitperc_self\":90,\"accept\":1.0,\"accepted_amount\":18.0,\"accepted_perc\":90.0,\"proposed_perc\":90.0,\"proposed_amount\":18.0},{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":11,\"token_self\":9,\"combined_earning\":20,\"split_opp\":13.0,\"split_self\":7.0,\"splitperc_opp\":65,\"splitperc_self\":35,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":35.0,\"proposed_amount\":7.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541724.806797
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline utility parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter linking the nonlinear function f(x) to the latent utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Normalization parameter controlling the slope of the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant in \u00a3.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "count",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "count",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline utility parameter.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter linking the nonlinear function f(x) to the latent utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Normalization parameter controlling the slope of the fairness gap.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "offset_factor": {
      "description": "Fixed multiplicative offset enforcing smooth transitions in the extra blending stage.",
      "range": {
        "min": 0.999,
        "max": 1.001,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1.0
        }
      },
      "learnable": false,
      "source": "fixed"
    },
    "p_accept": {
      "description": "Predicted probability of accepting the proposal.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "probability",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model that computes a fairness gap based on normalized offers versus expected fair share, applies a series of nonlinear transformations including power\u2010functions, logarithms, trigonometric and exponential modulations, and an adaptive ReLU-like function. The final blended signal is further refined with a composite factor incorporating exponential decay, softsign, sine modulation, tanh damping, and a softplus transformation. The latent utility is computed as a linear combination of this transformed signal with a baseline (beta) and scaling (gamma) parameter, then mapped to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) are employed.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"count\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter linking the nonlinear function f(x) to the latent utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Normalization parameter controlling the slope of the fairness gap.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offset_factor\": {\n      \"description\": \"Fixed multiplicative offset enforcing smooth transitions in the extra blending stage.\",\n      \"range\": {\n        \"min\": 0.999,\n        \"max\": 1.001,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1.0\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"p_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"probability\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n<SUMMARY>\nA complex nonlinear utility model that computes a fairness gap based on normalized offers versus expected fair share, applies a series of nonlinear transformations including power\u2010functions, logarithms, trigonometric and exponential modulations, and an adaptive ReLU-like function. The final blended signal is further refined with a composite factor incorporating exponential decay, softsign, sine modulation, tanh damping, and a softplus transformation. The latent utility is computed as a linear combination of this transformed signal with a baseline (beta) and scaling (gamma) parameter, then mapped to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) are employed.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that computes a fairness gap based on normalized offers versus expected fair share, applies a series of nonlinear transformations including power\u2010functions, logarithms, trigonometric and exponential modulations, and an adaptive ReLU-like function. The final blended signal is further refined with a composite factor incorporating exponential decay, softsign, sine modulation, tanh damping, and a softplus transformation. The latent utility is computed as a linear combination of this transformed signal with a baseline (beta) and scaling (gamma) parameter, then mapped to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) are employed.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # N_offer\n        N_offer = split_self / combined_earning if combined_earning != 0 else 0\n\n        # N_share\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) != 0 else 0\n\n        # F\n        F = N_offer - N_share\n\n        # x\n        x = F / phi\n\n        # a\n        a = abs(x)\n\n        # S\n        S = (a**0.5) + math.log(1 + 3.4*a) + 0.2*math.atan(1.1*a) + 0.1*(1 - math.exp(-a)) + 0.05*(1 - math.exp(-2*a)) + 0.03*math.tanh(a) + 0.02*math.sin(0.5*a) + 0.012*(1 - math.cos(0.3*a)) + 0.005*math.exp(-a) + 0.005*math.sin(2.2*a) + 0.002*math.cos(3.0*a)\n\n        # T\n        T = S + 0.01\n\n        # M1\n        M1 = 1 + 0.012*math.sin(a + 0.045)\n\n        # I\n        I = T * M1 * 1.08 * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*(math.sin(a + 0.035)*math.cos(a + 0.055))) * (1 + 0.003*(math.sin(a + 0.03)*math.cos(a + 0.05)))\n\n        # f_adapt(I)\n        if I < 0:\n            R = 0.01 * I\n        else:\n            R = min(I, 1 + math.log(1 + I))\n\n        # CF\n        CF = math.exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*math.sin(1/(1 + a))) * math.tanh(1/(1 + a)) * math.log(1 + math.exp(1/(1 + a)))\n\n        # offset_factor\n        offset_factor = 1.0\n\n        # R2\n        R2 = R * CF * offset_factor\n\n        # R3\n        R3 = R2 + 1e-6\n\n        # f_val\n        f_val = (1 if x >= 0 else -1) * (R3)**0.92\n\n        # U\n        U = beta + gamma * f_val\n\n        # p_accept\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n\n        model_predictions.append(p_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5750915750915752,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95382718569563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9136493926814295,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.882629360831707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3163478794923134,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.766847879739316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953366989077654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 3.72310935909518,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953361720608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4440118781760312,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.407417633270605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.9419271580766164,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27787209284565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.01643089536256,
      "gamma": 2.8458778696083273,
      "phi": 1.2868642389781544,
      "success": true,
      "log_likelihood": -23.27514058056666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.7272115475205304,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277863114936277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 8.965006702056419,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953398521200917,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.973087424678486,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95332109055598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95378677612482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.195711704946838,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953397355456737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6090669002880178,
      "phi": 0.7328327386164872,
      "success": true,
      "log_likelihood": -11.277863875690219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.172608879502911,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277881725415853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.0376161785324,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277890252120887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.8745753120158288,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.27786769470589,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.3303389534386083,
      "phi": 1.1561435905796569,
      "success": true,
      "log_likelihood": -16.277645060314935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.29770511556859874,
      "phi": 1.3102133860255856,
      "success": true,
      "log_likelihood": -15.277680473350456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.35060632981504103,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277861644611589,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8006265035564655,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.549610792561175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.5830253663166538,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.277639698025208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.8223467740611,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95345865282085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3580311180932072,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.78281055175504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9331046691283387,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.885279128251174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.37435847599590577,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.25430458278565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.796920230136802,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.546436190716793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.629324378536701,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95362305959286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.5643089209872014,
      "phi": 1.2666497794118088,
      "success": true,
      "log_likelihood": -15.277687465331768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.418032458598137,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.277496354287713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.829142424533255,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277871621748531,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953827185695626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.532940079112636,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953385655612532,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.397313281779671,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953459037931566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.97252462710611,
      "phi": 1.2418346838743959,
      "success": true,
      "log_likelihood": -11.277868838365954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4467442661392955,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.418699438852155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.576179479097547,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.111847421895117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9407566139517907,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.886302244629803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8917168520222493,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.769917410580284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.961161908115521,
      "phi": 0.9326500594377377,
      "success": true,
      "log_likelihood": -14.277734785548907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.03294294912518545,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.84215602463348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95361062671933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.804112807869026,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277836492073309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8466162034318426,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.586980773905296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.021154015800256987,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.89913711340983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.5495312633224825,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.24650046193142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3116688308050648,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.765083370337596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.904148882473127,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953401537263485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95335482833928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7487908330575737,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.877861958978087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5117331269970082,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.08555418095919,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95375823838758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.453959558047829,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.813322505353266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5376959640462741,
      "gamma": 6.8678107653209395,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.445531023321717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.4464596187963865,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95342579794199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953456403928083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953542713637265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.0989803451526585,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767568880575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953791204876495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6304466613968446,
      "phi": 0.8619623270016525,
      "success": true,
      "log_likelihood": -18.277543482444813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.03017405173899505,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.876924881652364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9235974973810561,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.883903104792562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953827185695623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.707758507961441,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953384099302777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953619390566246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7911677589227388,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.541559059619342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.2338720361843662,
      "phi": 0.5298073838452644,
      "success": true,
      "log_likelihood": -14.277724995490678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.7139045290519945,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -16.27764009161363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8643601076878868,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.60161951263515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.240334450521911,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277746859957041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953761706029873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953758012406226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4189870858920017,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.802160880855688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.213255526213938,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -19.27750773700035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7279527984426357,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.94026656907535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5290514631877106,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.092905664986358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.269735673434535,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277795615230021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95388868524063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.03308635983881399,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.835999080438025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953827185695626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4856180926817248,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.821234526171473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6919491820932261,
      "phi": 0.5517762948441317,
      "success": true,
      "log_likelihood": -14.277725919423657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.884887351367212,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953857936602056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.361611372591777,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.92418523385405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.02718993782713028,
      "gamma": 10.0,
      "phi": 1.4630112153356165,
      "success": true,
      "log_likelihood": -23.869332057816703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.64305682356177,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95385515165979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4828950167275885,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.07294683426538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953633711186136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.545101967056728,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277788013200635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.598231347196982,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95331715299981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.533358445641123,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.09325089432506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6647725377380953,
        "p": 4.626488943667732e-14
      },
      "gamma": {
        "r": -0.09354493066854447,
        "p": 0.3545913319339759
      },
      "phi": {
        "r": 0.12192063576403399,
        "p": 0.22689659703791343
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.84859315209677,
  "bic_results": {
    "average_bic": 53.84859315209677,
    "individual_bics": [
      60.65821118675959,
      60.51581553703174,
      60.28425257484696,
      60.65729079352364,
      60.65728025658433,
      57.565392081909536,
      33.30630100105963,
      57.300837976501654,
      33.30628304524089,
      60.65735385777016,
      60.65719899648029,
      60.65813036761797,
      60.6573515262818,
      33.30628456674877,
      33.30632026620003,
      33.30633731961011,
      33.30629220478011,
      43.305846935998204,
      41.30591776206924,
      33.30628010459151,
      59.84977840049068,
      43.30583621141875,
      60.657474121010026,
      60.31617791887841,
      60.52111507187068,
      59.25916598093963,
      59.84342919680192,
      60.657802934554056,
      41.30593174603187,
      49.30554952394375,
      33.30630005886539,
      60.65821118675959,
      60.6573281265934,
      60.65747489123146,
      33.306294492100236,
      57.587955693072644,
      54.97425165915857,
      60.52316130462793,
      56.290391636528895,
      39.306026386466144,
      58.43486886463529,
      60.65777806880699,
      35.30622979951495,
      59.92451836317892,
      58.548831042187985,
      53.243557739231164,
      60.280723556043526,
      60.657359889895304,
      60.657266472046885,
      60.5062807333245,
      54.92166517728671,
      60.658073292143484,
      60.37720182607487,
      59.64161886201177,
      60.657408411252305,
      60.6574696232245,
      60.657642242642865,
      41.30590819297983,
      60.65813922512132,
      47.30564378025795,
      58.504406578673056,
      60.51836302495346,
      60.65821118675957,
      60.65732501397389,
      60.65779559650082,
      59.83367493460702,
      39.306006806349686,
      43.305836998595595,
      59.953795840638634,
      39.30605053528241,
      60.65808022742807,
      60.65807284018078,
      60.3548785770797,
      49.305572289369024,
      60.63108995351904,
      54.93636814534105,
      37.30614804582837,
      60.6583341858496,
      58.422554976244385,
      60.65821118675959,
      60.39302586771127,
      39.306008654215645,
      60.65827268857244,
      60.598927283076435,
      58.48922093100174,
      60.65826711868792,
      54.89645048389909,
      60.6578242377406,
      37.306132841769596,
      60.657191121367944,
      54.937058604018446
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.665\n- gamma: r = -0.094\n- phi: r = 0.122",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer - N_share  \nx = F / phi  \na = |x|  \nS = a^(0.5) + ln(1 + 3.4*a) + 0.2*arctan(1.1*a) + 0.1*(1 - exp(-a)) + 0.05*(1 - exp(-2*a)) + 0.03*tanh(a) + 0.02*sin(0.5*a) + 0.012*(1 - cos(0.3*a)) + 0.005*exp(-a) + 0.005*sin(2.2*a) + 0.002*cos(3.0*a)  \nT = S + 0.01  \nM1 = 1 + 0.012*sin(a + 0.045)  \nI = T * M1 * 1.08 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*(sin(a + 0.035)*cos(a + 0.055))) * (1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))  \nf_adapt(I) = { 0.01*I  if I < 0 ;  min(I, 1 + ln(1 + I))  if I \u2265 0 }  \nR = f_adapt(I)  \nCF = exp(-a/0.1) * (a/(1 + a)) * (1 + 0.005*sin(1/(1 + a))) * tanh(1/(1 + a)) * ln(1 + exp(1/(1 + a)))  \noffset_factor = 1.0  \nR2 = R * CF * offset_factor  \nR3 = R2 + 1e-6  \nf_val = sign(x) * (R3)^(0.92)  \nU = beta + gamma * f_val  \np_accept = 1 / (1 + exp(-U))\nSummary: A complex nonlinear utility model that computes a fairness gap based on normalized offers versus expected fair share, applies a series of nonlinear transformations including power\u2010functions, logarithms, trigonometric and exponential modulations, and an adaptive ReLU-like function. The final blended signal is further refined with a composite factor incorporating exponential decay, softsign, sine modulation, tanh damping, and a softplus transformation. The latent utility is computed as a linear combination of this transformed signal with a baseline (beta) and scaling (gamma) parameter, then mapped to an acceptance probability via a logistic function. Only three learnable parameters (beta, gamma, phi) are employed.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.84859315209677\nOverall Accuracy: 0.5751\n\nParameter Recovery:\n- beta: r = 0.665\n- gamma: r = -0.094\n- phi: r = 0.122"
  ]
}