{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 6, we want to push the modeling approach further by encouraging creative yet interpretable modifications. In addition to the standard power transformation (sgn(x) \u00d7 |x|^0.5) on the normalized fairness gap, consider the possibility of including an offset in the fairness gap calculation to account for potential baseline discrepancies or numerical instabilities (for example, when values are close to zero). While the core structure remains similar, this run should encourage exploration of non\u2011obvious adjustments in the transformation stage to improve parameter recovery and overall accuracy. Emphasize that the normalized fairness gap is calculated as the difference between the offer percentage (split_self/combined_earning) and the expected fair share percentage (token_self/(token_self+token_opp)). Each learnable parameter must have explicit finite bounds (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). The utility is then derived as U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi), where f(\u00b7) is defined as sgn(x) \u00d7 |x|^0.5 but can optionally include an offset term if justified. The final probability is computed by applying a logistic transform (with temperature 1), p_accept = 1/(1+exp(\u2013U)). Clearly encapsulate the mathematical formula between <MODEL> and </MODEL> tags and provide all variable descriptions in a detailed JSON format between <VARIABLES> and </VARIABLES> tags.\n</think>\n\nFor run 6 of 200, please develop a computational model for responder decision-making that:\n\n1. Computes the normalized offer as split_self/combined_earning and the normalized fair share as token_self/(token_self+token_opp), both expressed as percentages.\n2. Calculates the fairness gap as: normalized_fairness_gap = (split_self/combined_earning) - (token_self/(token_self+token_opp)).\n3. Optionally allows for an additive offset in the fairness gap for numerical stability if needed.\n4. Applies a power transformation to the (optionally offset) normalized fairness gap to capture diminishing sensitivity. Specifically, use f(x) = sgn(x) \u00d7 |x|^0.5.\n5. Introduces three learnable parameters with explicit finite bounds:\n   \u2022 A baseline bias parameter (beta) bounded between -10 and 10.\n   \u2022 A sensitivity parameter (gamma) bounded between 0 and 10.\n   \u2022 A scaling parameter (phi) bounded between 0.5 and 1.5 that standardizes the fairness gap before transformation.\n6. Defines the latent utility as:\n   U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi)\n   (You may incorporate an additive offset in the fairness gap if this aids in ensuring numerical stability or improved parameter recovery.)\n7. Converts the latent utility to a probability using the logistic function:\n   p_accept = 1/(1 + exp(\u2013U)).\n8. Provides the complete mathematical model between <MODEL> and </MODEL> tags and the detailed variable descriptions (in JSON format) between <VARIABLES> and </VARIABLES> tags. Every variable, trial input, and learnable parameter with its bounds must be clearly defined and connected to the observable trial data.\n9. Ensure that the formulation is concise, clear, and encourages innovative adjustments to improve model accuracy, BIC, and parameter recovery.\n\nBe creative and consider out-of-the-box modifications in the transformation if they can yield better performance while maintaining interpretability.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 6, we want to push the modeling approach further by encouraging creative yet interpretable modifications. In addition to the standard power transformation (sgn(x) \u00d7 |x|^0.5) on the normalized fairness gap, consider the possibility of including an offset in the fairness gap calculation to account for potential baseline discrepancies or numerical instabilities (for example, when values are close to zero). While the core structure remains similar, this run should encourage exploration of non\u2011obvious adjustments in the transformation stage to improve parameter recovery and overall accuracy. Emphasize that the normalized fairness gap is calculated as the difference between the offer percentage (split_self/combined_earning) and the expected fair share percentage (token_self/(token_self+token_opp)). Each learnable parameter must have explicit finite bounds (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). The utility is then derived as U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi), where f(\u00b7) is defined as sgn(x) \u00d7 |x|^0.5 but can optionally include an offset term if justified. The final probability is computed by applying a logistic transform (with temperature 1), p_accept = 1/(1+exp(\u2013U)). Clearly encapsulate the mathematical formula between <MODEL> and </MODEL> tags and provide all variable descriptions in a detailed JSON format between <VARIABLES> and </VARIABLES> tags.\n</think>\n\nFor run 6 of 200, please develop a computational model for responder decision-making that:\n\n1. Computes the normalized offer as split_self/combined_earning and the normalized fair share as token_self/(token_self+token_opp), both expressed as percentages.\n2. Calculates the fairness gap as: normalized_fairness_gap = (split_self/combined_earning) - (token_self/(token_self+token_opp)).\n3. Optionally allows for an additive offset in the fairness gap for numerical stability if needed.\n4. Applies a power transformation to the (optionally offset) normalized fairness gap to capture diminishing sensitivity. Specifically, use f(x) = sgn(x) \u00d7 |x|^0.5.\n5. Introduces three learnable parameters with explicit finite bounds:\n   \u2022 A baseline bias parameter (beta) bounded between -10 and 10.\n   \u2022 A sensitivity parameter (gamma) bounded between 0 and 10.\n   \u2022 A scaling parameter (phi) bounded between 0.5 and 1.5 that standardizes the fairness gap before transformation.\n6. Defines the latent utility as:\n   U = beta + gamma \u00d7 f((normalized_fairness_gap)/phi)\n   (You may incorporate an additive offset in the fairness gap if this aids in ensuring numerical stability or improved parameter recovery.)\n7. Converts the latent utility to a probability using the logistic function:\n   p_accept = 1/(1 + exp(\u2013U)).\n8. Provides the complete mathematical model between <MODEL> and </MODEL> tags and the detailed variable descriptions (in JSON format) between <VARIABLES> and </VARIABLES> tags. Every variable, trial input, and learnable parameter with its bounds must be clearly defined and connected to the observable trial data.\n9. Ensure that the formulation is concise, clear, and encourages innovative adjustments to improve model accuracy, BIC, and parameter recovery.\n\nBe creative and consider out-of-the-box modifications in the transformation if they can yield better performance while maintaining interpretability.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Additive offset in the fairness gap for numerical stability\",\n      \"range\": {\n        \"min\": -0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -0.1,\n          \"high\": 0.1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the fairness gap transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model for responder decision-making that computes a normalized fairness gap between the offered share and the fair share based on token counts. An optional additive offset is included for numerical stability. The fairness gap is normalized by a scaling parameter and then transformed using a power function to capture diminishing sensitivity. The resulting transformed gap is combined with a baseline bias and scaled by a sensitivity parameter to form the latent utility, which is subsequently converted to a decision probability using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi', 'delta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Additive offset in the fairness gap for numerical stability\",\n      \"range\": {\n        \"min\": -0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -0.1,\n          \"high\": 0.1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the fairness gap transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1, delta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fairness gap\n        fairness_gap = (split_self / combined_earning) - (token_self / (token_self + token_opp + 1e-9)) + delta #Adding a small number to avoid division by zero.\n\n        # Normalize fairness gap\n        normalized_gap = fairness_gap / phi\n\n        # Apply sign and power transformation\n        if normalized_gap > 0:\n            transformed_gap = math.copysign(1, normalized_gap) * abs(normalized_gap)**0.5\n        else:\n             transformed_gap = math.copysign(1, normalized_gap) * abs(normalized_gap)**0.5\n        \n\n        # Calculate utility\n        U = beta + gamma * transformed_gap\n\n        # Calculate probability of accepting the proposal\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1743538019.825272
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter that standardizes the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Additive offset in the fairness gap for numerical stability",
      "range": {
        "min": -0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -0.1,
          "high": 0.1
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))",
  "variable_descriptions": {
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "continuous",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "discrete",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline bias parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter that standardizes the fairness gap",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Additive offset in the fairness gap for numerical stability",
      "range": {
        "min": -0.1,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -0.1,
          "high": 0.1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed from the fairness gap transformation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "p_accept": {
      "description": "Probability of accepting the proposal computed via the logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model for responder decision-making that computes a normalized fairness gap between the offered share and the fair share based on token counts. An optional additive offset is included for numerical stability. The fairness gap is normalized by a scaling parameter and then transformed using a power function to capture diminishing sensitivity. The resulting transformed gap is combined with a baseline bias and scaled by a sensitivity parameter to form the latent utility, which is subsequently converted to a decision probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"continuous\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"discrete\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter that standardizes the fairness gap\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Additive offset in the fairness gap for numerical stability\",\n      \"range\": {\n        \"min\": -0.1,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -0.1,\n          \"high\": 0.1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the fairness gap transformation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p_accept\": {\n      \"description\": \"Probability of accepting the proposal computed via the logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model for responder decision-making that computes a normalized fairness gap between the offered share and the fair share based on token counts. An optional additive offset is included for numerical stability. The fairness gap is normalized by a scaling parameter and then transformed using a power function to capture diminishing sensitivity. The resulting transformed gap is combined with a baseline bias and scaled by a sensitivity parameter to form the latent utility, which is subsequently converted to a decision probability using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))\nSummary: A computational model for responder decision-making that computes a normalized fairness gap between the offered share and the fair share based on token counts. An optional additive offset is included for numerical stability. The fairness gap is normalized by a scaling parameter and then transformed using a power function to capture diminishing sensitivity. The resulting transformed gap is combined with a baseline bias and scaled by a sensitivity parameter to form the latent utility, which is subsequently converted to a decision probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1, delta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1) # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fairness gap\n        fairness_gap = (split_self / combined_earning) - (token_self / (token_self + token_opp + 1e-9)) + delta #Adding a small number to avoid division by zero.\n\n        # Normalize fairness gap\n        normalized_gap = fairness_gap / phi\n\n        # Apply sign and power transformation\n        if normalized_gap > 0:\n            transformed_gap = math.copysign(1, normalized_gap) * abs(normalized_gap)**0.5\n        else:\n             transformed_gap = math.copysign(1, normalized_gap) * abs(normalized_gap)**0.5\n        \n\n        # Calculate utility\n        U = beta + gamma * transformed_gap\n\n        # Calculate probability of accepting the proposal\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U > 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5876068376068376,
  "fitting_results": [
    {
      "beta": -1.0561857669877712,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.61107813892366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0366198907633326,
      "gamma": 7.516840997355623,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.23403326973938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.479790642839243,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.05736706037975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.002075037020739327,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09452343544003895,
      "success": true,
      "log_likelihood": -22.667640371603447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4704756558996643,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.673343611655643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.019114415827198,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.055366950674802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.019149128551332,
      "gamma": 6.627719926429674,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -19.691797006406556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2612835776971781,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09401544993275243,
      "success": true,
      "log_likelihood": -21.681497681160213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3457200492930133,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.81022134850766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0117996562046638,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.609593564195393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2553984708680106,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.065157529688957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.607742716140669,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.971896895049586,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -15.636311314454405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.143183971940173,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -14.664869659499068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.305524658374009,
      "gamma": 8.180399791337264,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.5274489869608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.653099453193959,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -15.803041981797476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6265724796448734,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.01761274950973265,
      "success": true,
      "log_likelihood": -23.697703004421946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4865672710680586,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.78597256233997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.886170698385186,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.52586316862276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.4912517130107985,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.102830100946075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7875198521664086,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.963547682116886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.07467854394295712,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.06909112263424906,
      "success": true,
      "log_likelihood": -22.170991647751524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.644253906712109,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -15.05923838562519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.869493065597043,
      "gamma": 9.647235532873603,
      "phi": 0.563548240344393,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -18.226783313966482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0552999315728182,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.611078137644856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4328279042553474,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.027694385752396997,
      "success": true,
      "log_likelihood": -24.21218235836408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5442146701601888,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09673723470366777,
      "success": true,
      "log_likelihood": -22.676550369248886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.231038372461308,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.2587990563835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.732984851830443,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -18.61420030730224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.116501728676698,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.834853995448448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.062888025936193,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.13143814564447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1451865044391765,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.91163394478436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.48634300031040095,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.042039163958184744,
      "success": true,
      "log_likelihood": -23.113259102537096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5610764051565903,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.06342543160724487,
      "success": true,
      "log_likelihood": -22.104821484231923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.7378286580950135,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.867333421173978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.209096750048331,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09991278788166391,
      "success": true,
      "log_likelihood": -20.261337040808872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5655042238096604,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.936197594888817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.48734383270885323,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.06996354888575215,
      "success": true,
      "log_likelihood": -23.07793384364972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4181106654014088,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.08967659611510698,
      "success": true,
      "log_likelihood": -21.57284615991873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7119463831067775,
      "gamma": 5.827842304367736,
      "phi": 0.5,
      "delta": 0.016408414381629682,
      "success": true,
      "log_likelihood": -24.50116845938325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.773257233691492,
      "gamma": 7.309394742619175,
      "phi": 0.5,
      "delta": 0.07314267942244591,
      "success": true,
      "log_likelihood": -21.07189851473462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0347503826257147,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.610366837696862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.742645260878945,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -22.911792372759685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.07857749475831899,
      "gamma": 9.528321559462674,
      "phi": 0.5,
      "delta": 0.06657790155672975,
      "success": true,
      "log_likelihood": -24.047118846013404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7210605020483032,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09039945445316291,
      "success": true,
      "log_likelihood": -22.764358081922524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.17941751342043918,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.09823541506709361,
      "success": true,
      "log_likelihood": -21.728077342313387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.12471658302927441,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.023851216166348704,
      "success": true,
      "log_likelihood": -23.530379923783258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.0935659668894372,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0372449090521745,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.610449337419784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.918765610214722,
      "gamma": 9.991275079195013,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -18.21083905597326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.02498726954178,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.50354548212137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6137537335727943,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.992150860447087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0556966382896802,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.61107813488498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1165350070251322,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.02830339939562787,
      "success": true,
      "log_likelihood": -24.231105038672126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5097138086259563,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.017804122993819012,
      "success": true,
      "log_likelihood": -23.673038720500944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.3836178987529584,
      "gamma": 9.61763857571375,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.250878305405223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.8994490128474508,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.403915942007664,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -15.8463286291681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3164394544163966,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -22.05259982250561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.859639418193211,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.01960033956969687,
      "success": true,
      "log_likelihood": -23.724603150746244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0352487176625234,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.610381595603332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8523439232843706,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.945774099133153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.091136826381886,
      "gamma": 9.688085668571759,
      "phi": 1.4999303690619168,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -18.74841363678742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1680001456498101,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -23.08019928532883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.48638126746187,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -19.933921120942028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.70512828954618,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.95343816674228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4537349681450022,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.06441373112434692,
      "success": true,
      "log_likelihood": -22.113705645563883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0557007755700047,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.611078134884693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.35560560397680874,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.02133179836228443,
      "success": true,
      "log_likelihood": -23.518913947614067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.878600735998114,
      "phi": 1.5,
      "delta": -0.1,
      "success": true,
      "log_likelihood": -24.9534292156143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.736627869197515,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -22.390782678684314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6593703293121084,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -22.192706019922728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.177633413536855,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": -0.013603630570960623,
      "success": true,
      "log_likelihood": -24.25974288115771,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.928460756689758,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -20.403250898423973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9369510370017303,
      "gamma": 9.756969154077089,
      "phi": 0.5,
      "delta": 0.09245984329796346,
      "success": true,
      "log_likelihood": -23.92191511341222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.966455923534584,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -13.262923429924674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4277026610648741,
      "gamma": 4.959156657097264,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -23.90414172768483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.383795817917699,
      "gamma": 10.0,
      "phi": 0.5,
      "delta": 0.1,
      "success": true,
      "log_likelihood": -21.486871009996328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6329305306516243,
        "p": 1.6057196806267543e-12
      },
      "gamma": {
        "r": 0.05058973547692748,
        "p": 0.6171756075588112
      },
      "phi": {
        "r": 0.06904466701973858,
        "p": 0.49487147441508667
      },
      "delta": {
        "r": 0.15336261822746058,
        "p": 0.1276656950539583
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 54.29263467486537,
  "bic_results": {
    "average_bic": 54.29263467486537,
    "individual_bics": [
      63.556232031671755,
      56.802142293303206,
      54.448809874583944,
      59.66935649703133,
      55.68076297713573,
      54.44480965517404,
      36.889796334323506,
      53.717669766637556,
      36.889796334323506,
      57.69707111614487,
      55.95451845083976,
      63.55326288221522,
      56.46439081320236,
      36.889796334323506,
      36.889796334323506,
      36.889796334323506,
      36.889796334323506,
      45.60669838273325,
      43.66381507282257,
      36.889796334323506,
      55.388973727746034,
      45.94015971741939,
      61.72948176266833,
      57.90602087850438,
      55.38580209106996,
      54.539735955716594,
      56.261171118058215,
      58.67605904932749,
      44.45255252507482,
      50.78764238175741,
      36.889796334323506,
      63.556232029114156,
      62.7584404705526,
      59.68717649232221,
      36.889796334323506,
      56.85167386659144,
      51.56247636842892,
      56.00378374472133,
      54.59695204511338,
      42.88952394570113,
      56.15734364339316,
      60.560593958898636,
      38.88970553811605,
      58.54371872228829,
      56.0687425961724,
      54.85674983544219,
      58.20647094360207,
      60.489943441123884,
      57.4797680736619,
      63.33641267259094,
      56.47787278329368,
      63.55480942921817,
      60.157660499343805,
      62.428313445851245,
      59.86279191766948,
      57.79023043845122,
      61.39483560139095,
      44.889433149493684,
      63.55497442866401,
      50.755753865770956,
      57.341166718067186,
      56.318377474718616,
      63.556232023594404,
      62.79628583116869,
      61.68015319482633,
      56.83583236463488,
      42.889523945701136,
      46.02673301216064,
      58.43927539883566,
      42.88952394570114,
      61.78328205531693,
      63.55483894503111,
      58.22562395209074,
      51.83090302739927,
      60.4944743244821,
      54.2019179957085,
      40.889614741908595,
      64.240952087309,
      58.5614870449522,
      63.55623202359382,
      61.37190364905257,
      42.889523945701136,
      64.24093418505304,
      59.11564111119307,
      58.7194877936699,
      62.85356151613986,
      55.14057755067239,
      62.17790598064887,
      40.85992261367379,
      62.1423592091941,
      57.30781777381709
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.633\n- gamma: r = 0.051\n- phi: r = 0.069\n- delta: r = 0.153",
  "previous_models": [
    "Specification: U = beta + gamma * (sgn(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi) * abs(((split_self/combined_earning) - (token_self/(token_self+token_opp)) + delta)/phi)^(0.5))\np_accept = 1/(1+exp(-U))\nSummary: A computational model for responder decision-making that computes a normalized fairness gap between the offered share and the fair share based on token counts. An optional additive offset is included for numerical stability. The fairness gap is normalized by a scaling parameter and then transformed using a power function to capture diminishing sensitivity. The resulting transformed gap is combined with a baseline bias and scaled by a sensitivity parameter to form the latent utility, which is subsequently converted to a decision probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 54.29263467486537\nOverall Accuracy: 0.5876\n\nParameter Recovery:\n- beta: r = 0.633\n- gamma: r = 0.051\n- phi: r = 0.069\n- delta: r = 0.153"
  ]
}