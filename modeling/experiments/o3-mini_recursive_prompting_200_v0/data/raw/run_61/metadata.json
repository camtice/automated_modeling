{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this next run, simplify the extra blending stage by removing redundant oscillatory modulations altogether and replacing the squared tanh damping with a single softplus adjustment on 1/(1+a). Keep the sequential modulation steps as specified but streamline them if possible to avoid overfitting. Emphasize that the composite blending factor in step 11 must now simply combine the exponential decay, a softsign transformation, the adaptive reciprocal sine modulation, and the softplus alternative on 1/(1+a). Retain exactly three learnable parameters with the specified bounds\u2014beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]\u2014and require that the extra multiplicative offset factor remains fixed at 1.0 (within bounds [0.999, 1.001]). Encourage creative, out\u2010of\u2010the\u2010box approaches while maintaining parsimony to improve accuracy, lower BIC, and enhance parameter recovery.\n</think>\nN_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer \u2013 N_share  \nx = F / phi  \na = |x|  \n\nCompute the core nonlinear components using:\n\u2003\u2022 a^(0.5)\n\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)  \nSum these components and add a constant delta = 0.01.\n\nModulate this aggregate by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n\nMultiply Intermediate_Signal by a fixed constant C = 1.08.\n\nThen, sequentially modulate this result with:\n\u2003a. [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003b. [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003c. [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003d. [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003e. [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\nApply the hybrid adaptive ReLU\u2010like function defined by:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }  \nto the sequentially modulated signal.\n\nFor the extra blending stage, replace the previous squared tanh damping with a composite factor that consists of:\n\u2003\u2022 Exponential decay: exp(\u2212a / 0.1)\n\u2003\u2022 A softsign transformation: z/(1 + |z|) applied on the sequentially modulated signal\n\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))]\n\u2003\u2022 A damping factor using the softplus alternative applied to 1/(1 + a), that is, softplus(1/(1 + a)) = ln(1 + exp(1/(1 + a))).\n\nMultiply the composite factor by the fixed extra multiplicative offset (offset_factor) set to 1.0 (with bounds [0.999, 1.001]). Add an offset of 1e-6 for numerical stability, then compress the final blended signal by raising it to the fixed exponent E = 0.92.\n\nDefine the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations, the adaptive ReLU output, and the extra blending stage as defined with the new composite factor]^(0.92) }.\n\nCompute the latent utility U as:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n\nFinally, map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, the only learnable parameters are beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Think unconventionally while simplifying the blending stage to tame extreme values and improve overall performance (accuracy, lower BIC) and parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this next run, simplify the extra blending stage by removing redundant oscillatory modulations altogether and replacing the squared tanh damping with a single softplus adjustment on 1/(1+a). Keep the sequential modulation steps as specified but streamline them if possible to avoid overfitting. Emphasize that the composite blending factor in step 11 must now simply combine the exponential decay, a softsign transformation, the adaptive reciprocal sine modulation, and the softplus alternative on 1/(1+a). Retain exactly three learnable parameters with the specified bounds\u2014beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]\u2014and require that the extra multiplicative offset factor remains fixed at 1.0 (within bounds [0.999, 1.001]). Encourage creative, out\u2010of\u2010the\u2010box approaches while maintaining parsimony to improve accuracy, lower BIC, and enhance parameter recovery.\n</think>\nN_offer = split_self / combined_earning  \nN_share = token_self / (token_self + token_opp)  \nF = N_offer \u2013 N_share  \nx = F / phi  \na = |x|  \n\nCompute the core nonlinear components using:\n\u2003\u2022 a^(0.5)\n\u2003\u2022 ln(1 + 3.4 \u00d7 a)\n\u2003\u2022 0.2 \u00d7 arctan(1.1 \u00d7 a)\n\u2003\u2022 0.1 \u00d7 [1 \u2212 exp(\u2212a)]\n\u2003\u2022 0.05 \u00d7 [1 \u2212 exp(\u22122 \u00d7 a)]\n\u2003\u2022 0.03 \u00d7 tanh(a)\n\u2003\u2022 0.02 \u00d7 sin(0.5 \u00d7 a)\n\u2003\u2022 0.012 \u00d7 [1 \u2212 cos(0.3 \u00d7 a)]\n\u2003\u2022 0.005 \u00d7 exp(\u2212a)\n\u2003\u2022 0.005 \u00d7 sin(2.2 \u00d7 a)\n\u2003\u2022 0.002 \u00d7 cos(3.0 \u00d7 a)  \nSum these components and add a constant delta = 0.01.\n\nModulate this aggregate by multiplying by [1 + 0.012 \u00d7 sin(a + 0.045)] to obtain an Intermediate_Signal.\n\nMultiply Intermediate_Signal by a fixed constant C = 1.08.\n\nThen, sequentially modulate this result with:\n\u2003a. [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003b. [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003c. [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003d. [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003e. [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))].\n\nApply the hybrid adaptive ReLU\u2010like function defined by:\n\u2003\u2003f_adapt(z) = { if z < 0 then 0.01 \u00d7 z, else min(z, 1 + ln(1 + z)) }  \nto the sequentially modulated signal.\n\nFor the extra blending stage, replace the previous squared tanh damping with a composite factor that consists of:\n\u2003\u2022 Exponential decay: exp(\u2212a / 0.1)\n\u2003\u2022 A softsign transformation: z/(1 + |z|) applied on the sequentially modulated signal\n\u2003\u2022 An adaptive reciprocal sine modulation: [1 + 0.005 \u00d7 sin(1/(1 + a))]\n\u2003\u2022 A damping factor using the softplus alternative applied to 1/(1 + a), that is, softplus(1/(1 + a)) = ln(1 + exp(1/(1 + a))).\n\nMultiply the composite factor by the fixed extra multiplicative offset (offset_factor) set to 1.0 (with bounds [0.999, 1.001]). Add an offset of 1e-6 for numerical stability, then compress the final blended signal by raising it to the fixed exponent E = 0.92.\n\nDefine the nonlinear function f(x) as:\n\u2003\u2003f(x) = sign(x) \u00d7 { [C \u00d7 (core nonlinear sum + delta) \u00d7 (product of the sequential modulations, the adaptive ReLU output, and the extra blending stage as defined with the new composite factor]^(0.92) }.\n\nCompute the latent utility U as:\n\u2003\u2003U = beta + gamma \u00d7 f(x).\n\nFinally, map U to an acceptance probability via the logistic function:\n\u2003\u2003p_accept = 1 / (1 + exp(\u2212U)).\n\nRemember, the only learnable parameters are beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]. Think unconventionally while simplifying the blending stage to tame extreme values and improve overall performance (accuracy, lower BIC) and parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility offset parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness difference division\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model that computes a fairness-based signal from the ratio of participant share to combined earnings and token contributions. The signal undergoes a core nonlinear transformation, multiple sequential modulations, an adaptive ReLU-like adjustment, and an extra blending stage using an exponential, softsign, reciprocal sine, and softplus composite. The transformed signal is scaled by gamma and offset by beta, then passed through a logistic function to yield the acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility offset parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness difference division\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0.0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0.0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        \n        S_core = (a**0.5) + math.log(1 + 3.4*a) + 0.2 * math.atan(1.1*a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2*a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5*a) + 0.012 * (1 - math.cos(0.3*a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2*a) + 0.002 * math.cos(3.0*a) + 0.01\n        Intermediate_Signal = S_core * (1 + 0.012 * math.sin(a + 0.045))\n        S1 = 1.08 * Intermediate_Signal\n        M1 = 1 + 0.008 * math.cos(a + 0.065)\n        M2 = 1 + 0.005 * math.sin(a + 0.115)\n        M3 = 1 + 0.004 * math.cos(a + 0.085)\n        M4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        M5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        S2 = S1 * M1 * M2 * M3 * M4 * M5\n        \n        f_adapt = 0.01 * S2 if S2 < 0 else min(S2, 1 + math.log(1 + S2))\n\n        Composite = math.exp(-a / 0.1) * (S2 / (1 + abs(S2))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.log(1 + math.exp(1 / (1 + a)))\n        B_prime = (Composite * 1.0) + 1e-6\n        B_final = B_prime**0.92\n        f_x = (1 if x >= 0 else -1) * (f_adapt * B_final)**0.92\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 0, \"token_self\": 10, \"combined_earning\": 8, \"split_opp\": 4.8, \"split_self\": 3.2, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 3.2, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 3.2}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 8, \"split_opp\": 4.8, \"split_self\": 3.2, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 3.2}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 8, \"split_opp\": 4.8, \"split_self\": 3.2, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 3.2, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 3.2}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743541826.549668
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base utility offset parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of fairness signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness difference division",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "beta": {
      "description": "Base utility offset parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the nonlinear transformation of fairness signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Scaling parameter for the fairness difference division",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant in monetary units",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earnings in monetary units",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A nonlinear utility model that computes a fairness-based signal from the ratio of participant share to combined earnings and token contributions. The signal undergoes a core nonlinear transformation, multiple sequential modulations, an adaptive ReLU-like adjustment, and an extra blending stage using an exponential, softsign, reciprocal sine, and softplus composite. The transformed signal is scaled by gamma and offset by beta, then passed through a logistic function to yield the acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nN_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta\": {\n      \"description\": \"Base utility offset parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the nonlinear transformation of fairness signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Scaling parameter for the fairness difference division\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings in monetary units\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model that computes a fairness-based signal from the ratio of participant share to combined earnings and token contributions. The signal undergoes a core nonlinear transformation, multiple sequential modulations, an adaptive ReLU-like adjustment, and an extra blending stage using an exponential, softsign, reciprocal sine, and softplus composite. The transformed signal is scaled by gamma and offset by beta, then passed through a logistic function to yield the acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model that computes a fairness-based signal from the ratio of participant share to combined earnings and token contributions. The signal undergoes a core nonlinear transformation, multiple sequential modulations, an adaptive ReLU-like adjustment, and an extra blending stage using an exponential, softsign, reciprocal sine, and softplus composite. The transformed signal is scaled by gamma and offset by beta, then passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0, gamma=1.0, phi=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        N_offer = split_self / combined_earning if combined_earning > 0 else 0.0\n        N_share = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0.0\n        F = N_offer - N_share\n        x = F / phi\n        a = abs(x)\n        \n        S_core = (a**0.5) + math.log(1 + 3.4*a) + 0.2 * math.atan(1.1*a) + 0.1 * (1 - math.exp(-a)) + 0.05 * (1 - math.exp(-2*a)) + 0.03 * math.tanh(a) + 0.02 * math.sin(0.5*a) + 0.012 * (1 - math.cos(0.3*a)) + 0.005 * math.exp(-a) + 0.005 * math.sin(2.2*a) + 0.002 * math.cos(3.0*a) + 0.01\n        Intermediate_Signal = S_core * (1 + 0.012 * math.sin(a + 0.045))\n        S1 = 1.08 * Intermediate_Signal\n        M1 = 1 + 0.008 * math.cos(a + 0.065)\n        M2 = 1 + 0.005 * math.sin(a + 0.115)\n        M3 = 1 + 0.004 * math.cos(a + 0.085)\n        M4 = 1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055))\n        M5 = 1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05))\n        S2 = S1 * M1 * M2 * M3 * M4 * M5\n        \n        f_adapt = 0.01 * S2 if S2 < 0 else min(S2, 1 + math.log(1 + S2))\n\n        Composite = math.exp(-a / 0.1) * (S2 / (1 + abs(S2))) * (1 + 0.005 * math.sin(1 / (1 + a))) * math.log(1 + math.exp(1 / (1 + a)))\n        B_prime = (Composite * 1.0) + 1e-6\n        B_final = B_prime**0.92\n        f_x = (1 if x >= 0 else -1) * (f_adapt * B_final)**0.92\n        U = beta + gamma * f_x\n        p_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5753968253968255,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953412655810705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5562920381430729,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.30503039157257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.672335985432582,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.37344775037102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5104477516333912,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.64534824863842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2323121734027027,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.560295200636347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7926028328964998,
      "gamma": 5.426745709260884,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.440177744541938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.976309109620553,
      "gamma": 3.1897021223786384,
      "phi": 0.6765605203800763,
      "success": true,
      "log_likelihood": -23.277036482928104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.483907839974482,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.63365129002941,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2357022923090277,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.5614399427589,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95339835549349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.259993609729004,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.565628406865653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.386563894561639e-17,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2217558111815945,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.180821653180836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.103424685646891,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.78530922668709,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5318766174430005,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.31902863501052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7303586795062241,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.382226259056278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.14522316201596386,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.015881922549724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.061743079487210785,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.0956677964637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9734770503906223,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.754701272821556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95341265581071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8965071465918706,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.753647225018685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5408850080836476,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.650743666117773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.4346985684498301,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.04304242682842,
      "gamma": 7.964205993329419,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.346027899238134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5783464845637207,
      "gamma": 0.4828691725456606,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.157113897002272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6825111927931738,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.362576126421324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6826534930204096,
      "gamma": 8.835665945406497,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.71555503439864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.339620148757461,
      "gamma": 1.1275875184916393,
      "phi": 1.3905042117069604,
      "success": true,
      "log_likelihood": -24.95237540989002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.344033390680054,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.824550787075918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.11609065514634022,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.125283382596674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5995608222461195,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.80836738321749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.2214974031274193,
      "gamma": 9.174360966647294,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -21.20727634470082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.32599853513170596,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.20611862406885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5130367845889634,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.643277884194298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.334327795096373,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.59020607055204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.499167500911602,
      "gamma": 9.294028976360861,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.85222579493435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5237711929701185,
      "gamma": 0.007246967084660759,
      "phi": 0.61610460073152,
      "success": true,
      "log_likelihood": -22.157929094879215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953396100837054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8174784576438835,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.48673466311555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790639346215493,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.450957568512138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5620548084970045,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.656495116407154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.7379265412771066,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.700484001262026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.224632486842223,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.80541638069111,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.447736038289691,
      "phi": 0.5113964905122075,
      "success": true,
      "log_likelihood": -15.277652734132408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95340448513216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8050351200451725,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.586850950077594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6121857973158212,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.326462672538042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953412655810713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0635820562896146,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.78758460537407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.5570779642901242,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.856169051133868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.02977208301748317,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.070825538774617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5717397230803666,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.2847244396424389,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.2322728353741,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.046047632189314,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.904817411889713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953395521904916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7076476454100002,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.396741611722486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7222031002717371,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.919252037872102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8544750059744473,
      "gamma": 3.940546862736995,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.11711698381026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.89740948871664,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953696759902176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.683760720020436,
      "gamma": 3.304394072906901,
      "phi": 0.8233235310721093,
      "success": true,
      "log_likelihood": -24.95136682829855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953412655810713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4417656179903668,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.27107622656129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.402927355854302,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.95366708885748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0917360233552824,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.525505986589696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9254547020537883,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -23.29439890550038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.6333899590277943,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.93493550230256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3106396763596506,
      "gamma": 8.7015582899504,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.029509651103155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.591540569371753,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.953453685501724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.0,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4161533351509992,
      "gamma": 10.0,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -24.625078842950174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1874053993164715,
      "gamma": 8.041497528617809,
      "phi": 1.5,
      "success": true,
      "log_likelihood": -22.03322587241301,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6913808973084111,
        "p": 1.684327725029824e-15
      },
      "gamma": {
        "r": 0.07544137343909602,
        "p": 0.45567171312319044
      },
      "phi": {
        "r": -0.1892690236446962,
        "p": 0.05929779752792541
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.59986996554746,
  "bic_results": {
    "average_bic": 53.59986996554746,
    "individual_bics": [
      60.657382126989745,
      59.36061759851347,
      59.49745231611037,
      60.04125331264517,
      59.87114721664102,
      57.63091230445221,
      33.3062773958674,
      57.304629781224534,
      33.3062773958674,
      60.01785939542715,
      59.87343670088613,
      60.65735352635531,
      59.88181362909964,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      59.11220012173,
      43.305823414830115,
      60.32117526874251,
      59.388614085389364,
      59.51500933348089,
      58.782320660467775,
      58.94189240829573,
      60.25995936101144,
      41.305914211037575,
      49.30555102620774,
      33.3062773958674,
      60.657382126989745,
      60.257851265405705,
      60.05204414760388,
      33.3062773958674,
      57.4426126138446,
      55.06478460937288,
      59.475709068210975,
      56.18166688416561,
      39.30600500724502,
      60.655307635148375,
      60.39965838952017,
      35.30618659965994,
      59.00112358056168,
      58.367291581803315,
      53.16510950476997,
      59.16279406350603,
      60.03711258375692,
      59.93096895647241,
      60.455008405237024,
      55.06641500512676,
      60.657349017042435,
      59.724026141599424,
      59.6524719523926,
      60.06354704818264,
      60.15152481789238,
      60.361389576750554,
      41.30586228363315,
      60.65736578563265,
      47.3056418224152,
      57.92425871552352,
      59.40348216044441,
      60.65738212698976,
      60.32572602611647,
      60.46289491763606,
      58.89220789291757,
      39.30600500724503,
      43.3058234148301,
      59.215102486116535,
      39.306005007245034,
      60.56019163914776,
      60.65734785917816,
      59.54404003881331,
      49.30555102620774,
      60.58906089111254,
      54.98479078298885,
      37.306095803452486,
      60.657950335172686,
      60.653290471965434,
      60.65738212698976,
      59.29270926849091,
      39.30600500724503,
      60.657890993083285,
      59.801568788547726,
      57.33935462636909,
      60.62042781997346,
      54.809576117574636,
      60.65746418637178,
      37.306095803452486,
      60.000714501268675,
      54.81700856019435
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.691\n- gamma: r = 0.075\n- phi: r = -0.189",
  "previous_models": [
    "Specification: N_offer = split_self / combined_earning\nN_share = token_self / (token_self + token_opp)\nF = N_offer - N_share\nx = F / phi\na = |x|\nS_core = a^(0.5) + ln(1 + 3.4*a) + 0.2 * arctan(1.1*a) + 0.1 * (1 - exp(-a)) + 0.05 * (1 - exp(-2*a)) + 0.03 * tanh(a) + 0.02 * sin(0.5*a) + 0.012 * (1 - cos(0.3*a)) + 0.005 * exp(-a) + 0.005 * sin(2.2*a) + 0.002 * cos(3.0*a) + 0.01\nIntermediate_Signal = S_core * (1 + 0.012 * sin(a + 0.045))\nS1 = 1.08 * Intermediate_Signal\nM1 = 1 + 0.008 * cos(a + 0.065)\nM2 = 1 + 0.005 * sin(a + 0.115)\nM3 = 1 + 0.004 * cos(a + 0.085)\nM4 = 1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055))\nM5 = 1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05))\nS2 = S1 * M1 * M2 * M3 * M4 * M5\nf_adapt = { if S2 < 0 then 0.01 * S2 else min(S2, 1 + ln(1 + S2)) }\nComposite = exp(-a / 0.1) * (S2 / (1 + |S2|)) * (1 + 0.005 * sin(1 / (1 + a))) * ln(1 + exp(1 / (1 + a)))\nB_prime = (Composite * 1.0) + 1e-6\nB_final = B_prime^(0.92)\nf_x = sign(x) * (f_adapt * B_final)^(0.92)\nU = beta + gamma * f_x\np_accept = 1 / (1 + exp(-U))\nSummary: A nonlinear utility model that computes a fairness-based signal from the ratio of participant share to combined earnings and token contributions. The signal undergoes a core nonlinear transformation, multiple sequential modulations, an adaptive ReLU-like adjustment, and an extra blending stage using an exponential, softsign, reciprocal sine, and softplus composite. The transformed signal is scaled by gamma and offset by beta, then passed through a logistic function to yield the acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.59986996554746\nOverall Accuracy: 0.5754\n\nParameter Recovery:\n- beta: r = 0.691\n- gamma: r = 0.075\n- phi: r = -0.189"
  ]
}