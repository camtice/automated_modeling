{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 91, let\u2019s further enhance the model by incorporating an additional sixth\u2010order (quintic plus one) term into the dynamic threshold factor to better adjust for high \u201ca\u201d values and also allow the extra blending exponent to vary dynamically with \u201ca\u201d (for example, by adding a term proportional to ln(1+a) so that the effective exponent increases slightly for larger values). We can also suggest replacing part of the extra composite with a softplus function as an alternative to ln(1+exp(\u2026)) to see if that helps smooth extreme values. Maintain the sequential modulation factors as before and keep the three learnable parameters with the same bounds.\n</think>\n\nNew Instructions for Run 91 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as:\n\u2003\u2003f_adapt(z) = { 0.012\u00d7z\u2003if z < 0;\u2003min(z, 1 + ln(1+z))\u2003if z \u2265 0 }.\nThen multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076.\n7. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1 + |z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 softplus(0.865/(1+a)) \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.0001\u00d7ln(1+a))\n\u2003\u2003(Note: Here softplus(x) = ln(1+exp(x)).)\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.0001\u00d7ln(1+a) ).\n9. Compute the latent utility U = beta + gamma\u00d7f(x), then convert it into an acceptance probability via the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nThese instructions encourage dynamic adjustments in the threshold factor and allow the extra composite exponent to grow slightly with \u201ca\u201d. Additionally, substituting or blending in a softplus function in the extra term is recommended to further smooth extreme variations. This should help boost accuracy, reduce BIC, and improve parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 91, let\u2019s further enhance the model by incorporating an additional sixth\u2010order (quintic plus one) term into the dynamic threshold factor to better adjust for high \u201ca\u201d values and also allow the extra blending exponent to vary dynamically with \u201ca\u201d (for example, by adding a term proportional to ln(1+a) so that the effective exponent increases slightly for larger values). We can also suggest replacing part of the extra composite with a softplus function as an alternative to ln(1+exp(\u2026)) to see if that helps smooth extreme values. Maintain the sequential modulation factors as before and keep the three learnable parameters with the same bounds.\n</think>\n\nNew Instructions for Run 91 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as:\n\u2003\u2003f_adapt(z) = { 0.012\u00d7z\u2003if z < 0;\u2003min(z, 1 + ln(1+z))\u2003if z \u2265 0 }.\nThen multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076.\n7. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1 + |z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 softplus(0.865/(1+a)) \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.0001\u00d7ln(1+a))\n\u2003\u2003(Note: Here softplus(x) = ln(1+exp(x)).)\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.0001\u00d7ln(1+a) ).\n9. Compute the latent utility U = beta + gamma\u00d7f(x), then convert it into an acceptance probability via the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nThese instructions encourage dynamic adjustments in the threshold factor and allow the extra composite exponent to grow slightly with \u201ca\u201d. Additionally, substituting or blending in a softplus function in the extra term is recommended to further smooth extreme variations. This should help boost accuracy, reduce BIC, and improve parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"A small constant added to ensure robustness (e.g., 1e-6)\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"delta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent acceptance bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive exponent base parameter for dynamic adjustments\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a1\": {\n      \"description\": \"Intermediate value after multiplicative sine modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a2\": {\n      \"description\": \"Scaled version of a1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Value after sequential modulation of a2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a piecewise definition\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial series in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Effective exponent combining phi and a logarithmic term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite computed with exponential, trigonometric and softplus functions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after adaptive, threshold, and extra composite modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum \u201ca\u201d from 11 fixed components plus a constant and applies sequential multiplicative modulations using sine and cosine functions. An adaptive transformation is defined piecewise on the modulated signal \u201cz\u201d. This is further adjusted by a dynamic threshold factor T and an extra blending composite that incorporates exponential, trigonometric, and softplus functions. A dynamic exponent E, which varies with \u201ca\u201d and is anchored by the learnable parameter phi, is applied in both the extra composite and the final transformation. The latent utility U is then obtained as a linear combination of a base parameter beta and the transformed signal f scaled by gamma. Finally, a logistic function converts U into an acceptance probability predicting responder behavior.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"A small constant added to ensure robustness (e.g., 1e-6)\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"delta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent acceptance bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive exponent base parameter for dynamic adjustments\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a1\": {\n      \"description\": \"Intermediate value after multiplicative sine modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a2\": {\n      \"description\": \"Scaled version of a1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Value after sequential modulation of a2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a piecewise definition\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial series in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Effective exponent combining phi and a logarithmic term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite computed with exponential, trigonometric and softplus functions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after adaptive, threshold, and extra composite modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a1 = a * (1 + 0.012*math.sin(a + 0.045))\n        a2 = 1.08 * a1\n        z = a2 * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        f_adapt = (0.012*z) if z < 0 else min(z, 1 + math.log(1+z))\n        T = 1 + 0.0005*a**2 + 0.00005*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6\n        E = phi + 0.0001*math.log(1+a)\n        extra = ( math.exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*math.sin(1/(1+a))) * math.log(1+math.exp(0.865/(1+a))) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6 )**(E)\n        f = (1 if z >= 0 else -1) * ( f_adapt * T * extra )**(E)\n        U = beta + gamma * f\n        P = 1/(1+math.exp(-U))\n        model_predictions.append(P)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 1,\n    \"group\": \"proposer\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 30,\n    \"token_self\": 10,\n    \"combined_earning\": 40,\n    \"split_opp\": 22.5,\n    \"split_self\": 7.5,\n    \"splitperc_opp\": 75,\n    \"splitperc_self\": 75,\n    \"accept\": 0.0,\n    \"accepted_amount\": null,\n    \"accepted_perc\": null,\n    \"proposed_perc\": 75.0,\n    \"proposed_amount\": 7.5,\n    \"F1\": 1.0,\n    \"F2\": 2.0,\n    \"F3\": 3.0,\n    \"F4\": 4.0,\n    \"F5\": 5.0,\n    \"F6\": 6.0,\n    \"F7\": 7.0,\n    \"F8\": 8.0,\n    \"F9\": 9.0,\n    \"F10\": 10.0,\n    \"F11\": 11.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"responder\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 30,\n    \"token_self\": 10,\n    \"combined_earning\": 40,\n    \"split_opp\": 22.5,\n    \"split_self\": 7.5,\n    \"splitperc_opp\": 75,\n    \"splitperc_self\": 75,\n    \"accept\": 0.0,\n    \"accepted_amount\": null,\n    \"accepted_perc\": null,\n    \"proposed_perc\": 75.0,\n    \"proposed_amount\": 7.5,\n    \"F1\": 1.1,\n    \"F2\": 2.1,\n    \"F3\": 3.1,\n    \"F4\": 4.1,\n    \"F5\": 5.1,\n    \"F6\": 6.1,\n    \"F7\": 7.1,\n    \"F8\": 8.1,\n    \"F9\": 9.1,\n    \"F10\": 10.1,\n    \"F11\": 11.1\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743543979.27691
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base tendency parameter (inherent acceptance bias)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive exponent base parameter for dynamic adjustments",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 derived from the proposal context",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "A small constant added to ensure robustness (e.g., 1e-6)",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "delta",
        "parameters": {}
      },
      "learnable": false,
      "source": "fixed"
    },
    "beta": {
      "description": "Base tendency parameter (inherent acceptance bias)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f(x)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Adaptive exponent base parameter for dynamic adjustments",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": 0.5,
          "max": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components plus delta",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a1": {
      "description": "Intermediate value after multiplicative sine modulation of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a2": {
      "description": "Scaled version of a1",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Value after sequential modulation of a2",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z with a piecewise definition",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold factor computed as a polynomial series in a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "E": {
      "description": "Effective exponent combining phi and a logarithmic term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite computed with exponential, trigonometric and softplus functions",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal after adaptive, threshold, and extra composite modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of beta and the transformed signal f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P": {
      "description": "Predicted acceptance probability obtained by applying a logistic transform to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes a core sum \u201ca\u201d from 11 fixed components plus a constant and applies sequential multiplicative modulations using sine and cosine functions. An adaptive transformation is defined piecewise on the modulated signal \u201cz\u201d. This is further adjusted by a dynamic threshold factor T and an extra blending composite that incorporates exponential, trigonometric, and softplus functions. A dynamic exponent E, which varies with \u201ca\u201d and is anchored by the learnable parameter phi, is applied in both the extra composite and the final transformation. The latent utility U is then obtained as a linear combination of a base parameter beta and the transformed signal f scaled by gamma. Finally, a logistic function converts U into an acceptance probability predicting responder behavior.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from the proposal context\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"A small constant added to ensure robustness (e.g., 1e-6)\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"delta\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent acceptance bias)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f(x)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Adaptive exponent base parameter for dynamic adjustments\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": 0.5,\n          \"max\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components plus delta\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a1\": {\n      \"description\": \"Intermediate value after multiplicative sine modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a2\": {\n      \"description\": \"Scaled version of a1\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Value after sequential modulation of a2\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z with a piecewise definition\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial series in a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"E\": {\n      \"description\": \"Effective exponent combining phi and a logarithmic term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite computed with exponential, trigonometric and softplus functions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after adaptive, threshold, and extra composite modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of beta and the transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Predicted acceptance probability obtained by applying a logistic transform to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes a core sum \u201ca\u201d from 11 fixed components plus a constant and applies sequential multiplicative modulations using sine and cosine functions. An adaptive transformation is defined piecewise on the modulated signal \u201cz\u201d. This is further adjusted by a dynamic threshold factor T and an extra blending composite that incorporates exponential, trigonometric, and softplus functions. A dynamic exponent E, which varies with \u201ca\u201d and is anchored by the learnable parameter phi, is applied in both the extra composite and the final transformation. The latent utility U is then obtained as a linear combination of a base parameter beta and the transformed signal f scaled by gamma. Finally, a logistic function converts U into an acceptance probability predicting responder behavior.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))\nSummary: The model computes a core sum \u201ca\u201d from 11 fixed components plus a constant and applies sequential multiplicative modulations using sine and cosine functions. An adaptive transformation is defined piecewise on the modulated signal \u201cz\u201d. This is further adjusted by a dynamic threshold factor T and an extra blending composite that incorporates exponential, trigonometric, and softplus functions. A dynamic exponent E, which varies with \u201ca\u201d and is anchored by the learnable parameter phi, is applied in both the extra composite and the final transformation. The latent utility U is then obtained as a linear combination of a base parameter beta and the transformed signal f scaled by gamma. Finally, a logistic function converts U into an acceptance probability predicting responder behavior.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    delta = 1e-6\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\n        a1 = a * (1 + 0.012*math.sin(a + 0.045))\n        a2 = 1.08 * a1\n        z = a2 * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n        f_adapt = (0.012*z) if z < 0 else min(z, 1 + math.log(1+z))\n        T = 1 + 0.0005*a**2 + 0.00005*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6\n        E = phi + 0.0001*math.log(1+a)\n        extra = ( math.exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*math.sin(1/(1+a))) * math.log(1+math.exp(0.865/(1+a))) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1+math.cosh(0.001*a))**(2+0.0005*a) + 1e-6 )**(E)\n        f = (1 if z >= 0 else -1) * ( f_adapt * T * extra )**(E)\n        U = beta + gamma * f\n        P = 1/(1+math.exp(-U))\n        model_predictions.append(P)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5573870573870574,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 5.858426410324844,
      "phi": 1.1673620569162857,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.4141785512498135,
      "gamma": 7.790121524768663,
      "phi": 1.215239901929659,
      "success": true,
      "log_likelihood": -24.95331052961922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0778608209691134,
      "gamma": 0.8149855184043242,
      "phi": 1.0323225045519802,
      "success": true,
      "log_likelihood": -24.89771433189996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.950805706649415,
      "phi": 1.315342818900939,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.3673438935903413,
      "phi": 1.436962910310278,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2840742726729649,
      "gamma": 7.130706753259294,
      "phi": 1.0115331396192961,
      "success": true,
      "log_likelihood": -23.545973163849563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.348474975065973,
      "phi": 0.9355045971923349,
      "success": true,
      "log_likelihood": -11.277860290249322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148765826128689,
      "gamma": 8.364873314827236,
      "phi": 1.319877622436402,
      "success": true,
      "log_likelihood": -22.914510051414336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 0.5357526352040265,
      "phi": 0.8368598540781331,
      "success": true,
      "log_likelihood": -11.277860290248977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.782512487553995,
      "phi": 1.369332660823389,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.298287910129266,
      "phi": 1.397944491719703,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.064113553659332,
      "phi": 1.4906928138695528,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.407011766737654,
      "phi": 1.303245861422387,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 2.7904277187567885,
      "phi": 1.4153519329222375,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 4.2336365630036035,
      "phi": 1.044673463284469,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.771881120605002,
      "phi": 1.4859471011258538,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.448459862302226,
      "phi": 0.8851463348471346,
      "success": true,
      "log_likelihood": -11.277860290248853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.7735508448747217,
      "phi": 0.7657523029198443,
      "success": true,
      "log_likelihood": -16.277633299721707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.437930596015727,
      "phi": 0.5928999958453226,
      "success": true,
      "log_likelihood": -15.277678688372323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.635787378549518,
      "phi": 0.6404111122141671,
      "success": true,
      "log_likelihood": -11.277860285493274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475572390406322,
      "gamma": 9.22629054644162,
      "phi": 1.039454185054657,
      "success": true,
      "log_likelihood": -24.7306167521302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.6027236852890636,
      "phi": 0.5158520456887178,
      "success": true,
      "log_likelihood": -16.277633287874473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.104181841881223,
      "phi": 1.4813050936839354,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0776591533997717,
      "gamma": 6.2494322161658475,
      "phi": 0.8535657817903678,
      "success": true,
      "log_likelihood": -24.897714341145274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.317412944673425,
      "gamma": 4.312030434376136,
      "phi": 1.399317816339857,
      "success": true,
      "log_likelihood": -24.953313094921004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790348395821945,
      "gamma": 3.9945035504405277,
      "phi": 0.9503705870356576,
      "success": true,
      "log_likelihood": -24.45095756858407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2482813540303166,
      "gamma": 8.768222430598243,
      "phi": 0.8847030366162315,
      "success": true,
      "log_likelihood": -24.730616844736176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.463148240205804,
      "phi": 1.1682491934472186,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.036072982590222,
      "phi": 1.232940954427466,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.851003083235661,
      "phi": 0.5512511106303981,
      "success": true,
      "log_likelihood": -19.27749709829325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.8075784152691905,
      "phi": 0.6337880874949193,
      "success": true,
      "log_likelihood": -11.277860288570476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.757391682952989,
      "phi": 1.2693827902187849,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 4.4722133286360775,
      "phi": 1.2910732298289678,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4320623105220276,
      "phi": 1.3993451248168798,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 1.772314150962765,
      "phi": 1.0027928264208632,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28406629053523186,
      "gamma": 2.46851731989694,
      "phi": 0.6889743739903584,
      "success": true,
      "log_likelihood": -23.545973163863795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.822765681102016,
      "gamma": 7.951788323725234,
      "phi": 0.7172068931148784,
      "success": true,
      "log_likelihood": -22.2735622598582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.125908376810983,
      "gamma": 9.296473050359488,
      "phi": 0.9635911081775744,
      "success": true,
      "log_likelihood": -24.953298546224598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8148701560826335,
      "gamma": 8.346460832611271,
      "phi": 1.2341636685758068,
      "success": true,
      "log_likelihood": -22.914510051416144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.7984445715994344,
      "phi": 0.862239451472065,
      "success": true,
      "log_likelihood": -14.277724095937204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926498353502824,
      "gamma": 3.6027601683471397,
      "phi": 0.9253162167141041,
      "success": true,
      "log_likelihood": -24.05694518872631,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.1534909833890974,
      "phi": 1.4379253674165269,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.823433654614378,
      "phi": 0.6971661545372574,
      "success": true,
      "log_likelihood": -12.277814891341686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474713462916223,
      "gamma": 5.131487956193799,
      "phi": 0.7499119344058167,
      "success": true,
      "log_likelihood": -24.730616750430723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19265215279915962,
      "gamma": 6.289131195564458,
      "phi": 0.9854973547266651,
      "success": true,
      "log_likelihood": -24.05694518872366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.062142602528027,
      "gamma": 3.24049599282507,
      "phi": 0.9650147037170903,
      "success": true,
      "log_likelihood": -21.27032101431658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0781855836322642,
      "gamma": 2.281109189153277,
      "phi": 0.7110723759946689,
      "success": true,
      "log_likelihood": -24.897714324516436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.487196584869784,
      "phi": 1.3990405707852536,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9044981241215475,
      "phi": 1.2528146298120668,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078477243608321,
      "gamma": 5.131408865107997,
      "phi": 1.0170076675049486,
      "success": true,
      "log_likelihood": -24.897714325764113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230232637206087,
      "gamma": 6.212162409777636,
      "phi": 0.9778703852792195,
      "success": true,
      "log_likelihood": -22.157938154760455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.0547613053498617,
      "phi": 1.2481505640331145,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078430787585852,
      "gamma": 9.572351712771322,
      "phi": 0.7747448500082631,
      "success": true,
      "log_likelihood": -24.897714325063426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790547282336328,
      "gamma": 5.738681148597234,
      "phi": 1.2718125181993707,
      "success": true,
      "log_likelihood": -24.450957568494957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.3002039412980495,
      "phi": 1.48453832584035,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.9681198254025722,
      "phi": 1.2806470998381392,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.19833775537159148,
      "phi": 1.1964570529691012,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.222921073948177,
      "phi": 0.6425194853177462,
      "success": true,
      "log_likelihood": -15.27767869586671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.246702525367157,
      "phi": 1.0717234768517578,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.124802961283393,
      "phi": 1.3095901051144332,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19266228648920636,
      "gamma": 7.688928823835618,
      "phi": 0.623988143580975,
      "success": true,
      "log_likelihood": -24.056945188729305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.469077198385304,
      "phi": 0.8369000259219005,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 3.054804156695225,
      "phi": 0.5691830571145561,
      "success": true,
      "log_likelihood": -24.953979487681085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.896606652024335,
      "phi": 1.2031601111069856,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7777293248491113,
      "phi": 0.6556129607822412,
      "success": true,
      "log_likelihood": -24.95375248117354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474681478860512,
      "gamma": 5.779048364824534,
      "phi": 1.376023594233168,
      "success": true,
      "log_likelihood": -24.730616750407293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.8282671232453716,
      "phi": 0.804442459762226,
      "success": true,
      "log_likelihood": -14.277724095932395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.545890388864425,
      "phi": 1.270172255661459,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2471774191951381,
      "gamma": 2.3657374599835848,
      "phi": 1.0279259842663837,
      "success": true,
      "log_likelihood": -24.73061675953394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.818885388665585,
      "phi": 0.981367437661086,
      "success": true,
      "log_likelihood": -14.277724095938312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.4638829234027924,
      "phi": 0.9528508824432119,
      "success": true,
      "log_likelihood": -24.95393407239413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.34484027233823,
      "phi": 0.9714376544913153,
      "success": true,
      "log_likelihood": -24.95388867452543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.114268494702077,
      "gamma": 3.1159155137503136,
      "phi": 1.2495022007477021,
      "success": true,
      "log_likelihood": -24.897769531530262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 0.251973616697313,
      "phi": 1.2039880037949109,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.160769096077715,
      "gamma": 9.374965466580994,
      "phi": 0.6086022819630896,
      "success": true,
      "log_likelihood": -24.95330120187744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.523232032185503,
      "gamma": 0.20934044153832376,
      "phi": 1.0093874546718835,
      "success": true,
      "log_likelihood": -22.157938158985658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 0.07374235814066155,
      "phi": 0.8762726790908593,
      "success": true,
      "log_likelihood": -13.277769494042067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.679065915333153,
      "phi": 1.121567669285521,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926550125828852,
      "gamma": 2.369480403458156,
      "phi": 1.1940543060496287,
      "success": true,
      "log_likelihood": -24.05694518872427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.795928048387812,
      "phi": 1.4277538452980612,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078284357442102,
      "gamma": 5.320758882791758,
      "phi": 1.2453081140967346,
      "success": true,
      "log_likelihood": -24.897714324102086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 0.6256630603789237,
      "phi": 0.5242769180741705,
      "success": true,
      "log_likelihood": -14.277724090640085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.661490641320717,
      "phi": 1.359747100345861,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.907838741381248,
      "gamma": 0.10970865201653024,
      "phi": 0.7518206326477245,
      "success": true,
      "log_likelihood": -24.95329910141743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1926575253893539,
      "gamma": 1.5965092432336403,
      "phi": 1.4155545560586804,
      "success": true,
      "log_likelihood": -24.05694518872837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.2061000725817355,
      "phi": 1.1294487888061326,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5230432117470045,
      "gamma": 1.0456945200562096,
      "phi": 1.127247581771622,
      "success": true,
      "log_likelihood": -22.157938154853476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.861239914692041,
      "phi": 0.8641775236181627,
      "success": true,
      "log_likelihood": -24.953752480922606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 3.38924420606301,
      "phi": 1.2087520248468153,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.582688496626571,
      "phi": 1.364291967589333,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5228050642238635,
      "gamma": 6.986969150910013,
      "phi": 0.7712023853667661,
      "success": true,
      "log_likelihood": -22.157938158025743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.7448567440820182,
        "p": 6.432458262930772e-19
      },
      "gamma": {
        "r": -0.05089251007196608,
        "p": 0.6150678358014349
      },
      "phi": {
        "r": 0.055184116763469994,
        "p": 0.585534164272174
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.925236110184635,
  "bic_results": {
    "average_bic": 53.925236110184635,
    "individual_bics": [
      60.6585157558939,
      60.657177874606774,
      60.54598547916825,
      60.65742620704526,
      60.65733541130788,
      57.84250314306746,
      33.30627739586697,
      56.579576918197006,
      33.30627739586629,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.30627739586603,
      43.30582341481174,
      41.30591419211298,
      33.30627738635488,
      60.21179031962873,
      43.30582339111727,
      60.65760779852003,
      60.545985497658876,
      60.65718300521034,
      59.65247195253647,
      60.21179050484068,
      60.657880185732196,
      41.305914211037575,
      49.30555101195483,
      33.30627739250929,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.842503143095925,
      55.29768133508473,
      60.65715390781753,
      56.579576918200615,
      39.30600500724274,
      58.86444719282095,
      60.65806177720697,
      35.3061865980517,
      60.21179031622978,
      58.864447192815646,
      53.291198844001485,
      60.5459854644012,
      60.657517002782654,
      60.65742620704526,
      60.54598546689655,
      55.066433124889244,
      60.65833416441913,
      60.54598546549518,
      59.65247195235824,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.30591420710175,
      60.65842496015652,
      47.3056418224152,
      58.864447192826944,
      60.6571538198331,
      60.658515790730505,
      60.65733541130787,
      60.65806177771542,
      60.21179031618291,
      39.306005007233125,
      43.3058234148301,
      60.211790334436216,
      39.306005007244956,
      60.658424960156594,
      60.65833416441919,
      60.54609587842886,
      49.30555102620774,
      60.657159219123216,
      55.06643313333964,
      37.306095803452465,
      60.658606551631294,
      58.86444719281687,
      60.6585157558939,
      60.54598546357251,
      39.3060049966485,
      60.65842496015652,
      60.657155018203184,
      58.86444719282507,
      60.65842496015651,
      55.06643312507528,
      60.65806177721355,
      37.306095803452486,
      60.65724461557049,
      55.066433131419814
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.745\n- gamma: r = -0.051\n- phi: r = 0.055",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta\na1 = a * (1 + 0.012*sin(a + 0.045))\na2 = 1.08 * a1\nz = a2 * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))\nf_adapt = (0.012*z)        * (z < 0) + (min(z, 1 + ln(1+z))) * (z >= 0)\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6\nE = phi + 0.0001*ln(1+a)\nextra = ( exp(-a/0.1) * ( z/(1+abs(z)) ) * (1 + 0.005*sin(1/(1+a))) * ln(1+exp(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(E)\nf = sign(z) * ( f_adapt * T * extra )^(E)\nU = beta + gamma * f\nP = 1/(1+exp(-U))\nSummary: The model computes a core sum \u201ca\u201d from 11 fixed components plus a constant and applies sequential multiplicative modulations using sine and cosine functions. An adaptive transformation is defined piecewise on the modulated signal \u201cz\u201d. This is further adjusted by a dynamic threshold factor T and an extra blending composite that incorporates exponential, trigonometric, and softplus functions. A dynamic exponent E, which varies with \u201ca\u201d and is anchored by the learnable parameter phi, is applied in both the extra composite and the final transformation. The latent utility U is then obtained as a linear combination of a base parameter beta and the transformed signal f scaled by gamma. Finally, a logistic function converts U into an acceptance probability predicting responder behavior.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.925236110184635\nOverall Accuracy: 0.5574\n\nParameter Recovery:\n- beta: r = 0.745\n- gamma: r = -0.051\n- phi: r = 0.055"
  ]
}