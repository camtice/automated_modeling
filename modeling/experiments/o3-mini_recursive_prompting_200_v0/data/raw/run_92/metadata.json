{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor this new run, we want to further fine\u2010tune the dynamic behavior of the threshold and extra blending factors. In addition to retaining all the prior modulation factors, we will add a seventh\u2010order term to the threshold T to more strongly control extreme \u201ca\u201d values and modify the extra composite exponent by increasing its sensitivity to \u201ca\u201d (for example, using 0.944 + 0.00015\u00d7ln(1+a)). We also encourage an alternative formulation for the softplus component: using softplus(x) = ln(1+exp(x)) is acceptable but consider blending it with an additional linear term if appropriate. Finally, remind the model designer to consider any out\u2010of\u2010the\u2010box ideas (e.g., nonlinear activation functions or even adaptive learning of subcomponents) to further lower the BIC and improve parameter recovery while ensuring the three learnable parameters remain with bounded ranges.\n</think>\n\nNew Instructions for Run 92 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as:\n\u2003\u2003f_adapt(z) = { 0.012\u00d7z\u2003if z < 0;\u2003min(z, 1 + ln(1+z))\u2003if z \u2265 0 }.\n7. Multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077.\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1 + |z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 softplus(0.865/(1+a)) \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003(Note: softplus(x) = ln(1+exp(x)); designers may blend this with an additional linear term if desired.)\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma\u00d7f(x), then convert it into an acceptance probability via the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n11. Retain exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nPlease explore any nontraditional modulation or activation functions if they offer improved model performance while keeping the overall structure intact.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor this new run, we want to further fine\u2010tune the dynamic behavior of the threshold and extra blending factors. In addition to retaining all the prior modulation factors, we will add a seventh\u2010order term to the threshold T to more strongly control extreme \u201ca\u201d values and modify the extra composite exponent by increasing its sensitivity to \u201ca\u201d (for example, using 0.944 + 0.00015\u00d7ln(1+a)). We also encourage an alternative formulation for the softplus component: using softplus(x) = ln(1+exp(x)) is acceptable but consider blending it with an additional linear term if appropriate. Finally, remind the model designer to consider any out\u2010of\u2010the\u2010box ideas (e.g., nonlinear activation functions or even adaptive learning of subcomponents) to further lower the BIC and improve parameter recovery while ensuring the three learnable parameters remain with bounded ranges.\n</think>\n\nNew Instructions for Run 92 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as:\n\u2003\u2003f_adapt(z) = { 0.012\u00d7z\u2003if z < 0;\u2003min(z, 1 + ln(1+z))\u2003if z \u2265 0 }.\n7. Multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077.\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1 + |z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 softplus(0.865/(1+a)) \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003(Note: softplus(x) = ln(1+exp(x)); designers may blend this with an additional linear term if desired.)\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma\u00d7f(x), then convert it into an acceptance probability via the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n11. Retain exactly three learnable parameters with these bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\n\nPlease explore any nontraditional modulation or activation functions if they offer improved model performance while keeping the overall structure intact.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and constant offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_tilde\": {\n      \"description\": \"Modulated core sum after initial sinusoidal scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s\": {\n      \"description\": \"Scaled value after multiplying by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Value after first cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Value after first sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Value after second cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Value after sine-cosine joint modulation (first instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Value after sine-cosine joint modulation (second instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, using a piecewise function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor incorporating higher order terms of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra_inner\": {\n      \"description\": \"Composite modulation factor before exponentiation, blending exponential decay, sinusoidal, softplus and hyperbolic components\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03bb\": {\n      \"description\": \"Adaptive exponent computed as the sum of the learnable parameter phi and a logarithmic modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite factor after exponentiation with \u03bb\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after multiplying f_adapt, T, and extra, adjusted by the sign of z and raised to the power of \u03bb\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Learnable base utility intercept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear function of f(x) with parameters \u03b2 and \u03b3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed using the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dynamic nonlinear model that computes a latent utility from a core sum of fixed components further modulated by sequential sinusoidal, cosine, and hyperbolic transformations. An adaptive transformation with a piecewise softplus-based function, a high\u2010order dynamic threshold, and an extra blending composite factor (raised to an adaptive exponent incorporating the learnable parameter \u03c6) yields the final signal f(x). This signal is linearly combined with learnable intercept \u03b2 and scaling parameter \u03b3 to form U, which is mapped via a logistic function to predict the binary acceptance decision.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and constant offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_tilde\": {\n      \"description\": \"Modulated core sum after initial sinusoidal scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s\": {\n      \"description\": \"Scaled value after multiplying by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Value after first cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Value after first sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Value after second cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Value after sine-cosine joint modulation (first instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Value after sine-cosine joint modulation (second instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, using a piecewise function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor incorporating higher order terms of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra_inner\": {\n      \"description\": \"Composite modulation factor before exponentiation, blending exponential decay, sinusoidal, softplus and hyperbolic components\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03bb\": {\n      \"description\": \"Adaptive exponent computed as the sum of the learnable parameter phi and a logarithmic modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite factor after exponentiation with \\u03bb\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after multiplying f_adapt, T, and extra, adjusted by the sign of z and raised to the power of \\u03bb\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b2\": {\n      \"description\": \"Learnable base utility intercept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear function of f(x) with parameters \\u03b2 and \\u03b3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed using the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"token_opp\", 0)\n        F2 = trial.get(\"token_self\", 0)\n        F3 = trial.get(\"combined_earning\", 0)\n        F4 = trial.get(\"split_opp\", 0)\n        F5 = trial.get(\"split_self\", 0)\n        F6 = trial.get(\"splitperc_opp\", 0)\n        F7 = trial.get(\"splitperc_self\", 0)\n        F8 = trial.get(\"proposed_perc\", 0)\n        F9 = trial.get(\"proposed_amount\", 0)\n        F10 = 0 # No obvious mapping from the dataset\n        F11 = 0 # No obvious mapping from the dataset\n        \u03b4 = 0  # A small constant offset\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n        a_tilde = a * (1 + 0.012 * math.sin(a + 0.045))\n        s = 1.08 * a_tilde\n        s1 = s * (1 + 0.008 * math.cos(a + 0.065))\n        s2 = s1 * (1 + 0.005 * math.sin(a + 0.115))\n        s3 = s2 * (1 + 0.004 * math.cos(a + 0.085))\n        s4 = s3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        s5 = s4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = s5\n\n        if z < 0:\n            f_adapt_val = 0.012 * z\n        else:\n            f_adapt_val = min(z, 1 + math.log(1 + z))\n\n        T = 1 + 0.0005 * (a**2) + 0.00005 * (a**3) + 0.000005 * (a**4) + 0.0000001 * (a**5) + 0.00000001 * (a**6) + 0.000000001 * (a**7)\n        \n        abs_z = abs(z)\n        try:\n            extra_inner = math.exp(-a/0.1) * (z / (1 + abs_z)) * (1 + 0.005 * math.sin(1/(1+a))) * math.log(1 + math.exp(0.865/(1+a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2 + 0.0005*a) + 1e-6\n        except OverflowError:\n             extra_inner = 1e-6 #Handle cases where the exponent becomes too large\n        \n        \u03bb = \u03c6 + 0.00015 * math.log(1+a)\n        \n        try:\n            extra = extra_inner**(\u03bb)\n        except OverflowError:\n            extra = float('inf') \n        \n        if z == 0:\n            sign_z = 0  # Handle the case where z is zero\n        else:\n            sign_z = 1 if z > 0 else -1\n\n        try:\n            fx = sign_z * (f_adapt_val * T * extra)**(\u03bb)\n        except OverflowError:\n            fx = float('inf')\n\n        U = \u03b2 + \u03b3 * fx\n        \n        try:\n            P_accept = 1/(1 + math.exp(-U))\n        except OverflowError:\n            P_accept = 0.0 if U > 0 else 1.0 # Cap the value to 0 or 1\n            \n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743544048.8157911
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and constant offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_tilde\": {\n      \"description\": \"Modulated core sum after initial sinusoidal scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s\": {\n      \"description\": \"Scaled value after multiplying by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Value after first cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Value after first sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Value after second cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Value after sine-cosine joint modulation (first instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Value after sine-cosine joint modulation (second instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, using a piecewise function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor incorporating higher order terms of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra_inner\": {\n      \"description\": \"Composite modulation factor before exponentiation, blending exponential decay, sinusoidal, softplus and hyperbolic components\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03bb\": {\n      \"description\": \"Adaptive exponent computed as the sum of the learnable parameter phi and a logarithmic modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite factor after exponentiation with \\u03bb\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after multiplying f_adapt, T, and extra, adjusted by the sign of z and raised to the power of \\u03bb\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b2\": {\n      \"description\": \"Learnable base utility intercept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear function of f(x) with parameters \\u03b2 and \\u03b3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed using the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        \u03b4 = trial.get(\"\u03b4\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n        a_tilde = a * (1 + 0.012 * math.sin(a + 0.045))\n        s = 1.08 * a_tilde\n        s1 = s * (1 + 0.008 * math.cos(a + 0.065))\n        s2 = s1 * (1 + 0.005 * math.sin(a + 0.115))\n        s3 = s2 * (1 + 0.004 * math.cos(a + 0.085))\n        s4 = s3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        s5 = s4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = s5\n\n        if z < 0:\n            f_adapt = 0.012 * z\n        else:\n            f_adapt = min(z, 1 + math.log(1 + z))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7\n        \n        extra_inner = math.exp(-a/0.1) * ( z / (1 + abs(z)) ) * (1 + 0.005 * math.sin(1/(1+a))) * math.log(1 + math.exp(0.865/(1+a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2 + 0.0005*a) + 1e-6\n        \u03bb = \u03c6 + 0.00015 * math.log(1+a)\n        extra = extra_inner**\u03bb\n\n        f_x = math.copysign(1, z) * ( f_adapt * T * extra )**\u03bb\n        U = \u03b2 + \u03b3 * f_x\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 10.0, \"split_self\": 30.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 10.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1, \"\u03b4\": 1}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 40, \"split_opp\": 30.0, \"split_self\": 10.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 75.0, \"proposed_amount\": 30.0, \"F1\": 1, \"F2\": 1, \"F3\": 1, \"F4\": 1, \"F5\": 1, \"F6\": 1, \"F7\": 1, \"F8\": 1, \"F9\": 1, \"F10\": 1, \"F11\": 1, \"\u03b4\": 1}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5)\nprint(json.dumps({\"results\": results}))\n```",
      "timestamp": 1743544055.7883651
    }
  ],
  "learnable_parameters": {
    "\u03b2": {
      "description": "Learnable base utility intercept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F2": {
      "description": "Fixed component 2 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F3": {
      "description": "Fixed component 3 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F4": {
      "description": "Fixed component 4 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F5": {
      "description": "Fixed component 5 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F6": {
      "description": "Fixed component 6 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F7": {
      "description": "Fixed component 7 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F8": {
      "description": "Fixed component 8 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F9": {
      "description": "Fixed component 9 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F10": {
      "description": "Fixed component 10 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "F11": {
      "description": "Fixed component 11 derived from task features",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unknown",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "\u03b4": {
      "description": "A small constant offset added to the sum of fixed components",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed from fixed components and constant offset",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "a_tilde": {
      "description": "Modulated core sum after initial sinusoidal scaling",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s": {
      "description": "Scaled value after multiplying by 1.08",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s1": {
      "description": "Value after first cosine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s2": {
      "description": "Value after first sine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s3": {
      "description": "Value after second cosine modulation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s4": {
      "description": "Value after sine-cosine joint modulation (first instance)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "s5": {
      "description": "Value after sine-cosine joint modulation (second instance)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Final modulated signal after sequential transformations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z, using a piecewise function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold factor incorporating higher order terms of a",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra_inner": {
      "description": "Composite modulation factor before exponentiation, blending exponential decay, sinusoidal, softplus and hyperbolic components",
      "range": {
        "min": "0+",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03bb": {
      "description": "Adaptive exponent computed as the sum of the learnable parameter phi and a logarithmic modulation of a",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite factor after exponentiation with \u03bb",
      "range": {
        "min": "0+",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f(x)": {
      "description": "Final transformed signal after multiplying f_adapt, T, and extra, adjusted by the sign of z and raised to the power of \u03bb",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b2": {
      "description": "Learnable base utility intercept",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Learnable scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear function of f(x) with parameters \u03b2 and \u03b3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of acceptance computed using the logistic function applied to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A dynamic nonlinear model that computes a latent utility from a core sum of fixed components further modulated by sequential sinusoidal, cosine, and hyperbolic transformations. An adaptive transformation with a piecewise softplus-based function, a high\u2010order dynamic threshold, and an extra blending composite factor (raised to an adaptive exponent incorporating the learnable parameter \u03c6) yields the final signal f(x). This signal is linearly combined with learnable intercept \u03b2 and scaling parameter \u03b3 to form U, which is mapped via a logistic function to predict the binary acceptance decision.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 derived from task features\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unknown\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b4\": {\n      \"description\": \"A small constant offset added to the sum of fixed components\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed from fixed components and constant offset\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a_tilde\": {\n      \"description\": \"Modulated core sum after initial sinusoidal scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s\": {\n      \"description\": \"Scaled value after multiplying by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Value after first cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Value after first sine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Value after second cosine modulation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Value after sine-cosine joint modulation (first instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Value after sine-cosine joint modulation (second instance)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Final modulated signal after sequential transformations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, using a piecewise function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor incorporating higher order terms of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra_inner\": {\n      \"description\": \"Composite modulation factor before exponentiation, blending exponential decay, sinusoidal, softplus and hyperbolic components\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03bb\": {\n      \"description\": \"Adaptive exponent computed as the sum of the learnable parameter phi and a logarithmic modulation of a\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite factor after exponentiation with \u03bb\",\n      \"range\": {\n        \"min\": \"0+\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f(x)\": {\n      \"description\": \"Final transformed signal after multiplying f_adapt, T, and extra, adjusted by the sign of z and raised to the power of \u03bb\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Learnable base utility intercept\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Learnable scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Learnable parameter that sets the baseline for the adaptive exponent in the modulation (replacing the constant 0.944)\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear function of f(x) with parameters \u03b2 and \u03b3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of acceptance computed using the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dynamic nonlinear model that computes a latent utility from a core sum of fixed components further modulated by sequential sinusoidal, cosine, and hyperbolic transformations. An adaptive transformation with a piecewise softplus-based function, a high\u2010order dynamic threshold, and an extra blending composite factor (raised to an adaptive exponent incorporating the learnable parameter \u03c6) yields the final signal f(x). This signal is linearly combined with learnable intercept \u03b2 and scaling parameter \u03b3 to form U, which is mapped via a logistic function to predict the binary acceptance decision.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\nSummary: A dynamic nonlinear model that computes a latent utility from a core sum of fixed components further modulated by sequential sinusoidal, cosine, and hyperbolic transformations. An adaptive transformation with a piecewise softplus-based function, a high\u2010order dynamic threshold, and an extra blending composite factor (raised to an adaptive exponent incorporating the learnable parameter \u03c6) yields the final signal f(x). This signal is linearly combined with learnable intercept \u03b2 and scaling parameter \u03b3 to form U, which is mapped via a logistic function to predict the binary acceptance decision.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 77, in <module>\n    results = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5)\n              ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<string>\", line 22, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
      "timestamp": 1743544048.8854778
    }
  ],
  "current_retry": 1,
  "simulation_error": "Traceback (most recent call last):\n  File \"<string>\", line 77, in <module>\n    results = simulate_model(data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5)\n              ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<string>\", line 22, in simulate_model\n    a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\nTypeError: unsupported operand type(s) for +: 'float' and 'NoneType'\n",
  "simulation_code": "def simulate_model(trial_data, \u03b2=0.5, \u03b3=0.5, \u03c6=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        \u03b4 = trial.get(\"\u03b4\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n        a_tilde = a * (1 + 0.012 * math.sin(a + 0.045))\n        s = 1.08 * a_tilde\n        s1 = s * (1 + 0.008 * math.cos(a + 0.065))\n        s2 = s1 * (1 + 0.005 * math.sin(a + 0.115))\n        s3 = s2 * (1 + 0.004 * math.cos(a + 0.085))\n        s4 = s3 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        s5 = s4 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = s5\n\n        if z < 0:\n            f_adapt = 0.012 * z\n        else:\n            f_adapt = min(z, 1 + math.log(1 + z))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7\n        \n        extra_inner = math.exp(-a/0.1) * ( z / (1 + abs(z)) ) * (1 + 0.005 * math.sin(1/(1+a))) * math.log(1 + math.exp(0.865/(1+a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2 + 0.0005*a) + 1e-6\n        \u03bb = \u03c6 + 0.00015 * math.log(1+a)\n        extra = extra_inner**\u03bb\n\n        f_x = math.copysign(1, z) * ( f_adapt * T * extra )**\u03bb\n        U = \u03b2 + \u03b3 * f_x\n        P_accept = 1/(1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 1,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5631868131868132,
  "fitting_results": [
    {
      "\u03b2": -10.0,
      "\u03b3": 0.13196875038603784,
      "\u03c6": 1.3443361717261104,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.6112335499909494,
      "\u03c6": 1.4098819338725002,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0783052655501093,
      "\u03b3": 7.826391909005,
      "\u03c6": 0.7934135560763905,
      "success": true,
      "log_likelihood": -24.897714324124617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.7516181437372325,
      "\u03c6": 0.8278329146660008,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.9527293964910126,
      "\u03c6": 1.4520628745405428,
      "success": true,
      "log_likelihood": -24.953389297969775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.2848613040358998,
      "\u03b3": 2.0295102221527053,
      "\u03c6": 0.6911915248070197,
      "success": true,
      "log_likelihood": -23.545973318171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.737919152488193,
      "\u03c6": 1.4733639823517626,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.8148627747623595,
      "\u03b3": 9.835218869216114,
      "\u03c6": 1.4259536869899736,
      "success": true,
      "log_likelihood": -22.914510051436636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 7.281637350386446,
      "\u03c6": 1.3345829904039,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.615939049811807,
      "\u03c6": 1.1805624951760454,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.619300669869189,
      "\u03c6": 1.3172812598072197,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.707664577908453,
      "\u03c6": 0.5475794238459093,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 1.943674665114754,
      "\u03c6": 1.4261388819779122,
      "success": true,
      "log_likelihood": -24.953434695838467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.350107880327046,
      "\u03c6": 1.2312693782769835,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 5.338322724102519,
      "\u03c6": 1.1736949621820174,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.4335069321417793,
      "\u03c6": 1.411008192949657,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 8.13589932189031,
      "\u03c6": 1.1891565850754808,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.4398451443379234,
      "\u03c6": 1.1931396849666056,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.999999999999998,
      "\u03b3": 4.508657371022067,
      "\u03c6": 0.5789429588425034,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.541730053117065,
      "\u03c6": 0.9339755485145579,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.247523942288218,
      "\u03b3": 6.1987628849140775,
      "\u03c6": 1.0181171101956754,
      "success": true,
      "log_likelihood": -24.730616751238202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.314958152709475,
      "\u03c6": 0.9662096276898978,
      "success": true,
      "log_likelihood": -16.27763329973089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.568164325154976,
      "\u03c6": 0.8229618440027553,
      "success": true,
      "log_likelihood": -24.95352549157585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.078102454432634,
      "\u03b3": 7.5465038133616025,
      "\u03c6": 0.6785801223348119,
      "success": true,
      "log_likelihood": -24.89771432552336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.289827598422697,
      "\u03b3": 6.817916078041609,
      "\u03c6": 1.493029233576738,
      "success": true,
      "log_likelihood": -24.953300585894976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.679054733629546,
      "\u03b3": 5.3540058387247775,
      "\u03c6": 1.4344206761307066,
      "success": true,
      "log_likelihood": -24.450957568494967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2473456242783239,
      "\u03b3": 7.898494475828674,
      "\u03c6": 1.3628402410147986,
      "success": true,
      "log_likelihood": -24.73061675150059,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.84479179862691,
      "\u03c6": 1.2634879944611872,
      "success": true,
      "log_likelihood": -24.953661685181935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 9.19262127047158,
      "\u03c6": 0.6575426279607445,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.686116296752726,
      "\u03b3": 3.970485167277542,
      "\u03c6": 1.15017348037137,
      "success": true,
      "log_likelihood": -19.27819338860836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 5.210787390200701,
      "\u03c6": 0.9195083289725536,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.564328367465482,
      "\u03c6": 1.1758317564070566,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.327939491512291,
      "\u03c6": 0.9662934245669265,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.38196994309428,
      "\u03c6": 0.7957599000609213,
      "success": true,
      "log_likelihood": -24.953480093707164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.830894455299029,
      "\u03c6": 0.8887220770941532,
      "success": true,
      "log_likelihood": -11.277860290249533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.28407390535423077,
      "\u03b3": 4.174252187856546,
      "\u03c6": 0.5227290081095065,
      "success": true,
      "log_likelihood": -23.545973163849624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5229432848045297,
      "\u03b3": 9.923947255257179,
      "\u03c6": 1.285118470412291,
      "success": true,
      "log_likelihood": -22.15793815504685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.396236759000591,
      "\u03b3": 9.489867946111724,
      "\u03c6": 0.5980899127702215,
      "success": true,
      "log_likelihood": -24.95331096864187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.8148797035350628,
      "\u03b3": 2.311864339756615,
      "\u03c6": 0.581832693658519,
      "success": true,
      "log_likelihood": -22.91451005141886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 5.896007109869272,
      "\u03c6": 0.5629983128416024,
      "success": true,
      "log_likelihood": -14.277724095938346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19264606639482676,
      "\u03b3": 3.5233067830301468,
      "\u03c6": 1.3541210713695038,
      "success": true,
      "log_likelihood": -24.05694518873663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.913702768226138,
      "\u03c6": 1.1182564231019088,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 9.739236842086479,
      "\u03c6": 0.7394015153750034,
      "success": true,
      "log_likelihood": -12.277814892145805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2474415157655003,
      "\u03b3": 5.603652549385917,
      "\u03c6": 0.9181687978567998,
      "success": true,
      "log_likelihood": -24.73061675030383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265604157814875,
      "\u03b3": 5.051721577232851,
      "\u03c6": 0.8875920194599126,
      "success": true,
      "log_likelihood": -24.05694518872555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.0684435726944654,
      "\u03b3": 4.802310604535909,
      "\u03c6": 1.2285268611634779,
      "success": true,
      "log_likelihood": -21.270320872024808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0781975364857064,
      "\u03b3": 7.743102507237482,
      "\u03c6": 1.0805379396665464,
      "success": true,
      "log_likelihood": -24.897714324418452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.789391370778825,
      "\u03c6": 0.9239553834089583,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.928948061621201,
      "\u03c6": 1.4263150189073137,
      "success": true,
      "log_likelihood": -24.953434695838464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.078614885894584,
      "\u03b3": 2.0348180772036084,
      "\u03c6": 1.111049937878478,
      "success": true,
      "log_likelihood": -24.897714328943813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5230096722191724,
      "\u03b3": 7.991047815909575,
      "\u03c6": 1.288603221401846,
      "success": true,
      "log_likelihood": -22.157938154734694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.050653371858239,
      "\u03c6": 1.4089508206438333,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0779852554616665,
      "\u03b3": 7.9918106340635315,
      "\u03c6": 0.8886199401777486,
      "success": true,
      "log_likelihood": -24.89771432797643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.6790724683028005,
      "\u03b3": 4.183600104595886,
      "\u03c6": 1.4303132445401054,
      "success": true,
      "log_likelihood": -24.450957568561012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.641007846518561,
      "\u03c6": 1.3675251296228377,
      "success": true,
      "log_likelihood": -24.95348009370716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.199305410568044,
      "\u03c6": 1.0086134322382736,
      "success": true,
      "log_likelihood": -24.953570889444546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 4.933956207142999,
      "\u03c6": 1.3207645138034296,
      "success": true,
      "log_likelihood": -24.953661685181938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 2.5132729023166043,
      "\u03c6": 1.2742641115226498,
      "success": true,
      "log_likelihood": -15.27767869783462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.2996749916414476,
      "\u03c6": 1.0382530341007281,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.651340288968066,
      "\u03c6": 0.583371563251772,
      "success": true,
      "log_likelihood": -18.27754250352343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19265240517413992,
      "\u03b3": 6.2694987597746445,
      "\u03c6": 1.23441145791515,
      "success": true,
      "log_likelihood": -24.05694518872354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.7448671578454,
      "\u03c6": 0.53577040650122,
      "success": true,
      "log_likelihood": -24.953298502232386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 8.09164241558149,
      "\u03c6": 1.156270685634345,
      "success": true,
      "log_likelihood": -24.953979470262787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 6.5480082657424585,
      "\u03c6": 0.8523299463591166,
      "success": true,
      "log_likelihood": -24.95338929796977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.1695701078846117,
      "\u03c6": 1.3271227098988636,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2474079123205934,
      "\u03b3": 6.000771823680665,
      "\u03c6": 1.34419438587091,
      "success": true,
      "log_likelihood": -24.730616750443666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 6.961128583376045,
      "\u03c6": 0.9342147506143663,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.013106701447768,
      "\u03c6": 1.2255672058112785,
      "success": true,
      "log_likelihood": -16.277633299730887,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.2474674931424563,
      "\u03b3": 4.155935286150466,
      "\u03c6": 0.5845965850524638,
      "success": true,
      "log_likelihood": -24.730616750402472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.656476017310739,
      "\u03c6": 0.7998897643926132,
      "success": true,
      "log_likelihood": -14.27772409593835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.3647461646017236,
      "\u03c6": 1.0920174266003382,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 7.600318758484489,
      "\u03c6": 1.3353651553282995,
      "success": true,
      "log_likelihood": -24.9538886745254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0782653970235954,
      "\u03b3": 8.986818733135834,
      "\u03c6": 0.637722515089312,
      "success": true,
      "log_likelihood": -24.89771432411475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.6123115683050049,
      "\u03c6": 0.7897669433434854,
      "success": true,
      "log_likelihood": -19.2774971054197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.281674049778118,
      "\u03b3": 7.079095795420052,
      "\u03c6": 1.434842353269139,
      "success": true,
      "log_likelihood": -24.953314174787266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5230110164897281,
      "\u03b3": 8.81179226023206,
      "\u03c6": 0.7155512979053542,
      "success": true,
      "log_likelihood": -22.15793815473589,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 1.6113538754562085,
      "\u03c6": 1.1928149311011675,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.999999999999998,
      "\u03b3": 4.611149083213575,
      "\u03c6": 0.5805965227998454,
      "success": true,
      "log_likelihood": -24.95402486813148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.1926541116864597,
      "\u03b3": 7.133465321926046,
      "\u03c6": 1.220608479090406,
      "success": true,
      "log_likelihood": -24.056945188723617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 0.4272664902433998,
      "\u03c6": 1.2370938496642712,
      "success": true,
      "log_likelihood": -24.953979470262784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.0783846200049556,
      "\u03b3": 6.620894758093422,
      "\u03c6": 1.3667554534632327,
      "success": true,
      "log_likelihood": -24.897714324558983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 3.824031822944195,
      "\u03c6": 1.3546548026914875,
      "success": true,
      "log_likelihood": -14.277724095938348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 5.949610654768911,
      "\u03c6": 0.6148677856258538,
      "success": true,
      "log_likelihood": -24.953934072394095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.884540896695997,
      "\u03b3": 9.175372958232968,
      "\u03c6": 1.107283772328235,
      "success": true,
      "log_likelihood": -24.95330319717904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.19264994692698667,
      "\u03b3": 1.8929005942373678,
      "\u03c6": 1.2886035560288462,
      "success": true,
      "log_likelihood": -24.056945188726118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 3.2926642416144536,
      "\u03c6": 1.2993097287662827,
      "success": true,
      "log_likelihood": -24.95393407239409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.523392764304695,
      "\u03b3": 3.1460908208305316,
      "\u03c6": 1.0261024044828693,
      "success": true,
      "log_likelihood": -22.157938167136443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 5.200633567083193,
      "\u03c6": 1.449218288165493,
      "success": true,
      "log_likelihood": -24.95375248091932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 10.0,
      "\u03b3": 4.778853701667862,
      "\u03c6": 1.0245410833479964,
      "success": true,
      "log_likelihood": -13.277769494042078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -10.0,
      "\u03b3": 9.849871252983815,
      "\u03c6": 1.0982571832218522,
      "success": true,
      "log_likelihood": -24.953343900101082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.5230117287909537,
      "\u03b3": 6.921765695038687,
      "\u03c6": 1.260396038644021,
      "success": true,
      "log_likelihood": -22.157938154736645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "\u03b2": {
        "r": 0.6528287224909486,
        "p": 1.8389242152240285e-13
      },
      "\u03b3": {
        "r": -0.1376547199267754,
        "p": 0.1720168436612561
      },
      "\u03c6": {
        "r": -0.13561882659042657,
        "p": 0.17850823806945262
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.92270911781924,
  "bic_results": {
    "average_bic": 53.92270911781924,
    "individual_bics": [
      60.6585157558939,
      60.6571538198331,
      60.54598546361757,
      60.65742620704526,
      60.65733541130788,
      57.84250345171033,
      33.3062773958674,
      56.5795769182416,
      33.3062773958674,
      60.657517002782654,
      60.65733541130787,
      60.65842496015652,
      60.65742620704526,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      33.3062773958674,
      43.305823414830115,
      41.305914211037575,
      33.3062773958674,
      60.21179031784473,
      43.305823414830115,
      60.65760779852003,
      60.54598546641505,
      60.657157987158286,
      59.65247195235827,
      60.21179031836951,
      60.657880185732196,
      41.305914211037575,
      49.30694359258506,
      33.3062773958674,
      60.6585157558939,
      60.65742620704526,
      60.657517002782654,
      33.3062773958674,
      57.842503143067574,
      55.06643312546203,
      60.65717875265207,
      56.579576918206044,
      39.30600500724502,
      58.864447192841595,
      60.65806177720697,
      35.30618659965994,
      60.21179031597599,
      58.864447192819426,
      53.29119855941795,
      60.54598546420523,
      60.657517002782654,
      60.65742620704526,
      60.54598547325595,
      55.066433124837715,
      60.65833416441913,
      60.54598547132119,
      59.65247195249036,
      60.657517002782654,
      60.657698594257425,
      60.65788018573221,
      41.305914211037575,
      60.65842496015652,
      47.3056418224152,
      58.864447192815405,
      60.6571538198331,
      60.6585157558939,
      60.65733541130787,
      60.65806177720697,
      60.21179031625566,
      39.30600500724503,
      43.3058234148301,
      60.21179031617328,
      39.306005007245034,
      60.65842496015652,
      60.65833416441913,
      60.54598546359783,
      49.30555102620774,
      60.65718516494286,
      55.06643312484012,
      37.306095803452486,
      60.658606551631294,
      58.86444719281556,
      60.6585157558939,
      60.54598546448629,
      39.30600500724503,
      60.65842496015652,
      60.657163209726406,
      58.86444719282056,
      60.65842496015651,
      55.06643314964121,
      60.65806177720697,
      37.306095803452486,
      60.65724461557049,
      55.06643312484162
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- \u03b2: r = 0.653\n- \u03b3: r = -0.138\n- \u03c6: r = -0.136",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\na_tilde = a * (1 + 0.012 * sin(a + 0.045))\ns = 1.08 * a_tilde\ns1 = s * (1 + 0.008 * cos(a + 0.065))\ns2 = s1 * (1 + 0.005 * sin(a + 0.115))\ns3 = s2 * (1 + 0.004 * cos(a + 0.085))\ns4 = s3 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))\ns5 = s4 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))\nz = s5\nf_adapt = { 0.012 * z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7\nextra_inner = exp(-a/0.1) * ( z / (1 + |z|) ) * (1 + 0.005 * sin(1/(1+a))) * ln(1 + exp(0.865/(1+a))) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6\n\u03bb = \u03c6 + 0.00015 * ln(1+a)\nextra = extra_inner^(\u03bb)\nf(x) = sign(z) * ( f_adapt * T * extra )^(\u03bb)\nU = \u03b2 + \u03b3 * f(x)\nP_accept = 1/(1 + exp(-U))\nSummary: A dynamic nonlinear model that computes a latent utility from a core sum of fixed components further modulated by sequential sinusoidal, cosine, and hyperbolic transformations. An adaptive transformation with a piecewise softplus-based function, a high\u2010order dynamic threshold, and an extra blending composite factor (raised to an adaptive exponent incorporating the learnable parameter \u03c6) yields the final signal f(x). This signal is linearly combined with learnable intercept \u03b2 and scaling parameter \u03b3 to form U, which is mapped via a logistic function to predict the binary acceptance decision.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.92270911781924\nOverall Accuracy: 0.5632\n\nParameter Recovery:\n- \u03b2: r = 0.653\n- \u03b3: r = -0.138\n- \u03c6: r = -0.136"
  ]
}