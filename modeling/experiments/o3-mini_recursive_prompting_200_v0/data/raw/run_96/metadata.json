{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 94, we want to further encourage creative exploration of nonlinear activations and flexible threshold modulation while preserving the overall structure. Retain the core steps (summing fixed components, sine/cosine modulations, adaptive transformation, dynamic threshold T, extra blending composite, and final exponentiation) but now explicitly invite designers to experiment with alternative nonlinear activation functions (e.g., leaky ReLU, parametric ReLU, or custom adaptive blends) in both the adaptive transformation and the extra blending composite. Also, increase flexibility by suggesting the possibility to add a minor cubic (or even fourth\u2010order) term to the dynamic threshold. Additionally, encourage blending the standard softplus function with a linear term (0.1\u00d7x) even more dynamically, and allow for an optional learnable weighting on that blend. Do not change the three learnable parameters (beta, gamma, and phi) and specify their fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. Use these instructions both as a guideline and an invitation for out\u2010of\u2010the\u2010box modifications that might improve BIC, accuracy, and parameter recovery.\n</think>\nNew Instructions for Run 94 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as: { 0.012\u00d7z if z < 0; min(z, 1 + ln(1+z)) if z \u2265 0 }.\n\u2003\u2003Encourage designers to consider alternative activations here (e.g., leaky or parametric ReLU variants, or even an adaptive mixture of the linear and logarithmic responses).\n7. Multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + (optional small cubic or quartic term).\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1\u20130.002\u00d7cos(a)] \u00d7 [1\u20130.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Designers are encouraged to experiment by learning or blending the softplus function with an extra linear term (e.g., 0.1\u00d7x) and even try novel activation combinations.\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma\u00d7f(x) and convert it to an acceptance probability via:\n\u2003\u2003P(accept = 1) = 1/(1+exp(\u2013U)).\n11. Retain exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nDesigners are strongly encouraged to consider creative or nonstandard nonlinear activation functions and adaptive combinations to further lower the BIC, enhance parameter recovery, and boost accuracy, as long as the overall structure remains intact.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 94, we want to further encourage creative exploration of nonlinear activations and flexible threshold modulation while preserving the overall structure. Retain the core steps (summing fixed components, sine/cosine modulations, adaptive transformation, dynamic threshold T, extra blending composite, and final exponentiation) but now explicitly invite designers to experiment with alternative nonlinear activation functions (e.g., leaky ReLU, parametric ReLU, or custom adaptive blends) in both the adaptive transformation and the extra blending composite. Also, increase flexibility by suggesting the possibility to add a minor cubic (or even fourth\u2010order) term to the dynamic threshold. Additionally, encourage blending the standard softplus function with a linear term (0.1\u00d7x) even more dynamically, and allow for an optional learnable weighting on that blend. Do not change the three learnable parameters (beta, gamma, and phi) and specify their fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], phi \u2208 [0.5, 1.5]. Use these instructions both as a guideline and an invitation for out\u2010of\u2010the\u2010box modifications that might improve BIC, accuracy, and parameter recovery.\n</think>\nNew Instructions for Run 94 of 200:\n1. Compute the core sum a as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply a by [1 + 0.012\u00d7sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008\u00d7cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005\u00d7sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004\u00d7cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006\u00d7(sin(a + 0.035)\u00d7cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003\u00d7(sin(a + 0.03)\u00d7cos(a + 0.05))]\n5. Let the result be z.\n6. Define the adaptive transformation f_adapt(z) as: { 0.012\u00d7z if z < 0; min(z, 1 + ln(1+z)) if z \u2265 0 }.\n\u2003\u2003Encourage designers to consider alternative activations here (e.g., leaky or parametric ReLU variants, or even an adaptive mixture of the linear and logarithmic responses).\n7. Multiply f_adapt(z) by a dynamic threshold factor T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + (optional small cubic or quartic term).\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1+0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1\u20130.002\u00d7cos(a)] \u00d7 [1\u20130.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1+0.001\u00d7a] \u00d7 [1+cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Designers are encouraged to experiment by learning or blending the softplus function with an extra linear term (e.g., 0.1\u00d7x) and even try novel activation combinations.\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma\u00d7f(x) and convert it to an acceptance probability via:\n\u2003\u2003P(accept = 1) = 1/(1+exp(\u2013U)).\n11. Retain exactly three learnable parameters with these fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nDesigners are strongly encouraged to consider creative or nonstandard nonlinear activation functions and adaptive combinations to further lower the BIC, enhance parameter recovery, and boost accuracy, as long as the overall structure remains intact.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant \u03b4 added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 0.001}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as delta + (F1 + F2 + ... + F11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Intermediate modulation step: a modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Intermediate modulation step 2: scaling s1 by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Intermediate modulation step 3: s2 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Intermediate modulation step 4: s3 modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Intermediate modulation step 5: s4 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s6\": {\n      \"description\": \"Intermediate modulation step 6: s5 modulated by a product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s7\": {\n      \"description\": \"Intermediate modulation step 7: s6 modulated by another product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential modulation (equals s7)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, defined piecewise\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {\n          \"if_negative\": \"0.012*z\",\n          \"if_nonnegative\": \"min(z, 1+ln(1+z))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial function of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"coefficients\": [1, 0.0005, 0.00005, 0.000005, 0.0000001, 0.00000001, 0.000000001, 0.0000000001]\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"composite\",\n        \"parameters\": {\n          \"softplus\": \"ln(1+exp(x))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying sign and exponentiation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent acceptance bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable weighting parameter applied to the softplus-linear blend in the extra composite\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the final transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that computes a core sum from 11 fixed components and a small constant. This sum is sequentially modulated through sine and cosine terms and adaptively transformed using a piecewise function. A dynamic threshold factor and an extra blending composite\u2014which incorporates softplus blended with a linear term weighted by a learnable parameter phi\u2014further modulate the signal. The final transformed signal is scaled and combined with learnable parameters beta and gamma to yield a latent utility that is converted to an acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant \\u03b4 added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 0.001\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as delta + (F1 + F2 + ... + F11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Intermediate modulation step: a modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Intermediate modulation step 2: scaling s1 by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Intermediate modulation step 3: s2 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Intermediate modulation step 4: s3 modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Intermediate modulation step 5: s4 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s6\": {\n      \"description\": \"Intermediate modulation step 6: s5 modulated by a product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s7\": {\n      \"description\": \"Intermediate modulation step 7: s6 modulated by another product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential modulation (equals s7)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, defined piecewise\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {\n          \"if_negative\": \"0.012*z\",\n          \"if_nonnegative\": \"min(z, 1+ln(1+z))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial function of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"coefficients\": [\n            1,\n            0.0005,\n            5e-05,\n            5e-06,\n            1e-07,\n            1e-08,\n            1e-09,\n            1e-10\n          ]\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"composite\",\n        \"parameters\": {\n          \"softplus\": \"ln(1+exp(x))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying sign and exponentiation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent acceptance bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable weighting parameter applied to the softplus-linear blend in the extra composite\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the final transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.001\n\n        a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\n        s1 = a * (1 + 0.012 * math.sin(a + 0.045))\n        s2 = 1.08 * s1\n        s3 = s2 * (1 + 0.008 * math.cos(a + 0.065))\n        s4 = s3 * (1 + 0.005 * math.sin(a + 0.115))\n        s5 = s4 * (1 + 0.004 * math.cos(a + 0.085))\n        s6 = s5 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        s7 = s6 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = s7\n\n        if z < 0:\n            f_adapt = 0.012 * z\n        else:\n            f_adapt = min(z, 1 + math.log(1 + z))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8\n        \n        softplus = math.log(1 + math.exp(0.865 / (1 + a)))\n        extra = (math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (softplus + phi * (0.865 / (1 + a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-6)**(0.944 + 0.00015 * math.log(1 + a))\n\n        f = (1 if z >= 0 else -1) * (f_adapt * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n        U = beta + gamma * f\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":6.0,\"split_self\":18.0,\"splitperc_opp\":25,\"splitperc_self\":75,\"accept\":1.0,\"accepted_amount\":6.0,\"accepted_perc\":25.0,\"proposed_perc\":25.0,\"proposed_amount\":6.0},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":4.0,\"split_self\":20.0,\"splitperc_opp\":17,\"splitperc_self\":83,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":17.0,\"proposed_amount\":4.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":2.0,\"split_self\":22.0,\"splitperc_opp\":8,\"splitperc_self\":92,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":8.0,\"proposed_amount\":2.0},{\"ID\":4,\"group\":\"control\",\"trial_number\":4,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":2.0,\"split_self\":22.0,\"splitperc_opp\":8,\"splitperc_self\":92,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":8.0,\"proposed_amount\":2.0},{\"ID\":5,\"group\":\"control\",\"trial_number\":5,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":3.0,\"split_self\":21.0,\"splitperc_opp\":12,\"splitperc_self\":88,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":12.0,\"proposed_amount\":3.0},{\"ID\":6,\"group\":\"control\",\"trial_number\":6,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":4.0,\"split_self\":20.0,\"splitperc_opp\":17,\"splitperc_self\":83,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":17.0,\"proposed_amount\":4.0},{\"ID\":7,\"group\":\"control\",\"trial_number\":7,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":4.0,\"split_self\":20.0,\"splitperc_opp\":17,\"splitperc_self\":83,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":17.0,\"proposed_amount\":4.0},{\"ID\":8,\"group\":\"control\",\"trial_number\":8,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":5.0,\"split_self\":19.0,\"splitperc_opp\":21,\"splitperc_self\":79,\"accept\":1.0,\"accepted_amount\":5.0,\"accepted_perc\":21.0,\"proposed_perc\":21.0,\"proposed_amount\":5.0},{\"ID\":9,\"group\":\"control\",\"trial_number\":9,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":6.0,\"split_self\":18.0,\"splitperc_opp\":25,\"splitperc_self\":75,\"accept\":1.0,\"accepted_amount\":6.0,\"accepted_perc\":25.0,\"proposed_perc\":25.0,\"proposed_amount\":6.0},{\"ID\":10,\"group\":\"control\",\"trial_number\":10,\"trial_type\":1,\"trial_role\":1,\"token_opp\":12,\"token_self\":12,\"combined_earning\":24,\"split_opp\":6.0,\"split_self\":18.0,\"splitperc_opp\":25,\"splitperc_self\":75,\"accept\":1.0,\"accepted_amount\":6.0,\"accepted_perc\":25.0,\"proposed_perc\":25.0,\"proposed_amount\":6.0}]'\ndata = json.loads(data_json)\n\n# Add dummy F values to the dataset, since there are none in the original dataset, we must add these for the code to work\nfor i in range(len(data)):\n    data[i][\"F1\"] = 0\n    data[i][\"F2\"] = 0\n    data[i][\"F3\"] = 0\n    data[i][\"F4\"] = 0\n    data[i][\"F5\"] = 0\n    data[i][\"F6\"] = 0\n    data[i][\"F7\"] = 0\n    data[i][\"F8\"] = 0\n    data[i][\"F9\"] = 0\n    data[i][\"F10\"] = 0\n    data[i][\"F11\"] = 0\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743544363.588342
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Base utility parameter representing inherent acceptance bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable weighting parameter applied to the softplus-linear blend in the extra composite",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F2": {
      "description": "Fixed component 2 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F3": {
      "description": "Fixed component 3 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F4": {
      "description": "Fixed component 4 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F5": {
      "description": "Fixed component 5 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F6": {
      "description": "Fixed component 6 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F7": {
      "description": "Fixed component 7 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F8": {
      "description": "Fixed component 8 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F9": {
      "description": "Fixed component 9 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F10": {
      "description": "Fixed component 10 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "F11": {
      "description": "Fixed component 11 computed from data-related factors",
      "range": {
        "min": -1000,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "unspecified",
        "parameters": {}
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "delta": {
      "description": "Small constant \u03b4 added to the sum of fixed components",
      "range": {
        "min": 0,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 0.001
        }
      },
      "learnable": false,
      "source": "data/calculated"
    },
    "a": {
      "description": "Core sum computed as delta + (F1 + F2 + ... + F11)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s1": {
      "description": "Intermediate modulation step: a modulated by a sine term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s2": {
      "description": "Intermediate modulation step 2: scaling s1 by 1.08",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s3": {
      "description": "Intermediate modulation step 3: s2 modulated by a cosine term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s4": {
      "description": "Intermediate modulation step 4: s3 modulated by a sine term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s5": {
      "description": "Intermediate modulation step 5: s4 modulated by a cosine term",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s6": {
      "description": "Intermediate modulation step 6: s5 modulated by a product of sine and cosine terms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "s7": {
      "description": "Intermediate modulation step 7: s6 modulated by another product of sine and cosine terms",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Modulated signal after sequential modulation (equals s7)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "dependent",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z, defined piecewise",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "piecewise",
        "parameters": {
          "if_negative": "0.012*z",
          "if_nonnegative": "min(z, 1+ln(1+z))"
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold factor computed as a polynomial function of a",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "polynomial",
        "parameters": {
          "coefficients": [
            1,
            0.0005,
            5e-05,
            5e-06,
            1e-07,
            1e-08,
            1e-09,
            1e-10
          ]
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic components",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {
        "type": "composite",
        "parameters": {
          "softplus": "ln(1+exp(x))"
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal after applying sign and exponentiation",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "transformed",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Base utility parameter representing inherent acceptance bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Scaling parameter for the transformed signal f",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable weighting parameter applied to the softplus-linear blend in the extra composite",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as beta plus gamma times the final transformed signal f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "calculated",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Acceptance probability computed via the logistic function applied to U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "logistic",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex nonlinear utility model that computes a core sum from 11 fixed components and a small constant. This sum is sequentially modulated through sine and cosine terms and adaptively transformed using a piecewise function. A dynamic threshold factor and an extra blending composite\u2014which incorporates softplus blended with a linear term weighted by a learnable parameter phi\u2014further modulate the signal. The final transformed signal is scaled and combined with learnable parameters beta and gamma to yield a latent utility that is converted to an acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 computed from data-related factors\",\n      \"range\": {\n        \"min\": -1000,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"unspecified\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant \u03b4 added to the sum of fixed components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\"value\": 0.001}\n      },\n      \"learnable\": false,\n      \"source\": \"data/calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as delta + (F1 + F2 + ... + F11)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s1\": {\n      \"description\": \"Intermediate modulation step: a modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s2\": {\n      \"description\": \"Intermediate modulation step 2: scaling s1 by 1.08\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s3\": {\n      \"description\": \"Intermediate modulation step 3: s2 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s4\": {\n      \"description\": \"Intermediate modulation step 4: s3 modulated by a sine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s5\": {\n      \"description\": \"Intermediate modulation step 5: s4 modulated by a cosine term\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s6\": {\n      \"description\": \"Intermediate modulation step 6: s5 modulated by a product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"s7\": {\n      \"description\": \"Intermediate modulation step 7: s6 modulated by another product of sine and cosine terms\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal after sequential modulation (equals s7)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"dependent\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z, defined piecewise\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"piecewise\",\n        \"parameters\": {\n          \"if_negative\": \"0.012*z\",\n          \"if_nonnegative\": \"min(z, 1+ln(1+z))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold factor computed as a polynomial function of a\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"polynomial\",\n        \"parameters\": {\n          \"coefficients\": [1, 0.0005, 0.00005, 0.000005, 0.0000001, 0.00000001, 0.000000001, 0.0000000001]\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite incorporating exponential, trigonometric, softplus, and hyperbolic components\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"composite\",\n        \"parameters\": {\n          \"softplus\": \"ln(1+exp(x))\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal after applying sign and exponentiation\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"transformed\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base utility parameter representing inherent acceptance bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Scaling parameter for the transformed signal f\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable weighting parameter applied to the softplus-linear blend in the extra composite\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as beta plus gamma times the final transformed signal f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"calculated\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability computed via the logistic function applied to U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"logistic\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex nonlinear utility model that computes a core sum from 11 fixed components and a small constant. This sum is sequentially modulated through sine and cosine terms and adaptively transformed using a piecewise function. A dynamic threshold factor and an extra blending composite\u2014which incorporates softplus blended with a linear term weighted by a learnable parameter phi\u2014further modulate the signal. The final transformed signal is scaled and combined with learnable parameters beta and gamma to yield a latent utility that is converted to an acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A complex nonlinear utility model that computes a core sum from 11 fixed components and a small constant. This sum is sequentially modulated through sine and cosine terms and adaptively transformed using a piecewise function. A dynamic threshold factor and an extra blending composite\u2014which incorporates softplus blended with a linear term weighted by a learnable parameter phi\u2014further modulate the signal. The final transformed signal is scaled and combined with learnable parameters beta and gamma to yield a latent utility that is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        F1 = trial.get(\"F1\", 0)\n        F2 = trial.get(\"F2\", 0)\n        F3 = trial.get(\"F3\", 0)\n        F4 = trial.get(\"F4\", 0)\n        F5 = trial.get(\"F5\", 0)\n        F6 = trial.get(\"F6\", 0)\n        F7 = trial.get(\"F7\", 0)\n        F8 = trial.get(\"F8\", 0)\n        F9 = trial.get(\"F9\", 0)\n        F10 = trial.get(\"F10\", 0)\n        F11 = trial.get(\"F11\", 0)\n        delta = 0.001\n\n        a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\n        s1 = a * (1 + 0.012 * math.sin(a + 0.045))\n        s2 = 1.08 * s1\n        s3 = s2 * (1 + 0.008 * math.cos(a + 0.065))\n        s4 = s3 * (1 + 0.005 * math.sin(a + 0.115))\n        s5 = s4 * (1 + 0.004 * math.cos(a + 0.085))\n        s6 = s5 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        s7 = s6 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n        z = s7\n\n        if z < 0:\n            f_adapt = 0.012 * z\n        else:\n            f_adapt = min(z, 1 + math.log(1 + z))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + 0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8\n        \n        softplus = math.log(1 + math.exp(0.865 / (1 + a)))\n        extra = (math.exp(-a / 0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1 / (1 + a))) * (softplus + phi * (0.865 / (1 + a))) * (1 - 0.002 * math.cos(a)) * (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) * (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-6)**(0.944 + 0.00015 * math.log(1 + a))\n\n        f = (1 if z >= 0 else -1) * (f_adapt * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n        U = beta + gamma * f\n        \n        P_accept = 1 / (1 + math.exp(-U))\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5741758241758241,
  "fitting_results": [
    {
      "beta": -10.0,
      "gamma": 5.55764735953465,
      "phi": 0.9117569652608783,
      "success": true,
      "log_likelihood": -24.953979558517293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 6.087591524969934,
      "phi": 0.5664594865522478,
      "success": true,
      "log_likelihood": -24.95329850223467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078340539578181,
      "gamma": 2.174517065895379,
      "phi": 0.5594138010153078,
      "success": true,
      "log_likelihood": -24.897714324110805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.418191707813249,
      "phi": 0.7320415668721905,
      "success": true,
      "log_likelihood": -24.953434717766974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.7732596725470218,
      "phi": 0.6282661736803513,
      "success": true,
      "log_likelihood": -24.95338930131286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.28399353010532596,
      "gamma": 3.7442047547494646,
      "phi": 0.6640752119290985,
      "success": true,
      "log_likelihood": -23.545973163850565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.609027148096717,
      "phi": 1.347654674969172,
      "success": true,
      "log_likelihood": -11.277860199334526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8146915348419991,
      "gamma": 4.368290686228577,
      "phi": 1.2094178228790244,
      "success": true,
      "log_likelihood": -22.914510052279105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.476985745319924,
      "phi": 0.5324048610348656,
      "success": true,
      "log_likelihood": -11.27786020742003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.734296151202961,
      "phi": 1.0119205784778529,
      "success": true,
      "log_likelihood": -24.953480114526396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 6.387308614291044,
      "phi": 1.3577225901576775,
      "success": true,
      "log_likelihood": -24.95338931379183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.7085946451742875,
      "phi": 0.6670094908402725,
      "success": true,
      "log_likelihood": -24.953934108739155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.056488410799867,
      "phi": 1.2415967817070843,
      "success": true,
      "log_likelihood": -24.953434713920238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.32383251381576,
      "phi": 0.7374699352305638,
      "success": true,
      "log_likelihood": -11.277860210682121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.578194457531731,
      "phi": 1.3273848806793207,
      "success": true,
      "log_likelihood": -11.277860188428182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.188891263978407,
      "phi": 0.9240519851432297,
      "success": true,
      "log_likelihood": -11.277860247116148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 2.5894753129923345,
      "phi": 1.0677650483533758,
      "success": true,
      "log_likelihood": -11.277860262125007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.740491094489142,
      "phi": 0.7413219195117301,
      "success": true,
      "log_likelihood": -16.277633268521754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.526574237240911,
      "phi": 1.132889518653266,
      "success": true,
      "log_likelihood": -15.277678661784416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.50240330510023,
      "phi": 0.7891484430718306,
      "success": true,
      "log_likelihood": -11.277860216995686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2474918725904187,
      "gamma": 0.15919170901640714,
      "phi": 0.7772656614956139,
      "success": true,
      "log_likelihood": -24.73061675061216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 6.603928175766824,
      "phi": 0.821615428896796,
      "success": true,
      "log_likelihood": -16.277633268137823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.801440083213482,
      "phi": 1.402493450786667,
      "success": true,
      "log_likelihood": -24.9535255468621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0786760715139883,
      "gamma": 2.834148884929646,
      "phi": 1.0688194511543383,
      "success": true,
      "log_likelihood": -24.89771432868865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.27137928184442,
      "gamma": 1.0351135811752907,
      "phi": 1.126205736407451,
      "success": true,
      "log_likelihood": -24.9532985327812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6791648829837562,
      "gamma": 4.049116351165894,
      "phi": 1.0348858030314625,
      "success": true,
      "log_likelihood": -24.450957568521083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475592827591144,
      "gamma": 4.195111588001593,
      "phi": 0.628947001027354,
      "success": true,
      "log_likelihood": -24.730616750439335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 7.806506114791582,
      "phi": 0.6049644317441878,
      "success": true,
      "log_likelihood": -24.9536617434457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.606421141782864,
      "phi": 1.399359825988158,
      "success": true,
      "log_likelihood": -15.277678629349749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.280449903150859,
      "phi": 1.4014431349284646,
      "success": true,
      "log_likelihood": -19.27749709004327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.069636740955882,
      "phi": 0.8165211828510077,
      "success": true,
      "log_likelihood": -11.277860200711947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.2085554551393205,
      "phi": 1.1106450278625375,
      "success": true,
      "log_likelihood": -24.95397954217779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 4.246401727923864,
      "phi": 0.5562409679265742,
      "success": true,
      "log_likelihood": -24.953434707467093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.999999999999998,
      "gamma": 0.2054491875267505,
      "phi": 1.2857124686293022,
      "success": true,
      "log_likelihood": -24.95348009470116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.683710995861752,
      "phi": 1.0960118799729799,
      "success": true,
      "log_likelihood": -11.27786018401428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2837520677230687,
      "gamma": 7.709466315102386,
      "phi": 0.576554170055608,
      "success": true,
      "log_likelihood": -23.545973170721073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5234008256922675,
      "gamma": 4.427099857260039,
      "phi": 1.4916399099526105,
      "success": true,
      "log_likelihood": -22.157938177188512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.178229059453137,
      "gamma": 3.0137086149487007,
      "phi": 0.990112748244895,
      "success": true,
      "log_likelihood": -24.95329854093992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8146417588414706,
      "gamma": 9.54415282755836,
      "phi": 0.9394284133301499,
      "success": true,
      "log_likelihood": -22.91451005142335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 6.501776639539467,
      "phi": 1.2910951804630055,
      "success": true,
      "log_likelihood": -14.277724043304755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19283516938947967,
      "gamma": 8.27318750519923,
      "phi": 0.8062901161741182,
      "success": true,
      "log_likelihood": -24.05694518872586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.7310604001315373,
      "phi": 1.1668405255137808,
      "success": true,
      "log_likelihood": -24.953752489412658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.961914943685022,
      "phi": 0.8973471227967875,
      "success": true,
      "log_likelihood": -12.277814837659362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2480371858115764,
      "gamma": 9.046081301862573,
      "phi": 1.1189780940181557,
      "success": true,
      "log_likelihood": -24.73061676850864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.1928273815098554,
      "gamma": 6.849081555670136,
      "phi": 1.1252298109027814,
      "success": true,
      "log_likelihood": -24.05694518872396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.06063726648145,
      "gamma": 8.224030670823801,
      "phi": 1.0066130787262806,
      "success": true,
      "log_likelihood": -21.27032110926005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0789559048565343,
      "gamma": 6.10253988646617,
      "phi": 1.304405633566898,
      "success": true,
      "log_likelihood": -24.89771433549149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.4110522721456187,
      "phi": 1.1714394578145568,
      "success": true,
      "log_likelihood": -24.95348009562052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.2062205428575816,
      "phi": 1.3828034948509198,
      "success": true,
      "log_likelihood": -24.953434700355963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0771254290817236,
      "gamma": 1.5160767329238356,
      "phi": 0.563669756350279,
      "success": true,
      "log_likelihood": -24.897714385995947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5227560419075388,
      "gamma": 3.6142274034220856,
      "phi": 0.8723348787933343,
      "success": true,
      "log_likelihood": -22.157938157004708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.602655578447134,
      "phi": 0.6188922953259745,
      "success": true,
      "log_likelihood": -24.953888706283145,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.0762524504183393,
      "gamma": 7.223924520063323,
      "phi": 1.4064016782101076,
      "success": true,
      "log_likelihood": -24.89771454252325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6790632767436766,
      "gamma": 0.953797607141461,
      "phi": 0.8729094925014725,
      "success": true,
      "log_likelihood": -24.450957568535763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.3882102117830486,
      "phi": 1.087131081359901,
      "success": true,
      "log_likelihood": -24.95348009998046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.5463723476373101,
      "phi": 0.6568409984786774,
      "success": true,
      "log_likelihood": -24.953570898298715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 9.02742525718258,
      "phi": 0.7059281967948884,
      "success": true,
      "log_likelihood": -24.953661755563765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.999727949454646,
      "phi": 1.4265173963261883,
      "success": true,
      "log_likelihood": -15.277678633121484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.11169339463119314,
      "phi": 1.0990492372460123,
      "success": true,
      "log_likelihood": -24.95393407416806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.626038834093565,
      "phi": 1.0463376028298137,
      "success": true,
      "log_likelihood": -18.277542474786735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19271553822542617,
      "gamma": 3.3855040830409093,
      "phi": 0.5845369316316557,
      "success": true,
      "log_likelihood": -24.05694518873471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.156556607837499,
      "gamma": 7.029618047640841,
      "phi": 0.5509251450434655,
      "success": true,
      "log_likelihood": -24.953318629201227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.8390340972732795,
      "phi": 0.7305480049823951,
      "success": true,
      "log_likelihood": -24.953979497422623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.33787051169190785,
      "phi": 0.8775415770135906,
      "success": true,
      "log_likelihood": -24.953389298675795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.4770647623918998,
      "phi": 0.6733395451935614,
      "success": true,
      "log_likelihood": -24.953752495114855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475599404705784,
      "gamma": 7.568968971915048,
      "phi": 0.6897236163472561,
      "success": true,
      "log_likelihood": -24.730616750535944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 5.823361589336001,
      "phi": 1.386495236848577,
      "success": true,
      "log_likelihood": -14.277724047313939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 7.308682849920855,
      "phi": 0.9972443255590229,
      "success": true,
      "log_likelihood": -16.2776332623218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.2475258751988643,
      "gamma": 3.1031026339032173,
      "phi": 0.775959731325083,
      "success": true,
      "log_likelihood": -24.730616750342303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.959737711310831,
      "phi": 1.13436299671119,
      "success": true,
      "log_likelihood": -14.277724019501548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.34122815700602965,
      "phi": 1.1992865994287032,
      "success": true,
      "log_likelihood": -24.953934078006363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 1.374242916865431,
      "phi": 0.8452189698059906,
      "success": true,
      "log_likelihood": -24.95388869295324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078319673509993,
      "gamma": 5.597075927231033,
      "phi": 1.4034508040796874,
      "success": true,
      "log_likelihood": -24.897714324709767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 4.382917447014501,
      "phi": 0.9448282046953201,
      "success": true,
      "log_likelihood": -19.277497097516267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7358622774237515,
      "gamma": 2.3115962628112108,
      "phi": 0.9855439403057574,
      "success": true,
      "log_likelihood": -24.953304824858176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229629870884038,
      "gamma": 5.816575864459811,
      "phi": 0.9553379982524558,
      "success": true,
      "log_likelihood": -22.157938155491824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 9.201070451412956,
      "phi": 1.3053580838394927,
      "success": true,
      "log_likelihood": -13.277769408010112,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.22593945166101248,
      "phi": 1.2026972734087784,
      "success": true,
      "log_likelihood": -24.95402487238336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19286186723867232,
      "gamma": 7.707934837238288,
      "phi": 1.312379790897887,
      "success": true,
      "log_likelihood": -24.05694518872401,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.217212424794512,
      "phi": 0.5367924991841416,
      "success": true,
      "log_likelihood": -24.953979500349558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.078630138988089,
      "gamma": 3.252087236328298,
      "phi": 0.7715829339174535,
      "success": true,
      "log_likelihood": -24.897714327438162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.999999999999998,
      "gamma": 7.1592871954007,
      "phi": 0.515880739307734,
      "success": true,
      "log_likelihood": -14.277724053080599,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 5.27354143810476,
      "phi": 1.1253186627810219,
      "success": true,
      "log_likelihood": -24.953934156937798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 8.550473257585828,
      "phi": 0.7966281783663061,
      "success": true,
      "log_likelihood": -24.953298502235906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19272691365699646,
      "gamma": 3.094325128851403,
      "phi": 1.0445919814186122,
      "success": true,
      "log_likelihood": -24.056945188724523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.48982416735856454,
      "phi": 0.6380691836514203,
      "success": true,
      "log_likelihood": -24.953934078884828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.522924103648247,
      "gamma": 3.4235760718168513,
      "phi": 1.397504762340021,
      "success": true,
      "log_likelihood": -22.157938154748365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.002295831616108135,
      "phi": 1.219893474921947,
      "success": true,
      "log_likelihood": -24.953752480946466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "gamma": 8.235308559394946,
      "phi": 0.9067632923141877,
      "success": true,
      "log_likelihood": -13.27776942720691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 2.1986061352135593,
      "phi": 0.6753563604316708,
      "success": true,
      "log_likelihood": -24.953343902216687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5229278428472437,
      "gamma": 4.1241397878796375,
      "phi": 0.6786302917784247,
      "success": true,
      "log_likelihood": -22.157938154741732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.6767917449718983,
        "p": 1.0811434990599768e-14
      },
      "gamma": {
        "r": 0.19215960280300798,
        "p": 0.05545080553817554
      },
      "phi": {
        "r": 0.014871005288444771,
        "p": 0.8832515995441105
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 53.922693623595556,
  "bic_results": {
    "average_bic": 53.922693623595556,
    "individual_bics": [
      60.65851593240292,
      60.657153819837674,
      60.54598546358994,
      60.657426250902276,
      60.65733541799405,
      57.842503143069464,
      33.30627721403738,
      56.57957691992654,
      33.306277230208394,
      60.65751704442113,
      60.65733544295199,
      60.65842503284664,
      60.6574262432088,
      33.30627723673257,
      33.3062771922247,
      33.30627730960063,
      33.30627733961835,
      43.305823352411835,
      41.30591413893716,
      33.3062772493597,
      60.211790316592655,
      43.30582335164398,
      60.65760790909253,
      60.54598547274563,
      60.657153880930736,
      59.652471952410494,
      60.211790316247004,
      60.65788030225973,
      41.30591407406783,
      49.305550995454865,
      33.306277216792225,
      60.65851589972391,
      60.65742623030252,
      60.657517004770654,
      33.30627718339689,
      57.84250315681048,
      55.06643316974535,
      60.657153897248165,
      56.579576918215025,
      39.30600490197784,
      58.86444719282005,
      60.65806179419364,
      35.306186490687054,
      60.211790352385606,
      58.86444719281626,
      53.29119903388843,
      60.54598548635131,
      60.65751700660937,
      60.65742621608025,
      60.54598558736022,
      55.06643312937774,
      60.65833422793462,
      60.545985900414834,
      59.65247195243985,
      60.65751701532925,
      60.657698611965756,
      60.65788032649586,
      41.3059140816113,
      60.65842496370445,
      47.3056417649418,
      58.864447192837744,
      60.65719407377078,
      60.65851581021357,
      60.65733541271992,
      60.65806180559804,
      60.211790316440215,
      39.306004909996204,
      43.305823340011926,
      60.21179031605294,
      39.30600485437142,
      60.65842497138105,
      60.65833420127481,
      60.54598546478786,
      49.30555101040086,
      60.657166465084686,
      55.06643312635198,
      37.30609563138856,
      60.658606560135055,
      58.86444719281636,
      60.65851581606745,
      60.54598547024466,
      39.30600492152953,
      60.65842512924392,
      60.65715381984015,
      58.86444719281738,
      60.65842497313798,
      55.06643312486506,
      60.65806177726127,
      37.30609566978215,
      60.6572446198017,
      55.0664331248518
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.677\n- gamma: r = 0.192\n- phi: r = 0.015",
  "previous_models": [
    "Specification: a = delta + (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11)\ns1 = a*(1 + 0.012*sin(a + 0.045))\ns2 = 1.08*s1\ns3 = s2*(1 + 0.008*cos(a + 0.065))\ns4 = s3*(1 + 0.005*sin(a + 0.115))\ns5 = s4*(1 + 0.004*cos(a + 0.085))\ns6 = s5*(1 + 0.006*(sin(a + 0.035)*cos(a + 0.055)))\ns7 = s6*(1 + 0.003*(sin(a + 0.03)*cos(a + 0.05)))\nz = s7\nf_adapt = { 0.012*z, if z < 0;  min(z, 1 + ln(1+z)), if z \u2265 0 }\nT = 1 + 0.0005*a^2 + 0.00005*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8\nextra = ( exp(-a/0.1) * (z/(1+|z|)) * (1 + 0.005*sin(1/(1+a))) * (softplus(0.865/(1+a)) + phi*(0.865/(1+a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1+cosh(0.001*a))^(2+0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1+a))\nf = sign(z) * ( f_adapt * T * extra )^(0.944 + 0.00015*ln(1+a))\nU = beta + gamma*f\nP(accept=1) = 1/(1 + exp(-U))\nSummary: A complex nonlinear utility model that computes a core sum from 11 fixed components and a small constant. This sum is sequentially modulated through sine and cosine terms and adaptively transformed using a piecewise function. A dynamic threshold factor and an extra blending composite\u2014which incorporates softplus blended with a linear term weighted by a learnable parameter phi\u2014further modulate the signal. The final transformed signal is scaled and combined with learnable parameters beta and gamma to yield a latent utility that is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 53.922693623595556\nOverall Accuracy: 0.5742\n\nParameter Recovery:\n- beta: r = 0.677\n- gamma: r = 0.192\n- phi: r = 0.015"
  ]
}