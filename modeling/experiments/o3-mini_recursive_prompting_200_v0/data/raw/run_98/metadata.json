{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 97, further explore alternative nonlinear activation functions and adaptive threshold modulation. Emphasize flexibility in the adaptive transformation (for example, using a leaky or parametric ReLU, or a convex combination of linear and logarithmic transforms) while keeping the overall structure intact. Also, encourage incorporating a small cubic or quartic term in the dynamic threshold and allow the blending of the standard softplus with a linear term to be weighted by a learnable factor. Remind designers that the three learnable parameters must remain: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. Emphasize out-of-the-box modifications to further lower BIC, boost accuracy, and improve parameter recovery.\n</think>\nNew Instructions for Run 97 of 200:\n1. Compute the core sum \"a\" as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \"a\" by [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n5. Let the resulting value be z.\n6. Define an adaptive transformation f_adapt(z) as: { 0.012 \u00d7 z if z < 0; min(z, 1 + ln(1+z)) if z \u2265 0 }.\n\u2003\u2003Designers are encouraged to experiment with alternative activations here, for instance testing leaky or parametric ReLU variants or adaptive blends that mix a linear and logarithmic response.\n7. Multiply f_adapt(z) by a dynamic threshold T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + (optional cubic or quartic term, e.g. 0.000001\u00d7a\u00b3 or 0.0000001\u00d7a\u2074).\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Designers should experiment with blending the softplus function with a linear term (e.g. increasing the weight from 0.1\u00d7x) or even try a new composite activation.\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma \u00d7 f(x) and obtain the acceptance probability by applying the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n11. Retain exactly three learnable parameters with fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nDesigners are strongly encouraged to creatively modify the adaptive transformation and extra blending composite (for example, by incorporating leaky/parametric ReLU variants, extra polynomial terms, or alternative softplus blends) to further reduce BIC, improve parameter recovery, and boost accuracy while keeping the overall model structure intact.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 97, further explore alternative nonlinear activation functions and adaptive threshold modulation. Emphasize flexibility in the adaptive transformation (for example, using a leaky or parametric ReLU, or a convex combination of linear and logarithmic transforms) while keeping the overall structure intact. Also, encourage incorporating a small cubic or quartic term in the dynamic threshold and allow the blending of the standard softplus with a linear term to be weighted by a learnable factor. Remind designers that the three learnable parameters must remain: beta in [\u201310, 10], gamma in [0, 10], and phi in [0.5, 1.5]. Emphasize out-of-the-box modifications to further lower BIC, boost accuracy, and improve parameter recovery.\n</think>\nNew Instructions for Run 97 of 200:\n1. Compute the core sum \"a\" as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \"a\" by [1 + 0.012 \u00d7 sin(a + 0.045)].\n3. Scale the result by 1.08.\n4. Sequentially modulate the scaled value using:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n5. Let the resulting value be z.\n6. Define an adaptive transformation f_adapt(z) as: { 0.012 \u00d7 z if z < 0; min(z, 1 + ln(1+z)) if z \u2265 0 }.\n\u2003\u2003Designers are encouraged to experiment with alternative activations here, for instance testing leaky or parametric ReLU variants or adaptive blends that mix a linear and logarithmic response.\n7. Multiply f_adapt(z) by a dynamic threshold T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 + (optional cubic or quartic term, e.g. 0.000001\u00d7a\u00b3 or 0.0000001\u00d7a\u2074).\n8. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Designers should experiment with blending the softplus function with a linear term (e.g. increasing the weight from 0.1\u00d7x) or even try a new composite activation.\n9. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n10. Compute the latent utility U = beta + gamma \u00d7 f(x) and obtain the acceptance probability by applying the logistic function:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n11. Retain exactly three learnable parameters with fixed bounds:\n\u2003\u2003\u2022 beta \u2208 [\u201310, 10]\n\u2003\u2003\u2022 gamma \u2208 [0, 10]\n\u2003\u2003\u2022 phi \u2208 [0.5, 1.5]\nDesigners are strongly encouraged to creatively modify the adaptive transformation and extra blending composite (for example, by incorporating leaky/parametric ReLU variants, extra polynomial terms, or alternative softplus blends) to further reduce BIC, improve parameter recovery, and boost accuracy while keeping the overall model structure intact.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nF1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed monetary share for the opponent (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Type of trial (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for opponent expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Monetary gain (\u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter influencing utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable blending parameter modulating f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex adaptive utility model for binary choice where the core sum of eleven fixed data components (e.g., tokens, earnings, proposal splits, and trial attributes) is nonlinearly modulated through sequential sine and cosine functions, an adaptive transformation with learnable blend (phi), a dynamic threshold, and an extra composite blending term incorporating softplus and polynomial modulations. The final transformed signal is scaled by a learnable parameter (gamma) and shifted by a learnable intercept (beta) to yield a latent utility that is converted to an acceptance probability via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'gamma', 'phi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                F1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed monetary share for the opponent (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Type of trial (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for opponent expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Monetary gain (\\u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter influencing utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable blending parameter modulating f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n\n        delta = 1e-6\n        a = (token_self + token_opp + combined_earning + split_opp + split_self +\n             trial_type + trial_role + splitperc_opp + splitperc_self + accepted_amount +\n             accepted_perc) + delta\n\n        A1 = a * (1 + 0.012 * math.sin(a + 0.045))\n        A2 = A1 * 1.08\n        A3 = A2 * (1 + 0.008 * math.cos(a + 0.065))\n        A4 = A3 * (1 + 0.005 * math.sin(a + 0.115))\n        A5 = A4 * (1 + 0.004 * math.cos(a + 0.085))\n        A6 = A5 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        z = A6 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        def f_adapt(z_val):\n            if z_val < 0:\n                return phi * (0.012 * z_val)\n            else:\n                return phi * min(z_val, 1 + math.log(1 + z_val))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + \\\n            0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        extra = (math.exp(-a/0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1/(1 + a))) *\n                 (softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a))) * (1 - 0.002 * math.cos(a)) *\n                 (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) *\n                 (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-6)**(0.944 + 0.00015 * math.log(1 + a))\n\n        def f(x):\n            if z == 0:\n                sign_z = 0\n            else:\n                sign_z = z / abs(z)\n\n            return sign_z * (f_adapt(z) * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n\n        U = beta + gamma * f(z)\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 377, \"token_self\": 728, \"combined_earning\": 5580, \"split_opp\": 3069.0, \"split_self\": 2511.0, \"splitperc_opp\": 55, \"splitperc_self\": 45, \"accept\": 1.0, \"accepted_amount\": 2511.0, \"accepted_perc\": 45.0, \"proposed_perc\": 55.0, \"proposed_amount\": 3069.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 528, \"token_self\": 624, \"combined_earning\": 5760, \"split_opp\": 2880.0, \"split_self\": 2880.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 2880.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 2880.0}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 368, \"token_self\": 751, \"combined_earning\": 6095, \"split_opp\": 1523.75, \"split_self\": 4571.25, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 4571.25, \"accepted_perc\": 75.0, \"proposed_perc\": 25.0, \"proposed_amount\": 1523.75}, {\"ID\": 4, \"group\": \"treatment\", \"trial_number\": 4, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 548, \"token_self\": 578, \"combined_earning\": 5630, \"split_opp\": 3096.5, \"split_self\": 2533.5, \"splitperc_opp\": 55, \"splitperc_self\": 45, \"accept\": 1.0, \"accepted_amount\": 2533.5, \"accepted_perc\": 45.0, \"proposed_perc\": 55.0, \"proposed_amount\": 3096.5}, {\"ID\": 5, \"group\": \"treatment\", \"trial_number\": 5, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 672, \"token_self\": 495, \"combined_earning\": 5835, \"split_opp\": 1458.75, \"split_self\": 4376.25, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 0.0, \"accepted_amount\": 4376.25, \"accepted_perc\": 75.0, \"proposed_perc\": 25.0, \"proposed_amount\": 1458.75}]'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743544533.379976
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Learnable base tendency parameter influencing utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the adaptive transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable blending parameter modulating f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "F1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned in the trial (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed monetary share for the opponent (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed monetary share for the participant (\u00a3)",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "Type of trial (1 = equal, 2 = opponent more, 3 = participant more)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "trial_role": {
      "description": "Role of the participant (1 = responder, 2 = proposer)",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Proposed share for opponent expressed in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for participant expressed in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "integer",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_amount": {
      "description": "Monetary gain (\u00a3) if the proposal is accepted",
      "range": {
        "min": 0,
        "max": 10000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "accepted_perc": {
      "description": "Percentage gain if the proposal is accepted",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Learnable base tendency parameter influencing utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Learnable scaling parameter for the adaptive transformation",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "phi": {
      "description": "Learnable blending parameter modulating f_adapt",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Small constant added to the core sum a",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Latent utility computed from the transformed signal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Predicted probability of accepting the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "float",
        "parameters": {}
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A complex adaptive utility model for binary choice where the core sum of eleven fixed data components (e.g., tokens, earnings, proposal splits, and trial attributes) is nonlinearly modulated through sequential sine and cosine functions, an adaptive transformation with learnable blend (phi), a dynamic threshold, and an extra composite blending term incorporating softplus and polynomial modulations. The final transformed signal is scaled by a learnable parameter (gamma) and shifted by a learnable intercept (beta) to yield a latent utility that is converted to an acceptance probability via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nF1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed monetary share for the opponent (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Type of trial (1 = equal, 2 = opponent more, 3 = participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed share for opponent expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant expressed in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"integer\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_amount\": {\n      \"description\": \"Monetary gain (\u00a3) if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accepted_perc\": {\n      \"description\": \"Percentage gain if the proposal is accepted\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable base tendency parameter influencing utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Learnable scaling parameter for the adaptive transformation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi\": {\n      \"description\": \"Learnable blending parameter modulating f_adapt\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Small constant added to the core sum a\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed from the transformed signal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Predicted probability of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"float\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA complex adaptive utility model for binary choice where the core sum of eleven fixed data components (e.g., tokens, earnings, proposal splits, and trial attributes) is nonlinearly modulated through sequential sine and cosine functions, an adaptive transformation with learnable blend (phi), a dynamic threshold, and an extra composite blending term incorporating softplus and polynomial modulations. The final transformed signal is scaled by a learnable parameter (gamma) and shifted by a learnable intercept (beta) to yield a latent utility that is converted to an acceptance probability via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: F1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A complex adaptive utility model for binary choice where the core sum of eleven fixed data components (e.g., tokens, earnings, proposal splits, and trial attributes) is nonlinearly modulated through sequential sine and cosine functions, an adaptive transformation with learnable blend (phi), a dynamic threshold, and an extra composite blending term incorporating softplus and polynomial modulations. The final transformed signal is scaled by a learnable parameter (gamma) and shifted by a learnable intercept (beta) to yield a latent utility that is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0, gamma=1, phi=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 0)\n        trial_role = trial.get(\"trial_role\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        accepted_amount = trial.get(\"accepted_amount\", 0)\n        accepted_perc = trial.get(\"accepted_perc\", 0)\n\n        delta = 1e-6\n        a = (token_self + token_opp + combined_earning + split_opp + split_self +\n             trial_type + trial_role + splitperc_opp + splitperc_self + accepted_amount +\n             accepted_perc) + delta\n\n        A1 = a * (1 + 0.012 * math.sin(a + 0.045))\n        A2 = A1 * 1.08\n        A3 = A2 * (1 + 0.008 * math.cos(a + 0.065))\n        A4 = A3 * (1 + 0.005 * math.sin(a + 0.115))\n        A5 = A4 * (1 + 0.004 * math.cos(a + 0.085))\n        A6 = A5 * (1 + 0.006 * (math.sin(a + 0.035) * math.cos(a + 0.055)))\n        z = A6 * (1 + 0.003 * (math.sin(a + 0.03) * math.cos(a + 0.05)))\n\n        def f_adapt(z_val):\n            if z_val < 0:\n                return phi * (0.012 * z_val)\n            else:\n                return phi * min(z_val, 1 + math.log(1 + z_val))\n\n        T = 1 + 0.0005 * a**2 + 0.00005 * a**3 + 0.000005 * a**4 + 0.0000001 * a**5 + \\\n            0.00000001 * a**6 + 0.000000001 * a**7 + 0.0000000001 * a**8 + 0.000001 * a**3\n\n        def softplus(x):\n            return math.log(1 + math.exp(x))\n\n        extra = (math.exp(-a/0.1) * (z / (1 + abs(z))) * (1 + 0.005 * math.sin(1/(1 + a))) *\n                 (softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a))) * (1 - 0.002 * math.cos(a)) *\n                 (1 - 0.0025 * math.cos(2.5 * a)) * (1 + 0.001 * a) *\n                 (1 + math.cosh(0.001 * a))**(2 + 0.0005 * a) + 1e-6)**(0.944 + 0.00015 * math.log(1 + a))\n\n        def f(x):\n            if z == 0:\n                sign_z = 0\n            else:\n                sign_z = z / abs(z)\n\n            return sign_z * (f_adapt(z) * T * extra)**(0.944 + 0.00015 * math.log(1 + a))\n\n        U = beta + gamma * f(z)\n\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5357142857142857,
  "fitting_results": [
    {
      "beta": 2.93526445283568,
      "gamma": 2.601140697724007,
      "phi": 1.2499588190429631,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.950072469569026,
      "gamma": 5.433908628653277,
      "phi": 0.7980256098635026,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.31801876201055,
      "gamma": 1.474351994291082,
      "phi": 0.5845252429119798,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.281134216375886,
      "gamma": 9.739888857199517,
      "phi": 0.6677493828209593,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.036473212272613,
      "gamma": 1.9087610434209268,
      "phi": 1.224826117541984,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.528019292588908,
      "gamma": 3.031047420173717,
      "phi": 0.7005610880751512,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.2986201822762915,
      "gamma": 5.089901614413709,
      "phi": 1.285698492150772,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.0624647724702854,
      "gamma": 7.1199500468251244,
      "phi": 1.2998835634200283,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.7140104334552815,
      "gamma": 2.4450313562414747,
      "phi": 0.5458600565362193,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.0722273349257527,
      "gamma": 8.249935637085967,
      "phi": 0.6711582686957789,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.687007519639707,
      "gamma": 2.0334786895504187,
      "phi": 0.8791503373356796,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.098862237102608,
      "gamma": 1.6675148172432208,
      "phi": 0.5571174970319805,
      "success": true,
      "log_likelihood": -43.2774207382101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.819734638022175,
      "gamma": 2.0755310635971203,
      "phi": 0.7509397851084407,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.292086093009024,
      "gamma": 0.7812744585373244,
      "phi": 1.216599072057703,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.377240426789541,
      "gamma": 7.021849553508986,
      "phi": 0.8310167091346775,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.252560976014406,
      "gamma": 2.9440053043922756,
      "phi": 0.744934189237396,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4189322966648703,
      "gamma": 7.877466953878647,
      "phi": 1.0030026969048462,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.4424588910038025,
      "gamma": 5.300128238324751,
      "phi": 0.9468646818963455,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1910594824720846,
      "gamma": 3.1979360384156372,
      "phi": 1.082175071557772,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.364251921459047,
      "gamma": 0.5292551649526622,
      "phi": 0.7190908586454585,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.372372184337191,
      "gamma": 0.6083865366400609,
      "phi": 1.2348724186275257,
      "success": true,
      "log_likelihood": -27.277420741970946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.266821921442713,
      "gamma": 0.46487290493772326,
      "phi": 0.5879574574650371,
      "success": true,
      "log_likelihood": -16.277418613081778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.06305899432249681,
      "phi": 0.5,
      "success": true,
      "log_likelihood": -20.064089097953158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.392030586514661,
      "gamma": 9.935414758726623,
      "phi": 0.7450038625576789,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.146406083610195,
      "gamma": 2.078771679905258,
      "phi": 1.2648882121968419,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.14432115369381,
      "gamma": 0.11422420785596923,
      "phi": 0.7470769951022941,
      "success": true,
      "log_likelihood": -26.27739778430779,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.56152764908812,
      "gamma": 5.45685003807653,
      "phi": 0.5881380481505188,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4738869596614022,
      "gamma": 0.0007176572103530384,
      "phi": 1.3228210365745938,
      "success": true,
      "log_likelihood": -31.393145744941243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.390056172906725,
      "gamma": 0.8521518974641207,
      "phi": 0.505201330235982,
      "success": true,
      "log_likelihood": -15.27742074449688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.680967476600774,
      "gamma": 6.078178805305635,
      "phi": 1.2099649774216628,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9479913369924429,
      "gamma": 4.744661171077944,
      "phi": 0.8659532076338173,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.4949997825194763,
      "gamma": 0.38984665184036627,
      "phi": 1.032690222792226,
      "success": true,
      "log_likelihood": -44.277408819968585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.871589946130936,
      "gamma": 3.7514455142367242,
      "phi": 0.7631242642726206,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5521829548655184,
      "gamma": 9.026909022458508,
      "phi": 1.2716096355533728,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6556463285400955,
      "gamma": 3.4136857069807283,
      "phi": 1.3003870597778082,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.946604240948803,
      "gamma": 5.2338359705134065,
      "phi": 1.3206149747663118,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.534275403280894,
      "gamma": 4.165837513236228,
      "phi": 1.4413653341052561,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.526569559652824,
      "gamma": 2.7616073952721685,
      "phi": 1.1236836041183278,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.683484140988337,
      "gamma": 3.110657821021112,
      "phi": 0.7128619628298267,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.600211217182625,
      "gamma": 7.512214313753703,
      "phi": 0.6722583159860356,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3484232186422851,
      "gamma": 1.372793034027302,
      "phi": 1.2594413355753404,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9512209218264616,
      "gamma": 5.85432357208063,
      "phi": 1.217619509170245,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3496124994441967,
      "gamma": 7.852815086141702,
      "phi": 0.5885174786099043,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.212008010802752,
      "gamma": 0.7616656929135956,
      "phi": 0.9058847599407188,
      "success": true,
      "log_likelihood": -27.277420741970875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.542303741395042,
      "gamma": 3.748586834534484,
      "phi": 0.8129378394460398,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1774621898053272,
      "gamma": 4.5344435733058175,
      "phi": 1.163507349619902,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1412001261762263,
      "gamma": 3.8918855062749924,
      "phi": 0.8145257830955328,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.976266398374566,
      "gamma": 4.790789986406047,
      "phi": 1.159406461358146,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.935220759573925,
      "gamma": 4.331219678248498,
      "phi": 1.0044881137526196,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -10.0,
      "gamma": 0.08414551707414697,
      "phi": 0.5115915005802438,
      "success": true,
      "log_likelihood": -18.021978691672302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.730538779484692,
      "gamma": 1.1950476532917131,
      "phi": 0.5447538380917012,
      "success": true,
      "log_likelihood": -22.27742074122696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.526206868547669,
      "gamma": 4.3085441687129205,
      "phi": 1.071420631956348,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.349815883632436,
      "gamma": 9.761831089436448,
      "phi": 0.932160044911143,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.012422471590316,
      "gamma": 9.405760903657917,
      "phi": 1.1815839428698438,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.645959682978695,
      "gamma": 2.2816571587067234,
      "phi": 1.0789770416228928,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.8507717206713945,
      "gamma": 5.310136137560169,
      "phi": 0.5011019324601398,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.924720111579477,
      "gamma": 2.0036096794042524,
      "phi": 1.1030399740088068,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.347797656553659,
      "gamma": 3.990230575382393,
      "phi": 0.9730332863250519,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2818569398092325,
      "gamma": 8.525585314909724,
      "phi": 0.9571332521390219,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.255107884679099,
      "gamma": 6.8777264531376545,
      "phi": 1.4609413878824875,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.918888706933314,
      "gamma": 0.07097164604677225,
      "phi": 0.8192361001507737,
      "success": true,
      "log_likelihood": -25.277389111205114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.316114833282844,
      "gamma": 8.95760871111943,
      "phi": 0.7187918496695577,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.396130275376997,
      "gamma": 2.848978312595827,
      "phi": 0.8181979063610842,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.828931482226736,
      "gamma": 3.3632327971168143,
      "phi": 1.0331110152699856,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.298122423792538,
      "gamma": 8.397178354906167,
      "phi": 1.0316785599861096,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.3947465365553295,
      "gamma": 4.163754537742106,
      "phi": 0.7571153658744351,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.910311972302642,
      "gamma": 5.771171153629306,
      "phi": 1.4929510363015264,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.141502803914666,
      "gamma": 7.695037291094882,
      "phi": 0.5742202520342921,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3015802744657847,
      "gamma": 9.24120439556185,
      "phi": 1.0438768099940798,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.3806436715444033,
      "gamma": 9.318360321474437,
      "phi": 1.4546390729681833,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.403005820674682,
      "gamma": 8.764904767618715,
      "phi": 0.5994559458544755,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.419917248334475,
      "gamma": 8.66181819430254,
      "phi": 0.839699420891519,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.728220964404819,
      "gamma": 2.4875582662178064,
      "phi": 1.2340047433029349,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.875283618574958,
      "gamma": 8.250936511858061,
      "phi": 1.28861100374141,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.205075842051496,
      "gamma": 0.9525497075228295,
      "phi": 1.355242181138704,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.875672206366943,
      "gamma": 1.090691896831123,
      "phi": 1.3615513619352306,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.27264291201141,
      "gamma": 3.543465102194323,
      "phi": 1.4299734543421436,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.888772963043873,
      "gamma": 4.762865235971169,
      "phi": 1.1239103067843859,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.35097462291485115,
      "gamma": 0.6892687094334093,
      "phi": 0.6470485921152662,
      "success": true,
      "log_likelihood": -25.277420648758998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.150654002822385,
      "gamma": 1.848063786227473,
      "phi": 1.4778549455087906,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.680142800999017,
      "gamma": 7.873388334520991,
      "phi": 0.843052595316393,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.39989826982182564,
      "gamma": 4.3389907431848185,
      "phi": 0.7810615222444007,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1188135642292156,
      "gamma": 0.5224510406791671,
      "phi": 0.8925820618944321,
      "success": true,
      "log_likelihood": -43.27742056531824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9269651206606184,
      "gamma": 7.110116057342783,
      "phi": 1.4134605406365046,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5348921540966671,
      "gamma": 7.212989216101993,
      "phi": 1.3051311891831467,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0476600512232856,
      "gamma": 5.166323687115733,
      "phi": 1.49204227564827,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.6832494388757944,
      "gamma": 3.6287252534329975,
      "phi": 1.4199534974731947,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.776640709102866,
      "gamma": 1.1093858928736708,
      "phi": 0.5678855140809902,
      "success": true,
      "log_likelihood": -39.27741865709893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.968928999437175,
      "gamma": 0.9227664516669831,
      "phi": 0.9903822287584735,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 8.868187660444338,
      "gamma": 7.080462542333732,
      "phi": 0.7467087716781109,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.06058782678459,
      "gamma": 8.621775315845218,
      "phi": 1.1213439491326347,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.10959828970549375,
        "p": 0.2777102533581492
      },
      "gamma": {
        "r": 0.006540930750512975,
        "p": 0.9485023322253476
      },
      "phi": {
        "r": -0.06957150478861197,
        "p": 0.491577320702182
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 63.64928577917858,
  "bic_results": {
    "average_bic": 63.64928577917858,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178852,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931023,
      43.30539404153188,
      50.87873501127464,
      67.30539829884023,
      69.30539829837016,
      63.305352383983916,
      65.30539829931033,
      73.53684830525081,
      41.305398304362086,
      49.30539830307097,
      33.305398306831634,
      99.3053744553055,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931008,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      46.79451419871293,
      55.30539829782225,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30533503777856,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.30539811288632,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.3053979460048,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539412956618,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.110\n- gamma: r = 0.007\n- phi: r = -0.070",
  "previous_models": [
    "Specification: F1 = token_self  \nF2 = token_opp  \nF3 = combined_earning  \nF4 = split_opp  \nF5 = split_self  \nF6 = trial_type  \nF7 = trial_role  \nF8 = splitperc_opp  \nF9 = splitperc_self  \nF10 = accepted_amount  \nF11 = accepted_perc  \n\ndelta = 1e-6  \na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + delta  \n\nA1 = a * (1 + 0.012 * sin(a + 0.045))  \nA2 = A1 * 1.08  \nA3 = A2 * (1 + 0.008 * cos(a + 0.065))  \nA4 = A3 * (1 + 0.005 * sin(a + 0.115))  \nA5 = A4 * (1 + 0.004 * cos(a + 0.085))  \nA6 = A5 * (1 + 0.006 * (sin(a + 0.035) * cos(a + 0.055)))  \nz = A6 * (1 + 0.003 * (sin(a + 0.03) * cos(a + 0.05)))  \n\nf_adapt(z) = { phi * (0.012 * z)                   if z < 0  \n               phi * min(z, 1 + ln(1 + z))          if z \u2265 0 }  \n\nT = 1 + 0.0005 * a^2 + 0.00005 * a^3 + 0.000005 * a^4 + 0.0000001 * a^5 + 0.00000001 * a^6 + 0.000000001 * a^7 + 0.0000000001 * a^8 + 0.000001 * a^3  \n\nsoftplus(x) = ln(1 + exp(x))  \n\nextra = ( exp(-a/0.1) * (z / (1 + |z|)) * (1 + 0.005 * sin(1/(1 + a))) * ( softplus(0.865/(1 + a)) + 0.1 * (0.865/(1 + a)) ) * (1 - 0.002 * cos(a)) * (1 - 0.0025 * cos(2.5 * a)) * (1 + 0.001 * a) * (1 + cosh(0.001 * a))^(2 + 0.0005 * a) + 1e-6 )^(0.944 + 0.00015 * ln(1 + a))  \n\nf(x) = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015 * ln(1 + a))  \n\nU = beta + gamma * f(x)  \n\nP(accept = 1) = 1 / (1 + exp(-U))\nSummary: A complex adaptive utility model for binary choice where the core sum of eleven fixed data components (e.g., tokens, earnings, proposal splits, and trial attributes) is nonlinearly modulated through sequential sine and cosine functions, an adaptive transformation with learnable blend (phi), a dynamic threshold, and an extra composite blending term incorporating softplus and polynomial modulations. The final transformed signal is scaled by a learnable parameter (gamma) and shifted by a learnable intercept (beta) to yield a latent utility that is converted to an acceptance probability via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 63.64928577917858\nOverall Accuracy: 0.5357\n\nParameter Recovery:\n- beta: r = 0.110\n- gamma: r = 0.007\n- phi: r = -0.070"
  ]
}