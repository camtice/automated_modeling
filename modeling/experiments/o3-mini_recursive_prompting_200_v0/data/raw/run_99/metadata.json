{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 99, we want to encourage even more creative adaptive activation functions while emphasizing improvements in accuracy, a lower BIC, and better parameter recovery. We will urge exploring alternatives to the standard piecewise logarithmic transform in f_adapt \u2013 for example, a leaky or parametric ReLU variant or even a convex combination between a linear and logarithmic response. Also, the dynamic threshold T should incorporate an additional cubic or quartic term to flexibly capture curvature. Moreover, the extra blending composite should be revisited: consider weighting the softplus term more heavily (or even combining it with a linear term using a learnable mixing coefficient, though that mixing coefficient is fixed in our learnable set) to better handle extreme values and avoid overcompression. Emphasize that the overall model structure must remain intact and that exactly three learnable parameters must be preserved (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). Encourage out\u2010of\u2010the\u2010box experimentation with these adaptive components, as creative modifications here can yield improved BIC, better parameter recovery, and higher predictive accuracy.\n</think>\n\nNew Instructions for Run 99 of 200:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012 \u00d7 sin(a + 0.045)], then scale the result by 1.08.\n3. Sequentially modulate the scaled value with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n4. Define the resulting value as z.\n5. For the adaptive transformation f_adapt(z), instead of the basic piecewise function, experiment with a flexible activation such as a parametric or leaky ReLU, or a convex blend of a linear term and a logarithmic term. Keep the overall idea that for z < 0 an amplified linear response is applied, and for z \u2265 0 a saturating logarithmic response is used.\n6. Multiply f_adapt(z) by a dynamic threshold T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 plus an additional small cubic/quartic term (e.g., 0.000001\u00d7a\u00b3) to allow for extra curvature.\n7. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Consider blending the softplus term with an alternative (e.g., increasing its weight or adding a linear component) to better capture extreme behaviors.\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n9. Compute the latent utility U = beta + gamma \u00d7 f(x) and then obtain the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nEncourage innovative, out-of-the-box modifications to the adaptive transformation and extra blending composite while keeping the overall model structure intact. Aim to lower BIC, improve parameter recovery, and increase accuracy through these flexible nonlinear components.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 99, we want to encourage even more creative adaptive activation functions while emphasizing improvements in accuracy, a lower BIC, and better parameter recovery. We will urge exploring alternatives to the standard piecewise logarithmic transform in f_adapt \u2013 for example, a leaky or parametric ReLU variant or even a convex combination between a linear and logarithmic response. Also, the dynamic threshold T should incorporate an additional cubic or quartic term to flexibly capture curvature. Moreover, the extra blending composite should be revisited: consider weighting the softplus term more heavily (or even combining it with a linear term using a learnable mixing coefficient, though that mixing coefficient is fixed in our learnable set) to better handle extreme values and avoid overcompression. Emphasize that the overall model structure must remain intact and that exactly three learnable parameters must be preserved (beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5]). Encourage out\u2010of\u2010the\u2010box experimentation with these adaptive components, as creative modifications here can yield improved BIC, better parameter recovery, and higher predictive accuracy.\n</think>\n\nNew Instructions for Run 99 of 200:\n1. Compute the core sum \u201ca\u201d as the sum of fixed components F\u2081 through F\u2081\u2081 plus a small constant \u03b4.\n2. Multiply \u201ca\u201d by [1 + 0.012 \u00d7 sin(a + 0.045)], then scale the result by 1.08.\n3. Sequentially modulate the scaled value with:\n\u2003\u2003\u2022 [1 + 0.008 \u00d7 cos(a + 0.065)]\n\u2003\u2003\u2022 [1 + 0.005 \u00d7 sin(a + 0.115)]\n\u2003\u2003\u2022 [1 + 0.004 \u00d7 cos(a + 0.085)]\n\u2003\u2003\u2022 [1 + 0.006 \u00d7 (sin(a + 0.035) \u00d7 cos(a + 0.055))]\n\u2003\u2003\u2022 [1 + 0.003 \u00d7 (sin(a + 0.03) \u00d7 cos(a + 0.05))]\n4. Define the resulting value as z.\n5. For the adaptive transformation f_adapt(z), instead of the basic piecewise function, experiment with a flexible activation such as a parametric or leaky ReLU, or a convex blend of a linear term and a logarithmic term. Keep the overall idea that for z < 0 an amplified linear response is applied, and for z \u2265 0 a saturating logarithmic response is used.\n6. Multiply f_adapt(z) by a dynamic threshold T defined as:\n\u2003\u2003T = 1 + 0.0005\u00d7a\u00b2 + 0.00005\u00d7a\u00b3 + 0.000005\u00d7a\u2074 + 0.0000001\u00d7a\u2075 + 0.00000001\u00d7a\u2076 + 0.000000001\u00d7a\u2077 + 0.0000000001\u00d7a\u2078 plus an additional small cubic/quartic term (e.g., 0.000001\u00d7a\u00b3) to allow for extra curvature.\n7. Compute the extra blending composite as:\n\u2003\u2003extra = ( exp(\u2013a/0.1) \u00d7 [z/(1+|z|)] \u00d7 [1 + 0.005\u00d7sin(1/(1+a))] \u00d7 [softplus(0.865/(1+a)) + 0.1\u00d7(0.865/(1+a))] \u00d7 [1 \u2013 0.002\u00d7cos(a)] \u00d7 [1 \u2013 0.0025\u00d7cos(2.5\u00d7a)] \u00d7 [1 + 0.001\u00d7a] \u00d7 [1 + cosh(0.001\u00d7a)]^(2+0.0005\u00d7a) + 1e\u20136 )^(0.944 + 0.00015\u00d7ln(1+a)).\n\u2003\u2003Consider blending the softplus term with an alternative (e.g., increasing its weight or adding a linear component) to better capture extreme behaviors.\n8. Define the final transformed signal as:\n\u2003\u2003f(x) = sign(z) \u00d7 ( f_adapt(z) \u00d7 T \u00d7 extra )^(0.944 + 0.00015\u00d7ln(1+a) ).\n9. Compute the latent utility U = beta + gamma \u00d7 f(x) and then obtain the acceptance probability:\n\u2003\u2003P(accept = 1) = 1/(1 + exp(\u2013U)).\n10. Retain exactly three learnable parameters with fixed bounds: beta \u2208 [\u201310, 10], gamma \u2208 [0, 10], and phi \u2208 [0.5, 1.5].\nEncourage innovative, out-of-the-box modifications to the adaptive transformation and extra blending composite while keeping the overall model structure intact. Aim to lower BIC, improve parameter recovery, and increase accuracy through these flexible nonlinear components.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data (e.g., proposal parameters)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 through F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal obtained after scaling a through sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; applies an amplified linear response for z < 0 and a convex blend of linear and logarithmic responses for z \u2265 0\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating quadratic to 8th order terms in a\",\n      \"range\": {\n        \"min\": \"1\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite combining exponential decay, bounded z, sinusoidal modulations, a softplus-linear blend, cosine adjustments, and a cosh amplification raised to a power\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed as the signed power transform of the product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Mixing parameter for the adaptive transformation controlling the balance between linear and logarithmic responses\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of \u03b2 and the product of \u03b3 and f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transform of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model predicting responder behavior in a binary acceptance task. The model computes a core sum from 11 fixed data-derived components and modulates this value through a series of sinusoidal and cosine scalings to produce an intermediate signal z. An adaptive transformation f_adapt, which behaves as a leaky linear response for negative z and a convex blend of linear and logarithmic responses for positive z (controlled by the learnable parameter \u03c6), is applied. This signal is then amplified by a dynamic threshold T and an extra blending composite capturing further nonlinearities. The final transformed signal f is combined with a base parameter \u03b2 and scaled by \u03b3 to produce a latent utility U, which is converted to an acceptance probability via the logistic function. The model preserves exactly three learnable parameters with fixed bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['\u03b2', '\u03b3', '\u03c6']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data (e.g., proposal parameters)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\\u03b4\": {\n      \"description\": \"Small constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-06\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 through F11 plus \\u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal obtained after scaling a through sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; applies an amplified linear response for z < 0 and a convex blend of linear and logarithmic responses for z \\u2265 0\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating quadratic to 8th order terms in a\",\n      \"range\": {\n        \"min\": \"1\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite combining exponential decay, bounded z, sinusoidal modulations, a softplus-linear blend, cosine adjustments, and a cosh amplification raised to a power\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed as the signed power transform of the product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\\u03b2\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03b3\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\\u03c6\": {\n      \"description\": \"Mixing parameter for the adaptive transformation controlling the balance between linear and logarithmic responses\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of \\u03b2 and the product of \\u03b3 and f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transform of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    \u03b4 = 1e-06  # Define delta as constant\n    for trial in trial_data:\n        F1 = trial.get(\"split_opp\", 0)\n        F2 = trial.get(\"split_self\", 0)\n        F3 = trial.get(\"splitperc_opp\", 0)\n        F4 = trial.get(\"splitperc_self\", 0)\n        F5 = trial.get(\"token_opp\", 0)\n        F6 = trial.get(\"token_self\", 0)\n        F7 = trial.get(\"combined_earning\", 0)\n        F8 = trial.get(\"splitperc_opp\", 0)\n        F9 = trial.get(\"splitperc_self\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n        z = 1.08 * a * (1 + 0.012*math.sin(a + 0.045)) * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n\n        if z < 0:\n            f_adapt_z = \u03c6 * z\n        else:\n            f_adapt_z = (\u03c6 - 0.5) * z + (1 - (\u03c6 - 0.5)) * math.log(1 + z)\n\n        T = 1 + 0.0005*a**2 + 0.000051*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6 + 0.000000001*a**7 + 0.0000000001*a**8\n\n        abs_z = abs(z)\n        extra = ( math.exp(-a/0.1) * (z/(1 + abs_z)) * (1 + 0.005*math.sin(1/(1 + a))) * (math.log(1 + math.exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2 + 0.0005*a) + 1e-6 )**(0.944 + 0.00015*math.log(1 + a))\n\n        sign_z = 1 if z >= 0 else -1\n        f = sign_z * ( f_adapt_z * T * extra )**(0.944 + 0.00015*math.log(1 + a))\n\n        U = \u03b2 + \u03b3 * f\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"treatment\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":7,\"token_self\":13,\"combined_earning\":20,\"split_opp\":3.15,\"split_self\":16.85,\"splitperc_opp\":16,\"splitperc_self\":84,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":16.0,\"proposed_amount\":3.15},{\"ID\":2,\"group\":\"treatment\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":11,\"token_self\":9,\"combined_earning\":20,\"split_opp\":5.39,\"split_self\":14.61,\"splitperc_opp\":27,\"splitperc_self\":73,\"accept\":1.0,\"accepted_amount\":5.39,\"accepted_perc\":27.0,\"proposed_perc\":27.0,\"proposed_amount\":5.39},{\"ID\":3,\"group\":\"treatment\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":1,\"token_opp\":15,\"token_self\":5,\"combined_earning\":20,\"split_opp\":7.35,\"split_self\":12.65,\"splitperc_opp\":37,\"splitperc_self\":63,\"accept\":1.0,\"accepted_amount\":7.35,\"accepted_perc\":37.0,\"proposed_perc\":37.0,\"proposed_amount\":7.35},{\"ID\":4,\"group\":\"treatment\",\"trial_number\":4,\"trial_type\":1,\"trial_role\":1,\"token_opp\":15,\"token_self\":5,\"combined_earning\":20,\"split_opp\":7.35,\"split_self\":12.65,\"splitperc_opp\":37,\"splitperc_self\":63,\"accept\":1.0,\"accepted_amount\":7.35,\"accepted_perc\":37.0,\"proposed_perc\":37.0,\"proposed_amount\":7.35},{\"ID\":5,\"group\":\"treatment\",\"trial_number\":5,\"trial_type\":1,\"trial_role\":1,\"token_opp\":9,\"token_self\":11,\"combined_earning\":20,\"split_opp\":4.41,\"split_self\":15.59,\"splitperc_opp\":22,\"splitperc_self\":78,\"accept\":1.0,\"accepted_amount\":4.41,\"accepted_perc\":22.0,\"proposed_perc\":22.0,\"proposed_amount\":4.41}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1743544593.16528
    }
  ],
  "learnable_parameters": {
    "\u03b2": {
      "description": "Base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Mixing parameter for the adaptive transformation controlling the balance between linear and logarithmic responses",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "F1": {
      "description": "Fixed component 1 extracted from task data (e.g., proposal parameters)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F2": {
      "description": "Fixed component 2 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F3": {
      "description": "Fixed component 3 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F4": {
      "description": "Fixed component 4 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F5": {
      "description": "Fixed component 5 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F6": {
      "description": "Fixed component 6 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F7": {
      "description": "Fixed component 7 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F8": {
      "description": "Fixed component 8 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F9": {
      "description": "Fixed component 9 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F10": {
      "description": "Fixed component 10 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "F11": {
      "description": "Fixed component 11 extracted from task data",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data-derived",
        "parameters": {}
      },
      "learnable": false,
      "source": "data"
    },
    "\u03b4": {
      "description": "Small constant to ensure numerical stability",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "constant",
        "parameters": {
          "value": 1e-06
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "a": {
      "description": "Core sum computed as the sum of fixed components F1 through F11 plus \u03b4",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "z": {
      "description": "Modulated signal obtained after scaling a through sinusoidal and cosine modulations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f_adapt": {
      "description": "Adaptive transformation of z; applies an amplified linear response for z < 0 and a convex blend of linear and logarithmic responses for z \u2265 0",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "T": {
      "description": "Dynamic threshold incorporating quadratic to 8th order terms in a",
      "range": {
        "min": "1",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "extra": {
      "description": "Extra blending composite combining exponential decay, bounded z, sinusoidal modulations, a softplus-linear blend, cosine adjustments, and a cosh amplification raised to a power",
      "range": {
        "min": "0",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "f": {
      "description": "Final transformed signal computed as the signed power transform of the product of f_adapt, T, and extra",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "\u03b2": {
      "description": "Base utility parameter",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -10,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03b3": {
      "description": "Scaling parameter for the transformed signal",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "\u03c6": {
      "description": "Mixing parameter for the adaptive transformation controlling the balance between linear and logarithmic responses",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0.5,
          "upper": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Latent utility computed as a linear combination of \u03b2 and the product of \u03b3 and f",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Acceptance probability derived from the logistic transform of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear utility model predicting responder behavior in a binary acceptance task. The model computes a core sum from 11 fixed data-derived components and modulates this value through a series of sinusoidal and cosine scalings to produce an intermediate signal z. An adaptive transformation f_adapt, which behaves as a leaky linear response for negative z and a convex blend of linear and logarithmic responses for positive z (controlled by the learnable parameter \u03c6), is applied. This signal is then amplified by a dynamic threshold T and an extra blending composite capturing further nonlinearities. The final transformed signal f is combined with a base parameter \u03b2 and scaled by \u03b3 to produce a latent utility U, which is converted to an acceptance probability via the logistic function. The model preserves exactly three learnable parameters with fixed bounds.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\na = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"F1\": {\n      \"description\": \"Fixed component 1 extracted from task data (e.g., proposal parameters)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F2\": {\n      \"description\": \"Fixed component 2 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F3\": {\n      \"description\": \"Fixed component 3 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F4\": {\n      \"description\": \"Fixed component 4 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F5\": {\n      \"description\": \"Fixed component 5 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F6\": {\n      \"description\": \"Fixed component 6 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F7\": {\n      \"description\": \"Fixed component 7 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F8\": {\n      \"description\": \"Fixed component 8 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F9\": {\n      \"description\": \"Fixed component 9 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F10\": {\n      \"description\": \"Fixed component 10 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"F11\": {\n      \"description\": \"Fixed component 11 extracted from task data\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data-derived\",\n        \"parameters\": {}\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"\u03b4\": {\n      \"description\": \"Small constant to ensure numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"constant\",\n        \"parameters\": {\n          \"value\": 1e-6\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"a\": {\n      \"description\": \"Core sum computed as the sum of fixed components F1 through F11 plus \u03b4\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"z\": {\n      \"description\": \"Modulated signal obtained after scaling a through sinusoidal and cosine modulations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f_adapt\": {\n      \"description\": \"Adaptive transformation of z; applies an amplified linear response for z < 0 and a convex blend of linear and logarithmic responses for z \u2265 0\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"T\": {\n      \"description\": \"Dynamic threshold incorporating quadratic to 8th order terms in a\",\n      \"range\": {\n        \"min\": \"1\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"extra\": {\n      \"description\": \"Extra blending composite combining exponential decay, bounded z, sinusoidal modulations, a softplus-linear blend, cosine adjustments, and a cosh amplification raised to a power\",\n      \"range\": {\n        \"min\": \"0\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"f\": {\n      \"description\": \"Final transformed signal computed as the signed power transform of the product of f_adapt, T, and extra\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"\u03b2\": {\n      \"description\": \"Base utility parameter\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -10,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03b3\": {\n      \"description\": \"Scaling parameter for the transformed signal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"\u03c6\": {\n      \"description\": \"Mixing parameter for the adaptive transformation controlling the balance between linear and logarithmic responses\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0.5,\n          \"upper\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Latent utility computed as a linear combination of \u03b2 and the product of \u03b3 and f\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Acceptance probability derived from the logistic transform of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear utility model predicting responder behavior in a binary acceptance task. The model computes a core sum from 11 fixed data-derived components and modulates this value through a series of sinusoidal and cosine scalings to produce an intermediate signal z. An adaptive transformation f_adapt, which behaves as a leaky linear response for negative z and a convex blend of linear and logarithmic responses for positive z (controlled by the learnable parameter \u03c6), is applied. This signal is then amplified by a dynamic threshold T and an extra blending composite capturing further nonlinearities. The final transformed signal f is combined with a base parameter \u03b2 and scaled by \u03b3 to produce a latent utility U, which is converted to an acceptance probability via the logistic function. The model preserves exactly three learnable parameters with fixed bounds.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A nonlinear utility model predicting responder behavior in a binary acceptance task. The model computes a core sum from 11 fixed data-derived components and modulates this value through a series of sinusoidal and cosine scalings to produce an intermediate signal z. An adaptive transformation f_adapt, which behaves as a leaky linear response for negative z and a convex blend of linear and logarithmic responses for positive z (controlled by the learnable parameter \u03c6), is applied. This signal is then amplified by a dynamic threshold T and an extra blending composite capturing further nonlinearities. The final transformed signal f is combined with a base parameter \u03b2 and scaled by \u03b3 to produce a latent utility U, which is converted to an acceptance probability via the logistic function. The model preserves exactly three learnable parameters with fixed bounds.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, \u03b2=0, \u03b3=1, \u03c6=1):\n    model_predictions = []\n    \u03b4 = 1e-06  # Define delta as constant\n    for trial in trial_data:\n        F1 = trial.get(\"split_opp\", 0)\n        F2 = trial.get(\"split_self\", 0)\n        F3 = trial.get(\"splitperc_opp\", 0)\n        F4 = trial.get(\"splitperc_self\", 0)\n        F5 = trial.get(\"token_opp\", 0)\n        F6 = trial.get(\"token_self\", 0)\n        F7 = trial.get(\"combined_earning\", 0)\n        F8 = trial.get(\"splitperc_opp\", 0)\n        F9 = trial.get(\"splitperc_self\", 0)\n        F10 = trial.get(\"accepted_amount\", 0)\n        F11 = trial.get(\"accepted_perc\", 0)\n\n        a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4\n        z = 1.08 * a * (1 + 0.012*math.sin(a + 0.045)) * (1 + 0.008*math.cos(a + 0.065)) * (1 + 0.005*math.sin(a + 0.115)) * (1 + 0.004*math.cos(a + 0.085)) * (1 + 0.006*math.sin(a + 0.035)*math.cos(a + 0.055)) * (1 + 0.003*math.sin(a + 0.03)*math.cos(a + 0.05))\n\n        if z < 0:\n            f_adapt_z = \u03c6 * z\n        else:\n            f_adapt_z = (\u03c6 - 0.5) * z + (1 - (\u03c6 - 0.5)) * math.log(1 + z)\n\n        T = 1 + 0.0005*a**2 + 0.000051*a**3 + 0.000005*a**4 + 0.0000001*a**5 + 0.00000001*a**6 + 0.000000001*a**7 + 0.0000000001*a**8\n\n        abs_z = abs(z)\n        extra = ( math.exp(-a/0.1) * (z/(1 + abs_z)) * (1 + 0.005*math.sin(1/(1 + a))) * (math.log(1 + math.exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*math.cos(a)) * (1 - 0.0025*math.cos(2.5*a)) * (1 + 0.001*a) * (1 + math.cosh(0.001*a))**(2 + 0.0005*a) + 1e-6 )**(0.944 + 0.00015*math.log(1 + a))\n\n        sign_z = 1 if z >= 0 else -1\n        f = sign_z * ( f_adapt_z * T * extra )**(0.944 + 0.00015*math.log(1 + a))\n\n        U = \u03b2 + \u03b3 * f\n        P_accept = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P_accept)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5311355311355311,
  "fitting_results": [
    {
      "\u03b2": -4.561375473771565,
      "\u03b3": 2.993889438216412,
      "\u03c6": 0.9586648970817528,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.526678306873814,
      "\u03b3": 7.827952091310676,
      "\u03c6": 0.6701434806607962,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.592205956332446,
      "\u03b3": 9.792536140877992,
      "\u03c6": 1.1517238291704281,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.5595124929947755,
      "\u03b3": 0.3163870530075885,
      "\u03c6": 1.3516747464446632,
      "success": true,
      "log_likelihood": -32.27742074079579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.392132507233349,
      "\u03b3": 4.893367415616355,
      "\u03c6": 1.4366638756683758,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.3281588503892285,
      "\u03b3": 5.871242884139716,
      "\u03c6": 1.3770075705227378,
      "success": true,
      "log_likelihood": -24.277420742676117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.988766704983121,
      "\u03b3": 1.5634323294763663,
      "\u03c6": 1.0002781654308062,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.7886390110270707,
      "\u03b3": 1.4186108079489146,
      "\u03c6": 0.7036159364409065,
      "success": true,
      "log_likelihood": -23.277420742911158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.5258876341047465,
      "\u03b3": 7.998263336699987,
      "\u03c6": 0.5815947423226498,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.9975175213737213,
      "\u03b3": 6.478322310063499,
      "\u03c6": 0.9781950543216503,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.07880287592581,
      "\u03b3": 3.4742031044334807,
      "\u03c6": 1.4313150102653949,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.430365217743056,
      "\u03b3": 3.760283671352039,
      "\u03c6": 0.9466788211106514,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.434228804171217,
      "\u03b3": 6.171288172168367,
      "\u03c6": 1.2263255002786788,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.500210513028158,
      "\u03b3": 3.8284280376104176,
      "\u03c6": 0.87113505226878,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.335301112274131,
      "\u03b3": 4.003765200413907,
      "\u03c6": 0.9393072119196664,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.827625545927937,
      "\u03b3": 0.0759167149618234,
      "\u03c6": 1.272268459435002,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.0449681071466337,
      "\u03b3": 7.357495007980441,
      "\u03c6": 1.3230334680989553,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.10157693102147647,
      "\u03b3": 0.919206968267321,
      "\u03c6": 0.8421313647376809,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.142287235511416,
      "\u03b3": 7.765588171465828,
      "\u03c6": 1.2872213260488872,
      "success": true,
      "log_likelihood": -15.277420744791481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.25853367186316945,
      "\u03b3": 2.6543104594231437,
      "\u03c6": 0.7504561234237065,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.1012407217586535,
      "\u03b3": 8.44677804097518,
      "\u03c6": 1.3196229889923248,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.179007524188339,
      "\u03b3": 3.515482226311768,
      "\u03c6": 1.349122832644955,
      "success": true,
      "log_likelihood": -16.277420744556444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.21415030629298,
      "\u03b3": 9.188515653783131,
      "\u03c6": 0.8123104742389939,
      "success": true,
      "log_likelihood": -34.27742074032571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.288499808427563,
      "\u03b3": 5.687038778191856,
      "\u03c6": 0.9621061362015585,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.8355712729010456,
      "\u03b3": 7.852023773058531,
      "\u03c6": 0.5339938319549757,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.802289920877417,
      "\u03b3": 3.1007920115058853,
      "\u03c6": 1.4137898116826562,
      "success": true,
      "log_likelihood": -26.277420742206036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.17942367058184416,
      "\u03b3": 1.8388333010103364,
      "\u03c6": 0.9930058811937925,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.0517022990645835,
      "\u03b3": 2.942550430568631,
      "\u03c6": 0.5091116881463094,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.4591343287421896,
      "\u03b3": 2.513302458170693,
      "\u03c6": 1.2481599957923564,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.811015197172427,
      "\u03b3": 8.308745308615276,
      "\u03c6": 0.6048017776303749,
      "success": true,
      "log_likelihood": -19.277420743851323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.474120147926921,
      "\u03b3": 9.580021247099218,
      "\u03c6": 0.7590363844807476,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.377741186518158,
      "\u03b3": 7.227454307842107,
      "\u03c6": 1.0413332299674267,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.746824302526136,
      "\u03b3": 6.4883221983288095,
      "\u03c6": 0.5423343006998894,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.8798475766206195,
      "\u03b3": 0.9555727798453317,
      "\u03c6": 1.0263644757230272,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.7989003290698165,
      "\u03b3": 3.917804757739589,
      "\u03c6": 0.9470391334632066,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.1136801849887767,
      "\u03b3": 1.2470746709197644,
      "\u03c6": 1.1141067305485972,
      "success": true,
      "log_likelihood": -24.277420742676114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.4628830513973776,
      "\u03b3": 2.3873439340445914,
      "\u03c6": 0.5255165181256309,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.109598773498519,
      "\u03b3": 7.997097489058601,
      "\u03c6": 0.5358765456663604,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.480013637614395,
      "\u03b3": 7.872878213703222,
      "\u03c6": 0.9428649083226194,
      "success": true,
      "log_likelihood": -23.277420742911154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.019675163545898,
      "\u03b3": 4.5953197095412595,
      "\u03c6": 1.1539335655745906,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.725473447898661,
      "\u03b3": 7.533743950208375,
      "\u03c6": 1.1932197858697569,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.845776035879151,
      "\u03b3": 0.2511909068221929,
      "\u03c6": 1.2943302733497764,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.553105034039806,
      "\u03b3": 1.475339852938895,
      "\u03c6": 1.4463736133372935,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.9227766594575737,
      "\u03b3": 7.80641794581145,
      "\u03c6": 1.3923683539754421,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.758592454670968,
      "\u03b3": 6.291195630617895,
      "\u03c6": 1.4072683078966688,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.2586841219026308,
      "\u03b3": 0.572051692377129,
      "\u03c6": 1.2414646324463012,
      "success": true,
      "log_likelihood": -21.27742074338124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.199467100413539,
      "\u03b3": 6.118078932465719,
      "\u03c6": 1.145416378508214,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.96772408190982,
      "\u03b3": 1.8784235047227416,
      "\u03c6": 0.881039124235317,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.290654835288148,
      "\u03b3": 5.183858893415403,
      "\u03c6": 0.5393749589480755,
      "success": true,
      "log_likelihood": -32.2774207407958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.733524716106354,
      "\u03b3": 0.35496610840690446,
      "\u03c6": 1.3850931927041963,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.18890845922961,
      "\u03b3": 0.3451068152785164,
      "\u03c6": 1.0428409853599474,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.906199960105042,
      "\u03b3": 5.237544821333181,
      "\u03c6": 0.88054683905954,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.311982059545624,
      "\u03b3": 2.8828140406699045,
      "\u03c6": 1.0650875492774798,
      "success": true,
      "log_likelihood": -28.277420741735956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.470182010550964,
      "\u03b3": 2.046381781291883,
      "\u03c6": 0.5020311981352408,
      "success": true,
      "log_likelihood": -26.277420742206033,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.9211380733359595,
      "\u03b3": 1.3359857595358915,
      "\u03c6": 0.610686801105573,
      "success": true,
      "log_likelihood": -33.27742074056075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.080685491993581,
      "\u03b3": 2.1096403289730645,
      "\u03c6": 0.7620122944507225,
      "success": true,
      "log_likelihood": -35.27742074009067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.4546345770701983,
      "\u03b3": 0.9648429830405147,
      "\u03c6": 1.3569198933574658,
      "success": true,
      "log_likelihood": -37.277420739620595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -0.7672798971027799,
      "\u03b3": 9.465768782668306,
      "\u03c6": 0.9494027525335024,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 9.7248603932881,
      "\u03b3": 0.5059065071192625,
      "\u03c6": 1.076873227208313,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.5406070419809073,
      "\u03b3": 5.029460735364335,
      "\u03c6": 1.065001808641465,
      "success": true,
      "log_likelihood": -18.27742074408636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.128358571403597,
      "\u03b3": 5.841117173197353,
      "\u03c6": 0.7645707449054918,
      "success": true,
      "log_likelihood": -25.277420742441077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.1353895602804585,
      "\u03b3": 4.703234422413932,
      "\u03c6": 0.8773810844396311,
      "success": true,
      "log_likelihood": -29.277420741500915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.059251268657874,
      "\u03b3": 2.674076597113891,
      "\u03c6": 1.2438891070480036,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -5.780454431814923,
      "\u03b3": 5.691915256058478,
      "\u03c6": 0.5892562112856273,
      "success": true,
      "log_likelihood": -31.27742074103083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.292486567415612,
      "\u03b3": 5.496911790517586,
      "\u03c6": 1.2579612815504482,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.290217586226653,
      "\u03b3": 9.055527739705452,
      "\u03c6": 0.7122315194036547,
      "success": true,
      "log_likelihood": -27.277420741970996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.747104240091932,
      "\u03b3": 0.10363716286048263,
      "\u03c6": 1.0163303381889208,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.215314740060705,
      "\u03b3": 5.149758806530142,
      "\u03c6": 1.1273748117254483,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 4.832222428921106,
      "\u03b3": 5.838664973131667,
      "\u03c6": 0.5485587431282354,
      "success": true,
      "log_likelihood": -27.277420741970992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.481587696546654,
      "\u03b3": 5.0891117318555015,
      "\u03c6": 0.555403412906655,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 7.524896268252469,
      "\u03b3": 7.280479346264207,
      "\u03c6": 0.7334301620500587,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -1.0648906974512933,
      "\u03b3": 1.883446191804613,
      "\u03c6": 1.285225504086779,
      "success": true,
      "log_likelihood": -42.277420738445386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.068457669301257,
      "\u03b3": 1.696376538606007,
      "\u03c6": 0.6709980981137864,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -6.079123671173797,
      "\u03b3": 1.7642690011182227,
      "\u03c6": 0.9159495302504823,
      "success": true,
      "log_likelihood": -19.27742074385132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -4.477988821263668,
      "\u03b3": 9.335894477673927,
      "\u03c6": 1.1830053759994257,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 8.949971764377771,
      "\u03b3": 8.773181370799078,
      "\u03c6": 0.9618058680078196,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -3.5354690141238443,
      "\u03b3": 8.786045648200854,
      "\u03c6": 0.7947860359729101,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.4248304407204593,
      "\u03b3": 2.0666106016371186,
      "\u03c6": 0.5484615177169607,
      "success": true,
      "log_likelihood": -45.277420737740265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 0.5765233301272747,
      "\u03b3": 8.224048944429752,
      "\u03c6": 1.1882695077777516,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 3.551925549571939,
      "\u03b3": 5.107640030769826,
      "\u03c6": 1.3315557784169054,
      "success": true,
      "log_likelihood": -44.277420737975305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.9886685977996095,
      "\u03b3": 5.5851665735584355,
      "\u03c6": 1.2410956685851668,
      "success": true,
      "log_likelihood": -28.277420741735952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.272262737143794,
      "\u03b3": 4.116817934456785,
      "\u03c6": 1.1072899808657026,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.6722656332309924,
      "\u03b3": 7.69045818607079,
      "\u03c6": 0.9323350817798122,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -7.213153500142693,
      "\u03b3": 2.377108058104571,
      "\u03c6": 0.7164229118194895,
      "success": true,
      "log_likelihood": -29.27742074150091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 1.204214997462687,
      "\u03b3": 0.7423347188017437,
      "\u03c6": 1.468853982175828,
      "success": true,
      "log_likelihood": -25.277420742441073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -2.936373350805268,
      "\u03b3": 1.926895062666153,
      "\u03c6": 0.8405096451737449,
      "success": true,
      "log_likelihood": -43.277420738210346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 2.79778371764621,
      "\u03b3": 2.8613971265274243,
      "\u03c6": 0.7121024411361753,
      "success": true,
      "log_likelihood": -22.277420743146198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -8.90719817577839,
      "\u03b3": 4.598247788430715,
      "\u03c6": 1.212843676313653,
      "success": true,
      "log_likelihood": -39.27742073915051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 5.24789160038895,
      "\u03b3": 4.430929454947423,
      "\u03c6": 0.6859144070295214,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": -9.09738009278861,
      "\u03b3": 3.230084656876322,
      "\u03c6": 1.349180411008144,
      "success": true,
      "log_likelihood": -30.27742074126587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "\u03b2": 6.1350733509768,
      "\u03b3": 1.3114075725525198,
      "\u03c6": 1.4550710689137993,
      "success": true,
      "log_likelihood": -22.277420743146195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "\u03b2": {
        "r": -0.07526619820391692,
        "p": 0.45672176847480406
      },
      "\u03b3": {
        "r": 0.05640219012391737,
        "p": 0.5772714221202253
      },
      "\u03c6": {
        "r": 0.07539179435958529,
        "p": 0.4559687699000287
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.3163873105318,
  "bic_results": {
    "average_bic": 64.3163873105318,
    "individual_bics": [
      99.30539829131894,
      69.30539829837015,
      67.30539829884025,
      75.30539829695991,
      73.30539829742999,
      59.30539830072057,
      33.305398306831634,
      57.30539830119065,
      33.305398306831634,
      77.30539829648983,
      73.30539829742999,
      97.30539829178902,
      75.30539829695992,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      43.305398304481216,
      41.3053983049513,
      33.305398306831634,
      65.30539829931031,
      43.305398304481216,
      79.30539829601975,
      67.30539829884023,
      69.30539829837016,
      63.30539829978041,
      65.30539829931033,
      85.30539829460952,
      41.3053983049513,
      49.30539830307097,
      33.305398306831634,
      99.30539829131894,
      75.30539829695992,
      77.30539829648983,
      33.305398306831634,
      59.305398300720555,
      55.30539830166073,
      69.30539829837015,
      57.305398301190635,
      39.30539830542139,
      61.305398300250474,
      89.30539829366934,
      35.305398306361546,
      65.30539829931031,
      61.305398300250474,
      53.30539830213081,
      67.30539829884023,
      77.30539829648983,
      75.30539829695992,
      67.30539829884023,
      55.305398301660716,
      95.3053982922591,
      67.30539829884025,
      63.30539829978039,
      77.30539829648983,
      81.30539829554967,
      85.30539829460952,
      41.3053983049513,
      97.30539829178902,
      47.305398303541054,
      61.30539830025049,
      69.30539829837016,
      99.30539829131894,
      73.30539829742999,
      89.30539829366934,
      65.30539829931033,
      39.30539830542138,
      43.30539830448123,
      65.30539829931031,
      39.30539830542138,
      97.30539829178902,
      95.3053982922591,
      67.30539829884023,
      49.30539830307097,
      69.30539829837015,
      55.305398301660716,
      37.30539830589146,
      101.30539829084886,
      61.305398300250474,
      99.30539829131894,
      67.30539829884023,
      39.30539830542138,
      97.30539829178902,
      69.30539829837015,
      61.305398300250474,
      97.30539829178902,
      55.30539830166073,
      89.30539829366934,
      37.30539830589146,
      71.30539829790007,
      55.305398301660716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- \u03b2: r = -0.075\n- \u03b3: r = 0.056\n- \u03c6: r = 0.075",
  "previous_models": [
    "Specification: a = (F1 + F2 + F3 + F4 + F5 + F6 + F7 + F8 + F9 + F10 + F11) + \u03b4  \nz = 1.08 * a * (1 + 0.012*sin(a + 0.045)) * (1 + 0.008*cos(a + 0.065)) * (1 + 0.005*sin(a + 0.115)) * (1 + 0.004*cos(a + 0.085)) * (1 + 0.006*sin(a + 0.035)*cos(a + 0.055)) * (1 + 0.003*sin(a + 0.03)*cos(a + 0.05))  \nf_adapt(z) = { \u03c6*z, if z < 0; ( (\u03c6 - 0.5)*z + (1 - (\u03c6 - 0.5))*ln(1 + z) ), if z \u2265 0 }  \nT = 1 + 0.0005*a^2 + 0.000051*a^3 + 0.000005*a^4 + 0.0000001*a^5 + 0.00000001*a^6 + 0.000000001*a^7 + 0.0000000001*a^8  \nextra = ( exp(-a/0.1) * (z/(1 + |z|)) * (1 + 0.005*sin(1/(1 + a))) * (ln(1 + exp(0.865/(1 + a))) + 0.1*(0.865/(1 + a))) * (1 - 0.002*cos(a)) * (1 - 0.0025*cos(2.5*a)) * (1 + 0.001*a) * (1 + cosh(0.001*a))^(2 + 0.0005*a) + 1e-6 )^(0.944 + 0.00015*ln(1 + a))  \nf = sign(z) * ( f_adapt(z) * T * extra )^(0.944 + 0.00015*ln(1 + a))  \nU = \u03b2 + \u03b3 * f  \nP(accept = 1) = 1/(1 + exp(-U))\nSummary: A nonlinear utility model predicting responder behavior in a binary acceptance task. The model computes a core sum from 11 fixed data-derived components and modulates this value through a series of sinusoidal and cosine scalings to produce an intermediate signal z. An adaptive transformation f_adapt, which behaves as a leaky linear response for negative z and a convex blend of linear and logarithmic responses for positive z (controlled by the learnable parameter \u03c6), is applied. This signal is then amplified by a dynamic threshold T and an extra blending composite capturing further nonlinearities. The final transformed signal f is combined with a base parameter \u03b2 and scaled by \u03b3 to produce a latent utility U, which is converted to an acceptance probability via the logistic function. The model preserves exactly three learnable parameters with fixed bounds.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.3163873105318\nOverall Accuracy: 0.5311\n\nParameter Recovery:\n- \u03b2: r = -0.075\n- \u03b3: r = 0.056\n- \u03c6: r = 0.075"
  ]
}