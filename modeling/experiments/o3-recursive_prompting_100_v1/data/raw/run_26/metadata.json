{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and have learnable parameters with finite bounds. Also, the utility should be designed such that values less than 0 correspond to less than 50% likelihood of acceptance.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (1 or 0). The key factors influencing this decision likely involve the proposed shares (split_self and split_opp), the contributions (token_self and token_opp), and the total combined_earning. \n\nConsidering fairness and utility theory, participants might compare their proposed share to what they consider a fair split based on their contribution. The fair share could be proportional to their tokens relative to the total. For example, if the participant contributed token_self tokens out of the total (token_self + token_opp), their fair share might be (token_self / (token_self + token_opp)) * combined_earning. \n\nHowever, the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, the model should account for the relative split compared to the contribution. \n\nProspect theory concepts might apply here, where participants evaluate gains and losses relative to a reference point. The reference point could be their fair share based on their contribution. If the proposed split_self is less than this reference, it's perceived as a loss, leading to a higher likelihood of rejection.\n\nLet's formalize this. The utility U could be the difference between the proposed split_self and the fair reference, adjusted by some parameters. Additionally, participants might have an aversion to inequity, so the difference between split_opp and split_self could also factor in, especially if the opponent is getting more.\n\nPossible parameters:\n- \u03b1 (alpha): Sensitivity to gains/losses relative to the fair share.\n- \u03b2 (beta): Inequity aversion parameter, sensitivity to the difference between split_opp and split_self.\n- \u03bb (lambda): Loss aversion coefficient, amplifying the effect of losses compared to gains.\n\nThe utility function might look like:\nU = \u03b1 * (split_self - fair_share) - \u03b2 * (split_opp - split_self) - \u03bb * (fair_share - split_self) * I(split_self < fair_share)\n\nWhere I() is an indicator function that is 1 when split_self is less than the fair share. This captures loss aversion when the offer is below the reference.\n\nThe fair_share can be calculated as (token_self / (token_self + token_opp)) * combined_earning. However, if token_self + token_opp is zero, this would be undefined, but in the dataset, tokens are non-negative, and participants have at least some tokens, so division by zero isn't an issue.\n\nTo convert utility to a probability of acceptance, we can use a logistic function: P(accept) = 1 / (1 + exp(-U)). This ensures that when U is positive, the probability is above 50%, and when negative, below 50%.\n\nNow, considering the parameters:\n- \u03b1 should be positive, as a higher proposed share relative to fair increases utility.\n- \u03b2 should be positive, as getting less than the opponent (split_opp > split_self) decreases utility.\n- \u03bb should be positive to model loss aversion, making losses (split_self < fair_share) more impactful.\n\nBounds for parameters:\n- \u03b1: [0, maybe 10] to allow for varying sensitivity.\n- \u03b2: [0, 10] similar reasoning.\n- \u03bb: [0, 10] to capture loss aversion magnitude.\n\nThese bounds are generous but finite. The model should use variables available in the dataset: split_self, split_opp, token_self, token_opp, combined_earning. Trial_type might also play a role, but since the model should predict based on responder behavior, trial_role is 1 (responder), so trial_role can be filtered.\n\nWait, the model should only consider trials where the participant is the responder (trial_role=1). So in the data, we'll subset to those cases. But the model itself doesn't need to include trial_role as a variable since it's only predicting for responders.\n\nAnother consideration: The combined_earning is 3*(token_self + token_opp), but the dataset already includes combined_earning as a variable. So we can use that directly.\n\nPutting it all together, the utility function would be:\n\nU = \u03b1*(split_self - fair_share) + \u03b2*(split_self - split_opp) - \u03bb*(fair_share - split_self)*(split_self < fair_share)\n\nWait, but \u03b2 is supposed to penalize inequity where the opponent gets more. So if split_opp is higher than split_self, that's negative for the participant, so maybe the term should be \u03b2*(split_opp - split_self). Alternatively, the model could use the absolute difference, but that might complicate things. Let's think again.\n\nIf the participant dislikes inequity where they get less than the opponent, then the term would be \u03b2*(split_opp - split_self). If \u03b2 is positive, this term reduces utility when split_opp > split_self. Alternatively, if the participant cares about the difference regardless of direction, but that's more complex. Since the task is about responder behavior, perhaps the focus is on cases where the proposer (opponent) is offering a split that may be unfair. So the model should penalize the proposer keeping more for themselves (split_opp higher than split_self). Hence, the term \u03b2*(split_opp - split_self) would be subtracted from utility, as higher differences reduce the likelihood of acceptance.\n\nBut in the utility function, higher U means higher chance of acceptance. So if split_opp is much higher than split_self, that's bad, so U decreases. So the term would be -\u03b2*(split_opp - split_self). Alternatively, if split_opp - split_self is positive, subtract \u03b2*(split_opp - split_self), else add. But perhaps the model should only penalize when the opponent gets more. So the term is -\u03b2*(split_opp - split_self). But if split_opp < split_self, this term becomes positive, which might not be intended. Alternatively, use max(0, split_opp - split_self) to only penalize when the opponent gets more. That way, the inequity term only applies when the opponent's share is higher.\n\nSo revising the utility function:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*max(0, split_opp - split_self) - \u03bb*max(0, fair_share - split_self)\n\nHere, the first term is the gain/loss relative to fair share, the second term is inequity aversion (penalty when opponent gets more), and the third term is loss aversion (additional penalty when the offer is below fair share).\n\nAlternatively, combine the first and third terms when split_self < fair_share:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*max(0, split_opp - split_self) + \u03bb*(split_self - fair_share) if split_self < fair_share\n\nWait, that might complicate. Let's think in terms of prospect theory: the value function is concave for gains and convex for losses, with losses weighted more heavily. But perhaps for simplicity, we can model a linear value function with a loss aversion coefficient.\n\nSo, the utility could be:\n\nIf split_self >= fair_share:\n    U = (split_self - fair_share) - \u03b2*(split_opp - split_self)\nElse:\n    U = \u03bb*(split_self - fair_share) - \u03b2*(split_opp - split_self)\n\nBut this introduces a piecewise function, which might complicate parameter estimation. Alternatively, express it as:\n\nU = [ (split_self >= fair_share) ? (split_self - fair_share) : \u03bb*(split_self - fair_share) ] - \u03b2*(split_opp - split_self)\n\nBut in mathematical terms, this can be written using the indicator function:\n\nU = (split_self - fair_share) * [ I(split_self >= fair_share) + \u03bb*I(split_self < fair_share) ] - \u03b2*(split_opp - split_self)\n\nSimplifying, this becomes:\n\nU = (split_self - fair_share) * (1 + (\u03bb - 1)*I(split_self < fair_share)) ) - \u03b2*(split_opp - split_self)\n\nBut this might be complex. Alternatively, separate the terms:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*(split_opp - split_self) + \u03b3*max(0, fair_share - split_self)\n\nHere, \u03b3 represents the additional loss aversion when the offer is below the fair share. But this introduces another parameter. However, the problem states that the model should have learnable parameters with finite bounds. Let's see.\n\nAlternatively, combine \u03b1 and \u03b3 into a single parameter for loss aversion. For example:\n\nU = (split_self - fair_share) * [ \u03b1 + (\u03bb - \u03b1)*I(split_self < fair_share) ] - \u03b2*(split_opp - split_self)\n\nThis way, when split_self >= fair_share, the coefficient is \u03b1, else it's \u03bb. But this introduces \u03bb as a separate parameter.\n\nBut the initial instruction says to have learnable parameters with finite bounds. Let's consider three parameters: \u03b1 (gain sensitivity), \u03bb (loss sensitivity, \u03bb > \u03b1), and \u03b2 (inequity aversion).\n\nSo the utility function would be:\n\nU = \u03b1*(split_self - fair_share) * I(split_self >= fair_share) + \u03bb*(split_self - fair_share)*I(split_self < fair_share) - \u03b2*(split_opp - split_self)\n\nThis captures that gains (above fair share) are weighted by \u03b1, losses (below fair share) by \u03bb, and inequity by \u03b2. However, this requires I() functions, which can be represented using max or other operations.\n\nAlternatively, using the max function:\n\nU = \u03b1*max(0, split_self - fair_share) + \u03bb*min(0, split_self - fair_share) - \u03b2*max(0, split_opp - split_self)\n\nBut min(0, x) is equivalent to -max(0, -x), so:\n\nU = \u03b1*max(0, split_self - fair_share) - \u03bb*max(0, fair_share - split_self) - \u03b2*max(0, split_opp - split_self)\n\nThis way, all terms are non-negative, and the parameters \u03b1, \u03bb, \u03b2 are positive. The utility is a combination of gains (weighted by \u03b1), losses (weighted by \u03bb), and inequity aversion (weighted by \u03b2).\n\nThis seems manageable. The fair_share is calculated as (token_self / (token_self + token_opp)) * combined_earning. But combined_earning is already given as 3*(token_self + token_opp), so fair_share simplifies to 3*token_self. Wait, because each token is \u00a33, so token_self tokens contribute 3*token_self to the combined_earning. Similarly for token_opp. So combined_earning = 3*(token_self + token_opp). Therefore, the fair share based on contribution would be (3*token_self) / (3*(token_self + token_opp)) * combined_earning = 3*token_self. Wait, that can't be right. Wait, no: the fair share based on contribution would be (token_self / (token_self + token_opp)) * combined_earning. Since combined_earning is 3*(token_self + token_opp), then (token_self / (token_self + token_opp)) * 3*(token_self + token_opp) = 3*token_self. So the fair share is exactly 3*token_self. That's a key insight! So the fair_share is simply 3*token_self. Therefore, the participant's fair share is exactly the amount they contributed in tokens multiplied by \u00a33. This simplifies the model because we don't need to calculate it as a fraction; it's directly 3*token_self.\n\nSo the fair_share is 3*token_self. Therefore, the utility function becomes:\n\nU = \u03b1*max(0, split_self - 3*token_self) - \u03bb*max(0, 3*token_self - split_self) - \u03b2*max(0, split_opp - split_self)\n\nThis is a clean formulation. The first term is the gain over fair share, the second is the loss below fair share (with loss aversion \u03bb), and the third is the inequity when the opponent gets more.\n\nThe probability of accepting is logistic(U), so P(accept) = 1 / (1 + exp(-U)). If U > 0, the probability is >0.5; if U <0, <0.5.\n\nNow, the parameters \u03b1, \u03bb, \u03b2 need to be learnable with finite bounds. Let's set their ranges:\n\n- \u03b1: Sensitivity to gains. Should be positive. Bounds [0, 10], inclusive.\n- \u03bb: Loss aversion, typically \u03bb > \u03b1. Bounds [0, 10], inclusive.\n- \u03b2: Inequity aversion. Positive, so [0, 10], inclusive.\n\nThese bounds are generous but finite. The model uses variables split_self, split_opp, token_self (to compute fair_share), and combined_earning isn't directly needed since fair_share is 3*token_self, but combined_earning is 3*(token_self + token_opp), which might be redundant here.\n\nWait, but in the dataset, combined_earning is provided as a variable. However, in our model, we derived that fair_share is 3*token_self, which is part of the dataset's variables (token_self). So we don't need combined_earning for the fair_share calculation. However, the problem statement mentions that two equal split_self variables don't represent the same fairness because combined_earning varies. But in our model, the fairness is based on token_self, which is part of the contribution, so combined_earning is already accounted for in the fair_share as 3*token_self. Wait, no: combined_earning is 3*(token_self + token_opp), but the fair_share here is 3*token_self, which is the participant's contribution. So if combined_earning is higher (because token_opp is higher), the fair_share remains 3*token_self. So even if combined_earning is larger, the fair_share is fixed based on the participant's own contribution. This aligns with the note that two equal split_self values may not be equally fair because the total pot varies. For example, if split_self is \u00a36, but in one case token_self is 2 (fair_share \u00a36) and in another token_self is 3 (fair_share \u00a39), the same split_self would be fair in the first case but unfair in the second. So the model correctly captures this by using 3*token_self as the reference.\n\nTherefore, the model correctly incorporates the varying combined_earning through the token_self variable.\n\nNow, the variables used in the model are split_self, split_opp, and token_self. All of these are present in the dataset.\n\nThe mathematical model is:\n\nU = \u03b1 * max(0, split_self - 3*token_self) - \u03bb * max(0, 3*token_self - split_self) - \u03b2 * max(0, split_opp - split_self)\n\nThis utility function is then passed through a logistic function to get the probability of acceptance.\n\nNow, the parameters \u03b1, \u03bb, \u03b2 are learnable. Their bounds are [0, 10] inclusive. This is generous but prevents them from going to infinity.\n\nThe variables in the model are:\n\n- split_self: from data\n- split_opp: from data\n- token_self: from data\n- max functions: calculated\n- \u03b1, \u03bb, \u03b2: learnable parameters\n\nThe target variable is 'accept', which is binary.\n\nSo the variable descriptions would be:\n\nFor \u03b1:\n- description: Sensitivity to gains over fair share\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nFor \u03bb:\n- description: Loss aversion coefficient for gains below fair share\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nFor \u03b2:\n- description: Inequity aversion coefficient when opponent's share exceeds participant's\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nThe other variables (split_self, split_opp, token_self) are from the data, with their ranges as per the dataset.\n\nThe utility U is calculated, and its range is unbounded.\n\nPutting this all together:\n</think>\n\n<MODEL>\nU = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model where responders evaluate offers relative to their contribution-based fair share (3*token_self). Utility combines gain/loss sensitivity with inequity aversion. Gains above fair share are weighted by alpha, losses below by lambda (loss aversion), and disadvantageous inequity (opponent > self) by beta. Parameters have bounded ranges for identifiability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        fair_share = 3 * token_self\n\n        utility = alpha * max(0, split_self - fair_share) - lambda_ * max(0, fair_share - split_self) - beta * max(0, split_opp - split_self)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744016819.149089
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1.0, lambda_val=1.0, beta=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        split_opp = trial.get(\"split_opp\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n\n        fair_share = 3 * token_self\n\n        utility = (alpha * max(0, split_self - fair_share) -\n                   lambda_val * max(0, fair_share - split_self) -\n                   beta * max(0, split_opp - split_self))\n        \n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 24.0, \"split_self\": 6.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 6.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744016822.4498858
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        fair_share = 3 * token_self\n        \n        utility = alpha * max(0, split_self - fair_share) - lambda_ * max(0, fair_share - split_self) - beta * max(0, split_opp - split_self)\n        \n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 2, \"combined_earning\": 12, \"split_opp\": 6.0, \"split_self\": 6.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 6.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 2, \"combined_earning\": 12, \"split_opp\": 8.0, \"split_self\": 4.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha=0.5, lambda_=0.5, beta=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744016825.621988
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744016826.125799
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        fair_share = 3 * token_self\n        utility = alpha * max(0, split_self - fair_share) - lambda_ * max(0, fair_share - split_self) - beta * max(0, split_opp - split_self)\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 20.0, \"split_self\": 10.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 10.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744016829.1062589
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to gains above fair share (3*token_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion coefficient for amounts below fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion to opponent receiving more than participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)",
  "variable_descriptions": {
    "alpha": {
      "description": "Sensitivity to gains above fair share (3*token_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion coefficient for amounts below fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion to opponent receiving more than participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share for opponent in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's contribution in tokens",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A prospect theory-inspired model where responders evaluate offers relative to their contribution-based fair share (3*token_self). Utility combines gain/loss sensitivity with inequity aversion. Gains above fair share are weighted by alpha, losses below by lambda (loss aversion), and disadvantageous inequity (opponent > self) by beta. Parameters have bounded ranges for identifiability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and have learnable parameters with finite bounds. Also, the utility should be designed such that values less than 0 correspond to less than 50% likelihood of acceptance.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (1 or 0). The key factors influencing this decision likely involve the proposed shares (split_self and split_opp), the contributions (token_self and token_opp), and the total combined_earning. \n\nConsidering fairness and utility theory, participants might compare their proposed share to what they consider a fair split based on their contribution. The fair share could be proportional to their tokens relative to the total. For example, if the participant contributed token_self tokens out of the total (token_self + token_opp), their fair share might be (token_self / (token_self + token_opp)) * combined_earning. \n\nHowever, the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So, the model should account for the relative split compared to the contribution. \n\nProspect theory concepts might apply here, where participants evaluate gains and losses relative to a reference point. The reference point could be their fair share based on their contribution. If the proposed split_self is less than this reference, it's perceived as a loss, leading to a higher likelihood of rejection.\n\nLet's formalize this. The utility U could be the difference between the proposed split_self and the fair reference, adjusted by some parameters. Additionally, participants might have an aversion to inequity, so the difference between split_opp and split_self could also factor in, especially if the opponent is getting more.\n\nPossible parameters:\n- \u03b1 (alpha): Sensitivity to gains/losses relative to the fair share.\n- \u03b2 (beta): Inequity aversion parameter, sensitivity to the difference between split_opp and split_self.\n- \u03bb (lambda): Loss aversion coefficient, amplifying the effect of losses compared to gains.\n\nThe utility function might look like:\nU = \u03b1 * (split_self - fair_share) - \u03b2 * (split_opp - split_self) - \u03bb * (fair_share - split_self) * I(split_self < fair_share)\n\nWhere I() is an indicator function that is 1 when split_self is less than the fair share. This captures loss aversion when the offer is below the reference.\n\nThe fair_share can be calculated as (token_self / (token_self + token_opp)) * combined_earning. However, if token_self + token_opp is zero, this would be undefined, but in the dataset, tokens are non-negative, and participants have at least some tokens, so division by zero isn't an issue.\n\nTo convert utility to a probability of acceptance, we can use a logistic function: P(accept) = 1 / (1 + exp(-U)). This ensures that when U is positive, the probability is above 50%, and when negative, below 50%.\n\nNow, considering the parameters:\n- \u03b1 should be positive, as a higher proposed share relative to fair increases utility.\n- \u03b2 should be positive, as getting less than the opponent (split_opp > split_self) decreases utility.\n- \u03bb should be positive to model loss aversion, making losses (split_self < fair_share) more impactful.\n\nBounds for parameters:\n- \u03b1: [0, maybe 10] to allow for varying sensitivity.\n- \u03b2: [0, 10] similar reasoning.\n- \u03bb: [0, 10] to capture loss aversion magnitude.\n\nThese bounds are generous but finite. The model should use variables available in the dataset: split_self, split_opp, token_self, token_opp, combined_earning. Trial_type might also play a role, but since the model should predict based on responder behavior, trial_role is 1 (responder), so trial_role can be filtered.\n\nWait, the model should only consider trials where the participant is the responder (trial_role=1). So in the data, we'll subset to those cases. But the model itself doesn't need to include trial_role as a variable since it's only predicting for responders.\n\nAnother consideration: The combined_earning is 3*(token_self + token_opp), but the dataset already includes combined_earning as a variable. So we can use that directly.\n\nPutting it all together, the utility function would be:\n\nU = \u03b1*(split_self - fair_share) + \u03b2*(split_self - split_opp) - \u03bb*(fair_share - split_self)*(split_self < fair_share)\n\nWait, but \u03b2 is supposed to penalize inequity where the opponent gets more. So if split_opp is higher than split_self, that's negative for the participant, so maybe the term should be \u03b2*(split_opp - split_self). Alternatively, the model could use the absolute difference, but that might complicate things. Let's think again.\n\nIf the participant dislikes inequity where they get less than the opponent, then the term would be \u03b2*(split_opp - split_self). If \u03b2 is positive, this term reduces utility when split_opp > split_self. Alternatively, if the participant cares about the difference regardless of direction, but that's more complex. Since the task is about responder behavior, perhaps the focus is on cases where the proposer (opponent) is offering a split that may be unfair. So the model should penalize the proposer keeping more for themselves (split_opp higher than split_self). Hence, the term \u03b2*(split_opp - split_self) would be subtracted from utility, as higher differences reduce the likelihood of acceptance.\n\nBut in the utility function, higher U means higher chance of acceptance. So if split_opp is much higher than split_self, that's bad, so U decreases. So the term would be -\u03b2*(split_opp - split_self). Alternatively, if split_opp - split_self is positive, subtract \u03b2*(split_opp - split_self), else add. But perhaps the model should only penalize when the opponent gets more. So the term is -\u03b2*(split_opp - split_self). But if split_opp < split_self, this term becomes positive, which might not be intended. Alternatively, use max(0, split_opp - split_self) to only penalize when the opponent gets more. That way, the inequity term only applies when the opponent's share is higher.\n\nSo revising the utility function:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*max(0, split_opp - split_self) - \u03bb*max(0, fair_share - split_self)\n\nHere, the first term is the gain/loss relative to fair share, the second term is inequity aversion (penalty when opponent gets more), and the third term is loss aversion (additional penalty when the offer is below fair share).\n\nAlternatively, combine the first and third terms when split_self < fair_share:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*max(0, split_opp - split_self) + \u03bb*(split_self - fair_share) if split_self < fair_share\n\nWait, that might complicate. Let's think in terms of prospect theory: the value function is concave for gains and convex for losses, with losses weighted more heavily. But perhaps for simplicity, we can model a linear value function with a loss aversion coefficient.\n\nSo, the utility could be:\n\nIf split_self >= fair_share:\n    U = (split_self - fair_share) - \u03b2*(split_opp - split_self)\nElse:\n    U = \u03bb*(split_self - fair_share) - \u03b2*(split_opp - split_self)\n\nBut this introduces a piecewise function, which might complicate parameter estimation. Alternatively, express it as:\n\nU = [ (split_self >= fair_share) ? (split_self - fair_share) : \u03bb*(split_self - fair_share) ] - \u03b2*(split_opp - split_self)\n\nBut in mathematical terms, this can be written using the indicator function:\n\nU = (split_self - fair_share) * [ I(split_self >= fair_share) + \u03bb*I(split_self < fair_share) ] - \u03b2*(split_opp - split_self)\n\nSimplifying, this becomes:\n\nU = (split_self - fair_share) * (1 + (\u03bb - 1)*I(split_self < fair_share)) ) - \u03b2*(split_opp - split_self)\n\nBut this might be complex. Alternatively, separate the terms:\n\nU = \u03b1*(split_self - fair_share) - \u03b2*(split_opp - split_self) + \u03b3*max(0, fair_share - split_self)\n\nHere, \u03b3 represents the additional loss aversion when the offer is below the fair share. But this introduces another parameter. However, the problem states that the model should have learnable parameters with finite bounds. Let's see.\n\nAlternatively, combine \u03b1 and \u03b3 into a single parameter for loss aversion. For example:\n\nU = (split_self - fair_share) * [ \u03b1 + (\u03bb - \u03b1)*I(split_self < fair_share) ] - \u03b2*(split_opp - split_self)\n\nThis way, when split_self >= fair_share, the coefficient is \u03b1, else it's \u03bb. But this introduces \u03bb as a separate parameter.\n\nBut the initial instruction says to have learnable parameters with finite bounds. Let's consider three parameters: \u03b1 (gain sensitivity), \u03bb (loss sensitivity, \u03bb > \u03b1), and \u03b2 (inequity aversion).\n\nSo the utility function would be:\n\nU = \u03b1*(split_self - fair_share) * I(split_self >= fair_share) + \u03bb*(split_self - fair_share)*I(split_self < fair_share) - \u03b2*(split_opp - split_self)\n\nThis captures that gains (above fair share) are weighted by \u03b1, losses (below fair share) by \u03bb, and inequity by \u03b2. However, this requires I() functions, which can be represented using max or other operations.\n\nAlternatively, using the max function:\n\nU = \u03b1*max(0, split_self - fair_share) + \u03bb*min(0, split_self - fair_share) - \u03b2*max(0, split_opp - split_self)\n\nBut min(0, x) is equivalent to -max(0, -x), so:\n\nU = \u03b1*max(0, split_self - fair_share) - \u03bb*max(0, fair_share - split_self) - \u03b2*max(0, split_opp - split_self)\n\nThis way, all terms are non-negative, and the parameters \u03b1, \u03bb, \u03b2 are positive. The utility is a combination of gains (weighted by \u03b1), losses (weighted by \u03bb), and inequity aversion (weighted by \u03b2).\n\nThis seems manageable. The fair_share is calculated as (token_self / (token_self + token_opp)) * combined_earning. But combined_earning is already given as 3*(token_self + token_opp), so fair_share simplifies to 3*token_self. Wait, because each token is \u00a33, so token_self tokens contribute 3*token_self to the combined_earning. Similarly for token_opp. So combined_earning = 3*(token_self + token_opp). Therefore, the fair share based on contribution would be (3*token_self) / (3*(token_self + token_opp)) * combined_earning = 3*token_self. Wait, that can't be right. Wait, no: the fair share based on contribution would be (token_self / (token_self + token_opp)) * combined_earning. Since combined_earning is 3*(token_self + token_opp), then (token_self / (token_self + token_opp)) * 3*(token_self + token_opp) = 3*token_self. So the fair share is exactly 3*token_self. That's a key insight! So the fair_share is simply 3*token_self. Therefore, the participant's fair share is exactly the amount they contributed in tokens multiplied by \u00a33. This simplifies the model because we don't need to calculate it as a fraction; it's directly 3*token_self.\n\nSo the fair_share is 3*token_self. Therefore, the utility function becomes:\n\nU = \u03b1*max(0, split_self - 3*token_self) - \u03bb*max(0, 3*token_self - split_self) - \u03b2*max(0, split_opp - split_self)\n\nThis is a clean formulation. The first term is the gain over fair share, the second is the loss below fair share (with loss aversion \u03bb), and the third is the inequity when the opponent gets more.\n\nThe probability of accepting is logistic(U), so P(accept) = 1 / (1 + exp(-U)). If U > 0, the probability is >0.5; if U <0, <0.5.\n\nNow, the parameters \u03b1, \u03bb, \u03b2 need to be learnable with finite bounds. Let's set their ranges:\n\n- \u03b1: Sensitivity to gains. Should be positive. Bounds [0, 10], inclusive.\n- \u03bb: Loss aversion, typically \u03bb > \u03b1. Bounds [0, 10], inclusive.\n- \u03b2: Inequity aversion. Positive, so [0, 10], inclusive.\n\nThese bounds are generous but finite. The model uses variables split_self, split_opp, token_self (to compute fair_share), and combined_earning isn't directly needed since fair_share is 3*token_self, but combined_earning is 3*(token_self + token_opp), which might be redundant here.\n\nWait, but in the dataset, combined_earning is provided as a variable. However, in our model, we derived that fair_share is 3*token_self, which is part of the dataset's variables (token_self). So we don't need combined_earning for the fair_share calculation. However, the problem statement mentions that two equal split_self variables don't represent the same fairness because combined_earning varies. But in our model, the fairness is based on token_self, which is part of the contribution, so combined_earning is already accounted for in the fair_share as 3*token_self. Wait, no: combined_earning is 3*(token_self + token_opp), but the fair_share here is 3*token_self, which is the participant's contribution. So if combined_earning is higher (because token_opp is higher), the fair_share remains 3*token_self. So even if combined_earning is larger, the fair_share is fixed based on the participant's own contribution. This aligns with the note that two equal split_self values may not be equally fair because the total pot varies. For example, if split_self is \u00a36, but in one case token_self is 2 (fair_share \u00a36) and in another token_self is 3 (fair_share \u00a39), the same split_self would be fair in the first case but unfair in the second. So the model correctly captures this by using 3*token_self as the reference.\n\nTherefore, the model correctly incorporates the varying combined_earning through the token_self variable.\n\nNow, the variables used in the model are split_self, split_opp, and token_self. All of these are present in the dataset.\n\nThe mathematical model is:\n\nU = \u03b1 * max(0, split_self - 3*token_self) - \u03bb * max(0, 3*token_self - split_self) - \u03b2 * max(0, split_opp - split_self)\n\nThis utility function is then passed through a logistic function to get the probability of acceptance.\n\nNow, the parameters \u03b1, \u03bb, \u03b2 are learnable. Their bounds are [0, 10] inclusive. This is generous but prevents them from going to infinity.\n\nThe variables in the model are:\n\n- split_self: from data\n- split_opp: from data\n- token_self: from data\n- max functions: calculated\n- \u03b1, \u03bb, \u03b2: learnable parameters\n\nThe target variable is 'accept', which is binary.\n\nSo the variable descriptions would be:\n\nFor \u03b1:\n- description: Sensitivity to gains over fair share\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nFor \u03bb:\n- description: Loss aversion coefficient for gains below fair share\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nFor \u03b2:\n- description: Inequity aversion coefficient when opponent's share exceeds participant's\n- range: min 0, max 10, inclusive both\n- learnable: True\n- source: learnable\n\nThe other variables (split_self, split_opp, token_self) are from the data, with their ranges as per the dataset.\n\nThe utility U is calculated, and its range is unbounded.\n\nPutting this all together:\n</think>\n\n<MODEL>\nU = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Sensitivity to gains above fair share (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion coefficient for amounts below fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion to opponent receiving more than participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model where responders evaluate offers relative to their contribution-based fair share (3*token_self). Utility combines gain/loss sensitivity with inequity aversion. Gains above fair share are weighted by alpha, losses below by lambda (loss aversion), and disadvantageous inequity (opponent > self) by beta. Parameters have bounded ranges for identifiability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\nSummary: A prospect theory-inspired model where responders evaluate offers relative to their contribution-based fair share (3*token_self). Utility combines gain/loss sensitivity with inequity aversion. Gains above fair share are weighted by alpha, losses below by lambda (loss aversion), and disadvantageous inequity (opponent > self) by beta. Parameters have bounded ranges for identifiability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "  File \"<string>\", line 24\n    results = simulate_model(data, alpha=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744016819.207402
    },
    {
      "retry_number": 1,
      "error": "  File \"<string>\", line 26\n    results = simulate_model(data, alpha=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744016822.494375
    },
    {
      "retry_number": 2,
      "error": "  File \"<string>\", line 24\n    results = simulate_model(data, alpha=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744016825.645592
    },
    {
      "retry_number": 3,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744016826.125816
    },
    {
      "retry_number": 4,
      "error": "  File \"<string>\", line 22\n    results = simulate_model(data, alpha=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744016829.140906
    }
  ],
  "current_retry": 4,
  "simulation_error": "Failed after maximum retries",
  "simulation_code": "def simulate_model(trial_data, alpha=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        fair_share = 3 * token_self\n        utility = alpha * max(0, split_self - fair_share) - lambda_ * max(0, fair_share - split_self) - beta * max(0, split_opp - split_self)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 5,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.619776433332722, 'lambda': 7.809019242312284, 'beta': 4.529088658696247}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.591347536077224, 'lambda': 8.636699953740294, 'beta': 2.8668392663219744}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.15685413214995, 'lambda': 6.608374928222185, 'beta': 4.030334011310009}\"]",
    "Error fitting participant 1002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.0188912965077574, 'lambda': 1.26483607394003, 'beta': 5.207548991841117}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.57932662859199, 'lambda': 9.614852406926914, 'beta': 3.6974651655716295}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.923782027146738, 'lambda': 6.391462766332813, 'beta': 5.289879206592759}\"]",
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.6680586434469253, 'lambda': 0.04631401171821037, 'beta': 0.005447792734221135}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.615367585787375, 'lambda': 6.397267696408276, 'beta': 3.388445905005714}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.568193318349236, 'lambda': 4.284446003184467, 'beta': 1.3421154604950036}\"]",
    "Error fitting participant 1004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.41612716561733487, 'lambda': 6.213800309173153, 'beta': 7.722925146109931}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4625739160944342, 'lambda': 0.44559940695227396, 'beta': 3.2347947518878826}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6545542086915443, 'lambda': 0.7919053624694294, 'beta': 0.9346405527360524}\"]",
    "Error fitting participant 1005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.739216195180554, 'lambda': 3.5522071757383102, 'beta': 2.890172146733665}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8106121232334604, 'lambda': 2.6660974046409294, 'beta': 8.983360219868107}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.394009908932302, 'lambda': 4.32154273172984, 'beta': 7.897361137494744}\"]",
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.352837121306818, 'lambda': 0.21462341682776054, 'beta': 5.9550471083154495}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.453663176306193, 'lambda': 3.692703987284779, 'beta': 7.7776971654484885}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.9098805215756, 'lambda': 7.773175672257606, 'beta': 1.6804841251788283}\"]",
    "Error fitting participant 1007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5266422364786467, 'lambda': 9.783883912140164, 'beta': 8.713010967024573}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.1879187862560558, 'lambda': 9.862936587693898, 'beta': 0.8412977350806583}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.231932947285813, 'lambda': 3.3963769062401203, 'beta': 1.8155638009035124}\"]",
    "Error fitting participant 1008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.779884717940498, 'lambda': 7.045653048889822, 'beta': 8.596171177971305}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.63565637889691, 'lambda': 3.899299576143518, 'beta': 4.8628439751767}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4878678806059389, 'lambda': 8.734833257204762, 'beta': 8.590179655468791}\"]",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.621130836972618, 'lambda': 2.8690309823381046, 'beta': 0.7603765031783571}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.4307630492654537, 'lambda': 4.294072338802687, 'beta': 4.0893550429929695}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5111856682330815, 'lambda': 0.35085945700520704, 'beta': 7.482711144502341}\"]",
    "Error fitting participant 1010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.190720518299171, 'lambda': 2.9369490826709352, 'beta': 0.24625788407094729}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.4965764823086525, 'lambda': 1.2664080610870254, 'beta': 9.154020613285159}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8026069455248428, 'lambda': 8.214478270896937, 'beta': 1.6869498977355712}\"]",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.095541357227956, 'lambda': 5.131306841763238, 'beta': 8.840500599917272}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.240580459691627, 'lambda': 5.699386742476374, 'beta': 5.314604463218817}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.169523309446994, 'lambda': 8.57257848131858, 'beta': 2.39755958181856}\"]",
    "Error fitting participant 1012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.545638719152517, 'lambda': 3.842274445483369, 'beta': 9.288200129418788}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.545434616964759, 'lambda': 6.662437598006817, 'beta': 0.5353226461214367}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.27804578739578, 'lambda': 9.617304401328141, 'beta': 7.107000864550396}\"]",
    "Error fitting participant 1013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.858235519712232, 'lambda': 7.589679407280416, 'beta': 5.433559769301692}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.7415142875587337, 'lambda': 1.9400417128390735, 'beta': 2.75111897109098}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.383964060331152, 'lambda': 0.29665703715316294, 'beta': 3.1104684725255813}\"]",
    "Error fitting participant 1015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.266778727559764, 'lambda': 6.563978417356626, 'beta': 8.050839533304615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.967908333102388, 'lambda': 3.4348228209882095, 'beta': 8.821296549759186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2587902628419256, 'lambda': 0.06484294841343274, 'beta': 1.327370549032385}\"]",
    "Error fitting participant 1016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.550082267225218, 'lambda': 7.709981827554797, 'beta': 6.0014444491672165}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.94774435581601, 'lambda': 2.5978947916095962, 'beta': 6.041991781224559}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.527242547465488, 'lambda': 1.7865215358233866, 'beta': 3.9538309612724607}\"]",
    "Error fitting participant 1017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6817218051033977, 'lambda': 7.236558924731407, 'beta': 7.9294659798854035}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.031117795114294, 'lambda': 6.294526590730057, 'beta': 6.130590100147311}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.8894512067217737, 'lambda': 8.5055902411265, 'beta': 6.833174239025903}\"]",
    "Error fitting participant 1018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.63333149616947, 'lambda': 7.141528855509459, 'beta': 4.420662552888067}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6870135254813379, 'lambda': 9.980522896680954, 'beta': 8.709744888250281}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.799846922252669, 'lambda': 7.077918357208725, 'beta': 6.280701523875686}\"]",
    "Error fitting participant 1019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.538978735340162, 'lambda': 9.140519352603793, 'beta': 8.068695307329245}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.476395953897116, 'lambda': 9.091868880261062, 'beta': 7.3958781767764865}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.9284936201226306, 'lambda': 7.418422820770461, 'beta': 0.2243871595970981}\"]",
    "Error fitting participant 1020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.5775878313018215, 'lambda': 6.666093046578563, 'beta': 6.002292998495133}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.958417688228232, 'lambda': 7.274900610522284, 'beta': 1.2082772348697546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.289368363619032, 'lambda': 2.417739412716707, 'beta': 7.835299344030091}\"]",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.0814039099206485, 'lambda': 2.4226073396188443, 'beta': 0.4766893330686528}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.69420224211127, 'lambda': 0.7557221098147893, 'beta': 5.60765527823353}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9956270200261408, 'lambda': 9.920524799742875, 'beta': 0.33681037205792075}\"]",
    "Error fitting participant 1022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.7164120113256605, 'lambda': 7.893622250821588, 'beta': 5.646581498103959}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.822859128509941, 'lambda': 0.6822133030284805, 'beta': 8.656842182825882}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.735646984614611, 'lambda': 1.6319749413930829, 'beta': 7.295743077469573}\"]",
    "Error fitting participant 1023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.2685603893255046, 'lambda': 4.607772879323752, 'beta': 8.947172030830572}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.9599207742985034, 'lambda': 0.5131736593358205, 'beta': 2.1411091396744064}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.558159511622018, 'lambda': 1.1378365484692199, 'beta': 7.228654055768176}\"]",
    "Error fitting participant 1024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.502388886691984, 'lambda': 3.8653721800035723, 'beta': 3.5837302573538676}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.778066233292135, 'lambda': 0.6700007434823374, 'beta': 6.228569395336475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.020549601071414, 'lambda': 5.256729434609016, 'beta': 7.540484182921938}\"]",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.889297224682894, 'lambda': 0.17923329868069215, 'beta': 2.349513585421774}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7849778920241786, 'lambda': 7.287663292064764, 'beta': 9.898444886385452}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9120870300288453, 'lambda': 6.249046140604953, 'beta': 8.348199152135386}\"]",
    "Error fitting participant 1026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.7213985771031295, 'lambda': 3.9870580357722685, 'beta': 3.152571342776417}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.372532828804193, 'lambda': 2.901279164883215, 'beta': 1.5685010353893691}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.009395632048316, 'lambda': 7.837429610797574, 'beta': 3.538520587993043}\"]",
    "Error fitting participant 1027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.652311409799874, 'lambda': 9.856356173049905, 'beta': 4.608499271182}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.9524359786943215, 'lambda': 0.8995758603955417, 'beta': 1.7863962575477188}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.421216405065688, 'lambda': 1.9066421300395497, 'beta': 2.5601796589198464}\"]",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.693702771776527, 'lambda': 9.923398872965324, 'beta': 9.269361964876653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.5611426107918245, 'lambda': 1.0378776964489755, 'beta': 6.3952817922454805}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.016331951848786, 'lambda': 3.4433035772339604, 'beta': 5.727086185581081}\"]",
    "Error fitting participant 1029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.594693842653966, 'lambda': 8.922197651273706, 'beta': 9.77358129158408}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.868689486786543, 'lambda': 1.8388437875774866, 'beta': 7.245561162549419}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.2909404488361917, 'lambda': 0.8349773904699354, 'beta': 4.239149448398245}\"]",
    "Error fitting participant 1030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3696910413183117, 'lambda': 4.830812093782079, 'beta': 8.035753498115891}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.455951670322227, 'lambda': 1.8247520720680421, 'beta': 3.746658104265478}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.886907984918644, 'lambda': 6.591324799921864, 'beta': 9.009560911699207}\"]",
    "Error fitting participant 1031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.5094893153031619, 'lambda': 0.10967494857347049, 'beta': 0.04965346900860812}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.6851647976119244, 'lambda': 8.232683366497227, 'beta': 6.23730817207083}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.102529568187987, 'lambda': 4.107599187712053, 'beta': 1.6791712250474333}\"]",
    "Error fitting participant 1032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.508752769673861, 'lambda': 5.721041927583269, 'beta': 0.5028404314583879}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.861068378170841, 'lambda': 4.46553015409655, 'beta': 7.773293258410624}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2829615172788766, 'lambda': 4.8661993293346715, 'beta': 0.3734704320839044}\"]",
    "Error fitting participant 1033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.3261410928518027, 'lambda': 0.7279652074318621, 'beta': 7.502298481658798}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.574921465991663, 'lambda': 9.85245902222072, 'beta': 6.4864513994126805}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.801872777099418, 'lambda': 5.931373945771402, 'beta': 0.10352097887254663}\"]",
    "Error fitting participant 1034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.7938633210512975, 'lambda': 2.449436547860401, 'beta': 7.245481608080584}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.612990318305021, 'lambda': 7.352835798672347, 'beta': 5.506040635570963}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.6582618400443607, 'lambda': 5.737776215473924, 'beta': 8.334579861102862}\"]",
    "Error fitting participant 1035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.227776748859817, 'lambda': 2.9566894310205827, 'beta': 4.9075127431438945}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8720391243336487, 'lambda': 5.412975570365971, 'beta': 0.1961796282430639}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.44713724564256, 'lambda': 0.38098227795168693, 'beta': 9.225561710307263}\"]",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5407655058169167, 'lambda': 1.5695289795984801, 'beta': 4.947694089731907}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.4302315272795427, 'lambda': 5.17403991903428, 'beta': 5.573109417122016}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.07769585900843, 'lambda': 3.2214172175714886, 'beta': 4.655834973343699}\"]",
    "Error fitting participant 1037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4082063385963963, 'lambda': 2.5205274413822245, 'beta': 7.964567809506434}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.7893217874376279, 'lambda': 2.1232296753095667, 'beta': 1.1349552889217185}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.924685372521584, 'lambda': 9.39670598778114, 'beta': 9.028150537803295}\"]",
    "Error fitting participant 1038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.5305175240634152, 'lambda': 0.3956161775459399, 'beta': 9.821658443629369}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.627504328606557, 'lambda': 2.389731272381228, 'beta': 5.38672841593961}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.3990165399326795, 'lambda': 3.917436850505011, 'beta': 6.176242926503237}\"]",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.676985284448554, 'lambda': 8.725448294171187, 'beta': 2.030575243186651}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.160492994074662, 'lambda': 1.0154601185627499, 'beta': 3.983836088095316}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.92614911970377, 'lambda': 3.709036473481675, 'beta': 4.510188422585028}\"]",
    "Error fitting participant 1040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.276133881544721, 'lambda': 0.22351854330300625, 'beta': 1.404530256429224}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.9401005616033717, 'lambda': 6.266615923219297, 'beta': 5.3599046778422865}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.408222366361184, 'lambda': 0.30568902118286223, 'beta': 1.58694683392949}\"]",
    "Error fitting participant 1041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.8769583837987076, 'lambda': 7.582967644996659, 'beta': 7.008091683423711}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.886967562129524, 'lambda': 9.61691757210893, 'beta': 2.3261721719250428}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.505902190435568, 'lambda': 5.795959191816377, 'beta': 9.7898464025678}\"]",
    "Error fitting participant 1042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.152824637484735, 'lambda': 8.989085283998094, 'beta': 2.0433836408053105}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.919476381452421, 'lambda': 7.441980485897105, 'beta': 6.195709187300188}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.4424405071340765, 'lambda': 4.0152836767349145, 'beta': 9.602796596004413}\"]",
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.99911439694594, 'lambda': 1.7134383760457217, 'beta': 0.38962608442797086}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.872713659022127, 'lambda': 9.977423259803604, 'beta': 2.9939977307857504}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.7347142780021425, 'lambda': 2.072598214706346, 'beta': 3.3269260885059126}\"]",
    "Error fitting participant 1044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4530488562464319, 'lambda': 7.308900435992025, 'beta': 6.549963427502781}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.424083015925743, 'lambda': 1.25891471082759, 'beta': 4.8778002277825365}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.310779248444119, 'lambda': 7.965485416591367, 'beta': 7.290151702972106}\"]",
    "Error fitting participant 2001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.884661066432226, 'lambda': 5.763100162254846, 'beta': 6.42650192972104}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.874991196023226, 'lambda': 8.133980786762239, 'beta': 3.8174054259792856}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.127985775949185, 'lambda': 5.872712524844376, 'beta': 0.4889985148535514}\"]",
    "Error fitting participant 2002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.7390267215509205, 'lambda': 0.031145200089609526, 'beta': 8.828910969388495}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8606109447133279, 'lambda': 0.1536918075595506, 'beta': 4.832317686859236}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.5184635777586255, 'lambda': 0.3439352932075401, 'beta': 2.2932867013113}\"]",
    "Error fitting participant 2003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.992345846909867, 'lambda': 1.7445821299024122, 'beta': 0.31777443852033627}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.91711560063899, 'lambda': 6.096283191001421, 'beta': 4.846744300142758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.848040859500315, 'lambda': 2.7118083623368627, 'beta': 7.979162443846941}\"]",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.023790832255129, 'lambda': 6.289783254130873, 'beta': 9.910495414946473}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.001696059901391, 'lambda': 4.478664321406081, 'beta': 7.184368671629685}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.535561354822569, 'lambda': 3.6009319051591415, 'beta': 8.440918342512463}\"]",
    "Error fitting participant 2005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.21873648327779, 'lambda': 4.772231705631183, 'beta': 4.4242090572849975}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.652077783490723, 'lambda': 1.5962059616818047, 'beta': 6.350278246136546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.74990175316474, 'lambda': 2.1903963090581637, 'beta': 6.653757688088726}\"]",
    "Error fitting participant 2006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.068270661279942, 'lambda': 8.66734310717694, 'beta': 8.171701724508827}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.27909667504224, 'lambda': 6.653818177867009, 'beta': 8.262328539761656}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.663347897232706, 'lambda': 7.133294834525579, 'beta': 1.5370000194548916}\"]",
    "Error fitting participant 2007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.141513206751094, 'lambda': 3.9292198092780204, 'beta': 6.199487282834255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.211504190157529, 'lambda': 2.8426047122803833, 'beta': 8.88213330192221}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.1457015538605897, 'lambda': 1.9274335043235047, 'beta': 3.4674180765746}\"]",
    "Error fitting participant 2008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3929730830788034, 'lambda': 3.821542720132607, 'beta': 2.3924603212122673}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.063482080169301, 'lambda': 3.4513914520658773, 'beta': 9.018975877581049}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.205977164546651, 'lambda': 9.865024342924974, 'beta': 1.6717199135029215}\"]",
    "Error fitting participant 2009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.36841428992836, 'lambda': 9.802734729212704, 'beta': 5.9305261749363725}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.653205000902231, 'lambda': 6.504732146830201, 'beta': 1.5111688153859537}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.078027228358198, 'lambda': 9.27812379734979, 'beta': 2.628326742334112}\"]",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.297797176501688, 'lambda': 9.984264080159532, 'beta': 7.603254284044664}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.3212646725740322, 'lambda': 8.173486967335768, 'beta': 4.825286659308262}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.4412382079392, 'lambda': 6.976778723728712, 'beta': 8.561962027556604}\"]",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.3558154455248714, 'lambda': 5.324063102836773, 'beta': 3.059262099153439}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.5090737151595635, 'lambda': 9.796515936454567, 'beta': 7.4045731512642075}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.63860701999601, 'lambda': 1.3150437059259334, 'beta': 9.117123828394204}\"]",
    "Error fitting participant 2012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.335628796060095, 'lambda': 5.98460686620708, 'beta': 3.3295188519127175}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.082101708595333, 'lambda': 6.954221839174311, 'beta': 8.519644428341609}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.89914949328542, 'lambda': 2.2256096782198673, 'beta': 2.5828285637419457}\"]",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.960001305956664, 'lambda': 4.22594664381163, 'beta': 7.707123716609057}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.178339517009238, 'lambda': 3.163603115567122, 'beta': 1.5937829316734442}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.666355500837293, 'lambda': 8.340655135885271, 'beta': 2.5183952950817403}\"]",
    "Error fitting participant 2014: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.0655045747956216, 'lambda': 4.512161174745334, 'beta': 4.480714140526434}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.040747874238008, 'lambda': 1.002800723417837, 'beta': 2.4009698184837025}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.833629601009523, 'lambda': 0.7013836846629906, 'beta': 6.66366584089861}\"]",
    "Error fitting participant 2015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.9569290739079204, 'lambda': 0.7787417434259192, 'beta': 0.4678004718922901}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.321270928963724, 'lambda': 8.333160535300625, 'beta': 6.41405879537036}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.7414794965992, 'lambda': 4.2552005183728125, 'beta': 0.5417351423936434}\"]",
    "Error fitting participant 2016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.3644933107841215, 'lambda': 9.028592075007047, 'beta': 7.415206764162615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.019900422072804, 'lambda': 4.519076520857926, 'beta': 5.5401199585610605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.009493760931367, 'lambda': 0.583275687836855, 'beta': 6.789755996019483}\"]",
    "Error fitting participant 2017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.690231372554217, 'lambda': 7.585201900501537, 'beta': 3.2518898739098034}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.520968016618241, 'lambda': 0.019271442701352948, 'beta': 4.051489845116951}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4069398873536578, 'lambda': 2.617313077213458, 'beta': 2.969780284040816}\"]",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.467585223352403, 'lambda': 4.428578857733171, 'beta': 7.272608329094789}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.1220351240692725, 'lambda': 0.1899940668601252, 'beta': 4.636399263947029}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.5421057596217682, 'lambda': 3.2766135788115713, 'beta': 0.49324130682307565}\"]",
    "Error fitting participant 2019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.788004199224892, 'lambda': 6.9367941381564275, 'beta': 5.448490804489508}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.038562925544316, 'lambda': 1.5017556932906018, 'beta': 5.398186142065238}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.427158648044471, 'lambda': 9.037291219520956, 'beta': 5.444377593472898}\"]",
    "Error fitting participant 2020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.124479332289452, 'lambda': 6.5727843811882, 'beta': 3.615960216444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.04283556723461, 'lambda': 0.7797248603668006, 'beta': 0.20699603107113607}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.3289557390544475, 'lambda': 0.7319271855390963, 'beta': 7.064310204164452}\"]",
    "Error fitting participant 2021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.693102599137711, 'lambda': 5.627222472900028, 'beta': 8.87887353820858}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1908440054022877, 'lambda': 1.2575241159586292, 'beta': 0.7471079800472991}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.246485660517341, 'lambda': 6.737202183084923, 'beta': 5.568676657120022}\"]",
    "Error fitting participant 2022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.828825050257404, 'lambda': 9.617015244235288, 'beta': 1.755628450114638}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.886864060838228, 'lambda': 7.625454100574686, 'beta': 7.375167282326025}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.139771876789541, 'lambda': 6.88701846733863, 'beta': 3.9523983369718616}\"]",
    "Error fitting participant 2023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9686871655862639, 'lambda': 0.2167249433421614, 'beta': 6.32069415181448}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.529668744237278, 'lambda': 8.568165059924961, 'beta': 0.27700052074443926}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.628196404357345, 'lambda': 6.068869912152582, 'beta': 9.924624949277213}\"]",
    "Error fitting participant 2024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.722005246324729, 'lambda': 9.242240293725043, 'beta': 3.8650760351531}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.8496895286253388, 'lambda': 6.871819183818033, 'beta': 6.20541606271826}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.446858155304644, 'lambda': 6.160634413116019, 'beta': 4.555789116369107}\"]",
    "Error fitting participant 2025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.109731433893854, 'lambda': 9.837979995979149, 'beta': 4.932361048124077}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9733783338663615, 'lambda': 7.215541288583539, 'beta': 3.883408438709619}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.722523254285111, 'lambda': 0.5060012105875511, 'beta': 9.430748140203258}\"]",
    "Error fitting participant 2026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.90273526039197, 'lambda': 1.2152503492242461, 'beta': 3.164803252182251}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.588003294793444, 'lambda': 0.881469486807055, 'beta': 1.475720875383174}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.354568814223489, 'lambda': 8.560411961036094, 'beta': 7.078590337753662}\"]",
    "Error fitting participant 2027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.1918694827772613, 'lambda': 5.0164903414831326, 'beta': 2.8923571649525357}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.943441866520732, 'lambda': 1.2820801817309013, 'beta': 7.9777655436921275}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.38613984432239, 'lambda': 2.680948432125839, 'beta': 6.387869258671589}\"]",
    "Error fitting participant 2028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.652387951011451, 'lambda': 3.7685410216808632, 'beta': 7.0298569653776655}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.476693123484903, 'lambda': 7.383569457704402, 'beta': 5.129764111634393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1384313683767595, 'lambda': 3.660346854584179, 'beta': 6.636495253356305}\"]",
    "Error fitting participant 2029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.295469897031822, 'lambda': 7.563175061602129, 'beta': 4.471452082599221}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.144214322396303, 'lambda': 9.4350207725262, 'beta': 8.056344457093045}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.178097152020783, 'lambda': 4.368232638785226, 'beta': 7.812973186561064}\"]",
    "Error fitting participant 2030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.8070621191921346, 'lambda': 9.007434544606912, 'beta': 5.175345942837777}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.291831140927875, 'lambda': 3.2687930173643864, 'beta': 5.546894024219395}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.374957655669089, 'lambda': 5.948073603180539, 'beta': 6.193758676836952}\"]",
    "Error fitting participant 2031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.900975111289333, 'lambda': 1.5492453617448687, 'beta': 0.08749360883148594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.134344756654681, 'lambda': 3.846271314046658, 'beta': 1.8873911324750148}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.735284583630374, 'lambda': 8.12029821626075, 'beta': 1.2158253105793937}\"]",
    "Error fitting participant 2032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.469690848371646, 'lambda': 0.4789685609006722, 'beta': 8.297694992871115}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.188292964914764, 'lambda': 5.894332079786867, 'beta': 9.74276833753114}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.66085015657397, 'lambda': 3.184654390629648, 'beta': 8.676820825301757}\"]",
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8334393043800723, 'lambda': 3.2152591902996983, 'beta': 9.669329362596713}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.969927570801201, 'lambda': 7.081297955665996, 'beta': 5.887836859818611}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.180645967324068, 'lambda': 4.901095394588908, 'beta': 0.12014933434324471}\"]",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.129627327634105, 'lambda': 0.19199858370468337, 'beta': 1.9045925371351902}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.29277275853693, 'lambda': 7.472179392543053, 'beta': 7.624588527524121}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.438499531251816, 'lambda': 8.481481949102411, 'beta': 8.019462047528453}\"]",
    "Error fitting participant 2035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2644986801001146, 'lambda': 4.104519385520176, 'beta': 4.917029626903644}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.145322277454236, 'lambda': 3.587390672060886, 'beta': 0.3099447740539729}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.54760565687884, 'lambda': 4.537471584518529, 'beta': 0.3049692367815937}\"]",
    "Error fitting participant 2036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.7113838361255873, 'lambda': 0.7347799462880167, 'beta': 9.696156263019093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.7042233638209991, 'lambda': 5.83064435129784, 'beta': 6.18474119474114}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.19699975400574, 'lambda': 1.874781636916426, 'beta': 0.28985850846339867}\"]",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.474727115588898, 'lambda': 0.1770700131885039, 'beta': 6.344476349440113}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.159191790432847, 'lambda': 4.749528465521636, 'beta': 6.417836733811456}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.427770795666784, 'lambda': 8.966288857176764, 'beta': 1.4780080074857005}\"]",
    "Error fitting participant 2038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.404279154255411, 'lambda': 0.5641396375524066, 'beta': 5.288385098679653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.349362440862, 'lambda': 3.328177909659992, 'beta': 0.9789702489227714}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.84785889507235, 'lambda': 9.136314329531164, 'beta': 7.469287161325221}\"]",
    "Error fitting participant 2039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.063492478551333, 'lambda': 6.810184201744493, 'beta': 5.932310377266758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.088993569005572, 'lambda': 3.274815777376282, 'beta': 0.08978763306106141}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7800977043890973, 'lambda': 7.932738480851841, 'beta': 0.10673957184249794}\"]",
    "Error fitting participant 2040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.43766809529141, 'lambda': 3.8148306812870825, 'beta': 7.56344646080538}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.983668066542304, 'lambda': 4.753708159954164, 'beta': 4.492105109559271}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.175003764438998, 'lambda': 1.189133146073289, 'beta': 5.147523509315597}\"]",
    "Error fitting participant 2041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.8131037923876985, 'lambda': 2.321398537926461, 'beta': 2.493134649812534}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.524062685197878, 'lambda': 3.669503054223917, 'beta': 1.7516813009849375}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.332845226626688, 'lambda': 5.103149716912436, 'beta': 2.307349500808219}\"]",
    "Error fitting participant 2042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3147377051738252, 'lambda': 9.200344530615816, 'beta': 8.758204189180567}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.972588015960435, 'lambda': 3.506419991159717, 'beta': 8.682125966707886}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.295643401119773, 'lambda': 3.7581436178562564, 'beta': 3.0486951872054124}\"]",
    "Error fitting participant 2043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7897364329382324, 'lambda': 9.115232590060263, 'beta': 3.3140226753622914}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.5778559104419516, 'lambda': 6.609612687105591, 'beta': 7.603745095779521}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.07512195970185, 'lambda': 5.906446334855007, 'beta': 6.759308567329843}\"]",
    "Error fitting participant 2044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.129057949025317, 'lambda': 2.8979506345589465, 'beta': 2.198446754422003}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.513741291830911, 'lambda': 3.094335746749647, 'beta': 6.508679367316828}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.755817616571641, 'lambda': 4.869463657682878, 'beta': 5.154548160281987}\"]",
    "Error fitting participant 2045: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.954025492305323, 'lambda': 7.147391286949954, 'beta': 1.5261581916667222}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.608332706819556, 'lambda': 1.795828956529285, 'beta': 2.396809474885803}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.0739961611260942, 'lambda': 8.775902183496111, 'beta': 4.826892778472356}\"]",
    "Error fitting participant 2046: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.749788264801439, 'lambda': 2.2316397832966506, 'beta': 5.9013267090035555}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.487456569705656, 'lambda': 2.0812173151014166, 'beta': 5.800822345136956}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.647548852755966, 'lambda': 1.3536422646212054, 'beta': 5.2728611494738455}\"]",
    "Error fitting participant 2047: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1771973863081215, 'lambda': 9.953180014497224, 'beta': 5.1478388854226145}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.313070664961249, 'lambda': 2.4496389756216486, 'beta': 9.694892641092952}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.008809544126663349, 'lambda': 8.657526891234317, 'beta': 2.9320533700544082}\"]",
    "Error fitting participant 2048: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.436686375910597, 'lambda': 1.3860956391011592, 'beta': 8.296220793259565}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.0120976511015523, 'lambda': 5.692195505642009, 'beta': 4.610451602369015}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.533662566127118, 'lambda': 2.938717109531032, 'beta': 8.057086756768875}\"]"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.619776433332722, 'lambda': 7.809019242312284, 'beta': 4.529088658696247}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.591347536077224, 'lambda': 8.636699953740294, 'beta': 2.8668392663219744}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.15685413214995, 'lambda': 6.608374928222185, 'beta': 4.030334011310009}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.0188912965077574, 'lambda': 1.26483607394003, 'beta': 5.207548991841117}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.57932662859199, 'lambda': 9.614852406926914, 'beta': 3.6974651655716295}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.923782027146738, 'lambda': 6.391462766332813, 'beta': 5.289879206592759}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.6680586434469253, 'lambda': 0.04631401171821037, 'beta': 0.005447792734221135}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.615367585787375, 'lambda': 6.397267696408276, 'beta': 3.388445905005714}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.568193318349236, 'lambda': 4.284446003184467, 'beta': 1.3421154604950036}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.41612716561733487, 'lambda': 6.213800309173153, 'beta': 7.722925146109931}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4625739160944342, 'lambda': 0.44559940695227396, 'beta': 3.2347947518878826}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6545542086915443, 'lambda': 0.7919053624694294, 'beta': 0.9346405527360524}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.739216195180554, 'lambda': 3.5522071757383102, 'beta': 2.890172146733665}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8106121232334604, 'lambda': 2.6660974046409294, 'beta': 8.983360219868107}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.394009908932302, 'lambda': 4.32154273172984, 'beta': 7.897361137494744}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.352837121306818, 'lambda': 0.21462341682776054, 'beta': 5.9550471083154495}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.453663176306193, 'lambda': 3.692703987284779, 'beta': 7.7776971654484885}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.9098805215756, 'lambda': 7.773175672257606, 'beta': 1.6804841251788283}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5266422364786467, 'lambda': 9.783883912140164, 'beta': 8.713010967024573}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.1879187862560558, 'lambda': 9.862936587693898, 'beta': 0.8412977350806583}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.231932947285813, 'lambda': 3.3963769062401203, 'beta': 1.8155638009035124}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.779884717940498, 'lambda': 7.045653048889822, 'beta': 8.596171177971305}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.63565637889691, 'lambda': 3.899299576143518, 'beta': 4.8628439751767}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4878678806059389, 'lambda': 8.734833257204762, 'beta': 8.590179655468791}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.621130836972618, 'lambda': 2.8690309823381046, 'beta': 0.7603765031783571}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.4307630492654537, 'lambda': 4.294072338802687, 'beta': 4.0893550429929695}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5111856682330815, 'lambda': 0.35085945700520704, 'beta': 7.482711144502341}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.190720518299171, 'lambda': 2.9369490826709352, 'beta': 0.24625788407094729}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.4965764823086525, 'lambda': 1.2664080610870254, 'beta': 9.154020613285159}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8026069455248428, 'lambda': 8.214478270896937, 'beta': 1.6869498977355712}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.095541357227956, 'lambda': 5.131306841763238, 'beta': 8.840500599917272}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.240580459691627, 'lambda': 5.699386742476374, 'beta': 5.314604463218817}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.169523309446994, 'lambda': 8.57257848131858, 'beta': 2.39755958181856}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.545638719152517, 'lambda': 3.842274445483369, 'beta': 9.288200129418788}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.545434616964759, 'lambda': 6.662437598006817, 'beta': 0.5353226461214367}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.27804578739578, 'lambda': 9.617304401328141, 'beta': 7.107000864550396}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.858235519712232, 'lambda': 7.589679407280416, 'beta': 5.433559769301692}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.7415142875587337, 'lambda': 1.9400417128390735, 'beta': 2.75111897109098}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.383964060331152, 'lambda': 0.29665703715316294, 'beta': 3.1104684725255813}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.266778727559764, 'lambda': 6.563978417356626, 'beta': 8.050839533304615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.967908333102388, 'lambda': 3.4348228209882095, 'beta': 8.821296549759186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2587902628419256, 'lambda': 0.06484294841343274, 'beta': 1.327370549032385}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.550082267225218, 'lambda': 7.709981827554797, 'beta': 6.0014444491672165}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.94774435581601, 'lambda': 2.5978947916095962, 'beta': 6.041991781224559}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.527242547465488, 'lambda': 1.7865215358233866, 'beta': 3.9538309612724607}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6817218051033977, 'lambda': 7.236558924731407, 'beta': 7.9294659798854035}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.031117795114294, 'lambda': 6.294526590730057, 'beta': 6.130590100147311}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.8894512067217737, 'lambda': 8.5055902411265, 'beta': 6.833174239025903}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.63333149616947, 'lambda': 7.141528855509459, 'beta': 4.420662552888067}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.6870135254813379, 'lambda': 9.980522896680954, 'beta': 8.709744888250281}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.799846922252669, 'lambda': 7.077918357208725, 'beta': 6.280701523875686}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.538978735340162, 'lambda': 9.140519352603793, 'beta': 8.068695307329245}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.476395953897116, 'lambda': 9.091868880261062, 'beta': 7.3958781767764865}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.9284936201226306, 'lambda': 7.418422820770461, 'beta': 0.2243871595970981}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.5775878313018215, 'lambda': 6.666093046578563, 'beta': 6.002292998495133}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.958417688228232, 'lambda': 7.274900610522284, 'beta': 1.2082772348697546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.289368363619032, 'lambda': 2.417739412716707, 'beta': 7.835299344030091}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.0814039099206485, 'lambda': 2.4226073396188443, 'beta': 0.4766893330686528}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.69420224211127, 'lambda': 0.7557221098147893, 'beta': 5.60765527823353}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9956270200261408, 'lambda': 9.920524799742875, 'beta': 0.33681037205792075}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.7164120113256605, 'lambda': 7.893622250821588, 'beta': 5.646581498103959}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.822859128509941, 'lambda': 0.6822133030284805, 'beta': 8.656842182825882}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.735646984614611, 'lambda': 1.6319749413930829, 'beta': 7.295743077469573}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.2685603893255046, 'lambda': 4.607772879323752, 'beta': 8.947172030830572}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.9599207742985034, 'lambda': 0.5131736593358205, 'beta': 2.1411091396744064}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.558159511622018, 'lambda': 1.1378365484692199, 'beta': 7.228654055768176}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.502388886691984, 'lambda': 3.8653721800035723, 'beta': 3.5837302573538676}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.778066233292135, 'lambda': 0.6700007434823374, 'beta': 6.228569395336475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.020549601071414, 'lambda': 5.256729434609016, 'beta': 7.540484182921938}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.889297224682894, 'lambda': 0.17923329868069215, 'beta': 2.349513585421774}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7849778920241786, 'lambda': 7.287663292064764, 'beta': 9.898444886385452}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9120870300288453, 'lambda': 6.249046140604953, 'beta': 8.348199152135386}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.7213985771031295, 'lambda': 3.9870580357722685, 'beta': 3.152571342776417}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.372532828804193, 'lambda': 2.901279164883215, 'beta': 1.5685010353893691}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.009395632048316, 'lambda': 7.837429610797574, 'beta': 3.538520587993043}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.652311409799874, 'lambda': 9.856356173049905, 'beta': 4.608499271182}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.9524359786943215, 'lambda': 0.8995758603955417, 'beta': 1.7863962575477188}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.421216405065688, 'lambda': 1.9066421300395497, 'beta': 2.5601796589198464}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.693702771776527, 'lambda': 9.923398872965324, 'beta': 9.269361964876653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.5611426107918245, 'lambda': 1.0378776964489755, 'beta': 6.3952817922454805}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.016331951848786, 'lambda': 3.4433035772339604, 'beta': 5.727086185581081}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.594693842653966, 'lambda': 8.922197651273706, 'beta': 9.77358129158408}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.868689486786543, 'lambda': 1.8388437875774866, 'beta': 7.245561162549419}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.2909404488361917, 'lambda': 0.8349773904699354, 'beta': 4.239149448398245}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3696910413183117, 'lambda': 4.830812093782079, 'beta': 8.035753498115891}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.455951670322227, 'lambda': 1.8247520720680421, 'beta': 3.746658104265478}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.886907984918644, 'lambda': 6.591324799921864, 'beta': 9.009560911699207}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.5094893153031619, 'lambda': 0.10967494857347049, 'beta': 0.04965346900860812}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.6851647976119244, 'lambda': 8.232683366497227, 'beta': 6.23730817207083}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.102529568187987, 'lambda': 4.107599187712053, 'beta': 1.6791712250474333}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.508752769673861, 'lambda': 5.721041927583269, 'beta': 0.5028404314583879}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.861068378170841, 'lambda': 4.46553015409655, 'beta': 7.773293258410624}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2829615172788766, 'lambda': 4.8661993293346715, 'beta': 0.3734704320839044}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.3261410928518027, 'lambda': 0.7279652074318621, 'beta': 7.502298481658798}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.574921465991663, 'lambda': 9.85245902222072, 'beta': 6.4864513994126805}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.801872777099418, 'lambda': 5.931373945771402, 'beta': 0.10352097887254663}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.7938633210512975, 'lambda': 2.449436547860401, 'beta': 7.245481608080584}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.612990318305021, 'lambda': 7.352835798672347, 'beta': 5.506040635570963}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.6582618400443607, 'lambda': 5.737776215473924, 'beta': 8.334579861102862}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.227776748859817, 'lambda': 2.9566894310205827, 'beta': 4.9075127431438945}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8720391243336487, 'lambda': 5.412975570365971, 'beta': 0.1961796282430639}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.44713724564256, 'lambda': 0.38098227795168693, 'beta': 9.225561710307263}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.5407655058169167, 'lambda': 1.5695289795984801, 'beta': 4.947694089731907}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.4302315272795427, 'lambda': 5.17403991903428, 'beta': 5.573109417122016}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.07769585900843, 'lambda': 3.2214172175714886, 'beta': 4.655834973343699}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4082063385963963, 'lambda': 2.5205274413822245, 'beta': 7.964567809506434}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.7893217874376279, 'lambda': 2.1232296753095667, 'beta': 1.1349552889217185}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.924685372521584, 'lambda': 9.39670598778114, 'beta': 9.028150537803295}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.5305175240634152, 'lambda': 0.3956161775459399, 'beta': 9.821658443629369}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.627504328606557, 'lambda': 2.389731272381228, 'beta': 5.38672841593961}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.3990165399326795, 'lambda': 3.917436850505011, 'beta': 6.176242926503237}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.676985284448554, 'lambda': 8.725448294171187, 'beta': 2.030575243186651}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.160492994074662, 'lambda': 1.0154601185627499, 'beta': 3.983836088095316}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.92614911970377, 'lambda': 3.709036473481675, 'beta': 4.510188422585028}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.276133881544721, 'lambda': 0.22351854330300625, 'beta': 1.404530256429224}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.9401005616033717, 'lambda': 6.266615923219297, 'beta': 5.3599046778422865}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.408222366361184, 'lambda': 0.30568902118286223, 'beta': 1.58694683392949}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.8769583837987076, 'lambda': 7.582967644996659, 'beta': 7.008091683423711}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.886967562129524, 'lambda': 9.61691757210893, 'beta': 2.3261721719250428}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.505902190435568, 'lambda': 5.795959191816377, 'beta': 9.7898464025678}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.152824637484735, 'lambda': 8.989085283998094, 'beta': 2.0433836408053105}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.919476381452421, 'lambda': 7.441980485897105, 'beta': 6.195709187300188}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.4424405071340765, 'lambda': 4.0152836767349145, 'beta': 9.602796596004413}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.99911439694594, 'lambda': 1.7134383760457217, 'beta': 0.38962608442797086}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.872713659022127, 'lambda': 9.977423259803604, 'beta': 2.9939977307857504}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.7347142780021425, 'lambda': 2.072598214706346, 'beta': 3.3269260885059126}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4530488562464319, 'lambda': 7.308900435992025, 'beta': 6.549963427502781}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.424083015925743, 'lambda': 1.25891471082759, 'beta': 4.8778002277825365}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.310779248444119, 'lambda': 7.965485416591367, 'beta': 7.290151702972106}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.884661066432226, 'lambda': 5.763100162254846, 'beta': 6.42650192972104}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.874991196023226, 'lambda': 8.133980786762239, 'beta': 3.8174054259792856}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.127985775949185, 'lambda': 5.872712524844376, 'beta': 0.4889985148535514}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.7390267215509205, 'lambda': 0.031145200089609526, 'beta': 8.828910969388495}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8606109447133279, 'lambda': 0.1536918075595506, 'beta': 4.832317686859236}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.5184635777586255, 'lambda': 0.3439352932075401, 'beta': 2.2932867013113}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.992345846909867, 'lambda': 1.7445821299024122, 'beta': 0.31777443852033627}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.91711560063899, 'lambda': 6.096283191001421, 'beta': 4.846744300142758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.848040859500315, 'lambda': 2.7118083623368627, 'beta': 7.979162443846941}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.023790832255129, 'lambda': 6.289783254130873, 'beta': 9.910495414946473}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.001696059901391, 'lambda': 4.478664321406081, 'beta': 7.184368671629685}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.535561354822569, 'lambda': 3.6009319051591415, 'beta': 8.440918342512463}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.21873648327779, 'lambda': 4.772231705631183, 'beta': 4.4242090572849975}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.652077783490723, 'lambda': 1.5962059616818047, 'beta': 6.350278246136546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.74990175316474, 'lambda': 2.1903963090581637, 'beta': 6.653757688088726}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.068270661279942, 'lambda': 8.66734310717694, 'beta': 8.171701724508827}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.27909667504224, 'lambda': 6.653818177867009, 'beta': 8.262328539761656}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.663347897232706, 'lambda': 7.133294834525579, 'beta': 1.5370000194548916}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.141513206751094, 'lambda': 3.9292198092780204, 'beta': 6.199487282834255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.211504190157529, 'lambda': 2.8426047122803833, 'beta': 8.88213330192221}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.1457015538605897, 'lambda': 1.9274335043235047, 'beta': 3.4674180765746}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3929730830788034, 'lambda': 3.821542720132607, 'beta': 2.3924603212122673}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.063482080169301, 'lambda': 3.4513914520658773, 'beta': 9.018975877581049}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.205977164546651, 'lambda': 9.865024342924974, 'beta': 1.6717199135029215}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.36841428992836, 'lambda': 9.802734729212704, 'beta': 5.9305261749363725}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.653205000902231, 'lambda': 6.504732146830201, 'beta': 1.5111688153859537}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.078027228358198, 'lambda': 9.27812379734979, 'beta': 2.628326742334112}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.297797176501688, 'lambda': 9.984264080159532, 'beta': 7.603254284044664}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.3212646725740322, 'lambda': 8.173486967335768, 'beta': 4.825286659308262}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.4412382079392, 'lambda': 6.976778723728712, 'beta': 8.561962027556604}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.3558154455248714, 'lambda': 5.324063102836773, 'beta': 3.059262099153439}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.5090737151595635, 'lambda': 9.796515936454567, 'beta': 7.4045731512642075}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.63860701999601, 'lambda': 1.3150437059259334, 'beta': 9.117123828394204}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.335628796060095, 'lambda': 5.98460686620708, 'beta': 3.3295188519127175}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.082101708595333, 'lambda': 6.954221839174311, 'beta': 8.519644428341609}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.89914949328542, 'lambda': 2.2256096782198673, 'beta': 2.5828285637419457}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.960001305956664, 'lambda': 4.22594664381163, 'beta': 7.707123716609057}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.178339517009238, 'lambda': 3.163603115567122, 'beta': 1.5937829316734442}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.666355500837293, 'lambda': 8.340655135885271, 'beta': 2.5183952950817403}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.0655045747956216, 'lambda': 4.512161174745334, 'beta': 4.480714140526434}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.040747874238008, 'lambda': 1.002800723417837, 'beta': 2.4009698184837025}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.833629601009523, 'lambda': 0.7013836846629906, 'beta': 6.66366584089861}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.9569290739079204, 'lambda': 0.7787417434259192, 'beta': 0.4678004718922901}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.321270928963724, 'lambda': 8.333160535300625, 'beta': 6.41405879537036}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.7414794965992, 'lambda': 4.2552005183728125, 'beta': 0.5417351423936434}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.3644933107841215, 'lambda': 9.028592075007047, 'beta': 7.415206764162615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.019900422072804, 'lambda': 4.519076520857926, 'beta': 5.5401199585610605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.009493760931367, 'lambda': 0.583275687836855, 'beta': 6.789755996019483}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.690231372554217, 'lambda': 7.585201900501537, 'beta': 3.2518898739098034}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.520968016618241, 'lambda': 0.019271442701352948, 'beta': 4.051489845116951}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.4069398873536578, 'lambda': 2.617313077213458, 'beta': 2.969780284040816}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.467585223352403, 'lambda': 4.428578857733171, 'beta': 7.272608329094789}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.1220351240692725, 'lambda': 0.1899940668601252, 'beta': 4.636399263947029}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.5421057596217682, 'lambda': 3.2766135788115713, 'beta': 0.49324130682307565}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.788004199224892, 'lambda': 6.9367941381564275, 'beta': 5.448490804489508}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.038562925544316, 'lambda': 1.5017556932906018, 'beta': 5.398186142065238}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.427158648044471, 'lambda': 9.037291219520956, 'beta': 5.444377593472898}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.124479332289452, 'lambda': 6.5727843811882, 'beta': 3.615960216444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.04283556723461, 'lambda': 0.7797248603668006, 'beta': 0.20699603107113607}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.3289557390544475, 'lambda': 0.7319271855390963, 'beta': 7.064310204164452}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.693102599137711, 'lambda': 5.627222472900028, 'beta': 8.87887353820858}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1908440054022877, 'lambda': 1.2575241159586292, 'beta': 0.7471079800472991}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.246485660517341, 'lambda': 6.737202183084923, 'beta': 5.568676657120022}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.828825050257404, 'lambda': 9.617015244235288, 'beta': 1.755628450114638}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.886864060838228, 'lambda': 7.625454100574686, 'beta': 7.375167282326025}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.139771876789541, 'lambda': 6.88701846733863, 'beta': 3.9523983369718616}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9686871655862639, 'lambda': 0.2167249433421614, 'beta': 6.32069415181448}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.529668744237278, 'lambda': 8.568165059924961, 'beta': 0.27700052074443926}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.628196404357345, 'lambda': 6.068869912152582, 'beta': 9.924624949277213}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.722005246324729, 'lambda': 9.242240293725043, 'beta': 3.8650760351531}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.8496895286253388, 'lambda': 6.871819183818033, 'beta': 6.20541606271826}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.446858155304644, 'lambda': 6.160634413116019, 'beta': 4.555789116369107}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.109731433893854, 'lambda': 9.837979995979149, 'beta': 4.932361048124077}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.9733783338663615, 'lambda': 7.215541288583539, 'beta': 3.883408438709619}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.722523254285111, 'lambda': 0.5060012105875511, 'beta': 9.430748140203258}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.90273526039197, 'lambda': 1.2152503492242461, 'beta': 3.164803252182251}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.588003294793444, 'lambda': 0.881469486807055, 'beta': 1.475720875383174}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.354568814223489, 'lambda': 8.560411961036094, 'beta': 7.078590337753662}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.1918694827772613, 'lambda': 5.0164903414831326, 'beta': 2.8923571649525357}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.943441866520732, 'lambda': 1.2820801817309013, 'beta': 7.9777655436921275}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.38613984432239, 'lambda': 2.680948432125839, 'beta': 6.387869258671589}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.652387951011451, 'lambda': 3.7685410216808632, 'beta': 7.0298569653776655}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.476693123484903, 'lambda': 7.383569457704402, 'beta': 5.129764111634393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1384313683767595, 'lambda': 3.660346854584179, 'beta': 6.636495253356305}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.295469897031822, 'lambda': 7.563175061602129, 'beta': 4.471452082599221}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.144214322396303, 'lambda': 9.4350207725262, 'beta': 8.056344457093045}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.178097152020783, 'lambda': 4.368232638785226, 'beta': 7.812973186561064}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.8070621191921346, 'lambda': 9.007434544606912, 'beta': 5.175345942837777}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.291831140927875, 'lambda': 3.2687930173643864, 'beta': 5.546894024219395}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.374957655669089, 'lambda': 5.948073603180539, 'beta': 6.193758676836952}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.900975111289333, 'lambda': 1.5492453617448687, 'beta': 0.08749360883148594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.134344756654681, 'lambda': 3.846271314046658, 'beta': 1.8873911324750148}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.735284583630374, 'lambda': 8.12029821626075, 'beta': 1.2158253105793937}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.469690848371646, 'lambda': 0.4789685609006722, 'beta': 8.297694992871115}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.188292964914764, 'lambda': 5.894332079786867, 'beta': 9.74276833753114}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.66085015657397, 'lambda': 3.184654390629648, 'beta': 8.676820825301757}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.8334393043800723, 'lambda': 3.2152591902996983, 'beta': 9.669329362596713}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.969927570801201, 'lambda': 7.081297955665996, 'beta': 5.887836859818611}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.180645967324068, 'lambda': 4.901095394588908, 'beta': 0.12014933434324471}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.129627327634105, 'lambda': 0.19199858370468337, 'beta': 1.9045925371351902}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.29277275853693, 'lambda': 7.472179392543053, 'beta': 7.624588527524121}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.438499531251816, 'lambda': 8.481481949102411, 'beta': 8.019462047528453}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.2644986801001146, 'lambda': 4.104519385520176, 'beta': 4.917029626903644}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.145322277454236, 'lambda': 3.587390672060886, 'beta': 0.3099447740539729}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.54760565687884, 'lambda': 4.537471584518529, 'beta': 0.3049692367815937}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.7113838361255873, 'lambda': 0.7347799462880167, 'beta': 9.696156263019093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.7042233638209991, 'lambda': 5.83064435129784, 'beta': 6.18474119474114}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.19699975400574, 'lambda': 1.874781636916426, 'beta': 0.28985850846339867}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.474727115588898, 'lambda': 0.1770700131885039, 'beta': 6.344476349440113}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.159191790432847, 'lambda': 4.749528465521636, 'beta': 6.417836733811456}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 6.427770795666784, 'lambda': 8.966288857176764, 'beta': 1.4780080074857005}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.404279154255411, 'lambda': 0.5641396375524066, 'beta': 5.288385098679653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.349362440862, 'lambda': 3.328177909659992, 'beta': 0.9789702489227714}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.84785889507235, 'lambda': 9.136314329531164, 'beta': 7.469287161325221}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.063492478551333, 'lambda': 6.810184201744493, 'beta': 5.932310377266758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.088993569005572, 'lambda': 3.274815777376282, 'beta': 0.08978763306106141}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7800977043890973, 'lambda': 7.932738480851841, 'beta': 0.10673957184249794}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.43766809529141, 'lambda': 3.8148306812870825, 'beta': 7.56344646080538}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.983668066542304, 'lambda': 4.753708159954164, 'beta': 4.492105109559271}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.175003764438998, 'lambda': 1.189133146073289, 'beta': 5.147523509315597}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.8131037923876985, 'lambda': 2.321398537926461, 'beta': 2.493134649812534}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.524062685197878, 'lambda': 3.669503054223917, 'beta': 1.7516813009849375}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 9.332845226626688, 'lambda': 5.103149716912436, 'beta': 2.307349500808219}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.3147377051738252, 'lambda': 9.200344530615816, 'beta': 8.758204189180567}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.972588015960435, 'lambda': 3.506419991159717, 'beta': 8.682125966707886}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.295643401119773, 'lambda': 3.7581436178562564, 'beta': 3.0486951872054124}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.7897364329382324, 'lambda': 9.115232590060263, 'beta': 3.3140226753622914}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.5778559104419516, 'lambda': 6.609612687105591, 'beta': 7.603745095779521}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.07512195970185, 'lambda': 5.906446334855007, 'beta': 6.759308567329843}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.129057949025317, 'lambda': 2.8979506345589465, 'beta': 2.198446754422003}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.513741291830911, 'lambda': 3.094335746749647, 'beta': 6.508679367316828}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.755817616571641, 'lambda': 4.869463657682878, 'beta': 5.154548160281987}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 4.954025492305323, 'lambda': 7.147391286949954, 'beta': 1.5261581916667222}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.608332706819556, 'lambda': 1.795828956529285, 'beta': 2.396809474885803}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.0739961611260942, 'lambda': 8.775902183496111, 'beta': 4.826892778472356}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.749788264801439, 'lambda': 2.2316397832966506, 'beta': 5.9013267090035555}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 2.487456569705656, 'lambda': 2.0812173151014166, 'beta': 5.800822345136956}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 8.647548852755966, 'lambda': 1.3536422646212054, 'beta': 5.2728611494738455}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.1771973863081215, 'lambda': 9.953180014497224, 'beta': 5.1478388854226145}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 5.313070664961249, 'lambda': 2.4496389756216486, 'beta': 9.694892641092952}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 0.008809544126663349, 'lambda': 8.657526891234317, 'beta': 2.9320533700544082}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 7.436686375910597, 'lambda': 1.3860956391011592, 'beta': 8.296220793259565}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 1.0120976511015523, 'lambda': 5.692195505642009, 'beta': 4.610451602369015}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'alpha': 3.533662566127118, 'lambda': 2.938717109531032, 'beta': 8.057086756768875}\"]"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: U = alpha * max(0, split_self - 3*token_self) - lambda * max(0, 3*token_self - split_self) - beta * max(0, split_opp - split_self)\nSummary: A prospect theory-inspired model where responders evaluate offers relative to their contribution-based fair share (3*token_self). Utility combines gain/loss sensitivity with inequity aversion. Gains above fair share are weighted by alpha, losses below by lambda (loss aversion), and disadvantageous inequity (opponent > self) by beta. Parameters have bounded ranges for identifiability.\nTarget Variable: accept\nPrediction Type: utility"
  ]
}