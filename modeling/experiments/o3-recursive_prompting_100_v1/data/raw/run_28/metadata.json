{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameters can be recovered well.\n\nFirst, I need to identify which variables are relevant. Since we're predicting 'accept', which is the responder's decision, we should consider variables that influence their perception of fairness and utility. The key variables here might be token_self, token_opp, split_self, split_opp, combined_earning, and trial_type. Trial_role is important because we only consider when the participant is the responder (trial_role=1).\n\nThe model should calculate the utility of accepting the proposal. If the utility is positive, the participant is more likely to accept. The utility function should incorporate elements of fairness, perhaps comparing the proposed split to what's considered fair based on their own contribution (token_self) and the opponent's (token_opp).\n\nIn prospect theory, people evaluate outcomes relative to a reference point. Here, the reference point could be the fair share based on their contribution. For example, if the participant contributed token_self tokens, each worth \u00a33, their fair share might be 3*token_self. The proposed split_self is compared to this reference.\n\nLoss aversion is another aspect. Losing out on their fair share might have a stronger effect than gaining more. So, the model could include a parameter (lambda) that scales the loss relative to the reference point.\n\nInequity aversion is also important. Participants might dislike unequal splits beyond what's fair. The difference between split_opp and split_self, scaled by the combined earnings, could represent this. A parameter beta could weight this aversion.\n\nTrial_type indicates whether the split is equal, opponent more, or participant more. This might modulate the inequity aversion. For example, if the participant contributed more (trial_type=3), they might be more sensitive to inequity, so beta could be scaled in such cases.\n\nPutting this together, the utility function could be:\n\nUtility = (split_self - reference) - lambda*(reference - split_self) - beta*(split_opp - split_self)/combined_earning * trial_type_modifier\n\nHere, the reference is 3*token_self. The first term is the gain if split_self is above the reference, the second term is the loss (scaled by lambda) if below. The third term is the inequity aversion, adjusted by trial_type.\n\nFor trial_type_modifier, when trial_type is 3 (participant contributed more), we might increase beta's effect. The instruction mentions beta_effective = beta * [1 + trial_type*(trial_type==3)], but trial_type is 1,2,3. So perhaps when trial_type is 3, multiply beta by a factor, say 1 + theta, where theta is a learnable parameter. Alternatively, use an indicator function.\n\nWait, the instruction says: \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens: \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\". Hmm, trial_type is 3 in that case, so trial_type*(trial_type==3) would be 3 when trial_type is 3, else 0. So beta_effective becomes beta*(1+3) = 4*beta in trial_type=3. But that might be too strong. Alternatively, maybe it's a typo and should be 1 + (trial_type==3)*theta, where theta is a learnable scaling factor. But the instruction says to make beta_effective = beta * [1 + trial_type*(trial_type==3)], which when trial_type=3, becomes beta*(1+3*1)=4*beta. But trial_type is 1,2,3. So for trial_type=3, it's 4*beta, others just beta. That's a fixed scaling, but maybe the instruction wants a learnable parameter here. However, the example in the instructions uses trial_type*(trial_type==3), which seems to be a way to apply a multiplier only when trial_type is 3. But perhaps in the model, we can represent this as beta multiplied by (1 + theta * I(trial_type==3)), where theta is a learnable parameter. But the instruction says \"Context-Contingent Inequality Penalty\" with beta_effective = beta * [1 + trial_type*(trial_type==3)], which when trial_type=3, trial_type is 3, so 1 + 3*1=4, making beta_effective=4*beta. But trial_type is given as 1,2,3. So this would make the multiplier 4x for trial_type=3. However, this might not be a learnable parameter but a fixed scaling. But the instruction says \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens\", so perhaps this is a fixed multiplier based on trial_type, not a learnable parameter. Alternatively, maybe theta is a learnable parameter that scales the trial_type effect. But the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which seems to be a fixed scaling. However, in the model, perhaps we can introduce a parameter theta that scales this. But given the parameter recovery focus, maybe it's better to have beta itself be scaled in that condition. Alternatively, the instruction might have intended a learnable parameter here. Hmm, this needs clarification.\n\nAlternatively, the model could have beta multiplied by an indicator function for trial_type=3, scaled by a parameter theta. For example: beta * (1 + theta * (trial_type==3)). But that would introduce theta as a learnable parameter. However, the instruction says \"Confine \u03bb to [0,8], \u03ba to [0,3]\", so maybe theta is not part of this model. Let me recheck the instructions.\n\nThe instructions for Run 5/200 mention:\n\n- \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\" which when trial_type is 3, trial_type*(trial_type==3) is 3*1=3, so \u03b2_effective becomes \u03b2*(1+3)=4\u03b2. But trial_type is 1,2,3. So this would mean that in trial_type=3, \u03b2 is multiplied by 4, otherwise remains \u03b2. But this seems like a fixed scaling, not a learnable parameter. However, in the model, perhaps this is a way to incorporate the trial_type effect without adding a new parameter. But the instruction also says \"Context-Contingent Inequality Penalty\" and \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens\". So in the model, when trial_type is 3 (participant contributed more), the beta parameter is scaled by 4. But this is a fixed scaling, not a learnable parameter. However, in the model specification, perhaps we need to implement this as part of the utility function.\n\nBut the user's answer needs to have learnable parameters with bounds. So maybe beta is a learnable parameter, and in the utility function, when trial_type is 3, beta is multiplied by a factor (like 3, as per the example), but that factor is fixed. However, the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which for trial_type=3 becomes \u03b2*(1+3)=4\u03b2. But this would be a fixed scaling, not a learnable parameter. However, the model needs learnable parameters. So perhaps the instruction is suggesting that beta is multiplied by trial_type when it's 3, but that would require a new parameter. Alternatively, maybe the model uses trial_type as a categorical variable and has different beta weights for each type. But that complicates the model.\n\nAlternatively, the model could have a single beta parameter, and in the utility function, the inequity term is scaled by (1 + (trial_type==3)*theta), where theta is a learnable parameter. This way, when trial_type is 3, the beta is multiplied by (1 + theta), allowing the model to learn how much to amplify beta in that case. This introduces theta as a learnable parameter, which would need bounds.\n\nBut the instruction says \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens: \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\". If trial_type is 3, then trial_type*(trial_type==3) is 3*1=3, so \u03b2_effective = \u03b2*(1+3)=4\u03b2. So this is a fixed multiplier of 4 when trial_type is 3. But this is not a learnable parameter, just a fixed scaling. However, in the model, perhaps this is part of the utility function's structure, not a parameter. So the model would have beta as a learnable parameter, and in trial_type=3, the beta is multiplied by 4. But this seems arbitrary. Alternatively, maybe the instruction intended to have a learnable parameter here, like theta, which scales the trial_type effect. For example, beta_effective = beta * (1 + theta*(trial_type==3)). Then theta is a learnable parameter with bounds, say [0, 2]. This allows the model to learn how much to amplify beta in trial_type=3.\n\nBut given the previous example and the instructions, perhaps the model should include beta as a learnable parameter, and in the utility function, when trial_type is 3, the beta is multiplied by a factor. However, the exact implementation needs to be clarified.\n\nPutting this aside for a moment, let's structure the utility function based on the instructions:\n\nThe utility U is composed of three parts:\n\n1. Gain/Loss relative to reference (3*token_self), with loss aversion (lambda) and gain sensitivity (kappa).\n2. Inequity aversion term, which is the difference between split_opp and split_self, scaled by combined_earning and modulated by trial_type.\n\nSo:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta_effective * max(split_opp - split_self, 0) / (combined_earning / 10)\n\nHere, beta_effective is beta multiplied by a factor when trial_type is 3. As per the instruction, beta_effective = beta * [1 + trial_type*(trial_type==3)]. But trial_type is 3 in that case, so beta_effective = beta * (1 + 3) = 4*beta. So the inequity term becomes 4*beta * (split_opp - split_self)_+ / (combined_earning/10) when trial_type=3, else beta * (split_opp - split_self)_+ / (combined_earning/10).\n\nBut trial_type is 1, 2, or 3. So the multiplier is 4 only when trial_type=3. This is a fixed scaling, not a learnable parameter. However, in the model, this would be part of the utility calculation, not a parameter. So beta remains a single learnable parameter, and the scaling is built into the model structure.\n\nThe other parameters are kappa (gain sensitivity), lambda (loss aversion), and beta (inequity aversion). The instruction mentions fixing the curvature parameters (sigma and rho) to prospect theory values, but in the utility function above, the gains and losses are linear (max functions), so perhaps sigma and rho are not needed here. The instruction says to apply fixed behavioral economics priors: kappa gains are linear (sigma=1.0 locked), lambda losses with convex (rho=1.33). But in the utility function as written, the gains and losses are linear. So maybe the model doesn't include curvature parameters, simplifying it.\n\nThe reference is fixed at 3*token_self, eliminating the gamma parameter. The loss term is scaled by lambda, and the gain term by kappa. The inequity term is scaled by beta, with a multiplier when trial_type=3.\n\nNow, the utility function would be:\n\nU = \u03ba * (split_self - reference)_+ - \u03bb * (reference - split_self)_+ - \u03b2 * [1 + 3*(trial_type==3)] * (split_opp - split_self)_+ / (combined_earning / 10)\n\nHere, (x)_+ is max(x, 0). The term [1 + 3*(trial_type==3)] becomes 4 when trial_type is 3, else 1. This amplifies beta by 4x in trial_type=3.\n\nBut wait, the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which when trial_type=3, trial_type is 3, so 1 + 3*1=4. So that's correct.\n\nThe combined_earning is divided by 10 to scale it, as per the instruction's \"Neuroeconomic Compression\" point 3.\n\nNow, the parameters are:\n\n- \u03ba (kappa): gain sensitivity, bounded [0, 3]\n- \u03bb (lambda): loss aversion, bounded [0, 8]\n- \u03b2 (beta): inequity aversion, bounded [0, ?], perhaps [0, 5] since the term is divided by combined_earning/10.\n\nThese parameters need to have specified bounds. The instruction says to confine \u03bb to [0,8], \u03ba to [0,3]. Beta's range isn't specified, but since the inequity term is divided by (combined_earning/10), which for combined_earning = 3*(token_self + token_opp), say token_self and token_opp average around 10 each, combined_earning is 60, so divided by 10 gives 6. So the term (split_opp - split_self)_+ /6. If split_opp - split_self is up to, say, 30 (if combined_earning is 60 and split_opp is 45, split_self 15), then 30/6=5. So beta * 5. If beta is up to 5, then the term could be 25. But the other terms (gain and loss) are in pounds. For example, if split_self is 20, reference is 15 (token_self=5), then gain is 5*\u03ba. Loss if split_self is 10, reference 15: 5*\u03bb.\n\nSo to balance the terms, beta's scale should be such that the inequity term is comparable. If beta is in [0,5], then the maximum inequity term contribution would be 5 * 5 =25 (if beta=5 and term=5). But the gain/loss terms could be up to, say, 15*3=45 (if split_self is 30, reference 15, \u03ba=3). So the parameters' ranges need to be set so that all terms contribute meaningfully.\n\nBut according to the instruction, the model should have parameters with finite bounds. So for beta, perhaps [0, 10], but the exact value can be adjusted.\n\nNow, the utility U is used to predict the probability of accepting via a logistic function: P(accept=1) = 1 / (1 + exp(-U)). The decision is more likely when U > 0.\n\nThe variables in the model are:\n\n- split_self (data)\n- split_opp (data)\n- token_self (data)\n- combined_earning (data)\n- trial_type (data)\n- reference (calculated as 3*token_self)\n- (split_self - reference)_+ (calculated gain)\n- (reference - split_self)_+ (calculated loss)\n- (split_opp - split_self)_+ (calculated inequity)\n- trial_type==3 (indicator for amplification)\n\nThe learnable parameters are kappa, lambda, beta.\n\nNow, writing the formal model:\n\n<MODEL>\nU = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n</MODEL>\n\nVariables:\n\n- \u03ba (kappa): gain sensitivity, [0, 3]\n- \u03bb (lambda): loss aversion, [0, 8]\n- \u03b2 (beta): inequity aversion, [0, maybe 10]\n- Other variables are from data or calculated.\n\nThe target variable is 'accept'.\n\nNow, the variable descriptions in JSON format:\n\nFor each variable in the model, including parameters and data variables.\n\nLearnable parameters: kappa, lambda, beta.\n\nData variables: split_self, token_self, split_opp, trial_type, combined_earning.\n\nCalculated variables: reference, the max terms, and the trial_type indicator.\n\nBut in the variables section, we need to list all variables used in the model, including those from data, calculated, and learnable parameters.\n\nSo:\n\nVariables:\n\n- \u03ba (kappa): learnable, range [0,3]\n- \u03bb (lambda): learnable, range [0,8]\n- \u03b2 (beta): learnable, range [0,10] (inclusive)\n- split_self: data, float64\n- token_self: data, int64\n- split_opp: data, float64\n- trial_type: data, int64\n- combined_earning: data, int64\n- max terms: calculated\n- reference: calculated\n\nBut in the JSON, we need to describe each variable used in the model. However, the model's U is expressed in terms of these variables, so each variable in the formula must be listed.\n\nBut the max functions are operations, not variables. So the variables in the formula are:\n\n- split_self\n- token_self\n- split_opp\n- trial_type\n- combined_earning\n- \u03ba\n- \u03bb\n- \u03b2\n\nThe other terms (max(...)) are calculated from these variables.\n\nSo in the variables section, we list:\n\n- split_self: source=data\n- token_self: source=data\n- split_opp: source=data\n- trial_type: source=data\n- combined_earning: source=data\n- \u03ba: learnable, range [0,3]\n- \u03bb: learnable, range [0,8]\n- \u03b2: learnable, range [0,10]\n\nNow, the JSON structure:\n\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity parameter for outcomes above the reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below the reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter, amplified when participant contributed more\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution type (1=equal, 2=opponent more, 3=participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nThe summary should concisely describe the model:\n\nA hybrid model combining prospect theory and inequity aversion. Participants evaluate gains and losses relative to their contribution-based reference point (3\u00d7token_self), with loss aversion (\u03bb) and gain sensitivity (\u03ba). Inequity aversion (\u03b2) is amplified when participants contributed more tokens (trial_type=3). Fixed neuroeconomic priors linearize gains and convexify losses.\n\nNow, putting it all together.\n</think>\n\n<MODEL>\nU = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nHybrid prospect theory model with contribution-based reference point (3\u00d7token_self), loss aversion (\u03bb), gain sensitivity (\u03ba), and context-modulated inequity aversion (\u03b2). Losses are evaluated relative to contribution value with convex weighting (\u03c1=1.33 locked). Inequity penalties are amplified 4x when participants contributed more tokens (trial_type=3). Combines outcome valuation with neuroeconomically constrained parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference = 3 * token_self\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(split_opp - split_self, 0)\n\n        trial_type_multiplier = 1 + 3 * (trial_type == 3)\n\n        utility = kappa * gain - lambda_ * loss - beta * trial_type_multiplier * inequity / (combined_earning / 10)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 60, \"split_opp\": 30.0, \"split_self\": 30.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 30.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 30.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 60, \"split_opp\": 30.0, \"split_self\": 30.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 30.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 30.0}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 60, \"split_opp\": 30.0, \"split_self\": 30.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 30.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 30.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744017010.923251
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference = 3 * token_self\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(split_opp - split_self, 0)\n\n        beta_multiplier = 1 + 3 * (trial_type == 3)\n\n        utility = kappa * gain - lambda_ * loss - beta * beta_multiplier * inequity / (combined_earning / 10)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 36, \"split_opp\": 18.0, \"split_self\": 18.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 18.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 18.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 5, \"combined_earning\": 36, \"split_opp\": 21.6, \"split_self\": 14.4, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 14.4}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 7, \"combined_earning\": 36, \"split_opp\": 14.4, \"split_self\": 21.6, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 21.6, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 21.6}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744017014.97414
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference = 3 * token_self\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(split_opp - split_self, 0)\n\n        beta_multiplier = 1 + 3 * (trial_type == 3)\n\n        U = kappa * gain - lambda_ * loss - beta * beta_multiplier * inequity / (combined_earning / 10)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 20.0, \"split_self\": 10.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 10.0}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 8, \"combined_earning\": 30, \"split_opp\": 10.0, \"split_self\": 20.0, \"splitperc_opp\": 33, \"splitperc_self\": 67, \"accept\": 1.0, \"accepted_amount\": 20.0, \"accepted_perc\": 67.0, \"proposed_perc\": 67.0, \"proposed_amount\": 20.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744017019.121687
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744017019.632643
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744017020.070101
    }
  ],
  "learnable_parameters": {
    "kappa": {
      "description": "Gain sensitivity for outcomes above reference contribution value",
      "range": {
        "min": 0,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion parameter for outcomes below reference contribution value",
      "range": {
        "min": 0,
        "max": 8,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Base inequity aversion parameter, amplified 4x when participant contributed more tokens",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)",
  "variable_descriptions": {
    "kappa": {
      "description": "Gain sensitivity for outcomes above reference contribution value",
      "range": {
        "min": 0,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion parameter for outcomes below reference contribution value",
      "range": {
        "min": 0,
        "max": 8,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Base inequity aversion parameter, amplified 4x when participant contributed more tokens",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in pounds",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token contribution (reference anchor)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Opponent's proposed share in pounds",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "Contribution context (3=participant contributed more)",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total pot size for trial scaling",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "Hybrid prospect theory model with contribution-based reference point (3\u00d7token_self), loss aversion (\u03bb), gain sensitivity (\u03ba), and context-modulated inequity aversion (\u03b2). Losses are evaluated relative to contribution value with convex weighting (\u03c1=1.33 locked). Inequity penalties are amplified 4x when participants contributed more tokens (trial_type=3). Combines outcome valuation with neuroeconomically constrained parameters.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameters can be recovered well.\n\nFirst, I need to identify which variables are relevant. Since we're predicting 'accept', which is the responder's decision, we should consider variables that influence their perception of fairness and utility. The key variables here might be token_self, token_opp, split_self, split_opp, combined_earning, and trial_type. Trial_role is important because we only consider when the participant is the responder (trial_role=1).\n\nThe model should calculate the utility of accepting the proposal. If the utility is positive, the participant is more likely to accept. The utility function should incorporate elements of fairness, perhaps comparing the proposed split to what's considered fair based on their own contribution (token_self) and the opponent's (token_opp).\n\nIn prospect theory, people evaluate outcomes relative to a reference point. Here, the reference point could be the fair share based on their contribution. For example, if the participant contributed token_self tokens, each worth \u00a33, their fair share might be 3*token_self. The proposed split_self is compared to this reference.\n\nLoss aversion is another aspect. Losing out on their fair share might have a stronger effect than gaining more. So, the model could include a parameter (lambda) that scales the loss relative to the reference point.\n\nInequity aversion is also important. Participants might dislike unequal splits beyond what's fair. The difference between split_opp and split_self, scaled by the combined earnings, could represent this. A parameter beta could weight this aversion.\n\nTrial_type indicates whether the split is equal, opponent more, or participant more. This might modulate the inequity aversion. For example, if the participant contributed more (trial_type=3), they might be more sensitive to inequity, so beta could be scaled in such cases.\n\nPutting this together, the utility function could be:\n\nUtility = (split_self - reference) - lambda*(reference - split_self) - beta*(split_opp - split_self)/combined_earning * trial_type_modifier\n\nHere, the reference is 3*token_self. The first term is the gain if split_self is above the reference, the second term is the loss (scaled by lambda) if below. The third term is the inequity aversion, adjusted by trial_type.\n\nFor trial_type_modifier, when trial_type is 3 (participant contributed more), we might increase beta's effect. The instruction mentions beta_effective = beta * [1 + trial_type*(trial_type==3)], but trial_type is 1,2,3. So perhaps when trial_type is 3, multiply beta by a factor, say 1 + theta, where theta is a learnable parameter. Alternatively, use an indicator function.\n\nWait, the instruction says: \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens: \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\". Hmm, trial_type is 3 in that case, so trial_type*(trial_type==3) would be 3 when trial_type is 3, else 0. So beta_effective becomes beta*(1+3) = 4*beta in trial_type=3. But that might be too strong. Alternatively, maybe it's a typo and should be 1 + (trial_type==3)*theta, where theta is a learnable scaling factor. But the instruction says to make beta_effective = beta * [1 + trial_type*(trial_type==3)], which when trial_type=3, becomes beta*(1+3*1)=4*beta. But trial_type is 1,2,3. So for trial_type=3, it's 4*beta, others just beta. That's a fixed scaling, but maybe the instruction wants a learnable parameter here. However, the example in the instructions uses trial_type*(trial_type==3), which seems to be a way to apply a multiplier only when trial_type is 3. But perhaps in the model, we can represent this as beta multiplied by (1 + theta * I(trial_type==3)), where theta is a learnable parameter. But the instruction says \"Context-Contingent Inequality Penalty\" with beta_effective = beta * [1 + trial_type*(trial_type==3)], which when trial_type=3, trial_type is 3, so 1 + 3*1=4, making beta_effective=4*beta. But trial_type is given as 1,2,3. So this would make the multiplier 4x for trial_type=3. However, this might not be a learnable parameter but a fixed scaling. But the instruction says \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens\", so perhaps this is a fixed multiplier based on trial_type, not a learnable parameter. Alternatively, maybe theta is a learnable parameter that scales the trial_type effect. But the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which seems to be a fixed scaling. However, in the model, perhaps we can introduce a parameter theta that scales this. But given the parameter recovery focus, maybe it's better to have beta itself be scaled in that condition. Alternatively, the instruction might have intended a learnable parameter here. Hmm, this needs clarification.\n\nAlternatively, the model could have beta multiplied by an indicator function for trial_type=3, scaled by a parameter theta. For example: beta * (1 + theta * (trial_type==3)). But that would introduce theta as a learnable parameter. However, the instruction says \"Confine \u03bb to [0,8], \u03ba to [0,3]\", so maybe theta is not part of this model. Let me recheck the instructions.\n\nThe instructions for Run 5/200 mention:\n\n- \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\" which when trial_type is 3, trial_type*(trial_type==3) is 3*1=3, so \u03b2_effective becomes \u03b2*(1+3)=4\u03b2. But trial_type is 1,2,3. So this would mean that in trial_type=3, \u03b2 is multiplied by 4, otherwise remains \u03b2. But this seems like a fixed scaling, not a learnable parameter. However, in the model, perhaps this is a way to incorporate the trial_type effect without adding a new parameter. But the instruction also says \"Context-Contingent Inequality Penalty\" and \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens\". So in the model, when trial_type is 3 (participant contributed more), the beta parameter is scaled by 4. But this is a fixed scaling, not a learnable parameter. However, in the model specification, perhaps we need to implement this as part of the utility function.\n\nBut the user's answer needs to have learnable parameters with bounds. So maybe beta is a learnable parameter, and in the utility function, when trial_type is 3, beta is multiplied by a factor (like 3, as per the example), but that factor is fixed. However, the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which for trial_type=3 becomes \u03b2*(1+3)=4\u03b2. But this would be a fixed scaling, not a learnable parameter. However, the model needs learnable parameters. So perhaps the instruction is suggesting that beta is multiplied by trial_type when it's 3, but that would require a new parameter. Alternatively, maybe the model uses trial_type as a categorical variable and has different beta weights for each type. But that complicates the model.\n\nAlternatively, the model could have a single beta parameter, and in the utility function, the inequity term is scaled by (1 + (trial_type==3)*theta), where theta is a learnable parameter. This way, when trial_type is 3, the beta is multiplied by (1 + theta), allowing the model to learn how much to amplify beta in that case. This introduces theta as a learnable parameter, which would need bounds.\n\nBut the instruction says \"Amplify \u03b2 sensitivity in trials where participants contributed more tokens: \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\". If trial_type is 3, then trial_type*(trial_type==3) is 3*1=3, so \u03b2_effective = \u03b2*(1+3)=4\u03b2. So this is a fixed multiplier of 4 when trial_type is 3. But this is not a learnable parameter, just a fixed scaling. However, in the model, perhaps this is part of the utility function's structure, not a parameter. So the model would have beta as a learnable parameter, and in trial_type=3, the beta is multiplied by 4. But this seems arbitrary. Alternatively, maybe the instruction intended to have a learnable parameter here, like theta, which scales the trial_type effect. For example, beta_effective = beta * (1 + theta*(trial_type==3)). Then theta is a learnable parameter with bounds, say [0, 2]. This allows the model to learn how much to amplify beta in trial_type=3.\n\nBut given the previous example and the instructions, perhaps the model should include beta as a learnable parameter, and in the utility function, when trial_type is 3, the beta is multiplied by a factor. However, the exact implementation needs to be clarified.\n\nPutting this aside for a moment, let's structure the utility function based on the instructions:\n\nThe utility U is composed of three parts:\n\n1. Gain/Loss relative to reference (3*token_self), with loss aversion (lambda) and gain sensitivity (kappa).\n2. Inequity aversion term, which is the difference between split_opp and split_self, scaled by combined_earning and modulated by trial_type.\n\nSo:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta_effective * max(split_opp - split_self, 0) / (combined_earning / 10)\n\nHere, beta_effective is beta multiplied by a factor when trial_type is 3. As per the instruction, beta_effective = beta * [1 + trial_type*(trial_type==3)]. But trial_type is 3 in that case, so beta_effective = beta * (1 + 3) = 4*beta. So the inequity term becomes 4*beta * (split_opp - split_self)_+ / (combined_earning/10) when trial_type=3, else beta * (split_opp - split_self)_+ / (combined_earning/10).\n\nBut trial_type is 1, 2, or 3. So the multiplier is 4 only when trial_type=3. This is a fixed scaling, not a learnable parameter. However, in the model, this would be part of the utility calculation, not a parameter. So beta remains a single learnable parameter, and the scaling is built into the model structure.\n\nThe other parameters are kappa (gain sensitivity), lambda (loss aversion), and beta (inequity aversion). The instruction mentions fixing the curvature parameters (sigma and rho) to prospect theory values, but in the utility function above, the gains and losses are linear (max functions), so perhaps sigma and rho are not needed here. The instruction says to apply fixed behavioral economics priors: kappa gains are linear (sigma=1.0 locked), lambda losses with convex (rho=1.33). But in the utility function as written, the gains and losses are linear. So maybe the model doesn't include curvature parameters, simplifying it.\n\nThe reference is fixed at 3*token_self, eliminating the gamma parameter. The loss term is scaled by lambda, and the gain term by kappa. The inequity term is scaled by beta, with a multiplier when trial_type=3.\n\nNow, the utility function would be:\n\nU = \u03ba * (split_self - reference)_+ - \u03bb * (reference - split_self)_+ - \u03b2 * [1 + 3*(trial_type==3)] * (split_opp - split_self)_+ / (combined_earning / 10)\n\nHere, (x)_+ is max(x, 0). The term [1 + 3*(trial_type==3)] becomes 4 when trial_type is 3, else 1. This amplifies beta by 4x in trial_type=3.\n\nBut wait, the instruction says \"\u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]\", which when trial_type=3, trial_type is 3, so 1 + 3*1=4. So that's correct.\n\nThe combined_earning is divided by 10 to scale it, as per the instruction's \"Neuroeconomic Compression\" point 3.\n\nNow, the parameters are:\n\n- \u03ba (kappa): gain sensitivity, bounded [0, 3]\n- \u03bb (lambda): loss aversion, bounded [0, 8]\n- \u03b2 (beta): inequity aversion, bounded [0, ?], perhaps [0, 5] since the term is divided by combined_earning/10.\n\nThese parameters need to have specified bounds. The instruction says to confine \u03bb to [0,8], \u03ba to [0,3]. Beta's range isn't specified, but since the inequity term is divided by (combined_earning/10), which for combined_earning = 3*(token_self + token_opp), say token_self and token_opp average around 10 each, combined_earning is 60, so divided by 10 gives 6. So the term (split_opp - split_self)_+ /6. If split_opp - split_self is up to, say, 30 (if combined_earning is 60 and split_opp is 45, split_self 15), then 30/6=5. So beta * 5. If beta is up to 5, then the term could be 25. But the other terms (gain and loss) are in pounds. For example, if split_self is 20, reference is 15 (token_self=5), then gain is 5*\u03ba. Loss if split_self is 10, reference 15: 5*\u03bb.\n\nSo to balance the terms, beta's scale should be such that the inequity term is comparable. If beta is in [0,5], then the maximum inequity term contribution would be 5 * 5 =25 (if beta=5 and term=5). But the gain/loss terms could be up to, say, 15*3=45 (if split_self is 30, reference 15, \u03ba=3). So the parameters' ranges need to be set so that all terms contribute meaningfully.\n\nBut according to the instruction, the model should have parameters with finite bounds. So for beta, perhaps [0, 10], but the exact value can be adjusted.\n\nNow, the utility U is used to predict the probability of accepting via a logistic function: P(accept=1) = 1 / (1 + exp(-U)). The decision is more likely when U > 0.\n\nThe variables in the model are:\n\n- split_self (data)\n- split_opp (data)\n- token_self (data)\n- combined_earning (data)\n- trial_type (data)\n- reference (calculated as 3*token_self)\n- (split_self - reference)_+ (calculated gain)\n- (reference - split_self)_+ (calculated loss)\n- (split_opp - split_self)_+ (calculated inequity)\n- trial_type==3 (indicator for amplification)\n\nThe learnable parameters are kappa, lambda, beta.\n\nNow, writing the formal model:\n\n<MODEL>\nU = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n</MODEL>\n\nVariables:\n\n- \u03ba (kappa): gain sensitivity, [0, 3]\n- \u03bb (lambda): loss aversion, [0, 8]\n- \u03b2 (beta): inequity aversion, [0, maybe 10]\n- Other variables are from data or calculated.\n\nThe target variable is 'accept'.\n\nNow, the variable descriptions in JSON format:\n\nFor each variable in the model, including parameters and data variables.\n\nLearnable parameters: kappa, lambda, beta.\n\nData variables: split_self, token_self, split_opp, trial_type, combined_earning.\n\nCalculated variables: reference, the max terms, and the trial_type indicator.\n\nBut in the variables section, we need to list all variables used in the model, including those from data, calculated, and learnable parameters.\n\nSo:\n\nVariables:\n\n- \u03ba (kappa): learnable, range [0,3]\n- \u03bb (lambda): learnable, range [0,8]\n- \u03b2 (beta): learnable, range [0,10] (inclusive)\n- split_self: data, float64\n- token_self: data, int64\n- split_opp: data, float64\n- trial_type: data, int64\n- combined_earning: data, int64\n- max terms: calculated\n- reference: calculated\n\nBut in the JSON, we need to describe each variable used in the model. However, the model's U is expressed in terms of these variables, so each variable in the formula must be listed.\n\nBut the max functions are operations, not variables. So the variables in the formula are:\n\n- split_self\n- token_self\n- split_opp\n- trial_type\n- combined_earning\n- \u03ba\n- \u03bb\n- \u03b2\n\nThe other terms (max(...)) are calculated from these variables.\n\nSo in the variables section, we list:\n\n- split_self: source=data\n- token_self: source=data\n- split_opp: source=data\n- trial_type: source=data\n- combined_earning: source=data\n- \u03ba: learnable, range [0,3]\n- \u03bb: learnable, range [0,8]\n- \u03b2: learnable, range [0,10]\n\nNow, the JSON structure:\n\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity parameter for outcomes above the reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below the reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter, amplified when participant contributed more\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share of the opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution type (1=equal, 2=opponent more, 3=participant more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nThe summary should concisely describe the model:\n\nA hybrid model combining prospect theory and inequity aversion. Participants evaluate gains and losses relative to their contribution-based reference point (3\u00d7token_self), with loss aversion (\u03bb) and gain sensitivity (\u03ba). Inequity aversion (\u03b2) is amplified when participants contributed more tokens (trial_type=3). Fixed neuroeconomic priors linearize gains and convexify losses.\n\nNow, putting it all together.\n</think>\n\n<MODEL>\nU = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Gain sensitivity for outcomes above reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for outcomes below reference contribution value\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Base inequity aversion parameter, amplified 4x when participant contributed more tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution (reference anchor)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Opponent's proposed share in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Contribution context (3=participant contributed more)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot size for trial scaling\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nHybrid prospect theory model with contribution-based reference point (3\u00d7token_self), loss aversion (\u03bb), gain sensitivity (\u03ba), and context-modulated inequity aversion (\u03b2). Losses are evaluated relative to contribution value with convex weighting (\u03c1=1.33 locked). Inequity penalties are amplified 4x when participants contributed more tokens (trial_type=3). Combines outcome valuation with neuroeconomically constrained parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\nSummary: Hybrid prospect theory model with contribution-based reference point (3\u00d7token_self), loss aversion (\u03bb), gain sensitivity (\u03ba), and context-modulated inequity aversion (\u03b2). Losses are evaluated relative to contribution value with convex weighting (\u03c1=1.33 locked). Inequity penalties are amplified 4x when participants contributed more tokens (trial_type=3). Combines outcome valuation with neuroeconomically constrained parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "  File \"<string>\", line 32\n    results = simulate_model(data, kappa=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744017010.970495
    },
    {
      "retry_number": 1,
      "error": "  File \"<string>\", line 32\n    results = simulate_model(data, kappa=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744017015.012788
    },
    {
      "retry_number": 2,
      "error": "  File \"<string>\", line 32\n    results = simulate_model(data, kappa=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744017019.174201
    },
    {
      "retry_number": 3,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744017019.632694
    },
    {
      "retry_number": 4,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744017020.0701199
    }
  ],
  "current_retry": 4,
  "simulation_error": "Failed after maximum retries",
  "simulation_code": "def simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference = 3 * token_self\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(split_opp - split_self, 0)\n\n        beta_multiplier = 1 + 3 * (trial_type == 3)\n\n        U = kappa * gain - lambda_ * loss - beta * beta_multiplier * inequity / (combined_earning / 10)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 5,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.165160706048755, 'lambda': 7.904389237909223, 'beta': 3.9303222926784898}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6836995983452905, 'lambda': 2.1124993573562767, 'beta': 9.723744925633959}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.16953870226088075, 'lambda': 7.506834426466156, 'beta': 1.0942351791688487}\"]",
    "Error fitting participant 1002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02429334257284943, 'lambda': 0.7766888634301878, 'beta': 1.602306200559046}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7694314426821196, 'lambda': 4.518647293512259, 'beta': 8.968887696187306}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1412965606551464, 'lambda': 4.00021728540398, 'beta': 3.670013528325317}\"]",
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5629258456283471, 'lambda': 3.2196191936820444, 'beta': 6.63900229150456}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6010231169782991, 'lambda': 6.111766088004722, 'beta': 0.9451337962588335}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.566544596425763, 'lambda': 4.307728993017071, 'beta': 9.278009345294526}\"]",
    "Error fitting participant 1004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4466710486646717, 'lambda': 0.8322290008307114, 'beta': 9.74493244382972}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6646910029470244, 'lambda': 4.900635499955666, 'beta': 0.4896777329082824}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.988490701211563, 'lambda': 6.888418537232902, 'beta': 8.77239578727038}\"]",
    "Error fitting participant 1005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4620551973982647, 'lambda': 1.4900926876478113, 'beta': 0.18657476734842193}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.04764009681155579, 'lambda': 3.386680263586168, 'beta': 5.99060836335018}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1346228278461696, 'lambda': 1.9902897331910427, 'beta': 9.830574827172851}\"]",
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0024712841473178, 'lambda': 3.642602822842795, 'beta': 9.632323399132598}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9448029357050866, 'lambda': 3.0994728864519576, 'beta': 9.785501724007357}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.921664339218879, 'lambda': 1.0997160822770722, 'beta': 2.9997988734398784}\"]",
    "Error fitting participant 1007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.206948965562443, 'lambda': 6.8035772399239, 'beta': 3.6505347210367822}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3555671984306811, 'lambda': 7.591924293033667, 'beta': 4.627403854201574}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.427644490205541, 'lambda': 7.710537829069814, 'beta': 9.419618372758743}\"]",
    "Error fitting participant 1008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6070284997865487, 'lambda': 0.04938411676558907, 'beta': 4.475177875078085}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9925001329856431, 'lambda': 4.670778966267932, 'beta': 9.663277180024677}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2130287103420487, 'lambda': 3.529536086987119, 'beta': 7.207520887350288}\"]",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.095635495997941, 'lambda': 7.70366097400939, 'beta': 9.222816376311005}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8207461162201998, 'lambda': 0.08596019178654046, 'beta': 0.9691385606701042}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.175096370004656, 'lambda': 5.7355283357812485, 'beta': 9.957502744848078}\"]",
    "Error fitting participant 1010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7561986945317761, 'lambda': 1.062225549768879, 'beta': 2.9674543045031543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2480277532533566, 'lambda': 3.116777882904688, 'beta': 8.904085369658953}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7517616926067774, 'lambda': 2.960200397238567, 'beta': 2.1742565741048625}\"]",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7100479780430762, 'lambda': 5.264044364177146, 'beta': 8.233436051461428}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1619844006215048, 'lambda': 5.897455607138054, 'beta': 3.5243325611477605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.26152357669813864, 'lambda': 1.0979698443631172, 'beta': 9.88033521110449}\"]",
    "Error fitting participant 1012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9126939433101094, 'lambda': 2.308625949608577, 'beta': 9.575332244734849}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.18851099074377464, 'lambda': 4.590178357203865, 'beta': 9.532773912959932}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9638617350808203, 'lambda': 1.70324951749211, 'beta': 3.871026283961081}\"]",
    "Error fitting participant 1013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4913605473777607, 'lambda': 7.362182417984463, 'beta': 5.343662832195969}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7719034837259726, 'lambda': 3.786896654707876, 'beta': 0.12206661525912654}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5628464197600178, 'lambda': 5.576487556192427, 'beta': 7.543894672446395}\"]",
    "Error fitting participant 1015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8528184767457088, 'lambda': 7.190070989048636, 'beta': 1.8808701203236}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4536923122540824, 'lambda': 2.7018733004273185, 'beta': 1.1178828751525516}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7639247459532117, 'lambda': 3.021237986272178, 'beta': 0.35468008393029216}\"]",
    "Error fitting participant 1016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21529718408743215, 'lambda': 6.581844492812626, 'beta': 5.223890775606435}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.515014329319797, 'lambda': 4.5257325136635975, 'beta': 7.46925560910479}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5035236712790323, 'lambda': 0.6128612831629914, 'beta': 4.3028593538873405}\"]",
    "Error fitting participant 1017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2670463106125138, 'lambda': 2.225670636422742, 'beta': 0.26968123335486927}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10387252077234055, 'lambda': 3.6726255989885983, 'beta': 1.5851089180489664}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7357061077291212, 'lambda': 1.9482503016174766, 'beta': 1.5405146790796398}\"]",
    "Error fitting participant 1018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.49406645775898217, 'lambda': 6.025198493130724, 'beta': 7.542228546799543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6717170422384122, 'lambda': 7.578417582798343, 'beta': 1.0497568050695072}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.420890367692376, 'lambda': 3.4623177850844016, 'beta': 1.3786653754386569}\"]",
    "Error fitting participant 1019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5774856172896206, 'lambda': 5.910187694762521, 'beta': 8.530413968613605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7577832474148197, 'lambda': 0.6323050955381193, 'beta': 6.912130476405864}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.552633258406463, 'lambda': 7.240215597808268, 'beta': 6.534703453867477}\"]",
    "Error fitting participant 1020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4614347340259286, 'lambda': 5.5394664604697805, 'beta': 7.984189138335594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3636259262155983, 'lambda': 4.063523198663558, 'beta': 0.4445240386716587}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.858207883579949, 'lambda': 2.1149831514228588, 'beta': 7.373556956523718}\"]",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.270526197541495, 'lambda': 1.873390477667531, 'beta': 5.769245884715797}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3646994392575131, 'lambda': 0.7755601797895855, 'beta': 1.3677093439606092}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8774629848829496, 'lambda': 6.320753557385403, 'beta': 4.542164029621708}\"]",
    "Error fitting participant 1022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9895973757511523, 'lambda': 4.57213656598108, 'beta': 9.773995873073765}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3579199561742676, 'lambda': 0.7022124397495952, 'beta': 6.8449143777988635}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6821736780778949, 'lambda': 2.918447520502686, 'beta': 1.034028828287642}\"]",
    "Error fitting participant 1023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2388150539943692, 'lambda': 5.5097471614885825, 'beta': 8.273015710975859}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0864546185699384, 'lambda': 7.941838135262401, 'beta': 1.8336297235338195}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9387694999161367, 'lambda': 5.995359322841311, 'beta': 8.565877813279597}\"]",
    "Error fitting participant 1024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7509783133027605, 'lambda': 7.959439455418076, 'beta': 1.8620329747861741}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.214726040293964, 'lambda': 5.475375355896986, 'beta': 4.948663821704525}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7098788589158168, 'lambda': 2.2853125738211997, 'beta': 6.206956541713903}\"]",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6062147447764157, 'lambda': 2.87516997865003, 'beta': 6.502870263411088}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.19858314528351528, 'lambda': 4.182187280954325, 'beta': 6.286671858155031}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.053043474678387, 'lambda': 3.8539709015595918, 'beta': 4.473622473676114}\"]",
    "Error fitting participant 1026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.565454082248949, 'lambda': 0.4436537668753111, 'beta': 4.53158527034902}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4348796632208004, 'lambda': 0.06811895705162385, 'beta': 2.0665282558009688}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.35448355458529257, 'lambda': 1.1698766534224712, 'beta': 1.454848476402677}\"]",
    "Error fitting participant 1027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1541217133858227, 'lambda': 1.482106614030113, 'beta': 6.95282585982371}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20362235255095007, 'lambda': 3.160393204642017, 'beta': 7.891962349806421}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6617054435553307, 'lambda': 6.83405202344391, 'beta': 7.389658618167589}\"]",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0449355783035816, 'lambda': 4.740900305030991, 'beta': 3.9521024124566697}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.004857061048664901, 'lambda': 5.656942574712024, 'beta': 9.14817120970661}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5948504588946035, 'lambda': 4.424232444152532, 'beta': 8.999431145502696}\"]",
    "Error fitting participant 1029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4854337688447906, 'lambda': 5.4592480852071095, 'beta': 6.092782218507928}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0345674914071803, 'lambda': 4.374343702285462, 'beta': 1.4757358231944728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8579136949273014, 'lambda': 2.7743201334876364, 'beta': 9.333850745492969}\"]",
    "Error fitting participant 1030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6682538249887318, 'lambda': 5.544761945633738, 'beta': 8.910029296676411}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3051490117169378, 'lambda': 5.329462824515984, 'beta': 4.451442429822212}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.986907718434081, 'lambda': 6.5015222162512565, 'beta': 9.346895793799202}\"]",
    "Error fitting participant 1031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3973381661830113, 'lambda': 5.546385537307235, 'beta': 8.02606064082793}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.112221037901259, 'lambda': 6.973500555146612, 'beta': 5.166068520557301}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.25916362815425487, 'lambda': 2.897190653880087, 'beta': 8.353240384758996}\"]",
    "Error fitting participant 1032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5091330133544191, 'lambda': 3.5055900771224833, 'beta': 4.037859618639727}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2560090262733563, 'lambda': 2.745336997506138, 'beta': 0.5217396236683358}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.131647266677184, 'lambda': 5.2133807021773215, 'beta': 2.2313863192796513}\"]",
    "Error fitting participant 1033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7127757148962384, 'lambda': 5.029518263393829, 'beta': 3.6776657462857196}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.03411837853826416, 'lambda': 7.135225649148399, 'beta': 1.6265079332227628}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2036075452110706, 'lambda': 4.050650423682815, 'beta': 6.089933990063775}\"]",
    "Error fitting participant 1034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3088374799204407, 'lambda': 1.0519824958491224, 'beta': 7.9237769002650325}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9650187369634975, 'lambda': 6.926118534815073, 'beta': 8.718415393400072}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2894117012194652, 'lambda': 3.1528092271867107, 'beta': 2.090404092215298}\"]",
    "Error fitting participant 1035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5505366494950518, 'lambda': 0.5113877088866072, 'beta': 4.774880342752567}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6847236888220656, 'lambda': 1.473657560199741, 'beta': 5.128998601954116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8667330300802837, 'lambda': 3.8454128376310317, 'beta': 0.6043463830606199}\"]",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2564521997161773, 'lambda': 3.824162840895408, 'beta': 1.6174781793979842}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8173057537847755, 'lambda': 3.9129129229388937, 'beta': 2.9078380581643226}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08775833296997104, 'lambda': 6.911501629484184, 'beta': 9.204337234145791}\"]",
    "Error fitting participant 1037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9022964879897133, 'lambda': 5.059363438986672, 'beta': 4.8961253499039}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7958839586066233, 'lambda': 4.465588704295851, 'beta': 9.03719070606679}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.32881875588966114, 'lambda': 0.029059835802242695, 'beta': 2.65100850881831}\"]",
    "Error fitting participant 1038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4992681016824847, 'lambda': 4.775277709854487, 'beta': 7.581652150584053}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.522118026638381, 'lambda': 5.221808765650339, 'beta': 1.723935670047294}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02674260462232947, 'lambda': 4.328926254435687, 'beta': 8.399749450513038}\"]",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.125838259311785, 'lambda': 0.692201639978097, 'beta': 0.20677796854417285}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0283055097149263, 'lambda': 2.591057686088819, 'beta': 1.0731163170161029}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0311944434435505, 'lambda': 2.740001749989789, 'beta': 2.1800734567133597}\"]",
    "Error fitting participant 1040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0848606444540043, 'lambda': 2.759162546349012, 'beta': 1.1238334711990083}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1738558889214659, 'lambda': 3.2877253393298504, 'beta': 7.805662874680722}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.667908442308665, 'lambda': 6.603651357355877, 'beta': 8.779531251835582}\"]",
    "Error fitting participant 1041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3835603486209838, 'lambda': 1.4100366033015401, 'beta': 8.735343341404118}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8722472795552236, 'lambda': 2.916263940524784, 'beta': 6.390343067574673}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21415674327171175, 'lambda': 5.426835632554089, 'beta': 5.673352437040132}\"]",
    "Error fitting participant 1042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3286699932514363, 'lambda': 7.761186369521237, 'beta': 3.0469777779154317}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7368544372308505, 'lambda': 6.657883283574894, 'beta': 0.15110996427451728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.706270588086162, 'lambda': 2.655996730635077, 'beta': 8.576007712400935}\"]",
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7962506285928868, 'lambda': 0.7992788142054916, 'beta': 6.481219756670709}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1326722366908507, 'lambda': 7.716988111032631, 'beta': 9.87867966832634}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9018739391471948, 'lambda': 2.868755790348665, 'beta': 0.934627068630034}\"]",
    "Error fitting participant 1044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9455133073238743, 'lambda': 1.0591297853147559, 'beta': 4.498528646029709}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.095662145969766, 'lambda': 1.9945502948312024, 'beta': 0.22807935074376728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.076265128646538, 'lambda': 3.607184696748366, 'beta': 1.7301571905899094}\"]",
    "Error fitting participant 2001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3835477939240537, 'lambda': 4.904129196842265, 'beta': 4.335832220017915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3594206428105997, 'lambda': 6.940178415747214, 'beta': 0.7708410846067437}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.155687573546353, 'lambda': 0.06253753300844433, 'beta': 4.745510474912531}\"]",
    "Error fitting participant 2002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6708754714708363, 'lambda': 4.100156889073095, 'beta': 6.718103806588775}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7971677009565546, 'lambda': 4.481713335684309, 'beta': 6.607080683253866}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5781414447629305, 'lambda': 1.7834263633187675, 'beta': 5.850998309876823}\"]",
    "Error fitting participant 2003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7932113110608583, 'lambda': 4.168681428221494, 'beta': 2.8877056199396334}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3497125106188853, 'lambda': 4.390493535644674, 'beta': 7.095574701178515}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.37872512005007564, 'lambda': 6.3521150536643995, 'beta': 7.611532343330376}\"]",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6477763821005262, 'lambda': 6.198860728842203, 'beta': 7.112867810057988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4468608934459267, 'lambda': 4.929497964472621, 'beta': 7.2422822613615425}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7433252085742732, 'lambda': 4.580813889077677, 'beta': 3.96976821234051}\"]",
    "Error fitting participant 2005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.427057347241353, 'lambda': 0.7927795314038546, 'beta': 4.816125912791179}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2010715087922277, 'lambda': 2.6521310588842857, 'beta': 1.6979675119892201}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1825699992261, 'lambda': 1.8605332407414217, 'beta': 2.054741555917956}\"]",
    "Error fitting participant 2006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6222472361584, 'lambda': 2.6783017680922825, 'beta': 0.32638342016727884}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8807817027438842, 'lambda': 3.360393366624277, 'beta': 2.23281680714312}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6463081924754315, 'lambda': 3.5575801293654097, 'beta': 6.170410355235627}\"]",
    "Error fitting participant 2007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.35106473292056517, 'lambda': 3.234629217916776, 'beta': 4.070913994245393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1753165432261583, 'lambda': 7.015288449765075, 'beta': 1.287990228667364}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3581403186280505, 'lambda': 5.144488572046386, 'beta': 3.753475801109082}\"]",
    "Error fitting participant 2008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20040940392742668, 'lambda': 6.089882885561852, 'beta': 9.128603243111915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.206681750242325, 'lambda': 6.198904242619507, 'beta': 4.924894933066253}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.106288707529768, 'lambda': 1.2054799204016655, 'beta': 3.703062331282104}\"]",
    "Error fitting participant 2009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4817908272405984, 'lambda': 3.366484654397567, 'beta': 1.3769664464397147}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6054318734160564, 'lambda': 1.2864992386773872, 'beta': 3.238964945251653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4305674602573455, 'lambda': 7.067072131990367, 'beta': 6.3563218671429915}\"]",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.575427975215486, 'lambda': 0.06375270386105658, 'beta': 9.724795916604318}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7643640957661186, 'lambda': 2.590351736120293, 'beta': 9.148290902669332}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9966335424167094, 'lambda': 1.066056546488416, 'beta': 9.714049847391356}\"]",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21444370441262828, 'lambda': 2.99036960574663, 'beta': 6.571628583280472}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5092409195402847, 'lambda': 3.9363721204174293, 'beta': 6.914333022029995}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8424893442458667, 'lambda': 5.821865714795496, 'beta': 7.68151505688599}\"]",
    "Error fitting participant 2012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4960859356983787, 'lambda': 0.7243082463864754, 'beta': 6.108394486679539}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.0431464464493998, 'lambda': 7.868850213663284, 'beta': 6.58783966527377}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.045144725513826, 'lambda': 2.6258117862202415, 'beta': 6.637738423017815}\"]",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7024195490995414, 'lambda': 1.7433520350365042, 'beta': 8.737978123211803}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.829003911149123, 'lambda': 5.1948498606375795, 'beta': 1.4419556482790408}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6348569611840759, 'lambda': 6.133195408093425, 'beta': 8.48450410828066}\"]",
    "Error fitting participant 2014: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5349518881167643, 'lambda': 1.7482053947343559, 'beta': 3.5244975953589774}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9676007575573825, 'lambda': 4.477630228961609, 'beta': 8.723746560035824}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.30055555082507746, 'lambda': 5.36847295623273, 'beta': 8.578015491579215}\"]",
    "Error fitting participant 2015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08742749045804432, 'lambda': 4.506069666039659, 'beta': 3.1563558581634754}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4174701124160465, 'lambda': 7.3037233684862874, 'beta': 0.8280371415921284}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42326150885810554, 'lambda': 4.634044603413992, 'beta': 4.113870833644896}\"]",
    "Error fitting participant 2016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20696161545582137, 'lambda': 2.478521388784432, 'beta': 8.56170850493289}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.454624062186182, 'lambda': 1.1331739193371222, 'beta': 0.5706415076400051}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0305551628319058, 'lambda': 6.0505785542284265, 'beta': 2.563494309925982}\"]",
    "Error fitting participant 2017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2293243881663636, 'lambda': 0.7702302319981076, 'beta': 2.0265000169437988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15079643555054578, 'lambda': 7.415768023115509, 'beta': 8.815617145145637}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.865708970631796, 'lambda': 6.500088256355306, 'beta': 9.182910495576474}\"]",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3802992930410762, 'lambda': 1.4270356414626768, 'beta': 5.556040231415537}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4609600371889262, 'lambda': 6.152866311691016, 'beta': 4.080639801127852}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1431423412829833, 'lambda': 7.543017120207923, 'beta': 8.47806529278094}\"]",
    "Error fitting participant 2019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0175325462456257, 'lambda': 1.0465582772981064, 'beta': 9.14605263683156}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2987744139577845, 'lambda': 3.72874783284201, 'beta': 1.709417737027914}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8846530491480114, 'lambda': 3.8589947435603555, 'beta': 7.039261206902209}\"]",
    "Error fitting participant 2020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1093264425350626, 'lambda': 5.870785032260405, 'beta': 1.6078367110068414}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5435844932773735, 'lambda': 5.342251595195358, 'beta': 3.1862331737224405}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0874407030383204, 'lambda': 1.0211055158732334, 'beta': 4.057515204048086}\"]",
    "Error fitting participant 2021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8592149425816182, 'lambda': 7.959443738752362, 'beta': 9.003803563348932}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.07374366758383244, 'lambda': 1.5629658981516874, 'beta': 4.980815014060116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6460633213300915, 'lambda': 1.8334074841123007, 'beta': 2.6810631318775813}\"]",
    "Error fitting participant 2022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6182681431533945, 'lambda': 7.202036430003547, 'beta': 1.2519619259063863}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7010522841066944, 'lambda': 3.6846247420789364, 'beta': 6.322229544895414}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5736462112661997, 'lambda': 0.7324826920191532, 'beta': 3.588401371643355}\"]",
    "Error fitting participant 2023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.118440153874727, 'lambda': 4.748490183667508, 'beta': 1.483213279813107}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6973386422529009, 'lambda': 3.782888335242675, 'beta': 4.651715553607883}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6472448029671782, 'lambda': 2.459116444509318, 'beta': 9.257539419636945}\"]",
    "Error fitting participant 2024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.503218888664219, 'lambda': 7.12635740003951, 'beta': 7.952495001166222}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4899163883696357, 'lambda': 2.3205808445668135, 'beta': 5.465199336892921}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4548789660317967, 'lambda': 7.8761795418631015, 'beta': 1.5894935354811501}\"]",
    "Error fitting participant 2025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7759922158740483, 'lambda': 4.827406438877487, 'beta': 7.547970282740064}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6953814398770625, 'lambda': 6.80763920083032, 'beta': 7.625997811871493}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9127384327689111, 'lambda': 0.10732534703857244, 'beta': 2.7419721103378922}\"]",
    "Error fitting participant 2026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7188625873865279, 'lambda': 7.954628359939472, 'beta': 9.71756808613748}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8512005939661385, 'lambda': 7.35642971959633, 'beta': 0.6274498989222721}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8977264273343777, 'lambda': 3.940416975653518, 'beta': 5.194575836019949}\"]",
    "Error fitting participant 2027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6624921223599332, 'lambda': 5.396748139781867, 'beta': 3.701316469592105}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4834399976964145, 'lambda': 7.282489071726289, 'beta': 8.227985496992638}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.49598018016706, 'lambda': 4.711250963443637, 'beta': 5.5055439706996765}\"]",
    "Error fitting participant 2028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4490032562309114, 'lambda': 5.0205428720794165, 'beta': 9.589887671603563}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8871519682149063, 'lambda': 4.459900509606672, 'beta': 1.591135851586677}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8350685027763145, 'lambda': 5.274953012809201, 'beta': 1.0090622133953453}\"]",
    "Error fitting participant 2029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5902346932467752, 'lambda': 4.2447578665429955, 'beta': 1.9106917499930687}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8843041829668841, 'lambda': 5.027366129738275, 'beta': 9.01478888610116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5703364973633411, 'lambda': 4.717376857225168, 'beta': 5.5174637344725665}\"]",
    "Error fitting participant 2030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.302137474252077, 'lambda': 4.56846658991864, 'beta': 8.58930723236342}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4788781578602568, 'lambda': 3.7383895070068576, 'beta': 3.868722226928444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6178474313639564, 'lambda': 1.9835276634398777, 'beta': 2.1944097345584868}\"]",
    "Error fitting participant 2031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5312155510186676, 'lambda': 4.579911573474036, 'beta': 8.221744446310048}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3204562374572193, 'lambda': 3.9133411988891105, 'beta': 3.1443142523539827}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5690863936600532, 'lambda': 4.871712724319144, 'beta': 4.618553655494284}\"]",
    "Error fitting participant 2032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0536345164676546, 'lambda': 7.725007858104671, 'beta': 9.363686790414326}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.570819190036681, 'lambda': 5.44981061812477, 'beta': 9.924916753764274}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3326089664510756, 'lambda': 7.1846010231522275, 'beta': 8.532863750416249}\"]",
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6144625890784446, 'lambda': 5.506274698554647, 'beta': 1.7475623974087406}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5106482060778282, 'lambda': 3.605691000765324, 'beta': 3.290150674528375}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.593516876696665, 'lambda': 4.1677531370239125, 'beta': 4.5496402845674355}\"]",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0367757189337428, 'lambda': 4.739657754919305, 'beta': 1.2233171979061885}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3291216198361808, 'lambda': 3.2061987413803905, 'beta': 0.41871835802741675}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.543524146809199, 'lambda': 7.7141179841663385, 'beta': 0.13029287130790213}\"]",
    "Error fitting participant 2035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2761402046756096, 'lambda': 5.263926944982689, 'beta': 6.04011061955978}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.898910248152909, 'lambda': 3.8570133392422505, 'beta': 3.0121850491912037}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1128407502757172, 'lambda': 7.240203348144937, 'beta': 8.768427018700649}\"]",
    "Error fitting participant 2036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.797795109626184, 'lambda': 4.731348088633645, 'beta': 7.902971293540338}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.956608945885042, 'lambda': 4.122091125487221, 'beta': 3.2714301291327574}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6613825911910727, 'lambda': 7.542660964387303, 'beta': 6.50734926936034}\"]",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6016723417495967, 'lambda': 1.6282321865702505, 'beta': 5.361099896874203}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0536245235970123, 'lambda': 0.3694374810054679, 'beta': 0.3726349277603602}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8703269081050617, 'lambda': 7.08539555517838, 'beta': 1.483683980559929}\"]",
    "Error fitting participant 2038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.956727540791152, 'lambda': 0.7045422410892375, 'beta': 8.82011043717481}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.864671908447149, 'lambda': 5.171116542439068, 'beta': 9.35479318504566}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.255510197626845, 'lambda': 0.43935596982065395, 'beta': 5.440506535327044}\"]",
    "Error fitting participant 2039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9470340077287464, 'lambda': 1.4571389821729, 'beta': 3.057074554989141}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1170690219098491, 'lambda': 0.3809127532393308, 'beta': 1.7393562042844013}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.519723530166631, 'lambda': 6.885749652042789, 'beta': 3.7473343546369664}\"]",
    "Error fitting participant 2040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8199224518438744, 'lambda': 7.29266864217889, 'beta': 8.698555844326632}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.925236394747636, 'lambda': 1.7860888780230395, 'beta': 7.442635803262393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3362264503923043, 'lambda': 7.316711296550971, 'beta': 9.957761507719344}\"]",
    "Error fitting participant 2041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.029016293865291476, 'lambda': 5.7123501169735995, 'beta': 6.368616844969527}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.426968868251722, 'lambda': 5.911115635195002, 'beta': 0.5186013158062186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.162882625992732, 'lambda': 3.872672663573651, 'beta': 7.162508747901497}\"]",
    "Error fitting participant 2042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.00560973346285043, 'lambda': 7.810110233635362, 'beta': 2.487211940125884}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1785011754727706, 'lambda': 3.308383927824499, 'beta': 1.465403854199332}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.24500959709272185, 'lambda': 2.273650452614432, 'beta': 2.170086041185347}\"]",
    "Error fitting participant 2043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.459160262798488, 'lambda': 2.554446492683767, 'beta': 6.822314779106113}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6180763962958593, 'lambda': 1.3312145401183155, 'beta': 8.45301703353615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.912954013087628, 'lambda': 5.634032144793107, 'beta': 5.127278877885377}\"]",
    "Error fitting participant 2044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.534714521873292, 'lambda': 6.063795629610961, 'beta': 9.79047341705265}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7882821346454538, 'lambda': 4.506089709976785, 'beta': 9.070153338296308}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3516439775428923, 'lambda': 2.6801252858238973, 'beta': 6.1086110621066245}\"]",
    "Error fitting participant 2045: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.09993311445979824, 'lambda': 0.5715338559054954, 'beta': 2.929177286480771}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7469795122517366, 'lambda': 3.4548416210740864, 'beta': 2.4187409332825007}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9280432072902998, 'lambda': 3.4664723564716375, 'beta': 8.72130889383084}\"]",
    "Error fitting participant 2046: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.772511337894845, 'lambda': 5.925383770300685, 'beta': 7.204015531076713}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.748609245390089, 'lambda': 4.882878256478477, 'beta': 3.9840691252731486}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3567204827358972, 'lambda': 0.0664790195313989, 'beta': 3.032383984366742}\"]",
    "Error fitting participant 2047: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1833655476397491, 'lambda': 1.8054798877166922, 'beta': 3.79309969709291}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4170894039653328, 'lambda': 4.915538439043418, 'beta': 2.421007669531534}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7627770870872341, 'lambda': 3.7474671394368855, 'beta': 0.05835869974934016}\"]",
    "Error fitting participant 2048: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15440473438198243, 'lambda': 4.203415255920729, 'beta': 7.3161785924105915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9827357773640992, 'lambda': 0.4421315228850853, 'beta': 1.3655752786505249}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.528856440851632, 'lambda': 0.44351575146145183, 'beta': 5.98577624505798}\"]"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.165160706048755, 'lambda': 7.904389237909223, 'beta': 3.9303222926784898}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6836995983452905, 'lambda': 2.1124993573562767, 'beta': 9.723744925633959}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.16953870226088075, 'lambda': 7.506834426466156, 'beta': 1.0942351791688487}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02429334257284943, 'lambda': 0.7766888634301878, 'beta': 1.602306200559046}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7694314426821196, 'lambda': 4.518647293512259, 'beta': 8.968887696187306}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1412965606551464, 'lambda': 4.00021728540398, 'beta': 3.670013528325317}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5629258456283471, 'lambda': 3.2196191936820444, 'beta': 6.63900229150456}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6010231169782991, 'lambda': 6.111766088004722, 'beta': 0.9451337962588335}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.566544596425763, 'lambda': 4.307728993017071, 'beta': 9.278009345294526}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4466710486646717, 'lambda': 0.8322290008307114, 'beta': 9.74493244382972}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6646910029470244, 'lambda': 4.900635499955666, 'beta': 0.4896777329082824}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.988490701211563, 'lambda': 6.888418537232902, 'beta': 8.77239578727038}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4620551973982647, 'lambda': 1.4900926876478113, 'beta': 0.18657476734842193}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.04764009681155579, 'lambda': 3.386680263586168, 'beta': 5.99060836335018}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1346228278461696, 'lambda': 1.9902897331910427, 'beta': 9.830574827172851}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0024712841473178, 'lambda': 3.642602822842795, 'beta': 9.632323399132598}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9448029357050866, 'lambda': 3.0994728864519576, 'beta': 9.785501724007357}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.921664339218879, 'lambda': 1.0997160822770722, 'beta': 2.9997988734398784}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.206948965562443, 'lambda': 6.8035772399239, 'beta': 3.6505347210367822}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3555671984306811, 'lambda': 7.591924293033667, 'beta': 4.627403854201574}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.427644490205541, 'lambda': 7.710537829069814, 'beta': 9.419618372758743}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6070284997865487, 'lambda': 0.04938411676558907, 'beta': 4.475177875078085}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9925001329856431, 'lambda': 4.670778966267932, 'beta': 9.663277180024677}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2130287103420487, 'lambda': 3.529536086987119, 'beta': 7.207520887350288}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.095635495997941, 'lambda': 7.70366097400939, 'beta': 9.222816376311005}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8207461162201998, 'lambda': 0.08596019178654046, 'beta': 0.9691385606701042}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.175096370004656, 'lambda': 5.7355283357812485, 'beta': 9.957502744848078}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7561986945317761, 'lambda': 1.062225549768879, 'beta': 2.9674543045031543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2480277532533566, 'lambda': 3.116777882904688, 'beta': 8.904085369658953}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7517616926067774, 'lambda': 2.960200397238567, 'beta': 2.1742565741048625}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7100479780430762, 'lambda': 5.264044364177146, 'beta': 8.233436051461428}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1619844006215048, 'lambda': 5.897455607138054, 'beta': 3.5243325611477605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.26152357669813864, 'lambda': 1.0979698443631172, 'beta': 9.88033521110449}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9126939433101094, 'lambda': 2.308625949608577, 'beta': 9.575332244734849}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.18851099074377464, 'lambda': 4.590178357203865, 'beta': 9.532773912959932}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9638617350808203, 'lambda': 1.70324951749211, 'beta': 3.871026283961081}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4913605473777607, 'lambda': 7.362182417984463, 'beta': 5.343662832195969}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7719034837259726, 'lambda': 3.786896654707876, 'beta': 0.12206661525912654}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5628464197600178, 'lambda': 5.576487556192427, 'beta': 7.543894672446395}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8528184767457088, 'lambda': 7.190070989048636, 'beta': 1.8808701203236}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4536923122540824, 'lambda': 2.7018733004273185, 'beta': 1.1178828751525516}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7639247459532117, 'lambda': 3.021237986272178, 'beta': 0.35468008393029216}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21529718408743215, 'lambda': 6.581844492812626, 'beta': 5.223890775606435}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.515014329319797, 'lambda': 4.5257325136635975, 'beta': 7.46925560910479}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5035236712790323, 'lambda': 0.6128612831629914, 'beta': 4.3028593538873405}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2670463106125138, 'lambda': 2.225670636422742, 'beta': 0.26968123335486927}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10387252077234055, 'lambda': 3.6726255989885983, 'beta': 1.5851089180489664}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7357061077291212, 'lambda': 1.9482503016174766, 'beta': 1.5405146790796398}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.49406645775898217, 'lambda': 6.025198493130724, 'beta': 7.542228546799543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6717170422384122, 'lambda': 7.578417582798343, 'beta': 1.0497568050695072}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.420890367692376, 'lambda': 3.4623177850844016, 'beta': 1.3786653754386569}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5774856172896206, 'lambda': 5.910187694762521, 'beta': 8.530413968613605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7577832474148197, 'lambda': 0.6323050955381193, 'beta': 6.912130476405864}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.552633258406463, 'lambda': 7.240215597808268, 'beta': 6.534703453867477}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4614347340259286, 'lambda': 5.5394664604697805, 'beta': 7.984189138335594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3636259262155983, 'lambda': 4.063523198663558, 'beta': 0.4445240386716587}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.858207883579949, 'lambda': 2.1149831514228588, 'beta': 7.373556956523718}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.270526197541495, 'lambda': 1.873390477667531, 'beta': 5.769245884715797}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3646994392575131, 'lambda': 0.7755601797895855, 'beta': 1.3677093439606092}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8774629848829496, 'lambda': 6.320753557385403, 'beta': 4.542164029621708}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9895973757511523, 'lambda': 4.57213656598108, 'beta': 9.773995873073765}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3579199561742676, 'lambda': 0.7022124397495952, 'beta': 6.8449143777988635}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6821736780778949, 'lambda': 2.918447520502686, 'beta': 1.034028828287642}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2388150539943692, 'lambda': 5.5097471614885825, 'beta': 8.273015710975859}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0864546185699384, 'lambda': 7.941838135262401, 'beta': 1.8336297235338195}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9387694999161367, 'lambda': 5.995359322841311, 'beta': 8.565877813279597}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7509783133027605, 'lambda': 7.959439455418076, 'beta': 1.8620329747861741}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.214726040293964, 'lambda': 5.475375355896986, 'beta': 4.948663821704525}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7098788589158168, 'lambda': 2.2853125738211997, 'beta': 6.206956541713903}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6062147447764157, 'lambda': 2.87516997865003, 'beta': 6.502870263411088}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.19858314528351528, 'lambda': 4.182187280954325, 'beta': 6.286671858155031}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.053043474678387, 'lambda': 3.8539709015595918, 'beta': 4.473622473676114}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.565454082248949, 'lambda': 0.4436537668753111, 'beta': 4.53158527034902}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4348796632208004, 'lambda': 0.06811895705162385, 'beta': 2.0665282558009688}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.35448355458529257, 'lambda': 1.1698766534224712, 'beta': 1.454848476402677}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1541217133858227, 'lambda': 1.482106614030113, 'beta': 6.95282585982371}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20362235255095007, 'lambda': 3.160393204642017, 'beta': 7.891962349806421}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6617054435553307, 'lambda': 6.83405202344391, 'beta': 7.389658618167589}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0449355783035816, 'lambda': 4.740900305030991, 'beta': 3.9521024124566697}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.004857061048664901, 'lambda': 5.656942574712024, 'beta': 9.14817120970661}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5948504588946035, 'lambda': 4.424232444152532, 'beta': 8.999431145502696}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4854337688447906, 'lambda': 5.4592480852071095, 'beta': 6.092782218507928}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0345674914071803, 'lambda': 4.374343702285462, 'beta': 1.4757358231944728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8579136949273014, 'lambda': 2.7743201334876364, 'beta': 9.333850745492969}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6682538249887318, 'lambda': 5.544761945633738, 'beta': 8.910029296676411}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3051490117169378, 'lambda': 5.329462824515984, 'beta': 4.451442429822212}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.986907718434081, 'lambda': 6.5015222162512565, 'beta': 9.346895793799202}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3973381661830113, 'lambda': 5.546385537307235, 'beta': 8.02606064082793}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.112221037901259, 'lambda': 6.973500555146612, 'beta': 5.166068520557301}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.25916362815425487, 'lambda': 2.897190653880087, 'beta': 8.353240384758996}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5091330133544191, 'lambda': 3.5055900771224833, 'beta': 4.037859618639727}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2560090262733563, 'lambda': 2.745336997506138, 'beta': 0.5217396236683358}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.131647266677184, 'lambda': 5.2133807021773215, 'beta': 2.2313863192796513}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7127757148962384, 'lambda': 5.029518263393829, 'beta': 3.6776657462857196}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.03411837853826416, 'lambda': 7.135225649148399, 'beta': 1.6265079332227628}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2036075452110706, 'lambda': 4.050650423682815, 'beta': 6.089933990063775}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3088374799204407, 'lambda': 1.0519824958491224, 'beta': 7.9237769002650325}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9650187369634975, 'lambda': 6.926118534815073, 'beta': 8.718415393400072}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2894117012194652, 'lambda': 3.1528092271867107, 'beta': 2.090404092215298}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5505366494950518, 'lambda': 0.5113877088866072, 'beta': 4.774880342752567}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6847236888220656, 'lambda': 1.473657560199741, 'beta': 5.128998601954116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8667330300802837, 'lambda': 3.8454128376310317, 'beta': 0.6043463830606199}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2564521997161773, 'lambda': 3.824162840895408, 'beta': 1.6174781793979842}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8173057537847755, 'lambda': 3.9129129229388937, 'beta': 2.9078380581643226}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08775833296997104, 'lambda': 6.911501629484184, 'beta': 9.204337234145791}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9022964879897133, 'lambda': 5.059363438986672, 'beta': 4.8961253499039}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7958839586066233, 'lambda': 4.465588704295851, 'beta': 9.03719070606679}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.32881875588966114, 'lambda': 0.029059835802242695, 'beta': 2.65100850881831}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4992681016824847, 'lambda': 4.775277709854487, 'beta': 7.581652150584053}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.522118026638381, 'lambda': 5.221808765650339, 'beta': 1.723935670047294}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02674260462232947, 'lambda': 4.328926254435687, 'beta': 8.399749450513038}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.125838259311785, 'lambda': 0.692201639978097, 'beta': 0.20677796854417285}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0283055097149263, 'lambda': 2.591057686088819, 'beta': 1.0731163170161029}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0311944434435505, 'lambda': 2.740001749989789, 'beta': 2.1800734567133597}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0848606444540043, 'lambda': 2.759162546349012, 'beta': 1.1238334711990083}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1738558889214659, 'lambda': 3.2877253393298504, 'beta': 7.805662874680722}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.667908442308665, 'lambda': 6.603651357355877, 'beta': 8.779531251835582}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3835603486209838, 'lambda': 1.4100366033015401, 'beta': 8.735343341404118}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8722472795552236, 'lambda': 2.916263940524784, 'beta': 6.390343067574673}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21415674327171175, 'lambda': 5.426835632554089, 'beta': 5.673352437040132}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3286699932514363, 'lambda': 7.761186369521237, 'beta': 3.0469777779154317}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7368544372308505, 'lambda': 6.657883283574894, 'beta': 0.15110996427451728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.706270588086162, 'lambda': 2.655996730635077, 'beta': 8.576007712400935}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7962506285928868, 'lambda': 0.7992788142054916, 'beta': 6.481219756670709}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1326722366908507, 'lambda': 7.716988111032631, 'beta': 9.87867966832634}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9018739391471948, 'lambda': 2.868755790348665, 'beta': 0.934627068630034}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9455133073238743, 'lambda': 1.0591297853147559, 'beta': 4.498528646029709}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.095662145969766, 'lambda': 1.9945502948312024, 'beta': 0.22807935074376728}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.076265128646538, 'lambda': 3.607184696748366, 'beta': 1.7301571905899094}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3835477939240537, 'lambda': 4.904129196842265, 'beta': 4.335832220017915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3594206428105997, 'lambda': 6.940178415747214, 'beta': 0.7708410846067437}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.155687573546353, 'lambda': 0.06253753300844433, 'beta': 4.745510474912531}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6708754714708363, 'lambda': 4.100156889073095, 'beta': 6.718103806588775}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7971677009565546, 'lambda': 4.481713335684309, 'beta': 6.607080683253866}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5781414447629305, 'lambda': 1.7834263633187675, 'beta': 5.850998309876823}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7932113110608583, 'lambda': 4.168681428221494, 'beta': 2.8877056199396334}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3497125106188853, 'lambda': 4.390493535644674, 'beta': 7.095574701178515}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.37872512005007564, 'lambda': 6.3521150536643995, 'beta': 7.611532343330376}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6477763821005262, 'lambda': 6.198860728842203, 'beta': 7.112867810057988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4468608934459267, 'lambda': 4.929497964472621, 'beta': 7.2422822613615425}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7433252085742732, 'lambda': 4.580813889077677, 'beta': 3.96976821234051}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.427057347241353, 'lambda': 0.7927795314038546, 'beta': 4.816125912791179}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2010715087922277, 'lambda': 2.6521310588842857, 'beta': 1.6979675119892201}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1825699992261, 'lambda': 1.8605332407414217, 'beta': 2.054741555917956}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6222472361584, 'lambda': 2.6783017680922825, 'beta': 0.32638342016727884}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8807817027438842, 'lambda': 3.360393366624277, 'beta': 2.23281680714312}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6463081924754315, 'lambda': 3.5575801293654097, 'beta': 6.170410355235627}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.35106473292056517, 'lambda': 3.234629217916776, 'beta': 4.070913994245393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1753165432261583, 'lambda': 7.015288449765075, 'beta': 1.287990228667364}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3581403186280505, 'lambda': 5.144488572046386, 'beta': 3.753475801109082}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20040940392742668, 'lambda': 6.089882885561852, 'beta': 9.128603243111915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.206681750242325, 'lambda': 6.198904242619507, 'beta': 4.924894933066253}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.106288707529768, 'lambda': 1.2054799204016655, 'beta': 3.703062331282104}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4817908272405984, 'lambda': 3.366484654397567, 'beta': 1.3769664464397147}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6054318734160564, 'lambda': 1.2864992386773872, 'beta': 3.238964945251653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4305674602573455, 'lambda': 7.067072131990367, 'beta': 6.3563218671429915}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.575427975215486, 'lambda': 0.06375270386105658, 'beta': 9.724795916604318}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7643640957661186, 'lambda': 2.590351736120293, 'beta': 9.148290902669332}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9966335424167094, 'lambda': 1.066056546488416, 'beta': 9.714049847391356}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21444370441262828, 'lambda': 2.99036960574663, 'beta': 6.571628583280472}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5092409195402847, 'lambda': 3.9363721204174293, 'beta': 6.914333022029995}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8424893442458667, 'lambda': 5.821865714795496, 'beta': 7.68151505688599}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4960859356983787, 'lambda': 0.7243082463864754, 'beta': 6.108394486679539}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.0431464464493998, 'lambda': 7.868850213663284, 'beta': 6.58783966527377}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.045144725513826, 'lambda': 2.6258117862202415, 'beta': 6.637738423017815}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7024195490995414, 'lambda': 1.7433520350365042, 'beta': 8.737978123211803}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.829003911149123, 'lambda': 5.1948498606375795, 'beta': 1.4419556482790408}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6348569611840759, 'lambda': 6.133195408093425, 'beta': 8.48450410828066}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5349518881167643, 'lambda': 1.7482053947343559, 'beta': 3.5244975953589774}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9676007575573825, 'lambda': 4.477630228961609, 'beta': 8.723746560035824}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.30055555082507746, 'lambda': 5.36847295623273, 'beta': 8.578015491579215}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08742749045804432, 'lambda': 4.506069666039659, 'beta': 3.1563558581634754}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4174701124160465, 'lambda': 7.3037233684862874, 'beta': 0.8280371415921284}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42326150885810554, 'lambda': 4.634044603413992, 'beta': 4.113870833644896}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20696161545582137, 'lambda': 2.478521388784432, 'beta': 8.56170850493289}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.454624062186182, 'lambda': 1.1331739193371222, 'beta': 0.5706415076400051}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0305551628319058, 'lambda': 6.0505785542284265, 'beta': 2.563494309925982}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2293243881663636, 'lambda': 0.7702302319981076, 'beta': 2.0265000169437988}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15079643555054578, 'lambda': 7.415768023115509, 'beta': 8.815617145145637}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.865708970631796, 'lambda': 6.500088256355306, 'beta': 9.182910495576474}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3802992930410762, 'lambda': 1.4270356414626768, 'beta': 5.556040231415537}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4609600371889262, 'lambda': 6.152866311691016, 'beta': 4.080639801127852}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1431423412829833, 'lambda': 7.543017120207923, 'beta': 8.47806529278094}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0175325462456257, 'lambda': 1.0465582772981064, 'beta': 9.14605263683156}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2987744139577845, 'lambda': 3.72874783284201, 'beta': 1.709417737027914}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8846530491480114, 'lambda': 3.8589947435603555, 'beta': 7.039261206902209}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1093264425350626, 'lambda': 5.870785032260405, 'beta': 1.6078367110068414}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5435844932773735, 'lambda': 5.342251595195358, 'beta': 3.1862331737224405}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0874407030383204, 'lambda': 1.0211055158732334, 'beta': 4.057515204048086}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8592149425816182, 'lambda': 7.959443738752362, 'beta': 9.003803563348932}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.07374366758383244, 'lambda': 1.5629658981516874, 'beta': 4.980815014060116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6460633213300915, 'lambda': 1.8334074841123007, 'beta': 2.6810631318775813}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6182681431533945, 'lambda': 7.202036430003547, 'beta': 1.2519619259063863}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7010522841066944, 'lambda': 3.6846247420789364, 'beta': 6.322229544895414}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5736462112661997, 'lambda': 0.7324826920191532, 'beta': 3.588401371643355}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.118440153874727, 'lambda': 4.748490183667508, 'beta': 1.483213279813107}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6973386422529009, 'lambda': 3.782888335242675, 'beta': 4.651715553607883}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6472448029671782, 'lambda': 2.459116444509318, 'beta': 9.257539419636945}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.503218888664219, 'lambda': 7.12635740003951, 'beta': 7.952495001166222}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4899163883696357, 'lambda': 2.3205808445668135, 'beta': 5.465199336892921}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4548789660317967, 'lambda': 7.8761795418631015, 'beta': 1.5894935354811501}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7759922158740483, 'lambda': 4.827406438877487, 'beta': 7.547970282740064}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6953814398770625, 'lambda': 6.80763920083032, 'beta': 7.625997811871493}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9127384327689111, 'lambda': 0.10732534703857244, 'beta': 2.7419721103378922}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7188625873865279, 'lambda': 7.954628359939472, 'beta': 9.71756808613748}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8512005939661385, 'lambda': 7.35642971959633, 'beta': 0.6274498989222721}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8977264273343777, 'lambda': 3.940416975653518, 'beta': 5.194575836019949}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6624921223599332, 'lambda': 5.396748139781867, 'beta': 3.701316469592105}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4834399976964145, 'lambda': 7.282489071726289, 'beta': 8.227985496992638}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.49598018016706, 'lambda': 4.711250963443637, 'beta': 5.5055439706996765}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4490032562309114, 'lambda': 5.0205428720794165, 'beta': 9.589887671603563}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8871519682149063, 'lambda': 4.459900509606672, 'beta': 1.591135851586677}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8350685027763145, 'lambda': 5.274953012809201, 'beta': 1.0090622133953453}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5902346932467752, 'lambda': 4.2447578665429955, 'beta': 1.9106917499930687}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8843041829668841, 'lambda': 5.027366129738275, 'beta': 9.01478888610116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5703364973633411, 'lambda': 4.717376857225168, 'beta': 5.5174637344725665}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.302137474252077, 'lambda': 4.56846658991864, 'beta': 8.58930723236342}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4788781578602568, 'lambda': 3.7383895070068576, 'beta': 3.868722226928444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6178474313639564, 'lambda': 1.9835276634398777, 'beta': 2.1944097345584868}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5312155510186676, 'lambda': 4.579911573474036, 'beta': 8.221744446310048}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3204562374572193, 'lambda': 3.9133411988891105, 'beta': 3.1443142523539827}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5690863936600532, 'lambda': 4.871712724319144, 'beta': 4.618553655494284}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0536345164676546, 'lambda': 7.725007858104671, 'beta': 9.363686790414326}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.570819190036681, 'lambda': 5.44981061812477, 'beta': 9.924916753764274}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3326089664510756, 'lambda': 7.1846010231522275, 'beta': 8.532863750416249}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6144625890784446, 'lambda': 5.506274698554647, 'beta': 1.7475623974087406}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5106482060778282, 'lambda': 3.605691000765324, 'beta': 3.290150674528375}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.593516876696665, 'lambda': 4.1677531370239125, 'beta': 4.5496402845674355}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0367757189337428, 'lambda': 4.739657754919305, 'beta': 1.2233171979061885}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3291216198361808, 'lambda': 3.2061987413803905, 'beta': 0.41871835802741675}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.543524146809199, 'lambda': 7.7141179841663385, 'beta': 0.13029287130790213}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2761402046756096, 'lambda': 5.263926944982689, 'beta': 6.04011061955978}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.898910248152909, 'lambda': 3.8570133392422505, 'beta': 3.0121850491912037}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1128407502757172, 'lambda': 7.240203348144937, 'beta': 8.768427018700649}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.797795109626184, 'lambda': 4.731348088633645, 'beta': 7.902971293540338}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.956608945885042, 'lambda': 4.122091125487221, 'beta': 3.2714301291327574}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6613825911910727, 'lambda': 7.542660964387303, 'beta': 6.50734926936034}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6016723417495967, 'lambda': 1.6282321865702505, 'beta': 5.361099896874203}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0536245235970123, 'lambda': 0.3694374810054679, 'beta': 0.3726349277603602}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8703269081050617, 'lambda': 7.08539555517838, 'beta': 1.483683980559929}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.956727540791152, 'lambda': 0.7045422410892375, 'beta': 8.82011043717481}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.864671908447149, 'lambda': 5.171116542439068, 'beta': 9.35479318504566}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.255510197626845, 'lambda': 0.43935596982065395, 'beta': 5.440506535327044}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9470340077287464, 'lambda': 1.4571389821729, 'beta': 3.057074554989141}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1170690219098491, 'lambda': 0.3809127532393308, 'beta': 1.7393562042844013}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.519723530166631, 'lambda': 6.885749652042789, 'beta': 3.7473343546369664}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8199224518438744, 'lambda': 7.29266864217889, 'beta': 8.698555844326632}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.925236394747636, 'lambda': 1.7860888780230395, 'beta': 7.442635803262393}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3362264503923043, 'lambda': 7.316711296550971, 'beta': 9.957761507719344}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.029016293865291476, 'lambda': 5.7123501169735995, 'beta': 6.368616844969527}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.426968868251722, 'lambda': 5.911115635195002, 'beta': 0.5186013158062186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.162882625992732, 'lambda': 3.872672663573651, 'beta': 7.162508747901497}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.00560973346285043, 'lambda': 7.810110233635362, 'beta': 2.487211940125884}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1785011754727706, 'lambda': 3.308383927824499, 'beta': 1.465403854199332}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.24500959709272185, 'lambda': 2.273650452614432, 'beta': 2.170086041185347}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.459160262798488, 'lambda': 2.554446492683767, 'beta': 6.822314779106113}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6180763962958593, 'lambda': 1.3312145401183155, 'beta': 8.45301703353615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.912954013087628, 'lambda': 5.634032144793107, 'beta': 5.127278877885377}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.534714521873292, 'lambda': 6.063795629610961, 'beta': 9.79047341705265}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7882821346454538, 'lambda': 4.506089709976785, 'beta': 9.070153338296308}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3516439775428923, 'lambda': 2.6801252858238973, 'beta': 6.1086110621066245}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.09993311445979824, 'lambda': 0.5715338559054954, 'beta': 2.929177286480771}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7469795122517366, 'lambda': 3.4548416210740864, 'beta': 2.4187409332825007}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9280432072902998, 'lambda': 3.4664723564716375, 'beta': 8.72130889383084}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.772511337894845, 'lambda': 5.925383770300685, 'beta': 7.204015531076713}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.748609245390089, 'lambda': 4.882878256478477, 'beta': 3.9840691252731486}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3567204827358972, 'lambda': 0.0664790195313989, 'beta': 3.032383984366742}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1833655476397491, 'lambda': 1.8054798877166922, 'beta': 3.79309969709291}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4170894039653328, 'lambda': 4.915538439043418, 'beta': 2.421007669531534}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7627770870872341, 'lambda': 3.7474671394368855, 'beta': 0.05835869974934016}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15440473438198243, 'lambda': 4.203415255920729, 'beta': 7.3161785924105915}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9827357773640992, 'lambda': 0.4421315228850853, 'beta': 1.3655752786505249}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.528856440851632, 'lambda': 0.44351575146145183, 'beta': 5.98577624505798}\"]"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: U = \u03ba * max(split_self - 3*token_self, 0) - \u03bb * max(3*token_self - split_self, 0) - \u03b2 * (1 + 3*(trial_type == 3)) * max(split_opp - split_self, 0) / (combined_earning / 10)\nSummary: Hybrid prospect theory model with contribution-based reference point (3\u00d7token_self), loss aversion (\u03bb), gain sensitivity (\u03ba), and context-modulated inequity aversion (\u03b2). Losses are evaluated relative to contribution value with convex weighting (\u03c1=1.33 locked). Inequity penalties are amplified 4x when participants contributed more tokens (trial_type=3). Combines outcome valuation with neuroeconomically constrained parameters.\nTarget Variable: accept\nPrediction Type: utility"
  ]
}