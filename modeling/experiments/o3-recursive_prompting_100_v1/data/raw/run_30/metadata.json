{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is possible.\n\nFirst, I need to identify which variables are relevant. The target is \"accept\", which is binary (0 or 1). The model should predict this based on the utility of accepting the proposal. Since the task mentions fairness and contributions, variables like token_self, token_opp, split_self, split_opp, and combined_earning are likely important.\n\nThe model should calculate utility, which then translates into the probability of accepting via a logistic function. The utility function needs to capture aspects like fairness, self-interest, and possibly loss aversion.\n\nConsidering the parameters, I need to include learnable ones with finite bounds. Prospect Theory elements might be useful here, such as different sensitivities to gains and losses relative to a reference point. The reference point could be the participant's own contribution (token_self * \u00a33), representing what they might consider their fair share.\n\nSo, the utility could be the difference between the proposed share (split_self) and the reference point, weighted by a parameter. Additionally, an inequity aversion term could account for the difference between the opponent's share and the participant's share. Loss aversion would mean that losses (split_self below reference) have a stronger effect than gains.\n\nLet me structure the utility function:\n\nUtility = \u03b1*(split_self - reference) + \u03b2*(split_opp - split_self)\n\nBut to incorporate loss aversion, maybe separate the gain and loss terms with different parameters. For example:\n\nUtility = \u03b1_gain*(split_self - reference)_+ - \u03b1_loss*(reference - split_self)_+ + \u03b2*(split_opp - split_self)\n\nWhere (x)_+ is the positive part. This way, gains and losses relative to the reference are treated differently.\n\nThe parameters \u03b1_gain, \u03b1_loss, and \u03b2 would be learnable. \u03b1_loss should be larger than \u03b1_gain to reflect loss aversion. However, to simplify, maybe use a single \u03b1 for the linear term and a \u03bb parameter to scale the loss term higher. For example:\n\nUtility = \u03b1*(split_self - reference) + \u03bb*max(reference - split_self, 0) + \u03b2*(split_opp - split_self)\n\nBut this might not capture the non-linear aspects. Alternatively, use a prospect theory approach where gains and losses are evaluated with different exponents. However, adding exponents could complicate parameter recovery. Maybe keep it linear for simplicity but separate gain and loss coefficients.\n\nAnother consideration is the combined_earning. Since the fairness might depend on the total pot, the inequity term could be normalized by combined_earning. So, the difference in splits divided by total to make it a proportion.\n\nPutting it all together:\n\nReference = 3 * token_self (since each token is \u00a33)\nGain = max(split_self - reference, 0)\nLoss = max(reference - split_self, 0)\nInequity = (split_opp - split_self) / combined_earning\n\nUtility = \u03b1_gain * Gain - \u03b1_loss * Loss + \u03b2 * Inequity\n\nThen, the probability of accepting is logistic(Utility). The parameters \u03b1_gain, \u03b1_loss, and \u03b2 need bounds. \u03b1_loss should be greater than \u03b1_gain, but to allow the model to learn, maybe set a wider bound and let the data determine it.\n\nAlternatively, use a single \u03b1 for the linear term and a \u03bb multiplier for the loss part:\n\nUtility = \u03b1*(split_self - reference) + \u03bb*(reference - split_self)*(split_self < reference) + \u03b2*(split_opp - split_self)/combined_earning\n\nBut this might not be the best way. Let's stick with separate gain and loss coefficients.\n\nNow, variable descriptions:\n\n- \u03b1_gain: sensitivity to gains relative to reference. Bounds [0, 10].\n- \u03b1_loss: sensitivity to losses, should be >= \u03b1_gain. Bounds [0, 20].\n- \u03b2: sensitivity to inequity (difference in splits). Bounds [-10, 10], but maybe only positive since people dislike disadvantageous inequity.\n\nWait, in the responder role, if split_opp is the opponent's share, then (split_opp - split_self) could be positive (participant gets less) or negative. But responders might only care when they're getting less. So maybe take the positive part of (split_opp - split_self). Alternatively, use absolute difference. But the model should capture aversion to being disadvantaged.\n\nAlternatively, Inequity = max(split_opp - split_self, 0) / combined_earning. So only consider cases where the opponent gets more. But the variable \"trial_type\" indicates whether the contribution was equal, opponent more, or participant more. Maybe the inequity aversion depends on the trial type. However, to keep the model simple, perhaps just use the raw difference.\n\nBut given the instruction to use the variables appropriately, maybe include trial_type as a modulator for \u03b2. For example, \u03b2 could be scaled based on trial_type. But that adds complexity. Alternatively, since trial_type is categorical, create different \u03b2 parameters for each type. But that would increase the number of parameters. The initial model should be simple, so perhaps ignore trial_type for now, given that the combined_earning and splits already capture the monetary aspects.\n\nWait, the note says that two equal split_self may not be fair because combined_earning varies. So the model must account for the total. Hence, normalizing the inequity term by combined_earning makes sense.\n\nPutting it all together:\n\n<MODEL>\nutility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\n</MODEL>\n\nVariables:\n- alpha_gain: learnable, [0, 10]\n- alpha_loss: learnable, [0, 20]\n- beta: learnable, [-5, 5]\n- split_self, token_self, split_opp, combined_earning: from data\n\nThe probability of accept is logistic(utility). Since the target is binary, the model's output is the logit of utility.\n\nFor parameter recovery, the parameters should be identifiable. The gain and loss terms are separated, so alpha_gain and alpha_loss can be recovered if the data has instances of both gains and losses relative to the reference. The beta term captures inequity aversion normalized by total, which should be orthogonal to the other terms.\n\nVariable descriptions in JSON:\n\n- alpha_gain: sensitivity to gains over reference, range [0,10], inclusive.\n- alpha_loss: sensitivity to losses below reference, range [0,20], inclusive.\n- beta: sensitivity to inequity (opponent's share minus own), normalized by total, range [-5,5], inclusive.\n- split_self, token_self, split_opp, combined_earning: data variables.\n\nThis model uses the key variables related to the participant's contribution (token_self), the proposed splits, and the total earnings. It incorporates loss aversion via separate alpha parameters and inequity aversion via beta. The parameters have reasonable bounds to allow learning without being too restrictive.\n</think>\n\n<MODEL>\nutility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha_gain\": {\n      \"description\": \"Sensitivity to gains relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_loss\": {\n      \"description\": \"Sensitivity to losses relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion sensitivity normalized by total earnings\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model evaluating offers relative to contribution-based reference points. Computes utility through separate gain/loss sensitivities and inequity aversion. Losses are weighted more heavily than gains (via parameter bounds). Normalizes inequity term by total earnings to account for stake size. Directly uses token contributions to establish fairness expectations.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_gain', 'alpha_loss', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha_gain\": {\n      \"description\": \"Sensitivity to gains relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_loss\": {\n      \"description\": \"Sensitivity to losses relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion sensitivity normalized by total earnings\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_gain=1, alpha_loss=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference_point = 3 * token_self\n\n        gain = max(split_self - reference_point, 0)\n        loss = max(reference_point - split_self, 0)\n        inequity = (split_opp - split_self) / combined_earning if combined_earning != 0 else 0  # Avoid division by zero\n\n        utility = alpha_gain * gain - alpha_loss * loss + beta * inequity\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n{\"results\": [0.0, 0.0]}\n'''\n```",
      "timestamp": 1744017124.345161
    }
  ],
  "learnable_parameters": {
    "alpha_gain": {
      "description": "Sensitivity to gains relative to reference point (3*token_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_loss": {
      "description": "Sensitivity to losses relative to reference point (3*token_self)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion sensitivity normalized by total earnings",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning",
  "variable_descriptions": {
    "alpha_gain": {
      "description": "Sensitivity to gains relative to reference point (3*token_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_loss": {
      "description": "Sensitivity to losses relative to reference point (3*token_self)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion sensitivity normalized by total earnings",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's contribution in tokens",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share for opponent in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in shared pot (\u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Computes utility through separate gain/loss sensitivities and inequity aversion. Losses are weighted more heavily than gains (via parameter bounds). Normalizes inequity term by total earnings to account for stake size. Directly uses token contributions to establish fairness expectations.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is possible.\n\nFirst, I need to identify which variables are relevant. The target is \"accept\", which is binary (0 or 1). The model should predict this based on the utility of accepting the proposal. Since the task mentions fairness and contributions, variables like token_self, token_opp, split_self, split_opp, and combined_earning are likely important.\n\nThe model should calculate utility, which then translates into the probability of accepting via a logistic function. The utility function needs to capture aspects like fairness, self-interest, and possibly loss aversion.\n\nConsidering the parameters, I need to include learnable ones with finite bounds. Prospect Theory elements might be useful here, such as different sensitivities to gains and losses relative to a reference point. The reference point could be the participant's own contribution (token_self * \u00a33), representing what they might consider their fair share.\n\nSo, the utility could be the difference between the proposed share (split_self) and the reference point, weighted by a parameter. Additionally, an inequity aversion term could account for the difference between the opponent's share and the participant's share. Loss aversion would mean that losses (split_self below reference) have a stronger effect than gains.\n\nLet me structure the utility function:\n\nUtility = \u03b1*(split_self - reference) + \u03b2*(split_opp - split_self)\n\nBut to incorporate loss aversion, maybe separate the gain and loss terms with different parameters. For example:\n\nUtility = \u03b1_gain*(split_self - reference)_+ - \u03b1_loss*(reference - split_self)_+ + \u03b2*(split_opp - split_self)\n\nWhere (x)_+ is the positive part. This way, gains and losses relative to the reference are treated differently.\n\nThe parameters \u03b1_gain, \u03b1_loss, and \u03b2 would be learnable. \u03b1_loss should be larger than \u03b1_gain to reflect loss aversion. However, to simplify, maybe use a single \u03b1 for the linear term and a \u03bb parameter to scale the loss term higher. For example:\n\nUtility = \u03b1*(split_self - reference) + \u03bb*max(reference - split_self, 0) + \u03b2*(split_opp - split_self)\n\nBut this might not capture the non-linear aspects. Alternatively, use a prospect theory approach where gains and losses are evaluated with different exponents. However, adding exponents could complicate parameter recovery. Maybe keep it linear for simplicity but separate gain and loss coefficients.\n\nAnother consideration is the combined_earning. Since the fairness might depend on the total pot, the inequity term could be normalized by combined_earning. So, the difference in splits divided by total to make it a proportion.\n\nPutting it all together:\n\nReference = 3 * token_self (since each token is \u00a33)\nGain = max(split_self - reference, 0)\nLoss = max(reference - split_self, 0)\nInequity = (split_opp - split_self) / combined_earning\n\nUtility = \u03b1_gain * Gain - \u03b1_loss * Loss + \u03b2 * Inequity\n\nThen, the probability of accepting is logistic(Utility). The parameters \u03b1_gain, \u03b1_loss, and \u03b2 need bounds. \u03b1_loss should be greater than \u03b1_gain, but to allow the model to learn, maybe set a wider bound and let the data determine it.\n\nAlternatively, use a single \u03b1 for the linear term and a \u03bb multiplier for the loss part:\n\nUtility = \u03b1*(split_self - reference) + \u03bb*(reference - split_self)*(split_self < reference) + \u03b2*(split_opp - split_self)/combined_earning\n\nBut this might not be the best way. Let's stick with separate gain and loss coefficients.\n\nNow, variable descriptions:\n\n- \u03b1_gain: sensitivity to gains relative to reference. Bounds [0, 10].\n- \u03b1_loss: sensitivity to losses, should be >= \u03b1_gain. Bounds [0, 20].\n- \u03b2: sensitivity to inequity (difference in splits). Bounds [-10, 10], but maybe only positive since people dislike disadvantageous inequity.\n\nWait, in the responder role, if split_opp is the opponent's share, then (split_opp - split_self) could be positive (participant gets less) or negative. But responders might only care when they're getting less. So maybe take the positive part of (split_opp - split_self). Alternatively, use absolute difference. But the model should capture aversion to being disadvantaged.\n\nAlternatively, Inequity = max(split_opp - split_self, 0) / combined_earning. So only consider cases where the opponent gets more. But the variable \"trial_type\" indicates whether the contribution was equal, opponent more, or participant more. Maybe the inequity aversion depends on the trial type. However, to keep the model simple, perhaps just use the raw difference.\n\nBut given the instruction to use the variables appropriately, maybe include trial_type as a modulator for \u03b2. For example, \u03b2 could be scaled based on trial_type. But that adds complexity. Alternatively, since trial_type is categorical, create different \u03b2 parameters for each type. But that would increase the number of parameters. The initial model should be simple, so perhaps ignore trial_type for now, given that the combined_earning and splits already capture the monetary aspects.\n\nWait, the note says that two equal split_self may not be fair because combined_earning varies. So the model must account for the total. Hence, normalizing the inequity term by combined_earning makes sense.\n\nPutting it all together:\n\n<MODEL>\nutility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\n</MODEL>\n\nVariables:\n- alpha_gain: learnable, [0, 10]\n- alpha_loss: learnable, [0, 20]\n- beta: learnable, [-5, 5]\n- split_self, token_self, split_opp, combined_earning: from data\n\nThe probability of accept is logistic(utility). Since the target is binary, the model's output is the logit of utility.\n\nFor parameter recovery, the parameters should be identifiable. The gain and loss terms are separated, so alpha_gain and alpha_loss can be recovered if the data has instances of both gains and losses relative to the reference. The beta term captures inequity aversion normalized by total, which should be orthogonal to the other terms.\n\nVariable descriptions in JSON:\n\n- alpha_gain: sensitivity to gains over reference, range [0,10], inclusive.\n- alpha_loss: sensitivity to losses below reference, range [0,20], inclusive.\n- beta: sensitivity to inequity (opponent's share minus own), normalized by total, range [-5,5], inclusive.\n- split_self, token_self, split_opp, combined_earning: data variables.\n\nThis model uses the key variables related to the participant's contribution (token_self), the proposed splits, and the total earnings. It incorporates loss aversion via separate alpha parameters and inequity aversion via beta. The parameters have reasonable bounds to allow learning without being too restrictive.\n</think>\n\n<MODEL>\nutility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha_gain\": {\n      \"description\": \"Sensitivity to gains relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_loss\": {\n      \"description\": \"Sensitivity to losses relative to reference point (3*token_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion sensitivity normalized by total earnings\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for opponent in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model evaluating offers relative to contribution-based reference points. Computes utility through separate gain/loss sensitivities and inequity aversion. Losses are weighted more heavily than gains (via parameter bounds). Normalizes inequity term by total earnings to account for stake size. Directly uses token contributions to establish fairness expectations.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\nSummary: A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Computes utility through separate gain/loss sensitivities and inequity aversion. Losses are weighted more heavily than gains (via parameter bounds). Normalizes inequity term by total earnings to account for stake size. Directly uses token contributions to establish fairness expectations.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_gain=1, alpha_loss=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n\n        reference_point = 3 * token_self\n\n        gain = max(split_self - reference_point, 0)\n        loss = max(reference_point - split_self, 0)\n        inequity = (split_opp - split_self) / combined_earning if combined_earning != 0 else 0  # Avoid division by zero\n\n        utility = alpha_gain * gain - alpha_loss * loss + beta * inequity\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7014652014652015,
  "fitting_results": [
    {
      "alpha_gain": 1.0801572061940787,
      "alpha_loss": 0.8606867998125496,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -4.349666929954338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.39022364522515407,
      "beta": 1.0429099411169236,
      "success": true,
      "log_likelihood": -21.11736986131283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.7899053416370866,
      "beta": 3.62955502746757,
      "success": true,
      "log_likelihood": -18.93685358515848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 9.46544850566569,
      "alpha_loss": 0.2586057287644858,
      "beta": -0.7405824505769654,
      "success": true,
      "log_likelihood": -19.35913753214645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 1.2587547882438281,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -13.47684740497562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3449467350531209,
      "beta": 1.8418271365027585,
      "success": true,
      "log_likelihood": -22.552973790916173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.497875731717518,
      "beta": 3.1430812658183562,
      "success": true,
      "log_likelihood": -21.6955597543537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.8490890877225805,
      "beta": 2.1358380871494123,
      "success": true,
      "log_likelihood": -16.09339502461851,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.8196579947108581,
      "beta": 2.4077622323833165,
      "success": true,
      "log_likelihood": -16.934968885850868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801591314172587,
      "alpha_loss": 0.6270151659409949,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -6.399653889691649,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.8914097651998412,
      "beta": 2.436479005074047,
      "success": true,
      "log_likelihood": -15.995365570210454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 2.1756507713025117,
      "success": true,
      "log_likelihood": -19.995780774072326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3239491687777104,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -16.899433095916045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.6586419837632552,
      "beta": 3.185270209119758,
      "success": true,
      "log_likelihood": -20.176169384115404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3425000518897749,
      "beta": 4.664062088249885,
      "success": true,
      "log_likelihood": -18.614993790257333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -3.3154673271468895,
      "success": true,
      "log_likelihood": -16.747313225127957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.05193714416153235,
      "beta": -0.8826113736090849,
      "success": true,
      "log_likelihood": -22.31265739768466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 1.0957549921012428,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -14.77918342157788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3043377327032405,
      "beta": 1.3007880075377793,
      "success": true,
      "log_likelihood": -22.559073598057147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 9.320805810035411,
      "alpha_loss": 0.11986916457283871,
      "beta": -0.533705221861323,
      "success": true,
      "log_likelihood": -22.101687409976186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 1.526711079501933,
      "beta": 2.086586422541986,
      "success": true,
      "log_likelihood": -9.924334340257463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.29998050934780135,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -15.820695120149688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.4230676862391433,
      "beta": 4.34624079011691,
      "success": true,
      "log_likelihood": -20.282225635380343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888851,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801729367659518,
      "alpha_loss": 0.8606763372983385,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -4.349666929775022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -2.4223339570560154,
      "success": true,
      "log_likelihood": -19.30890564786582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.19896493614137495,
      "beta": -1.5214042083617931,
      "success": true,
      "log_likelihood": -18.314783966200377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.742874599888852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -0.38601556868385256,
      "success": true,
      "log_likelihood": -23.434766617899385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.2963984852213658,
      "beta": 2.0663014838407876,
      "success": true,
      "log_likelihood": -22.81241975849145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.8072534421432453,
      "beta": 3.488080902209467,
      "success": true,
      "log_likelihood": -18.56740025433998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.4772586668843153,
      "beta": 3.3865904305855845,
      "success": true,
      "log_likelihood": -21.710922499206333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.06383936585262513,
      "beta": 4.369423239924103,
      "success": true,
      "log_likelihood": -14.91096168953871,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.5154709811655916,
      "beta": 2.93777215779812,
      "success": true,
      "log_likelihood": -21.54413823912745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.7205543222274129,
      "beta": -0.8989154941638274,
      "success": true,
      "log_likelihood": -12.104891344838117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -7.742874599163478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -1.1400668886884742,
      "success": true,
      "log_likelihood": -22.450813374233945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.21740312842641887,
      "beta": 0.833907121874882,
      "success": true,
      "log_likelihood": -22.960245846849432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 0.8393251949269126,
      "success": true,
      "log_likelihood": -22.944616684323666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.18050942792114116,
      "beta": -0.30264410852569223,
      "success": true,
      "log_likelihood": -21.701708402206055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.03257341943742185,
      "beta": -2.056773054776727,
      "success": true,
      "log_likelihood": -19.76962554248335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 8.393682545096294,
      "alpha_loss": 1.3679368931664921,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -11.332016012627978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.7852037010407307,
      "alpha_loss": 0.0,
      "beta": -0.5644442828775039,
      "success": true,
      "log_likelihood": -24.50425508226451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.12178810264641185,
      "beta": 1.3700144345181164,
      "success": true,
      "log_likelihood": -23.11261397237187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801748034074115,
      "alpha_loss": 0.17803406094777344,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -8.687970356638028,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -1.2643471269039959,
      "success": true,
      "log_likelihood": -22.210422388579392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.7657937473939532,
      "alpha_loss": 0.0,
      "beta": -0.23132788996906894,
      "success": true,
      "log_likelihood": -24.742604530665517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 1.0747360873109446,
      "beta": 4.730334708935606,
      "success": true,
      "log_likelihood": -16.44240894189073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 1.279354075750235,
      "beta": 2.81973457099258,
      "success": true,
      "log_likelihood": -12.31443770807909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.6803815068840404,
      "beta": -0.8699744231481055,
      "success": true,
      "log_likelihood": -12.613353985092818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 4.8410120698464665,
      "success": true,
      "log_likelihood": -12.73685674812668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801314350771984,
      "alpha_loss": 0.5317136785367688,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -6.159510006088333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 1.6592306106361012,
      "success": true,
      "log_likelihood": -21.333672637279232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.13918796335217604,
      "beta": 0.695389193767292,
      "success": true,
      "log_likelihood": -23.38216700204415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.6160189169329122,
      "beta": 2.221723104100725,
      "success": true,
      "log_likelihood": -19.631654512815093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801710264446764,
      "alpha_loss": 0.8606745409059564,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -4.349666929780397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -1.870828040284848,
      "success": true,
      "log_likelihood": -20.806238735312235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.17803296724476683,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -9.981561203499755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.024040860102685028,
      "beta": -0.991955324396406,
      "success": true,
      "log_likelihood": -22.446268586120393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.09440514664740678,
      "beta": 4.41968026239798,
      "success": true,
      "log_likelihood": -15.2790908255933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3271060795080622,
      "beta": 4.83449044372618,
      "success": true,
      "log_likelihood": -17.94412958365652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -1.0790125618770197,
      "success": true,
      "log_likelihood": -22.56176165012694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0637938033252218,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -12.688132334405545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 20.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -1.0436436637930528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801562442362498,
      "alpha_loss": 0.235942427835876,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -8.033332900305478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.23845026185554247,
      "beta": 0.29735358096383124,
      "success": true,
      "log_likelihood": -22.016539086414927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 8.5429743120748,
      "alpha_loss": 0.0,
      "beta": 1.392866674134458,
      "success": true,
      "log_likelihood": -21.946078772046974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.0,
      "alpha_loss": 0.07716181724438913,
      "beta": -0.248994993036906,
      "success": true,
      "log_likelihood": -24.438119013137232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 9.612643752423244,
      "alpha_loss": 0.3354733527690494,
      "beta": 2.3107652842073647,
      "success": true,
      "log_likelihood": -22.623296432654804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.013068007818423603,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -11.240819780174135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.0,
      "alpha_loss": 0.9701173483810368,
      "beta": -3.5497306598873872,
      "success": true,
      "log_likelihood": -7.790637236831394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 0.33032103788466627,
      "success": true,
      "log_likelihood": -23.470261159753445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 1.0801741945871322,
      "alpha_loss": 0.8606763421354116,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -4.3496669297752755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -0.6676829696709203,
      "success": true,
      "log_likelihood": -23.171645636606524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 4.841009008536175,
      "success": true,
      "log_likelihood": -12.73685674780489,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.0,
      "alpha_loss": 0.5044659918486967,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -8.030483001142063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -1.7987188700899575,
      "success": true,
      "log_likelihood": -20.989704691370594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.13678693110980134,
      "beta": 1.3503104952801908,
      "success": true,
      "log_likelihood": -23.190698726241248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.8606772652756133,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -3.6432577769372236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.3442488886874204,
      "beta": 2.8418854202861596,
      "success": true,
      "log_likelihood": -22.245686959293476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 0.0,
      "alpha_loss": 1.1832998859917483,
      "beta": 1.9660911702532495,
      "success": true,
      "log_likelihood": -13.521165290379066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0637971858785953,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -11.68813233390632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": -2.0962541776037114,
      "success": true,
      "log_likelihood": -20.21153712347402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha_gain": 10.0,
      "alpha_loss": 0.0,
      "beta": 0.7833293810722075,
      "success": true,
      "log_likelihood": -23.025851847982867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_gain": {
        "r": 0.2722383514333907,
        "p": 0.4466868819814036
      },
      "alpha_loss": {
        "r": 0.77975711583823,
        "p": 0.007815219420210181
      },
      "beta": {
        "r": 0.6925578866930264,
        "p": 0.026432692105936677
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 42.357329585926294,
  "bic_results": {
    "average_bic": 42.357329585926294,
    "individual_bics": [
      19.449890675277004,
      52.98529653799399,
      48.62426398568529,
      49.468831879661224,
      37.70425162531957,
      55.85650439720068,
      22.236306015146035,
      54.14167632407573,
      22.236306015146035,
      42.937346864605345,
      44.62049458707007,
      23.54986459475163,
      42.74128795578924,
      22.236306015146035,
      22.236306015146035,
      22.236306015146035,
      22.236306015146035,
      50.742118363512986,
      44.54942300720042,
      22.236306015146035,
      51.102895583599135,
      47.980544395883,
      44.24518326562425,
      55.37587161073765,
      40.308923658524094,
      55.86870401148262,
      54.9539316353207,
      30.599225495883257,
      42.39194705566771,
      51.31500808612901,
      22.236306015146035,
      19.449890674918375,
      49.36836811109997,
      47.38012474776909,
      22.236306015146035,
      57.6200900511671,
      56.37539633235123,
      47.885357324048286,
      54.17240181378099,
      40.572480194445745,
      53.838833293623225,
      34.960339505044566,
      26.236306013695287,
      55.65218356383622,
      56.67104850906719,
      56.639790184015666,
      54.153973619780444,
      50.289807900335035,
      33.41458884062429,
      59.759066979897355,
      56.97578476011208,
      28.126497528644386,
      55.17140159252712,
      60.23576587669936,
      43.63537469914979,
      35.37943223152651,
      35.97726478555397,
      36.224270311621694,
      23.069576827545,
      53.4179020899268,
      57.514890819456625,
      50.01386584099852,
      19.449890674929122,
      52.363034285992796,
      30.71367922236784,
      55.64309398760912,
      41.30873846655493,
      46.638815982681365,
      55.874080115622206,
      36.126821484179416,
      12.837844142954436,
      26.817222615979286,
      54.78363498819819,
      54.642714359462275,
      59.62679484164279,
      55.997149680677936,
      33.2321963757166,
      26.33183128903112,
      57.691079134875224,
      19.449890674918883,
      57.09384808858138,
      36.22427031097811,
      26.811522817652456,
      52.72996619810952,
      57.13195426785083,
      18.03707236924278,
      55.241930733955286,
      37.79288739612646,
      34.126821483180976,
      51.173631062316375,
      56.80226051133407
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_gain: r = 0.272\n- alpha_loss: r = 0.780\n- beta: r = 0.693",
  "previous_models": [
    "Specification: utility = alpha_gain * max(split_self - 3*token_self, 0) - alpha_loss * max(3*token_self - split_self, 0) + beta * (split_opp - split_self) / combined_earning\nSummary: A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Computes utility through separate gain/loss sensitivities and inequity aversion. Losses are weighted more heavily than gains (via parameter bounds). Normalizes inequity term by total earnings to account for stake size. Directly uses token contributions to establish fairness expectations.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 42.357329585926294\nOverall Accuracy: 0.7015\n\nParameter Recovery:\n- alpha_gain: r = 0.272\n- alpha_loss: r = 0.780\n- beta: r = 0.693"
  ]
}