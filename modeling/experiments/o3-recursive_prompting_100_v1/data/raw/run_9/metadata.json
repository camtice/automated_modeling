{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run's results. The model had a BIC of around 47.93, which is higher than the best previous model (31.04), and the accuracy was about 59.9%, which is lower than the third model's 81.6%. The parameter recovery for alpha was very low (r=0.104) and beta was moderate (0.521). This suggests that the model structure from the previous run isn't capturing the underlying decision processes effectively, especially for alpha.\n\nThe previous instructions focused on prospect theory with reference points, non-linear transformations, and trial_type scaling. However, the results didn't improve, indicating that the model might be overcomplicating things or the parameters aren't orthogonal enough. The low alpha recovery suggests that the reference point calculation (gamma) might not be identifiable, or the terms are collinear.\n\nTo improve, the next model should simplify the reference point or make parameters more identifiable. Maybe fixing gamma to a specific value (like 0.5) to reduce parameters. Alternatively, using a different approach to reference points, such as a fixed fair share (3*token_self) instead of a dynamic mix. Also, the non-linear transformations (\u03c3 and \u03c1) might be causing issues if they're fixed but not appropriate for the data. Perhaps removing them or making them learnable with tight bounds could help.\n\nAnother angle: The trial_type scaling for beta (\u03b8) wasn't part of the previous model's parameters, but maybe including it as a learnable parameter could help capture context effects. However, adding parameters increases BIC, so need to balance. Alternatively, using trial_type to modulate the reference point instead of loss aversion.\n\nThe radical constraint in the previous run fixed \u03c3 and \u03c1, but maybe allowing them to vary slightly within a narrow range could capture individual differences without adding too many parameters. Or, using a different form of non-linearity, like logarithmic scaling for gains and losses.\n\nTo improve orthogonality, ensure that each parameter's term is scaled by different variables. For example, scaling the loss term by token_self and the inequity term by combined_earning. This could reduce covariance between parameters.\n\nThe new instructions should encourage a balance between prospect theory elements and simplicity. Maybe a hybrid model that uses a fixed reference point (3*token_self) with loss aversion and gain sensitivity, while incorporating trial_type into the inequity term. Also, simplifying the non-linear transformations to avoid overcomplicating the utility function.\n\nPotential steps:\n1. Use a fixed reference point (3*token_self) to eliminate gamma.\n2. Separate loss and gain sensitivities (lambda and kappa) with fixed exponents (\u03c3=0.88, \u03c1=1.25) to maintain parsimony.\n3. Incorporate trial_type into the inequity term (beta) by scaling it when trial_type=3 (participant contributed more).\n4. Ensure terms are orthogonal by scaling each parameter's component with different variables (e.g., loss term scaled by token_self, inequity by combined_earning).\n\nThis approach reduces the number of parameters (lambda, kappa, beta) while maintaining identifiability. The trial_type scaling on beta could improve its recovery by isolating its effect in specific contexts.\n</think>\n\n**Instructions for Run 5/200:**  \nDesign a *hybrid prospect-theoretic fairness model* with these innovations:  \n\n1. **Simplified Reference Architecture**  \n   - Anchor utility to an *immutable contribution standard*:  \n     `reference = 3*token_self` (eliminate \u03b3 parameter)  \n   - Implement *asymmetric outcome valuation*:  \n     ```  \n     U = \u03ba*(split_self - reference)^+ - \u03bb*(reference - split_self)^+  \n            - \u03b2*(split_opp - split_self)^+/(combined_earning/10)  \n     ```  \n     Where `(x)^+ = max(0,x)`  \n\n2. **Context-Contingent Inequality Penalty**  \n   - Amplify \u03b2 sensitivity in trials where participants contributed more tokens:  \n     ```  \n     \u03b2_effective = \u03b2 * [1 + trial_type*(trial_type==3)]  \n     ```  \n     (Intrinsic 3x \u03b2 weighting when token_self > token_opp)  \n\n3. **Neuroeconomic Compression**  \n   - Apply *fixed behavioral economics priors* to curvature parameters:  \n     - \u03ba gains: Linear (\u03c3=1.0 locked)  \n     - \u03bb losses: Convex (\u03c1=1.33 locked from meta-analysis)  \n\n**Identifiability Safeguards:**  \n- Z-score split_self relative to token_self before exponentiation  \n- Confine \u03bb to [0,8], \u03ba to [0,3] to match prospect theory magnitude ratios  \n\n**Success Metrics:**  \n- Target BIC <25 through \u03ba/\u03bb synergy effects  \n- Achieve \u03b2 recovery r >0.65 via trial_type contrast enhancement  \n- Maintain \u03bb recovery r >0.85 through convex loss architecture\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is feasible.\n\nFirst, I need to identify the key variables that influence the responder's decision. The main target is \"accept\", which is binary. The model should calculate the utility of accepting versus rejecting, but since we're only predicting the accept/reject decision, the utility function should capture the factors that lead to this choice.\n\nFrom the dataset, important variables include token_self (participant's contribution), token_opp (opponent's contribution), split_self (proposed share for participant), split_opp (proposed share for opponent), combined_earning, and trial_type. Since the task involves fairness considerations, the model should incorporate both the absolute offer (split_self) and relative fairness compared to contributions.\n\nProspect theory concepts might be useful here, where gains and losses are evaluated relative to a reference point. The reference point could be based on the participant's contribution (token_self * \u00a33, since each token is \u00a33). If the proposed split_self is less than this reference, it's a loss; if more, a gain. \n\nThe utility function could then have two components: one for the monetary outcome relative to the reference, and another for inequity aversion (disliking unequal splits beyond what's justified by contributions). Parameters would control sensitivity to losses (lambda), gains (kappa), and inequity (beta). \n\nTrial_type indicates whether contributions are equal, opponent more, or participant more. This might modulate the inequity aversion. For example, if the participant contributed more (trial_type=3), they might be more sensitive to receiving less than their fair share.\n\nTo ensure parameter recovery, each parameter should have clear bounds. Lambda (loss aversion) should be positive, maybe between 0 and 8. Kappa (gain sensitivity) could be between 0 and 3. Beta (inequity aversion) might be between 0 and 5. The reference point is calculated from token_self, so no learnable parameter there.\n\nThe utility function U would combine these elements. If U is positive, the participant is more likely to accept. The probability of accepting can be modeled with a logistic function of U.\n\nNow, structuring the mathematical model:\n\nU = kappa * (split_self - reference)^sigma - lambda * (reference - split_self)^rho - beta * (split_opp - (combined_earning - split_self)) / combined_earning\n\nBut wait, split_opp is the opponent's proposed share, and combined_earning is total. So the inequity term could be the difference between the opponent's share and the participant's share, adjusted by their contributions. Alternatively, compare the split percentages to the contribution percentages.\n\nAlternatively, the inequity term might be based on the difference between the proposed split and the fair split based on contributions. The fair split for the participant would be (token_self / (token_self + token_opp)) * combined_earning. The difference between split_self and this fair value could be part of the utility.\n\nBut to keep the model simpler and ensure parameters are recoverable, maybe stick with a basic inequity term that's the difference between split_opp and split_self, scaled by combined_earning. Or use the percentage splits.\n\nWait, the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So the model must account for the proportion relative to contributions. Maybe the fair share is 3 * token_self, and the proposed split_self compared to that.\n\nSo reference_point = 3 * token_self (since each token is \u00a33). Then, the monetary component is split_self - reference_point. The loss is max(reference_point - split_self, 0), the gain is max(split_self - reference_point, 0). These are scaled by lambda and kappa, with exponents sigma and rho for non-linear perception.\n\nThe inequity component could be the difference between the opponent's share and the participant's share, adjusted by their contributions. For example, if the opponent's split is more than their contribution warrants, that's unfair. Alternatively, the difference between split_opp and (3 * token_opp), but that might complicate things.\n\nAlternatively, the inequity term could be (split_opp - split_self) / combined_earning, representing the relative difference. But this might not account for contributions. Alternatively, the difference between the proposed split percentages (splitperc_opp and splitperc_self) and the contribution percentages. The contribution percentage for self is (token_self / (token_self + token_opp)) * 100. The proposed split percentage for self is splitperc_self. The difference between these could be the inequity.\n\nBut including contribution percentages would require calculating (token_self / (token_self + token_opp)) * 100, which is data-derived. The model can use this as a variable.\n\nSo, the inequity term could be beta * |splitperc_self - (token_self / (token_self + token_opp)*100)|. This represents how far the proposed split is from the contribution-based fair split. The absolute value ensures any deviation is penalized. However, maybe participants are only averse to being undercompensated, not over. So maybe only penalize when splitperc_self is less than the fair percentage.\n\nAlternatively, the model could have two terms: one for disadvantageous inequity (when split_self is less than fair) and another for advantageous, but that adds more parameters. To keep it simple, maybe a single term for absolute inequity.\n\nPutting it all together:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta * |splitperc_self - fair_perc|\n\nWhere fair_perc = (token_self / (token_self + token_opp)) * 100\n\nBut fair_perc can be calculated from the data, so it's a derived variable. However, in the dataset, we have splitperc_self and splitperc_opp. Wait, splitperc_self is the proposed percentage for the participant, and splitperc_opp is for the opponent. So the sum should be 100, but maybe in the data, that's the case.\n\nBut the fair percentage based on contributions is (token_self / (token_self + token_opp)) * 100. Let's call this contrib_perc_self. Then, the inequity is splitperc_self - contrib_perc_self. If this is positive, the participant is getting more than their contribution; if negative, less. The disutility could be beta * (contrib_perc_self - splitperc_self) if splitperc_self < contrib_perc_self (disadvantageous inequity), and maybe gamma * (splitperc_self - contrib_perc_self) if advantageous, but that adds another parameter. To simplify, maybe just use the difference regardless of direction, squared to penalize larger deviations.\n\nBut the problem states that parameter recovery is important, so the model should have a manageable number of parameters. Let's stick with one parameter for inequity aversion, beta, multiplied by the difference between the proposed split percentage and the contribution-based percentage.\n\nHowever, trial_type might influence this. For example, in trial_type=3 (participant contributed more), the participant might be more sensitive to receiving a lower percentage than their contribution. So maybe beta is modulated by trial_type. For instance, beta_effective = beta * (1 + theta * (trial_type == 3)), where theta is a learnable parameter scaling the increased sensitivity when the participant contributed more.\n\nBut this adds another parameter (theta). To balance complexity, perhaps exclude this unless necessary. Alternatively, incorporate trial_type into the inequity term directly.\n\nAlternatively, the model could have separate beta parameters for each trial_type, but that triples the parameters. Not ideal for recovery.\n\nGiven the constraints, perhaps the initial model should include:\n\n- Loss aversion (lambda) for offers below the reference.\n- Gain sensitivity (kappa) for offers above.\n- Inequity aversion (beta) based on the difference between proposed split and contribution-based fair split.\n\nAdditionally, exponents sigma and rho for non-linear perception of gains and losses. However, including these as learnable parameters might complicate recovery. The example in the problem statement had fixed exponents, but the user's last run suggested using fixed exponents from prospect theory (sigma=1, rho=1.33). So maybe fix sigma and rho to reduce parameters.\n\nSo, the model becomes:\n\nU = kappa * (split_self - reference)^sigma - lambda * (reference - split_self)^rho - beta * (fair_perc - splitperc_self)\n\nWhere sigma=1, rho=1.33 (fixed), and fair_perc = (token_self / (token_self + token_opp)) * 100\n\nBut wait, split_self is in \u00a3, and reference is 3*token_self. So split_self - reference is the monetary gain/loss.\n\nThe inequity term is (fair_perc - splitperc_self), which is the percentage point difference between the fair contribution-based percentage and the proposed split. If the proposed split is less than fair, this term is positive, leading to a penalty (since beta is positive). If it's more, the term is negative, which would reduce the penalty. But maybe the model should penalize any deviation from the fair split, whether positive or negative. Alternatively, only penalize when the proposed is less than fair.\n\nAlternatively, take the absolute value: beta * |fair_perc - splitperc_self|. But this would penalize both under and over offers. However, in practice, people might not mind over offers, so maybe only penalize when the proposed is less than fair. So max(fair_perc - splitperc_self, 0). This way, only disadvantageous inequity is penalized.\n\nPutting it all together:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta * max(fair_perc - splitperc_self, 0)\n\nBut fair_perc is calculated as (token_self / (token_self + token_opp)) * 100. However, if token_self + token_opp is zero, this would be a problem, but in the dataset, tokens are found by participants, so it's safe to assume they are non-zero.\n\nNow, parameters:\n\n- kappa: sensitivity to gains (learnable, range 0 to 3)\n- lambda: loss aversion (learnable, range 0 to 8)\n- beta: inequity aversion (learnable, range 0 to 5)\n\nExponents sigma and rho are fixed (sigma=1, rho=1.33) based on prospect theory literature.\n\nThe utility U is then passed through a logistic function to get the probability of accepting. The model predicts accept=1 if U > 0, but since it's probabilistic, the probability is 1 / (1 + exp(-U)).\n\nWait, the problem states that the model should predict utility where less than 0 is less than 50% likely. So the probability of accepting is logistic(U) = 1 / (1 + exp(-U)). So if U is the utility, then the probability is as such.\n\nBut in the model, U is a linear combination of terms. The parameters kappa, lambda, beta need to be learned.\n\nNow, variable descriptions:\n\nVariables in the model:\n\n- split_self (data)\n- token_self (data)\n- token_opp (data)\n- splitperc_self (data)\n- reference (calculated as 3 * token_self)\n- fair_perc (calculated as (token_self / (token_self + token_opp)) * 100)\n- max(split_self - reference, 0) (gain)\n- max(reference - split_self, 0) (loss)\n- max(fair_perc - splitperc_self, 0) (inequity)\n\nParameters:\n\n- kappa: gain sensitivity, range [0, 3]\n- lambda: loss aversion, range [0, 8]\n- beta: inequity aversion, range [0, 5]\n\nThe model equation:\n\nU = kappa * (split_self - reference)\u207a - lambda * (reference - split_self)\u207a - beta * (fair_perc - splitperc_self)\u207a\n\nWhere (x)\u207a = max(x, 0)\n\nThis utility function captures the three main components: gains, losses, and inequity aversion. Each parameter modulates the impact of these components on the decision to accept or reject.\n\nNow, ensuring that all variables are from the dataset or calculated from it. The variables used are split_self, token_self, token_opp, splitperc_self. The combined_earning is 3*(token_self + token_opp), which is already given as a variable, but in this model, we calculate reference as 3*token_self, which is part of the participant's contribution.\n\nThe trial_type could be incorporated into the model by adjusting beta based on the trial type. For example, if trial_type is 3 (participant contributed more), beta could be scaled higher. However, adding this would introduce another parameter. To keep the model simple and ensure parameter recovery, perhaps exclude this unless necessary. The initial model can proceed without trial_type modulation, but if the user's previous attempts suggest it's needed, then include it.\n\nBut according to the problem statement, the model should utilize the given variables appropriately but not necessarily all. Since trial_type is available, maybe include it in the inequity term. For example, beta is multiplied by a factor when trial_type is 3. Let's say beta_effective = beta * (1 + theta * (trial_type == 3)), where theta is a learnable parameter between 0 and 2. This increases beta when the participant contributed more. However, this adds another parameter (theta), which might complicate recovery. Given the need for parameter recovery, perhaps keep the model simpler with three parameters.\n\nAlternatively, the trial_type can be incorporated into the inequity term. For example, in trial_type=3, the fair_perc would be higher, so the difference (fair_perc - splitperc_self) would be larger if the split is the same. But this is already captured in the calculation of fair_perc, which depends on token_self and token_opp. So trial_type is redundant here because it's determined by token_self and token_opp. Therefore, including trial_type might not add new information, and the model can rely on the calculated fair_perc.\n\nThus, the final model includes kappa, lambda, and beta as learnable parameters, with the utility function as described.\n</think>\n\n<MODEL>\nU = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model evaluating offers relative to contribution-based reference points. Combines loss-averse valuation of monetary outcomes with inequity aversion sensitive to deviations from contribution-proportional splits. Uses three orthogonal parameters: gain sensitivity (\u03ba), loss aversion (\u03bb), and disadvantageous inequity aversion (\u03b2). Fixed exponents from behavioral economics priors maintain identifiability while capturing key non-linearities in fairness judgments.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \\u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        \n        reference = 3 * token_self\n        \n        if token_self + token_opp == 0:\n            fair_perc = 0\n        else:\n            fair_perc = (token_self / (token_self + token_opp)) * 100\n        \n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(fair_perc - splitperc_self, 0)\n        \n        U = kappa * gain - lambda_ * loss - beta * inequity\n        \n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744015946.567945
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \\u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        reference = 3 * token_self\n        fair_perc = (token_self / (token_self + token_opp) * 100) if (token_self + token_opp) > 0 else 0\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(fair_perc - splitperc_self, 0)\n\n        U = kappa * gain - lambda_ * loss - beta * inequity\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 20.0, \"split_self\": 10.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 10.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744015949.8982458
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \\u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744015950.505127
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \\u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744015951.024755
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['kappa', 'lambda', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \\u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "",
      "timestamp": 1744015951.472147
    }
  ],
  "learnable_parameters": {
    "kappa": {
      "description": "Sensitivity to monetary gains above contribution-based reference",
      "range": {
        "min": 0,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion parameter for offers below contribution-based reference",
      "range": {
        "min": 0,
        "max": 8,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion parameter for receiving less than contribution-proportional share",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)",
  "variable_descriptions": {
    "kappa": {
      "description": "Sensitivity to monetary gains above contribution-based reference",
      "range": {
        "min": 0,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda": {
      "description": "Loss aversion parameter for offers below contribution-based reference",
      "range": {
        "min": 0,
        "max": 8,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Inequity aversion parameter for receiving less than contribution-proportional share",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed \u00a3 amount for participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Opponent's token contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed percentage share for participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Combines loss-averse valuation of monetary outcomes with inequity aversion sensitive to deviations from contribution-proportional splits. Uses three orthogonal parameters: gain sensitivity (\u03ba), loss aversion (\u03bb), and disadvantageous inequity aversion (\u03b2). Fixed exponents from behavioral economics priors maintain identifiability while capturing key non-linearities in fairness judgments.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is feasible.\n\nFirst, I need to identify the key variables that influence the responder's decision. The main target is \"accept\", which is binary. The model should calculate the utility of accepting versus rejecting, but since we're only predicting the accept/reject decision, the utility function should capture the factors that lead to this choice.\n\nFrom the dataset, important variables include token_self (participant's contribution), token_opp (opponent's contribution), split_self (proposed share for participant), split_opp (proposed share for opponent), combined_earning, and trial_type. Since the task involves fairness considerations, the model should incorporate both the absolute offer (split_self) and relative fairness compared to contributions.\n\nProspect theory concepts might be useful here, where gains and losses are evaluated relative to a reference point. The reference point could be based on the participant's contribution (token_self * \u00a33, since each token is \u00a33). If the proposed split_self is less than this reference, it's a loss; if more, a gain. \n\nThe utility function could then have two components: one for the monetary outcome relative to the reference, and another for inequity aversion (disliking unequal splits beyond what's justified by contributions). Parameters would control sensitivity to losses (lambda), gains (kappa), and inequity (beta). \n\nTrial_type indicates whether contributions are equal, opponent more, or participant more. This might modulate the inequity aversion. For example, if the participant contributed more (trial_type=3), they might be more sensitive to receiving less than their fair share.\n\nTo ensure parameter recovery, each parameter should have clear bounds. Lambda (loss aversion) should be positive, maybe between 0 and 8. Kappa (gain sensitivity) could be between 0 and 3. Beta (inequity aversion) might be between 0 and 5. The reference point is calculated from token_self, so no learnable parameter there.\n\nThe utility function U would combine these elements. If U is positive, the participant is more likely to accept. The probability of accepting can be modeled with a logistic function of U.\n\nNow, structuring the mathematical model:\n\nU = kappa * (split_self - reference)^sigma - lambda * (reference - split_self)^rho - beta * (split_opp - (combined_earning - split_self)) / combined_earning\n\nBut wait, split_opp is the opponent's proposed share, and combined_earning is total. So the inequity term could be the difference between the opponent's share and the participant's share, adjusted by their contributions. Alternatively, compare the split percentages to the contribution percentages.\n\nAlternatively, the inequity term might be based on the difference between the proposed split and the fair split based on contributions. The fair split for the participant would be (token_self / (token_self + token_opp)) * combined_earning. The difference between split_self and this fair value could be part of the utility.\n\nBut to keep the model simpler and ensure parameters are recoverable, maybe stick with a basic inequity term that's the difference between split_opp and split_self, scaled by combined_earning. Or use the percentage splits.\n\nWait, the problem states that two equal split_self values don't represent the same fairness because combined_earning varies. So the model must account for the proportion relative to contributions. Maybe the fair share is 3 * token_self, and the proposed split_self compared to that.\n\nSo reference_point = 3 * token_self (since each token is \u00a33). Then, the monetary component is split_self - reference_point. The loss is max(reference_point - split_self, 0), the gain is max(split_self - reference_point, 0). These are scaled by lambda and kappa, with exponents sigma and rho for non-linear perception.\n\nThe inequity component could be the difference between the opponent's share and the participant's share, adjusted by their contributions. For example, if the opponent's split is more than their contribution warrants, that's unfair. Alternatively, the difference between split_opp and (3 * token_opp), but that might complicate things.\n\nAlternatively, the inequity term could be (split_opp - split_self) / combined_earning, representing the relative difference. But this might not account for contributions. Alternatively, the difference between the proposed split percentages (splitperc_opp and splitperc_self) and the contribution percentages. The contribution percentage for self is (token_self / (token_self + token_opp)) * 100. The proposed split percentage for self is splitperc_self. The difference between these could be the inequity.\n\nBut including contribution percentages would require calculating (token_self / (token_self + token_opp)) * 100, which is data-derived. The model can use this as a variable.\n\nSo, the inequity term could be beta * |splitperc_self - (token_self / (token_self + token_opp)*100)|. This represents how far the proposed split is from the contribution-based fair split. The absolute value ensures any deviation is penalized. However, maybe participants are only averse to being undercompensated, not over. So maybe only penalize when splitperc_self is less than the fair percentage.\n\nAlternatively, the model could have two terms: one for disadvantageous inequity (when split_self is less than fair) and another for advantageous, but that adds more parameters. To keep it simple, maybe a single term for absolute inequity.\n\nPutting it all together:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta * |splitperc_self - fair_perc|\n\nWhere fair_perc = (token_self / (token_self + token_opp)) * 100\n\nBut fair_perc can be calculated from the data, so it's a derived variable. However, in the dataset, we have splitperc_self and splitperc_opp. Wait, splitperc_self is the proposed percentage for the participant, and splitperc_opp is for the opponent. So the sum should be 100, but maybe in the data, that's the case.\n\nBut the fair percentage based on contributions is (token_self / (token_self + token_opp)) * 100. Let's call this contrib_perc_self. Then, the inequity is splitperc_self - contrib_perc_self. If this is positive, the participant is getting more than their contribution; if negative, less. The disutility could be beta * (contrib_perc_self - splitperc_self) if splitperc_self < contrib_perc_self (disadvantageous inequity), and maybe gamma * (splitperc_self - contrib_perc_self) if advantageous, but that adds another parameter. To simplify, maybe just use the difference regardless of direction, squared to penalize larger deviations.\n\nBut the problem states that parameter recovery is important, so the model should have a manageable number of parameters. Let's stick with one parameter for inequity aversion, beta, multiplied by the difference between the proposed split percentage and the contribution-based percentage.\n\nHowever, trial_type might influence this. For example, in trial_type=3 (participant contributed more), the participant might be more sensitive to receiving a lower percentage than their contribution. So maybe beta is modulated by trial_type. For instance, beta_effective = beta * (1 + theta * (trial_type == 3)), where theta is a learnable parameter scaling the increased sensitivity when the participant contributed more.\n\nBut this adds another parameter (theta). To balance complexity, perhaps exclude this unless necessary. Alternatively, incorporate trial_type into the inequity term directly.\n\nAlternatively, the model could have separate beta parameters for each trial_type, but that triples the parameters. Not ideal for recovery.\n\nGiven the constraints, perhaps the initial model should include:\n\n- Loss aversion (lambda) for offers below the reference.\n- Gain sensitivity (kappa) for offers above.\n- Inequity aversion (beta) based on the difference between proposed split and contribution-based fair split.\n\nAdditionally, exponents sigma and rho for non-linear perception of gains and losses. However, including these as learnable parameters might complicate recovery. The example in the problem statement had fixed exponents, but the user's last run suggested using fixed exponents from prospect theory (sigma=1, rho=1.33). So maybe fix sigma and rho to reduce parameters.\n\nSo, the model becomes:\n\nU = kappa * (split_self - reference)^sigma - lambda * (reference - split_self)^rho - beta * (fair_perc - splitperc_self)\n\nWhere sigma=1, rho=1.33 (fixed), and fair_perc = (token_self / (token_self + token_opp)) * 100\n\nBut wait, split_self is in \u00a3, and reference is 3*token_self. So split_self - reference is the monetary gain/loss.\n\nThe inequity term is (fair_perc - splitperc_self), which is the percentage point difference between the fair contribution-based percentage and the proposed split. If the proposed split is less than fair, this term is positive, leading to a penalty (since beta is positive). If it's more, the term is negative, which would reduce the penalty. But maybe the model should penalize any deviation from the fair split, whether positive or negative. Alternatively, only penalize when the proposed is less than fair.\n\nAlternatively, take the absolute value: beta * |fair_perc - splitperc_self|. But this would penalize both under and over offers. However, in practice, people might not mind over offers, so maybe only penalize when the proposed is less than fair. So max(fair_perc - splitperc_self, 0). This way, only disadvantageous inequity is penalized.\n\nPutting it all together:\n\nU = kappa * max(split_self - reference, 0) - lambda * max(reference - split_self, 0) - beta * max(fair_perc - splitperc_self, 0)\n\nBut fair_perc is calculated as (token_self / (token_self + token_opp)) * 100. However, if token_self + token_opp is zero, this would be a problem, but in the dataset, tokens are found by participants, so it's safe to assume they are non-zero.\n\nNow, parameters:\n\n- kappa: sensitivity to gains (learnable, range 0 to 3)\n- lambda: loss aversion (learnable, range 0 to 8)\n- beta: inequity aversion (learnable, range 0 to 5)\n\nExponents sigma and rho are fixed (sigma=1, rho=1.33) based on prospect theory literature.\n\nThe utility U is then passed through a logistic function to get the probability of accepting. The model predicts accept=1 if U > 0, but since it's probabilistic, the probability is 1 / (1 + exp(-U)).\n\nWait, the problem states that the model should predict utility where less than 0 is less than 50% likely. So the probability of accepting is logistic(U) = 1 / (1 + exp(-U)). So if U is the utility, then the probability is as such.\n\nBut in the model, U is a linear combination of terms. The parameters kappa, lambda, beta need to be learned.\n\nNow, variable descriptions:\n\nVariables in the model:\n\n- split_self (data)\n- token_self (data)\n- token_opp (data)\n- splitperc_self (data)\n- reference (calculated as 3 * token_self)\n- fair_perc (calculated as (token_self / (token_self + token_opp)) * 100)\n- max(split_self - reference, 0) (gain)\n- max(reference - split_self, 0) (loss)\n- max(fair_perc - splitperc_self, 0) (inequity)\n\nParameters:\n\n- kappa: gain sensitivity, range [0, 3]\n- lambda: loss aversion, range [0, 8]\n- beta: inequity aversion, range [0, 5]\n\nThe model equation:\n\nU = kappa * (split_self - reference)\u207a - lambda * (reference - split_self)\u207a - beta * (fair_perc - splitperc_self)\u207a\n\nWhere (x)\u207a = max(x, 0)\n\nThis utility function captures the three main components: gains, losses, and inequity aversion. Each parameter modulates the impact of these components on the decision to accept or reject.\n\nNow, ensuring that all variables are from the dataset or calculated from it. The variables used are split_self, token_self, token_opp, splitperc_self. The combined_earning is 3*(token_self + token_opp), which is already given as a variable, but in this model, we calculate reference as 3*token_self, which is part of the participant's contribution.\n\nThe trial_type could be incorporated into the model by adjusting beta based on the trial type. For example, if trial_type is 3 (participant contributed more), beta could be scaled higher. However, adding this would introduce another parameter. To keep the model simple and ensure parameter recovery, perhaps exclude this unless necessary. The initial model can proceed without trial_type modulation, but if the user's previous attempts suggest it's needed, then include it.\n\nBut according to the problem statement, the model should utilize the given variables appropriately but not necessarily all. Since trial_type is available, maybe include it in the inequity term. For example, beta is multiplied by a factor when trial_type is 3. Let's say beta_effective = beta * (1 + theta * (trial_type == 3)), where theta is a learnable parameter between 0 and 2. This increases beta when the participant contributed more. However, this adds another parameter (theta), which might complicate recovery. Given the need for parameter recovery, perhaps keep the model simpler with three parameters.\n\nAlternatively, the trial_type can be incorporated into the inequity term. For example, in trial_type=3, the fair_perc would be higher, so the difference (fair_perc - splitperc_self) would be larger if the split is the same. But this is already captured in the calculation of fair_perc, which depends on token_self and token_opp. So trial_type is redundant here because it's determined by token_self and token_opp. Therefore, including trial_type might not add new information, and the model can rely on the calculated fair_perc.\n\nThus, the final model includes kappa, lambda, and beta as learnable parameters, with the utility function as described.\n</think>\n\n<MODEL>\nU = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"kappa\": {\n      \"description\": \"Sensitivity to monetary gains above contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda\": {\n      \"description\": \"Loss aversion parameter for offers below contribution-based reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Inequity aversion parameter for receiving less than contribution-proportional share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed \u00a3 amount for participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed percentage share for participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA prospect theory-inspired model evaluating offers relative to contribution-based reference points. Combines loss-averse valuation of monetary outcomes with inequity aversion sensitive to deviations from contribution-proportional splits. Uses three orthogonal parameters: gain sensitivity (\u03ba), loss aversion (\u03bb), and disadvantageous inequity aversion (\u03b2). Fixed exponents from behavioral economics priors maintain identifiability while capturing key non-linearities in fairness judgments.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\nSummary: A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Combines loss-averse valuation of monetary outcomes with inequity aversion sensitive to deviations from contribution-proportional splits. Uses three orthogonal parameters: gain sensitivity (\u03ba), loss aversion (\u03bb), and disadvantageous inequity aversion (\u03b2). Fixed exponents from behavioral economics priors maintain identifiability while capturing key non-linearities in fairness judgments.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "  File \"<string>\", line 34\n    results = simulate_model(data, kappa=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744015946.625365
    },
    {
      "retry_number": 1,
      "error": "  File \"<string>\", line 29\n    results = simulate_model(data, kappa=0.5, lambda=0.5, beta=0.5)\n                                              ^^^^^^\nSyntaxError: invalid syntax\n",
      "timestamp": 1744015949.934137
    },
    {
      "retry_number": 2,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744015950.5051641
    },
    {
      "retry_number": 3,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744015951.0247722
    },
    {
      "retry_number": 4,
      "error": "Could not extract simulate_model function from generated code",
      "timestamp": 1744015951.472169
    }
  ],
  "current_retry": 4,
  "simulation_error": "Failed after maximum retries",
  "simulation_code": "def simulate_model(trial_data, kappa=1, lambda_=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        reference = 3 * token_self\n        fair_perc = (token_self / (token_self + token_opp) * 100) if (token_self + token_opp) > 0 else 0\n\n        gain = max(split_self - reference, 0)\n        loss = max(reference - split_self, 0)\n        inequity = max(fair_perc - splitperc_self, 0)\n\n        U = kappa * gain - lambda_ * loss - beta * inequity\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 5,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.309960085610438, 'lambda': 5.163764373509207, 'beta': 4.96336802574069}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7769350079263353, 'lambda': 3.76511503663051, 'beta': 3.254109706363344}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9085477640717166, 'lambda': 2.9795396525143554, 'beta': 2.444937567089864}\"]",
    "Error fitting participant 1002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.545728064198171, 'lambda': 3.4117576059420616, 'beta': 1.9494871839854349}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.723984559376531, 'lambda': 4.7486364625592135, 'beta': 3.9522773643061337}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5277726372528988, 'lambda': 1.4020406600331814, 'beta': 0.11978391237989994}\"]",
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8986875370160727, 'lambda': 4.502896845502107, 'beta': 4.833241657347342}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4782835916749744, 'lambda': 1.5294049708427497, 'beta': 1.19570275112599}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.655156866839409, 'lambda': 3.72123100119604, 'beta': 3.3528621360353306}\"]",
    "Error fitting participant 1004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8845843940775522, 'lambda': 2.193903486315457, 'beta': 3.088208313887502}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8383457836062975, 'lambda': 7.746732318237057, 'beta': 2.6429163893695655}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.40196709261910746, 'lambda': 5.9396618252725215, 'beta': 1.526208274133647}\"]",
    "Error fitting participant 1005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1286993439276607, 'lambda': 7.797211487211999, 'beta': 2.1896222647199455}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8297305437659759, 'lambda': 6.599564247699442, 'beta': 2.2316329598049576}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8968767378051558, 'lambda': 6.380370184728548, 'beta': 3.054550187983389}\"]",
    "Error fitting participant 1006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2284723668816044, 'lambda': 1.8504827576735448, 'beta': 2.491143285678402}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.884623972122757, 'lambda': 5.251853171315154, 'beta': 0.12989754524723618}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8238852164865262, 'lambda': 6.798616402172309, 'beta': 2.936969097920442}\"]",
    "Error fitting participant 1007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4274690462698103, 'lambda': 2.6640034850586254, 'beta': 0.2102756906000186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.992409457087426, 'lambda': 1.0374992807285626, 'beta': 1.067483117068363}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3620981976002935, 'lambda': 1.0857779449253808, 'beta': 4.827933002889461}\"]",
    "Error fitting participant 1008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.971196947049491, 'lambda': 2.1904037637058993, 'beta': 4.206490569986019}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.686683615983175, 'lambda': 6.103423475464357, 'beta': 0.954343909741569}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.657474478739214, 'lambda': 4.692387502833412, 'beta': 0.5257727761292397}\"]",
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8150955540896936, 'lambda': 0.8038490007288193, 'beta': 1.875003836193846}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1814364885263586, 'lambda': 3.366846876069041, 'beta': 1.9927849022699318}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.686218472255175, 'lambda': 3.893615271268324, 'beta': 0.5556979169871329}\"]",
    "Error fitting participant 1010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.698821594290248, 'lambda': 7.599902405203857, 'beta': 3.0720913929456515}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.225843558153384, 'lambda': 2.9623106210264094, 'beta': 1.0014386062874365}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8023916939445606, 'lambda': 7.827459507565142, 'beta': 4.192668971943557}\"]",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.392220493392207, 'lambda': 2.4972657391850612, 'beta': 4.772724487215547}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7158435164063528, 'lambda': 1.2610191406838265, 'beta': 3.4811953437381633}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10316720261411283, 'lambda': 0.8209910664084541, 'beta': 0.6674807933222804}\"]",
    "Error fitting participant 1012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.160152168765331, 'lambda': 5.8026686827986325, 'beta': 3.3838824289332523}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1422616583757845, 'lambda': 6.403717884092965, 'beta': 4.4748664946847665}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6953805680331114, 'lambda': 6.683282008716633, 'beta': 4.797312818062337}\"]",
    "Error fitting participant 1013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6654270845668123, 'lambda': 5.40942705241307, 'beta': 4.629309859164615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2023519774185787, 'lambda': 1.3310406277843727, 'beta': 0.8656587873322463}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.27512843847587354, 'lambda': 1.118635793004925, 'beta': 2.747104659908363}\"]",
    "Error fitting participant 1015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2062225250967108, 'lambda': 4.332037723781829, 'beta': 3.77376488761397}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.895480747246964, 'lambda': 7.928554793074314, 'beta': 4.467389836536733}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4811951928380465, 'lambda': 5.324832290418942, 'beta': 0.8113760583990343}\"]",
    "Error fitting participant 1016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.06871543897207821, 'lambda': 5.476531506485307, 'beta': 1.3247860997743466}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.47921469229725866, 'lambda': 2.9768196013155546, 'beta': 1.1851478919950291}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0683371262566728, 'lambda': 0.1269125210541766, 'beta': 4.263529103465039}\"]",
    "Error fitting participant 1017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6860383801818755, 'lambda': 2.808389217619939, 'beta': 2.8187883390356605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3943781303897769, 'lambda': 6.795709927428703, 'beta': 1.7305978425638329}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4958700242460834, 'lambda': 1.3682901180439115, 'beta': 1.858966191388491}\"]",
    "Error fitting participant 1018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.549461988211781, 'lambda': 5.7489201402128085, 'beta': 1.7882834090677897}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5109835807204304, 'lambda': 7.296068585682093, 'beta': 1.8398555180633243}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.715060603682269, 'lambda': 0.027246809323912657, 'beta': 3.1883588841510195}\"]",
    "Error fitting participant 1019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8589486048798958, 'lambda': 1.5590378948467247, 'beta': 3.1984452633085922}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.680516466915769, 'lambda': 7.157238612534145, 'beta': 3.844791375951438}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5863931026593118, 'lambda': 6.725483923534276, 'beta': 4.469000700320267}\"]",
    "Error fitting participant 1020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9749321296445368, 'lambda': 6.350495995115092, 'beta': 0.741336270059047}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6492322531908816, 'lambda': 4.492752132452673, 'beta': 3.3481218669053723}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7580219841983915, 'lambda': 2.17766583355346, 'beta': 3.1349388425528435}\"]",
    "Error fitting participant 1021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6526676855737668, 'lambda': 5.883699220611659, 'beta': 3.6249407441559005}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1291765871341983, 'lambda': 3.212907762966956, 'beta': 4.439295068232299}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9843032705827794, 'lambda': 6.4767738989085, 'beta': 0.8920155787110096}\"]",
    "Error fitting participant 1022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.16917291092675013, 'lambda': 6.3489900892868905, 'beta': 1.2544817944469648}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9082142969923828, 'lambda': 3.004157944625722, 'beta': 4.648729810283082}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15083175445177344, 'lambda': 1.149038813268775, 'beta': 2.57990734826921}\"]",
    "Error fitting participant 1023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7000991730541095, 'lambda': 4.475802263663065, 'beta': 0.9402511768135274}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4896478673092752, 'lambda': 7.034563864215636, 'beta': 4.618525089682535}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.176017291427188, 'lambda': 6.471543429585295, 'beta': 1.8947920476912616}\"]",
    "Error fitting participant 1024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.031651896562055915, 'lambda': 3.4502833201312937, 'beta': 4.790976499285609}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.600506726808744, 'lambda': 3.0307873362753286, 'beta': 1.6722822315560582}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6247994374113971, 'lambda': 3.8035432771865256, 'beta': 3.0392696158946504}\"]",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.737152905774137, 'lambda': 0.1305852556475804, 'beta': 0.41396276332713644}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.644076330033276, 'lambda': 4.353962246419569, 'beta': 1.0956329305508632}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9607623072402194, 'lambda': 4.321650322640004, 'beta': 1.2013495496219555}\"]",
    "Error fitting participant 1026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5986504633002931, 'lambda': 1.4356226004858028, 'beta': 4.414980163818093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.41942559746599, 'lambda': 6.1923235885158245, 'beta': 2.1440072436577444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1270359455397916, 'lambda': 4.475836687420628, 'beta': 4.511405941352378}\"]",
    "Error fitting participant 1027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3286316362816046, 'lambda': 2.5855744432055987, 'beta': 2.2759768827724516}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6720595914829324, 'lambda': 4.703885173959936, 'beta': 1.9654411600232007}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1254952280798456, 'lambda': 3.2074295335504743, 'beta': 4.0115169314578685}\"]",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.601535865186309, 'lambda': 6.389842940374678, 'beta': 0.3160588542642595}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.270058174904086, 'lambda': 1.6174729759363302, 'beta': 2.479658890842181}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1727036359566885, 'lambda': 4.734335059565521, 'beta': 1.4683284372780514}\"]",
    "Error fitting participant 1029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5452115227476564, 'lambda': 5.063443803523218, 'beta': 1.5741145407914425}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4588138084419002, 'lambda': 5.770785247496191, 'beta': 0.21131918820079476}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2246586241181843, 'lambda': 1.370078236112601, 'beta': 1.4202340926438861}\"]",
    "Error fitting participant 1030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9537006932993608, 'lambda': 6.895760035097755, 'beta': 4.140535222161758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.609776976659586, 'lambda': 4.658785075416414, 'beta': 3.8508238367627956}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.282505621470519, 'lambda': 7.854520855748783, 'beta': 2.6181692198729953}\"]",
    "Error fitting participant 1031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9886210193679442, 'lambda': 1.6534138088752828, 'beta': 0.9618474270026361}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9247964470945536, 'lambda': 6.389471000699083, 'beta': 1.656812267893818}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.06702758777438322, 'lambda': 4.91535966808187, 'beta': 4.665939841764725}\"]",
    "Error fitting participant 1032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9645444451492904, 'lambda': 1.3892981186559528, 'beta': 2.320575495773418}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2611876970227764, 'lambda': 5.810674538252971, 'beta': 1.4849683888639849}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1014241217464784, 'lambda': 2.551382405759755, 'beta': 1.0658452789591433}\"]",
    "Error fitting participant 1033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3282012603043154, 'lambda': 6.104479744265883, 'beta': 2.45047594928539}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.570879510676281, 'lambda': 4.8687196597968265, 'beta': 3.8841760752844907}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.465567540969122, 'lambda': 0.05670179358363292, 'beta': 4.942101898862804}\"]",
    "Error fitting participant 1034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.33535418622881263, 'lambda': 0.16507929991739356, 'beta': 3.853109292369306}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0257270305328827, 'lambda': 2.361257545019831, 'beta': 4.4351021112592255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.412201251694477, 'lambda': 0.2293364242687259, 'beta': 2.410720722392894}\"]",
    "Error fitting participant 1035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2587175374839499, 'lambda': 4.930882370941911, 'beta': 4.232379253045648}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2241710581664988, 'lambda': 7.622925956715769, 'beta': 1.1827344747086843}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.037298204232632, 'lambda': 3.197465782947754, 'beta': 2.0812393945722194}\"]",
    "Error fitting participant 1036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8504848733417756, 'lambda': 3.9206927441456125, 'beta': 1.964093386891816}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.240094834687545, 'lambda': 6.360505108158093, 'beta': 2.947253900332551}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.868054841235591, 'lambda': 6.546297397491309, 'beta': 0.05293812428548428}\"]",
    "Error fitting participant 1037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5172846360801038, 'lambda': 2.045439207914293, 'beta': 0.17026989860535136}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6932875863602425, 'lambda': 3.3349650514107374, 'beta': 2.4194935506018718}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8727353440811173, 'lambda': 2.4213436966059767, 'beta': 2.9191154784589095}\"]",
    "Error fitting participant 1038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2421524650386377, 'lambda': 0.4672185347362934, 'beta': 4.350329194828405}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.824775280820885, 'lambda': 3.4826048636834823, 'beta': 0.10774565683454085}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7228078772913759, 'lambda': 6.647373849732329, 'beta': 2.4309705408814946}\"]",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2617661903440054, 'lambda': 5.070845716630568, 'beta': 3.2069350366398015}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6926798472803692, 'lambda': 1.4044532236796812, 'beta': 2.8887784228104794}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9357796087486251, 'lambda': 7.986654288884622, 'beta': 0.2638038705575857}\"]",
    "Error fitting participant 1040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7285512603090811, 'lambda': 4.6661592300043715, 'beta': 4.69538842394307}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8857282921979861, 'lambda': 5.283870811574963, 'beta': 1.2753906593473148}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.97556854769816, 'lambda': 6.15923491807192, 'beta': 3.331924447386554}\"]",
    "Error fitting participant 1041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8759473599485776, 'lambda': 0.8451273940825157, 'beta': 4.3289129513586415}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2100504505761416, 'lambda': 5.9738147385815585, 'beta': 3.3871304551802464}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20850317418607067, 'lambda': 3.171934041750359, 'beta': 1.5302874543222145}\"]",
    "Error fitting participant 1042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8584848483953242, 'lambda': 5.678957147727724, 'beta': 0.48648656043366767}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.775382168336214, 'lambda': 3.5246700444446493, 'beta': 3.3785820286831707}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.193548628486281, 'lambda': 0.3546399995447054, 'beta': 1.0854336329595582}\"]",
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2942341803306858, 'lambda': 4.956982254400059, 'beta': 2.468322295536268}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.29458732633016227, 'lambda': 0.7381688883135222, 'beta': 4.779613573122394}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10619147183332878, 'lambda': 2.3938167486819877, 'beta': 0.42388241398091553}\"]",
    "Error fitting participant 1044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.437737927767723, 'lambda': 6.026725257138116, 'beta': 3.7708329995032526}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.29299856347071684, 'lambda': 0.5416332443781835, 'beta': 2.5753397582692954}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.157854199265068, 'lambda': 2.4284767150528124, 'beta': 2.727473345493583}\"]",
    "Error fitting participant 2001: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08365039513256145, 'lambda': 2.91879707351893, 'beta': 2.4736145268911254}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4810416855537634, 'lambda': 6.189416551952033, 'beta': 0.029028190953523936}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3755163909670847, 'lambda': 0.6521822820494174, 'beta': 0.8022704474116438}\"]",
    "Error fitting participant 2002: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.47389501168675063, 'lambda': 7.072447053103623, 'beta': 1.1402551296271084}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7212341387241725, 'lambda': 6.59809373513293, 'beta': 1.6189028102264218}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.89818921045529, 'lambda': 3.7480778696136428, 'beta': 4.74105532013201}\"]",
    "Error fitting participant 2003: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6189791242318423, 'lambda': 7.379955035528068, 'beta': 4.39988210905322}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.736230315238277, 'lambda': 4.141803840997636, 'beta': 3.291335814182903}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.41611654050157554, 'lambda': 4.12102969747668, 'beta': 3.1534788775198566}\"]",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.010750137242703683, 'lambda': 6.192669272063781, 'beta': 0.5402960471845764}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2308916093310622, 'lambda': 0.19728593817501672, 'beta': 0.34281450457447904}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.59434443729418, 'lambda': 4.177208443601357, 'beta': 3.4883962378495936}\"]",
    "Error fitting participant 2005: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.643787149551553, 'lambda': 6.052226723612623, 'beta': 4.330009947267195}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.039763185470703566, 'lambda': 0.9844246982617761, 'beta': 2.837079547651796}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3920621316250434, 'lambda': 4.745040877501885, 'beta': 0.9688630524780661}\"]",
    "Error fitting participant 2006: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2709384080664031, 'lambda': 4.876091652591492, 'beta': 2.6117410076325513}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6685688253544075, 'lambda': 6.644149626030206, 'beta': 1.617966961398255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.912472963479674, 'lambda': 5.5542402515070695, 'beta': 0.7963970580148916}\"]",
    "Error fitting participant 2007: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.950224976299399, 'lambda': 3.2425238395592872, 'beta': 0.3764521894913403}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.285085263389253, 'lambda': 4.5981952221264395, 'beta': 4.240038564630557}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9731546576452479, 'lambda': 4.920685877566206, 'beta': 1.8104611575480272}\"]",
    "Error fitting participant 2008: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9305007022118392, 'lambda': 1.6485639042260258, 'beta': 0.8779209209391359}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8811203442898838, 'lambda': 2.1689325059436335, 'beta': 3.6074368661363314}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9571780850575031, 'lambda': 5.024402158533352, 'beta': 0.7947185612040175}\"]",
    "Error fitting participant 2009: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8292593219516669, 'lambda': 5.33069337132662, 'beta': 0.3914642016955311}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1757483025739499, 'lambda': 0.10445111603849355, 'beta': 4.362010300544653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.41213256888460015, 'lambda': 1.0142488574164812, 'beta': 1.8471208086784712}\"]",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3736634500028613, 'lambda': 5.744438511378751, 'beta': 2.7334416847449465}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.489761886303967, 'lambda': 2.5591840289384837, 'beta': 4.501841287962133}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1630983480948234, 'lambda': 3.596681196301768, 'beta': 3.6308522794953775}\"]",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5607634758094755, 'lambda': 3.137491979205688, 'beta': 2.3431659653424264}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.086364539418739, 'lambda': 6.989287772873003, 'beta': 2.092180279302784}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9419964684660209, 'lambda': 3.856760402309554, 'beta': 3.434611276325249}\"]",
    "Error fitting participant 2012: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9789165532464987, 'lambda': 6.469260096960213, 'beta': 1.4497672827763808}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1946495958248535, 'lambda': 1.06806639131183, 'beta': 3.4679144059624543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4960139007718286, 'lambda': 2.703432045754832, 'beta': 4.053087216238363}\"]",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08606414433763865, 'lambda': 2.1994584957581393, 'beta': 2.077398388606796}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.289541207322092, 'lambda': 5.334830559505131, 'beta': 2.0140281142948044}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9342264711618832, 'lambda': 2.5087198046825607, 'beta': 3.764740700978269}\"]",
    "Error fitting participant 2014: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2303429273555126, 'lambda': 3.1633879079645855, 'beta': 3.524924293818409}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2936525040152864, 'lambda': 5.252608110615848, 'beta': 4.196461518525813}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.20918866578178, 'lambda': 3.4529027989834082, 'beta': 4.2373362408535185}\"]",
    "Error fitting participant 2015: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.11508211786671318, 'lambda': 4.529728617539697, 'beta': 0.7059586513177613}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.879091112431933, 'lambda': 5.100535269630047, 'beta': 4.253556451392202}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.327177573148412, 'lambda': 7.571270350090091, 'beta': 0.48452499960542517}\"]",
    "Error fitting participant 2016: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.902147553104629, 'lambda': 7.719805583038037, 'beta': 2.546610232573569}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2877250267031215, 'lambda': 6.245688989289921, 'beta': 1.9335202979596282}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9984847448820748, 'lambda': 3.628664989629801, 'beta': 1.728033363634005}\"]",
    "Error fitting participant 2017: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0920727255441998, 'lambda': 3.2474204264336626, 'beta': 1.1934427276725441}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7378357027683441, 'lambda': 5.941987335913354, 'beta': 3.566447323890717}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.544455762504181, 'lambda': 1.381047684840512, 'beta': 4.660924781620192}\"]",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7706252849811249, 'lambda': 1.3280012221211095, 'beta': 1.4497692773563964}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0509876567751362, 'lambda': 0.36400869948828607, 'beta': 4.4744155162324075}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21265724811162112, 'lambda': 5.5377797597135645, 'beta': 3.1141270523068987}\"]",
    "Error fitting participant 2019: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0510896092955258, 'lambda': 4.452377454308542, 'beta': 3.1626808322923243}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.592074407020536, 'lambda': 2.811860528225724, 'beta': 2.2486532486781003}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4091238126665275, 'lambda': 2.3223478221819933, 'beta': 2.7409828429512784}\"]",
    "Error fitting participant 2020: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1850540693001763, 'lambda': 2.9507873066526145, 'beta': 4.5632517722083445}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.007523043369551341, 'lambda': 1.8100729164547982, 'beta': 4.994263968996856}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.11347669386122494, 'lambda': 0.2143715583211243, 'beta': 0.5373976364276456}\"]",
    "Error fitting participant 2021: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.25665708383784336, 'lambda': 1.4859828550008132, 'beta': 4.61770389689662}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42533585569708354, 'lambda': 2.048326819078693, 'beta': 3.8025491086228715}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5398995429642879, 'lambda': 5.3428538157626235, 'beta': 4.629383786139022}\"]",
    "Error fitting participant 2022: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.232620498759921, 'lambda': 2.3231595812717085, 'beta': 0.6966348331372546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3992955458755776, 'lambda': 4.721537374901949, 'beta': 3.9751493402425626}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5354050014061266, 'lambda': 3.9153838327958166, 'beta': 2.693554095899129}\"]",
    "Error fitting participant 2023: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9556949527622759, 'lambda': 4.13101979008233, 'beta': 4.474867765316202}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8097365785102255, 'lambda': 4.867037730877663, 'beta': 3.3849444989757096}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5015680033772347, 'lambda': 3.041696088642868, 'beta': 3.025135517215161}\"]",
    "Error fitting participant 2024: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.848689113366618, 'lambda': 6.122360263832336, 'beta': 4.142537465144093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.45378066244583504, 'lambda': 0.33291066009878456, 'beta': 1.4126397806392454}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2451687509167875, 'lambda': 7.060340393452013, 'beta': 0.21409399202088175}\"]",
    "Error fitting participant 2025: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02539053341534203, 'lambda': 1.4042560540847386, 'beta': 4.824544137981792}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3851913648746548, 'lambda': 4.131171650479341, 'beta': 4.167274358845809}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0980884343504755, 'lambda': 0.6385382576596719, 'beta': 2.4400660807504035}\"]",
    "Error fitting participant 2026: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.889867993624886, 'lambda': 0.6407806732633841, 'beta': 4.09834247432388}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4275124248163182, 'lambda': 0.7559354293722658, 'beta': 1.4503627841147475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9976385288867298, 'lambda': 0.6996407037358052, 'beta': 3.4155992599093166}\"]",
    "Error fitting participant 2027: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.126129657508746, 'lambda': 6.366718745338226, 'beta': 1.0774349350997126}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6085000935936757, 'lambda': 6.00509849366731, 'beta': 4.2203465509209925}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7555298484589026, 'lambda': 1.3561521582041207, 'beta': 0.9129863506561253}\"]",
    "Error fitting participant 2028: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.055480484352748, 'lambda': 4.571223728235217, 'beta': 1.6790795922694035}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.539434724629915, 'lambda': 4.576991440012359, 'beta': 0.016707345823244735}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2343360367630205, 'lambda': 5.091825363424527, 'beta': 3.2853079901501547}\"]",
    "Error fitting participant 2029: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8948773848600546, 'lambda': 7.751198965163414, 'beta': 2.013295457401223}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6941202907519615, 'lambda': 1.6184538058913462, 'beta': 1.4842867730349725}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0939214345047064, 'lambda': 3.058139156534585, 'beta': 3.300858359283263}\"]",
    "Error fitting participant 2030: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.48954520088416265, 'lambda': 0.32359073662554394, 'beta': 4.8642217245071055}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4529940935052958, 'lambda': 6.739835459793747, 'beta': 3.0225474221976616}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.09758236807797249, 'lambda': 7.055846402738451, 'beta': 4.014452103204972}\"]",
    "Error fitting participant 2031: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0463838348461714, 'lambda': 1.4625867561886654, 'beta': 0.9741300505346656}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.691220931745326, 'lambda': 5.866409539537974, 'beta': 4.251692091411689}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.22528921511254307, 'lambda': 3.6180481748213014, 'beta': 0.1068376889238315}\"]",
    "Error fitting participant 2032: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.658320974037076, 'lambda': 7.006299136749017, 'beta': 4.3479972444706}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8167245452144853, 'lambda': 0.4354066867382187, 'beta': 3.755602266174237}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.45067004693648416, 'lambda': 4.086482276040206, 'beta': 3.497864109562165}\"]",
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0941186422409517, 'lambda': 2.904305309579706, 'beta': 3.3564026267964313}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.967402508147027, 'lambda': 5.941250710041353, 'beta': 0.7004897905153556}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0114954015909339, 'lambda': 6.0582066306039435, 'beta': 0.6708723030830693}\"]",
    "Error fitting participant 2034: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5999090100380968, 'lambda': 4.569134371319477, 'beta': 1.656793627934594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2800609580216692, 'lambda': 4.562501922884857, 'beta': 2.051761960960563}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42565960738652375, 'lambda': 1.6671962897744006, 'beta': 3.4588291803431455}\"]",
    "Error fitting participant 2035: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.993240059418624, 'lambda': 5.847305438678237, 'beta': 3.8759983923437975}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5725509597807577, 'lambda': 0.14278274025095783, 'beta': 4.803340718370059}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.484086396992093, 'lambda': 2.032943055421935, 'beta': 2.22471577076122}\"]",
    "Error fitting participant 2036: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0735151351446688, 'lambda': 5.103964961695897, 'beta': 4.7273630664884685}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3185338046230703, 'lambda': 0.7816658393586504, 'beta': 0.04817101895643161}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.18613091298126794, 'lambda': 0.2219823240789376, 'beta': 0.44358638055598865}\"]",
    "Error fitting participant 2037: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4023352798368225, 'lambda': 7.005673246068499, 'beta': 1.7913589978158866}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7557503295219945, 'lambda': 7.482335669283584, 'beta': 2.3877485381205643}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4530169950846514, 'lambda': 0.7059267139545105, 'beta': 2.0405534051885974}\"]",
    "Error fitting participant 2038: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4310241213997825, 'lambda': 6.117212978787086, 'beta': 0.4343168683805504}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.166766476044635, 'lambda': 5.306555168480897, 'beta': 4.0199541790528395}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5287075763924035, 'lambda': 3.803062454903836, 'beta': 2.7978882153549236}\"]",
    "Error fitting participant 2039: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6320548786848531, 'lambda': 0.2752775882706411, 'beta': 0.3268036677956099}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9269340551265343, 'lambda': 7.987299502373452, 'beta': 3.3559846259416353}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.318195123369944, 'lambda': 2.49605854506314, 'beta': 1.7053308011733677}\"]",
    "Error fitting participant 2040: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5282485765306086, 'lambda': 2.5790115239747164, 'beta': 1.070075899608296}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.223609611088297, 'lambda': 5.648513772937105, 'beta': 2.9105875368555156}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.39991738683891953, 'lambda': 3.1414166756419952, 'beta': 4.967512265471781}\"]",
    "Error fitting participant 2041: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8826093945667006, 'lambda': 2.719234550609409, 'beta': 1.047558026803597}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.029147547128023588, 'lambda': 3.416884508490396, 'beta': 1.0769298891980057}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.310248629796221, 'lambda': 3.8108421659436376, 'beta': 4.663170211601681}\"]",
    "Error fitting participant 2042: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.337618414921571, 'lambda': 1.1888759310909762, 'beta': 3.414905837153511}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.938186533251728, 'lambda': 7.722843174059702, 'beta': 4.74606256845104}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.417339773382312, 'lambda': 4.167015068658452, 'beta': 0.9182209242939993}\"]",
    "Error fitting participant 2043: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.22994013972472005, 'lambda': 0.019182585118111106, 'beta': 3.3475211823566475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4462208152634277, 'lambda': 7.46009235243985, 'beta': 0.8778640451173836}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8977291824261124, 'lambda': 1.1585919565200236, 'beta': 1.0856123495380887}\"]",
    "Error fitting participant 2044: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4142213276850121, 'lambda': 7.585418678744541, 'beta': 1.8426857926608116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4868706648021988, 'lambda': 0.11602704072594161, 'beta': 2.2920260391684244}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.603358924288055, 'lambda': 7.787585123012967, 'beta': 3.454385858450415}\"]",
    "Error fitting participant 2045: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8810802509894669, 'lambda': 5.942779895449939, 'beta': 3.9940485301716793}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8458594785239961, 'lambda': 5.7521985006289915, 'beta': 1.273236606498978}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6295030578740102, 'lambda': 6.726153351318974, 'beta': 0.9843714366888884}\"]",
    "Error fitting participant 2046: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.015112082448208, 'lambda': 0.4292089339031637, 'beta': 4.8987739482826695}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.38534316055392903, 'lambda': 7.5909877699071275, 'beta': 4.875710641891825}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9052943370115183, 'lambda': 5.452757894488396, 'beta': 0.01225357358883461}\"]",
    "Error fitting participant 2047: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2679883643167984, 'lambda': 7.314661801167792, 'beta': 1.2451931525131625}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8641149365968213, 'lambda': 4.941210172822012, 'beta': 3.7428289506770223}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5283714550638423, 'lambda': 6.5248641584892315, 'beta': 3.984225033707447}\"]",
    "Error fitting participant 2048: Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.46620691420678906, 'lambda': 2.7063306103656615, 'beta': 4.506374241904373}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9448068399738562, 'lambda': 0.20780372340141717, 'beta': 0.4427880367604947}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5389228097692538, 'lambda': 6.460847863236923, 'beta': 2.0215385173053724}\"]"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.309960085610438, 'lambda': 5.163764373509207, 'beta': 4.96336802574069}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7769350079263353, 'lambda': 3.76511503663051, 'beta': 3.254109706363344}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9085477640717166, 'lambda': 2.9795396525143554, 'beta': 2.444937567089864}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.545728064198171, 'lambda': 3.4117576059420616, 'beta': 1.9494871839854349}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.723984559376531, 'lambda': 4.7486364625592135, 'beta': 3.9522773643061337}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5277726372528988, 'lambda': 1.4020406600331814, 'beta': 0.11978391237989994}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8986875370160727, 'lambda': 4.502896845502107, 'beta': 4.833241657347342}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4782835916749744, 'lambda': 1.5294049708427497, 'beta': 1.19570275112599}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.655156866839409, 'lambda': 3.72123100119604, 'beta': 3.3528621360353306}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8845843940775522, 'lambda': 2.193903486315457, 'beta': 3.088208313887502}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8383457836062975, 'lambda': 7.746732318237057, 'beta': 2.6429163893695655}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.40196709261910746, 'lambda': 5.9396618252725215, 'beta': 1.526208274133647}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1286993439276607, 'lambda': 7.797211487211999, 'beta': 2.1896222647199455}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8297305437659759, 'lambda': 6.599564247699442, 'beta': 2.2316329598049576}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8968767378051558, 'lambda': 6.380370184728548, 'beta': 3.054550187983389}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2284723668816044, 'lambda': 1.8504827576735448, 'beta': 2.491143285678402}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.884623972122757, 'lambda': 5.251853171315154, 'beta': 0.12989754524723618}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8238852164865262, 'lambda': 6.798616402172309, 'beta': 2.936969097920442}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4274690462698103, 'lambda': 2.6640034850586254, 'beta': 0.2102756906000186}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.992409457087426, 'lambda': 1.0374992807285626, 'beta': 1.067483117068363}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3620981976002935, 'lambda': 1.0857779449253808, 'beta': 4.827933002889461}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.971196947049491, 'lambda': 2.1904037637058993, 'beta': 4.206490569986019}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.686683615983175, 'lambda': 6.103423475464357, 'beta': 0.954343909741569}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.657474478739214, 'lambda': 4.692387502833412, 'beta': 0.5257727761292397}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8150955540896936, 'lambda': 0.8038490007288193, 'beta': 1.875003836193846}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1814364885263586, 'lambda': 3.366846876069041, 'beta': 1.9927849022699318}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.686218472255175, 'lambda': 3.893615271268324, 'beta': 0.5556979169871329}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.698821594290248, 'lambda': 7.599902405203857, 'beta': 3.0720913929456515}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.225843558153384, 'lambda': 2.9623106210264094, 'beta': 1.0014386062874365}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8023916939445606, 'lambda': 7.827459507565142, 'beta': 4.192668971943557}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.392220493392207, 'lambda': 2.4972657391850612, 'beta': 4.772724487215547}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.7158435164063528, 'lambda': 1.2610191406838265, 'beta': 3.4811953437381633}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10316720261411283, 'lambda': 0.8209910664084541, 'beta': 0.6674807933222804}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.160152168765331, 'lambda': 5.8026686827986325, 'beta': 3.3838824289332523}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1422616583757845, 'lambda': 6.403717884092965, 'beta': 4.4748664946847665}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6953805680331114, 'lambda': 6.683282008716633, 'beta': 4.797312818062337}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6654270845668123, 'lambda': 5.40942705241307, 'beta': 4.629309859164615}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2023519774185787, 'lambda': 1.3310406277843727, 'beta': 0.8656587873322463}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.27512843847587354, 'lambda': 1.118635793004925, 'beta': 2.747104659908363}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2062225250967108, 'lambda': 4.332037723781829, 'beta': 3.77376488761397}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.895480747246964, 'lambda': 7.928554793074314, 'beta': 4.467389836536733}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4811951928380465, 'lambda': 5.324832290418942, 'beta': 0.8113760583990343}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.06871543897207821, 'lambda': 5.476531506485307, 'beta': 1.3247860997743466}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.47921469229725866, 'lambda': 2.9768196013155546, 'beta': 1.1851478919950291}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0683371262566728, 'lambda': 0.1269125210541766, 'beta': 4.263529103465039}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6860383801818755, 'lambda': 2.808389217619939, 'beta': 2.8187883390356605}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3943781303897769, 'lambda': 6.795709927428703, 'beta': 1.7305978425638329}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4958700242460834, 'lambda': 1.3682901180439115, 'beta': 1.858966191388491}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.549461988211781, 'lambda': 5.7489201402128085, 'beta': 1.7882834090677897}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5109835807204304, 'lambda': 7.296068585682093, 'beta': 1.8398555180633243}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.715060603682269, 'lambda': 0.027246809323912657, 'beta': 3.1883588841510195}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8589486048798958, 'lambda': 1.5590378948467247, 'beta': 3.1984452633085922}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.680516466915769, 'lambda': 7.157238612534145, 'beta': 3.844791375951438}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5863931026593118, 'lambda': 6.725483923534276, 'beta': 4.469000700320267}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9749321296445368, 'lambda': 6.350495995115092, 'beta': 0.741336270059047}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6492322531908816, 'lambda': 4.492752132452673, 'beta': 3.3481218669053723}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7580219841983915, 'lambda': 2.17766583355346, 'beta': 3.1349388425528435}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6526676855737668, 'lambda': 5.883699220611659, 'beta': 3.6249407441559005}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1291765871341983, 'lambda': 3.212907762966956, 'beta': 4.439295068232299}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9843032705827794, 'lambda': 6.4767738989085, 'beta': 0.8920155787110096}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.16917291092675013, 'lambda': 6.3489900892868905, 'beta': 1.2544817944469648}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9082142969923828, 'lambda': 3.004157944625722, 'beta': 4.648729810283082}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.15083175445177344, 'lambda': 1.149038813268775, 'beta': 2.57990734826921}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7000991730541095, 'lambda': 4.475802263663065, 'beta': 0.9402511768135274}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4896478673092752, 'lambda': 7.034563864215636, 'beta': 4.618525089682535}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.176017291427188, 'lambda': 6.471543429585295, 'beta': 1.8947920476912616}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.031651896562055915, 'lambda': 3.4502833201312937, 'beta': 4.790976499285609}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.600506726808744, 'lambda': 3.0307873362753286, 'beta': 1.6722822315560582}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6247994374113971, 'lambda': 3.8035432771865256, 'beta': 3.0392696158946504}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.737152905774137, 'lambda': 0.1305852556475804, 'beta': 0.41396276332713644}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.644076330033276, 'lambda': 4.353962246419569, 'beta': 1.0956329305508632}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9607623072402194, 'lambda': 4.321650322640004, 'beta': 1.2013495496219555}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5986504633002931, 'lambda': 1.4356226004858028, 'beta': 4.414980163818093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.41942559746599, 'lambda': 6.1923235885158245, 'beta': 2.1440072436577444}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1270359455397916, 'lambda': 4.475836687420628, 'beta': 4.511405941352378}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3286316362816046, 'lambda': 2.5855744432055987, 'beta': 2.2759768827724516}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6720595914829324, 'lambda': 4.703885173959936, 'beta': 1.9654411600232007}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1254952280798456, 'lambda': 3.2074295335504743, 'beta': 4.0115169314578685}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.601535865186309, 'lambda': 6.389842940374678, 'beta': 0.3160588542642595}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.270058174904086, 'lambda': 1.6174729759363302, 'beta': 2.479658890842181}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1727036359566885, 'lambda': 4.734335059565521, 'beta': 1.4683284372780514}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5452115227476564, 'lambda': 5.063443803523218, 'beta': 1.5741145407914425}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4588138084419002, 'lambda': 5.770785247496191, 'beta': 0.21131918820079476}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2246586241181843, 'lambda': 1.370078236112601, 'beta': 1.4202340926438861}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9537006932993608, 'lambda': 6.895760035097755, 'beta': 4.140535222161758}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.609776976659586, 'lambda': 4.658785075416414, 'beta': 3.8508238367627956}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.282505621470519, 'lambda': 7.854520855748783, 'beta': 2.6181692198729953}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9886210193679442, 'lambda': 1.6534138088752828, 'beta': 0.9618474270026361}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9247964470945536, 'lambda': 6.389471000699083, 'beta': 1.656812267893818}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.06702758777438322, 'lambda': 4.91535966808187, 'beta': 4.665939841764725}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9645444451492904, 'lambda': 1.3892981186559528, 'beta': 2.320575495773418}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2611876970227764, 'lambda': 5.810674538252971, 'beta': 1.4849683888639849}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1014241217464784, 'lambda': 2.551382405759755, 'beta': 1.0658452789591433}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3282012603043154, 'lambda': 6.104479744265883, 'beta': 2.45047594928539}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.570879510676281, 'lambda': 4.8687196597968265, 'beta': 3.8841760752844907}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.465567540969122, 'lambda': 0.05670179358363292, 'beta': 4.942101898862804}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.33535418622881263, 'lambda': 0.16507929991739356, 'beta': 3.853109292369306}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0257270305328827, 'lambda': 2.361257545019831, 'beta': 4.4351021112592255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.412201251694477, 'lambda': 0.2293364242687259, 'beta': 2.410720722392894}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2587175374839499, 'lambda': 4.930882370941911, 'beta': 4.232379253045648}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2241710581664988, 'lambda': 7.622925956715769, 'beta': 1.1827344747086843}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.037298204232632, 'lambda': 3.197465782947754, 'beta': 2.0812393945722194}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8504848733417756, 'lambda': 3.9206927441456125, 'beta': 1.964093386891816}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.240094834687545, 'lambda': 6.360505108158093, 'beta': 2.947253900332551}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.868054841235591, 'lambda': 6.546297397491309, 'beta': 0.05293812428548428}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5172846360801038, 'lambda': 2.045439207914293, 'beta': 0.17026989860535136}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6932875863602425, 'lambda': 3.3349650514107374, 'beta': 2.4194935506018718}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8727353440811173, 'lambda': 2.4213436966059767, 'beta': 2.9191154784589095}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2421524650386377, 'lambda': 0.4672185347362934, 'beta': 4.350329194828405}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.824775280820885, 'lambda': 3.4826048636834823, 'beta': 0.10774565683454085}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7228078772913759, 'lambda': 6.647373849732329, 'beta': 2.4309705408814946}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2617661903440054, 'lambda': 5.070845716630568, 'beta': 3.2069350366398015}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6926798472803692, 'lambda': 1.4044532236796812, 'beta': 2.8887784228104794}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9357796087486251, 'lambda': 7.986654288884622, 'beta': 0.2638038705575857}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7285512603090811, 'lambda': 4.6661592300043715, 'beta': 4.69538842394307}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8857282921979861, 'lambda': 5.283870811574963, 'beta': 1.2753906593473148}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.97556854769816, 'lambda': 6.15923491807192, 'beta': 3.331924447386554}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8759473599485776, 'lambda': 0.8451273940825157, 'beta': 4.3289129513586415}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2100504505761416, 'lambda': 5.9738147385815585, 'beta': 3.3871304551802464}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.20850317418607067, 'lambda': 3.171934041750359, 'beta': 1.5302874543222145}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8584848483953242, 'lambda': 5.678957147727724, 'beta': 0.48648656043366767}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.775382168336214, 'lambda': 3.5246700444446493, 'beta': 3.3785820286831707}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.193548628486281, 'lambda': 0.3546399995447054, 'beta': 1.0854336329595582}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2942341803306858, 'lambda': 4.956982254400059, 'beta': 2.468322295536268}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.29458732633016227, 'lambda': 0.7381688883135222, 'beta': 4.779613573122394}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.10619147183332878, 'lambda': 2.3938167486819877, 'beta': 0.42388241398091553}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.437737927767723, 'lambda': 6.026725257138116, 'beta': 3.7708329995032526}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.29299856347071684, 'lambda': 0.5416332443781835, 'beta': 2.5753397582692954}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.157854199265068, 'lambda': 2.4284767150528124, 'beta': 2.727473345493583}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08365039513256145, 'lambda': 2.91879707351893, 'beta': 2.4736145268911254}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4810416855537634, 'lambda': 6.189416551952033, 'beta': 0.029028190953523936}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3755163909670847, 'lambda': 0.6521822820494174, 'beta': 0.8022704474116438}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.47389501168675063, 'lambda': 7.072447053103623, 'beta': 1.1402551296271084}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7212341387241725, 'lambda': 6.59809373513293, 'beta': 1.6189028102264218}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.89818921045529, 'lambda': 3.7480778696136428, 'beta': 4.74105532013201}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6189791242318423, 'lambda': 7.379955035528068, 'beta': 4.39988210905322}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.736230315238277, 'lambda': 4.141803840997636, 'beta': 3.291335814182903}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.41611654050157554, 'lambda': 4.12102969747668, 'beta': 3.1534788775198566}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.010750137242703683, 'lambda': 6.192669272063781, 'beta': 0.5402960471845764}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2308916093310622, 'lambda': 0.19728593817501672, 'beta': 0.34281450457447904}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.59434443729418, 'lambda': 4.177208443601357, 'beta': 3.4883962378495936}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.643787149551553, 'lambda': 6.052226723612623, 'beta': 4.330009947267195}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.039763185470703566, 'lambda': 0.9844246982617761, 'beta': 2.837079547651796}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3920621316250434, 'lambda': 4.745040877501885, 'beta': 0.9688630524780661}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2709384080664031, 'lambda': 4.876091652591492, 'beta': 2.6117410076325513}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6685688253544075, 'lambda': 6.644149626030206, 'beta': 1.617966961398255}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.912472963479674, 'lambda': 5.5542402515070695, 'beta': 0.7963970580148916}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.950224976299399, 'lambda': 3.2425238395592872, 'beta': 0.3764521894913403}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.285085263389253, 'lambda': 4.5981952221264395, 'beta': 4.240038564630557}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9731546576452479, 'lambda': 4.920685877566206, 'beta': 1.8104611575480272}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9305007022118392, 'lambda': 1.6485639042260258, 'beta': 0.8779209209391359}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8811203442898838, 'lambda': 2.1689325059436335, 'beta': 3.6074368661363314}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9571780850575031, 'lambda': 5.024402158533352, 'beta': 0.7947185612040175}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8292593219516669, 'lambda': 5.33069337132662, 'beta': 0.3914642016955311}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.1757483025739499, 'lambda': 0.10445111603849355, 'beta': 4.362010300544653}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.41213256888460015, 'lambda': 1.0142488574164812, 'beta': 1.8471208086784712}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.3736634500028613, 'lambda': 5.744438511378751, 'beta': 2.7334416847449465}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.489761886303967, 'lambda': 2.5591840289384837, 'beta': 4.501841287962133}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1630983480948234, 'lambda': 3.596681196301768, 'beta': 3.6308522794953775}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5607634758094755, 'lambda': 3.137491979205688, 'beta': 2.3431659653424264}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.086364539418739, 'lambda': 6.989287772873003, 'beta': 2.092180279302784}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9419964684660209, 'lambda': 3.856760402309554, 'beta': 3.434611276325249}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.9789165532464987, 'lambda': 6.469260096960213, 'beta': 1.4497672827763808}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.1946495958248535, 'lambda': 1.06806639131183, 'beta': 3.4679144059624543}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4960139007718286, 'lambda': 2.703432045754832, 'beta': 4.053087216238363}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.08606414433763865, 'lambda': 2.1994584957581393, 'beta': 2.077398388606796}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.289541207322092, 'lambda': 5.334830559505131, 'beta': 2.0140281142948044}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9342264711618832, 'lambda': 2.5087198046825607, 'beta': 3.764740700978269}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2303429273555126, 'lambda': 3.1633879079645855, 'beta': 3.524924293818409}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2936525040152864, 'lambda': 5.252608110615848, 'beta': 4.196461518525813}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.20918866578178, 'lambda': 3.4529027989834082, 'beta': 4.2373362408535185}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.11508211786671318, 'lambda': 4.529728617539697, 'beta': 0.7059586513177613}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.879091112431933, 'lambda': 5.100535269630047, 'beta': 4.253556451392202}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.327177573148412, 'lambda': 7.571270350090091, 'beta': 0.48452499960542517}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.902147553104629, 'lambda': 7.719805583038037, 'beta': 2.546610232573569}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2877250267031215, 'lambda': 6.245688989289921, 'beta': 1.9335202979596282}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9984847448820748, 'lambda': 3.628664989629801, 'beta': 1.728033363634005}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0920727255441998, 'lambda': 3.2474204264336626, 'beta': 1.1934427276725441}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7378357027683441, 'lambda': 5.941987335913354, 'beta': 3.566447323890717}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.544455762504181, 'lambda': 1.381047684840512, 'beta': 4.660924781620192}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7706252849811249, 'lambda': 1.3280012221211095, 'beta': 1.4497692773563964}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0509876567751362, 'lambda': 0.36400869948828607, 'beta': 4.4744155162324075}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.21265724811162112, 'lambda': 5.5377797597135645, 'beta': 3.1141270523068987}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0510896092955258, 'lambda': 4.452377454308542, 'beta': 3.1626808322923243}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.592074407020536, 'lambda': 2.811860528225724, 'beta': 2.2486532486781003}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4091238126665275, 'lambda': 2.3223478221819933, 'beta': 2.7409828429512784}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.1850540693001763, 'lambda': 2.9507873066526145, 'beta': 4.5632517722083445}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.007523043369551341, 'lambda': 1.8100729164547982, 'beta': 4.994263968996856}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.11347669386122494, 'lambda': 0.2143715583211243, 'beta': 0.5373976364276456}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.25665708383784336, 'lambda': 1.4859828550008132, 'beta': 4.61770389689662}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42533585569708354, 'lambda': 2.048326819078693, 'beta': 3.8025491086228715}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5398995429642879, 'lambda': 5.3428538157626235, 'beta': 4.629383786139022}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.232620498759921, 'lambda': 2.3231595812717085, 'beta': 0.6966348331372546}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3992955458755776, 'lambda': 4.721537374901949, 'beta': 3.9751493402425626}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5354050014061266, 'lambda': 3.9153838327958166, 'beta': 2.693554095899129}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9556949527622759, 'lambda': 4.13101979008233, 'beta': 4.474867765316202}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8097365785102255, 'lambda': 4.867037730877663, 'beta': 3.3849444989757096}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5015680033772347, 'lambda': 3.041696088642868, 'beta': 3.025135517215161}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.848689113366618, 'lambda': 6.122360263832336, 'beta': 4.142537465144093}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.45378066244583504, 'lambda': 0.33291066009878456, 'beta': 1.4126397806392454}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.2451687509167875, 'lambda': 7.060340393452013, 'beta': 0.21409399202088175}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.02539053341534203, 'lambda': 1.4042560540847386, 'beta': 4.824544137981792}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.3851913648746548, 'lambda': 4.131171650479341, 'beta': 4.167274358845809}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0980884343504755, 'lambda': 0.6385382576596719, 'beta': 2.4400660807504035}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.889867993624886, 'lambda': 0.6407806732633841, 'beta': 4.09834247432388}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4275124248163182, 'lambda': 0.7559354293722658, 'beta': 1.4503627841147475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9976385288867298, 'lambda': 0.6996407037358052, 'beta': 3.4155992599093166}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.126129657508746, 'lambda': 6.366718745338226, 'beta': 1.0774349350997126}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6085000935936757, 'lambda': 6.00509849366731, 'beta': 4.2203465509209925}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.7555298484589026, 'lambda': 1.3561521582041207, 'beta': 0.9129863506561253}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.055480484352748, 'lambda': 4.571223728235217, 'beta': 1.6790795922694035}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.539434724629915, 'lambda': 4.576991440012359, 'beta': 0.016707345823244735}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2343360367630205, 'lambda': 5.091825363424527, 'beta': 3.2853079901501547}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8948773848600546, 'lambda': 7.751198965163414, 'beta': 2.013295457401223}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.6941202907519615, 'lambda': 1.6184538058913462, 'beta': 1.4842867730349725}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0939214345047064, 'lambda': 3.058139156534585, 'beta': 3.300858359283263}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.48954520088416265, 'lambda': 0.32359073662554394, 'beta': 4.8642217245071055}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4529940935052958, 'lambda': 6.739835459793747, 'beta': 3.0225474221976616}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.09758236807797249, 'lambda': 7.055846402738451, 'beta': 4.014452103204972}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.0463838348461714, 'lambda': 1.4625867561886654, 'beta': 0.9741300505346656}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.691220931745326, 'lambda': 5.866409539537974, 'beta': 4.251692091411689}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.22528921511254307, 'lambda': 3.6180481748213014, 'beta': 0.1068376889238315}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.658320974037076, 'lambda': 7.006299136749017, 'beta': 4.3479972444706}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8167245452144853, 'lambda': 0.4354066867382187, 'beta': 3.755602266174237}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.45067004693648416, 'lambda': 4.086482276040206, 'beta': 3.497864109562165}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0941186422409517, 'lambda': 2.904305309579706, 'beta': 3.3564026267964313}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.967402508147027, 'lambda': 5.941250710041353, 'beta': 0.7004897905153556}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0114954015909339, 'lambda': 6.0582066306039435, 'beta': 0.6708723030830693}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5999090100380968, 'lambda': 4.569134371319477, 'beta': 1.656793627934594}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.2800609580216692, 'lambda': 4.562501922884857, 'beta': 2.051761960960563}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.42565960738652375, 'lambda': 1.6671962897744006, 'beta': 3.4588291803431455}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.993240059418624, 'lambda': 5.847305438678237, 'beta': 3.8759983923437975}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5725509597807577, 'lambda': 0.14278274025095783, 'beta': 4.803340718370059}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.484086396992093, 'lambda': 2.032943055421935, 'beta': 2.22471577076122}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.0735151351446688, 'lambda': 5.103964961695897, 'beta': 4.7273630664884685}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.3185338046230703, 'lambda': 0.7816658393586504, 'beta': 0.04817101895643161}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.18613091298126794, 'lambda': 0.2219823240789376, 'beta': 0.44358638055598865}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4023352798368225, 'lambda': 7.005673246068499, 'beta': 1.7913589978158866}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.7557503295219945, 'lambda': 7.482335669283584, 'beta': 2.3877485381205643}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4530169950846514, 'lambda': 0.7059267139545105, 'beta': 2.0405534051885974}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4310241213997825, 'lambda': 6.117212978787086, 'beta': 0.4343168683805504}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.166766476044635, 'lambda': 5.306555168480897, 'beta': 4.0199541790528395}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5287075763924035, 'lambda': 3.803062454903836, 'beta': 2.7978882153549236}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.6320548786848531, 'lambda': 0.2752775882706411, 'beta': 0.3268036677956099}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9269340551265343, 'lambda': 7.987299502373452, 'beta': 3.3559846259416353}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.318195123369944, 'lambda': 2.49605854506314, 'beta': 1.7053308011733677}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.5282485765306086, 'lambda': 2.5790115239747164, 'beta': 1.070075899608296}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.223609611088297, 'lambda': 5.648513772937105, 'beta': 2.9105875368555156}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.39991738683891953, 'lambda': 3.1414166756419952, 'beta': 4.967512265471781}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8826093945667006, 'lambda': 2.719234550609409, 'beta': 1.047558026803597}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.029147547128023588, 'lambda': 3.416884508490396, 'beta': 1.0769298891980057}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.310248629796221, 'lambda': 3.8108421659436376, 'beta': 4.663170211601681}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.337618414921571, 'lambda': 1.1888759310909762, 'beta': 3.414905837153511}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.938186533251728, 'lambda': 7.722843174059702, 'beta': 4.74606256845104}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.417339773382312, 'lambda': 4.167015068658452, 'beta': 0.9182209242939993}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.22994013972472005, 'lambda': 0.019182585118111106, 'beta': 3.3475211823566475}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.4462208152634277, 'lambda': 7.46009235243985, 'beta': 0.8778640451173836}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8977291824261124, 'lambda': 1.1585919565200236, 'beta': 1.0856123495380887}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.4142213276850121, 'lambda': 7.585418678744541, 'beta': 1.8426857926608116}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.4868706648021988, 'lambda': 0.11602704072594161, 'beta': 2.2920260391684244}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.603358924288055, 'lambda': 7.787585123012967, 'beta': 3.454385858450415}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.8810802509894669, 'lambda': 5.942779895449939, 'beta': 3.9940485301716793}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.8458594785239961, 'lambda': 5.7521985006289915, 'beta': 1.273236606498978}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.6295030578740102, 'lambda': 6.726153351318974, 'beta': 0.9843714366888884}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.015112082448208, 'lambda': 0.4292089339031637, 'beta': 4.8987739482826695}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.38534316055392903, 'lambda': 7.5909877699071275, 'beta': 4.875710641891825}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.9052943370115183, 'lambda': 5.452757894488396, 'beta': 0.01225357358883461}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.2679883643167984, 'lambda': 7.314661801167792, 'beta': 1.2451931525131625}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 2.8641149365968213, 'lambda': 4.941210172822012, 'beta': 3.7428289506770223}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.5283714550638423, 'lambda': 6.5248641584892315, 'beta': 3.984225033707447}\"]"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: [\"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.46620691420678906, 'lambda': 2.7063306103656615, 'beta': 4.506374241904373}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 0.9448068399738562, 'lambda': 0.20780372340141717, 'beta': 0.4427880367604947}\", \"Error in likelihood calculation: simulate_model() got an unexpected keyword argument 'lambda'. Did you mean 'lambda_'?\\nParams: {'kappa': 1.5389228097692538, 'lambda': 6.460847863236923, 'beta': 2.0215385173053724}\"]"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: U = kappa * max(split_self - 3*token_self, 0) - lambda * max(3*token_self - split_self, 0) - beta * max((token_self/(token_self + token_opp)*100) - splitperc_self, 0)\nSummary: A prospect theory-inspired model evaluating offers relative to contribution-based reference points. Combines loss-averse valuation of monetary outcomes with inequity aversion sensitive to deviations from contribution-proportional splits. Uses three orthogonal parameters: gain sensitivity (\u03ba), loss aversion (\u03bb), and disadvantageous inequity aversion (\u03b2). Fixed exponents from behavioral economics priors maintain identifiability while capturing key non-linearities in fairness judgments.\nTarget Variable: accept\nPrediction Type: utility"
  ]
}