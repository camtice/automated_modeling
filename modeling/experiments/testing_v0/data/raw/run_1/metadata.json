{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "kappa": {
      "description": "Fairness sensitivity parameter that scales the impact of the deviation between the offered split and the fair share. A positive kappa means that if split_self is below the fair share, utility will be penalized.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self + kappa * (split_self - (token_self/(token_self + token_opp)) * combined_earning)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposal, calculated as the sum of the monetary gain and the fairness-adjusted bonus/penalty. Negative values indicate low utility for acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share proposed to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (reflecting contribution to the shared pot).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (reflecting their contribution).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary amount available from both participants' tokens (each token is \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "kappa": {
      "description": "Fairness sensitivity parameter that scales the impact of the deviation between the offered split and the fair share. A positive kappa means that if split_self is below the fair share, utility will be penalized.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior in which the utility of accepting an offer is determined by the actual monetary payoff (split_self) combined with a fairness adjustment. The fairness adjustment is based on the deviation of split_self from a fair share computed as the participant\u2019s relative contribution (token_self) times the combined earning. The approach uses a single learnable parameter (kappa) governing the sensitivity to fairness deviations.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n\u2003\u2022 Responders compare the received offer (split_self) to what they consider \u201cfair.\u201d In this task, fairness is naturally defined in relation to each individual\u2019s contribution. Here, the fair share is proportional to the participant\u2019s token_earning compared to the total (token_self + token_opp) multiplied by the combined earning.\n\u2003\u2022 When the offer is lower than that fair share, the responder may feel treated unfairly and experience a penalty to utility.\n\u2003\u2022 Conversely, when the offer exceeds the fair share, the additional gain enhances utility.\n\u2003\u2022 Thus, one mechanism is monetary gain and the second is a fairness (or inequity) comparison process.\n\n2. How these mechanisms interact:\n\u2003\u2022 The measured utility is primarily the monetary payoff (split_self) adjusted by a penalty (or bonus) from the fairness comparison.\n\u2003\u2022 The fairness comparison is computed as the difference between the actual offer split_self and the fair share.\n\u2003\u2022 A learnable parameter modulates how strongly the deviation from fairness affects utility.\n\n3. Mathematical form to capture these interactions:\n\u2003\u2022 Compute fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2022 Compute the fairness deviation: (split_self \u2212 fair_share).\n\u2003\u2022 Then, define the utility for accepting as:\n\u2003\u2003U = split_self + kappa \u00d7 (split_self \u2212 fair_share)\n\u2003\u2022 Here, kappa is the learnable fairness sensitivity parameter that can adjust the weight of the fairness difference relative to the raw payoff.\n\n4. Learnable parameter details:\n\u2003\u2022 kappa is the only learnable parameter in this specification. Its value will determine the strength and direction of the fairness effect.\n\u2003\u2022 Finite bounds for kappa are provided (e.g., between \u201310 and 10).\n\n5. Mapping model variables to observable behavior:\n\u2003\u2022 split_self, token_self, token_opp, and combined_earning are measured for each trial in the dataset.\n\u2003\u2022 The computed U (utility for accepting) will influence the probability of acceptance (later combined with a temperature parameter).\n\u2003\u2022 Offers that fall short of the fair share (negative (split_self \u2212 fair_share) term) will result in reduced U when kappa is positive.\n\nBelow is the formal specification:\n\n<MODEL>\nU_accept = split_self + kappa * (split_self - (token_self/(token_self + token_opp)) * combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposal, calculated as the sum of the monetary gain and the fairness-adjusted bonus/penalty. Negative values indicate low utility for acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share proposed to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (reflecting contribution to the shared pot).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (reflecting their contribution).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available from both participants' tokens (each token is \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"kappa\": {\n      \"description\": \"Fairness sensitivity parameter that scales the impact of the deviation between the offered split and the fair share. A positive kappa means that if split_self is below the fair share, utility will be penalized.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior in which the utility of accepting an offer is determined by the actual monetary payoff (split_self) combined with a fairness adjustment. The fairness adjustment is based on the deviation of split_self from a fair share computed as the participant\u2019s relative contribution (token_self) times the combined earning. The approach uses a single learnable parameter (kappa) governing the sensitivity to fairness deviations.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, kappa=0):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        \n        # Calculate fair share\n        fair_share = (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n        \n        # Calculate utility\n        U_accept = split_self + kappa * (split_self - fair_share)\n        \n        # Append the utility value to the result list\n        utility_values.append(U_accept)\n    return utility_values",
  "fitting_results": [
    {
      "kappa": 6.485005693978205,
      "success": true,
      "log_likelihood": -13.891927091597084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.5562905590338731,
      "success": true,
      "log_likelihood": -16.250868347508725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.6471075636826549,
      "success": true,
      "log_likelihood": -12.40983383787321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.899817988150005,
      "success": true,
      "log_likelihood": -13.887411921141652,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2668262830040455,
      "success": true,
      "log_likelihood": -11.012420513755574,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.1168042016285198,
      "success": true,
      "log_likelihood": -13.632687974800852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870387308629943,
      "success": true,
      "log_likelihood": -1.8610878832673428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0641004610350244,
      "success": true,
      "log_likelihood": -13.700422688340518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.587038347971386,
      "success": true,
      "log_likelihood": -1.8610878832672983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.413738868498465,
      "success": true,
      "log_likelihood": -11.508513548132363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2134299230278733,
      "success": true,
      "log_likelihood": -8.984390301368352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.496089798035998,
      "success": true,
      "log_likelihood": -13.499859164485173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.398069966025171,
      "success": true,
      "log_likelihood": -10.263954890462724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870383384839655,
      "success": true,
      "log_likelihood": -1.861087883267298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870382185924994,
      "success": true,
      "log_likelihood": -1.8610878832672975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.587039698188308,
      "success": true,
      "log_likelihood": -1.8610878832677342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870388115129193,
      "success": true,
      "log_likelihood": -1.8610878832673592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.19447816614615399,
      "success": true,
      "log_likelihood": -10.259330522033911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.1616686156785567,
      "success": true,
      "log_likelihood": -10.877852780679435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870370289671367,
      "success": true,
      "log_likelihood": -1.8610878832676288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.4715215371618968,
      "success": true,
      "log_likelihood": -15.512968510587388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.27143507278115975,
      "success": true,
      "log_likelihood": -11.68695290983743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.8244575879696192,
      "success": true,
      "log_likelihood": -18.604446443992867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.3104785218841024,
      "success": true,
      "log_likelihood": -16.9931460938644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.8901203283476595,
      "success": true,
      "log_likelihood": -14.104534099631241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.2048849132591128,
      "success": true,
      "log_likelihood": -15.540167349853474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.379029127390708,
      "success": true,
      "log_likelihood": -13.55895379724986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.437158941346092,
      "success": true,
      "log_likelihood": -5.49180103395399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.11822838374675176,
      "success": true,
      "log_likelihood": -11.647405021597788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5158287893103253,
      "success": true,
      "log_likelihood": -16.22526211267038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870364204131246,
      "success": true,
      "log_likelihood": -1.8610878832680338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.485116463006554,
      "success": true,
      "log_likelihood": -13.891927093443014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.4511600703425407,
      "success": true,
      "log_likelihood": -22.066764288589216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.0453038453436703,
      "success": true,
      "log_likelihood": -15.267901605588213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -2.5870369867233673,
      "success": true,
      "log_likelihood": -1.8610878832676512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.8258518749400825,
      "success": true,
      "log_likelihood": -14.839283098495784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.9053027081017664,
      "success": true,
      "log_likelihood": -12.46097940594645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.7451867379238981,
      "success": true,
      "log_likelihood": -14.483899975857014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.9292520487224009,
      "success": true,
      "log_likelihood": -17.742009281070978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.15502768888608104,
      "success": true,
      "log_likelihood": -10.708205898448885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.1823954155417629,
      "success": true,
      "log_likelihood": -17.698251264077903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.6031145933253645,
      "success": true,
      "log_likelihood": -13.345135591727447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.9490341698425045,
      "success": true,
      "log_likelihood": -7.283181387753847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.2277100646166192,
      "success": true,
      "log_likelihood": -16.375286652575564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.1329506945264058,
      "success": true,
      "log_likelihood": -14.654593571371093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5200643729335057,
      "success": true,
      "log_likelihood": -16.11141612776637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.4715215413685996,
      "success": true,
      "log_likelihood": -15.512968511638272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.728273959716276,
      "success": true,
      "log_likelihood": -19.394406479426554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.513136893142119,
      "success": true,
      "log_likelihood": -11.450327712428829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.8489237880902124,
      "success": true,
      "log_likelihood": -26.15026991244338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.6872692855032084,
      "success": true,
      "log_likelihood": -17.421940321085625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.511790103240183,
      "success": true,
      "log_likelihood": -20.02866602104248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.1383690433771936,
      "success": true,
      "log_likelihood": -18.994419191792232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.722392878219499,
      "success": true,
      "log_likelihood": -22.399060766031596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.9394698590926716,
      "success": true,
      "log_likelihood": -20.511553805203654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.274029780080666,
      "success": true,
      "log_likelihood": -7.003636055930782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.426980823213608,
      "success": true,
      "log_likelihood": -10.19899691243723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.8284792205613538,
      "success": true,
      "log_likelihood": -11.740691752651875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.069511989633836,
      "success": true,
      "log_likelihood": -14.911718343893206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.20831555489467213,
      "success": true,
      "log_likelihood": -14.489013884972936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.9632781057428775,
      "success": true,
      "log_likelihood": -19.72024627585044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.7282734684097791,
      "success": true,
      "log_likelihood": -14.894406482613176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.4850074366929755,
      "success": true,
      "log_likelihood": -13.891927091597198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.372656919016007,
      "success": true,
      "log_likelihood": -21.237141836749686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.701847326691884,
      "success": true,
      "log_likelihood": -11.147362340005133,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.268510788025927,
      "success": true,
      "log_likelihood": -15.195077637414093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.11515837662110277,
      "success": true,
      "log_likelihood": -10.31891026789451,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.20371685282049906,
      "success": true,
      "log_likelihood": -13.079465185711593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0745089374974148,
      "success": true,
      "log_likelihood": -16.390027825872657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.27503320525798836,
      "success": true,
      "log_likelihood": -11.652439956463901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -2.1417362922681558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.754323632004616,
      "success": true,
      "log_likelihood": -18.29276950964228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.4048180007693611,
      "success": true,
      "log_likelihood": -15.841388807548126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.3153657260656859,
      "success": true,
      "log_likelihood": -15.21685281736299,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0849821577555316,
      "success": true,
      "log_likelihood": -25.078066830061474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.9244396550654109,
      "success": true,
      "log_likelihood": -14.886522637627253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.35452512348226006,
      "success": true,
      "log_likelihood": -9.115562790342997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.622393813751309,
      "success": true,
      "log_likelihood": -22.662605620645348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.6309232444225535,
      "success": true,
      "log_likelihood": -23.539492849023173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.4849985036067,
      "success": true,
      "log_likelihood": -13.8919270916064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0589195300627454,
      "success": true,
      "log_likelihood": -24.355035824147308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.49282253177912416,
      "success": true,
      "log_likelihood": -11.180197776257433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.054214618569582,
      "success": true,
      "log_likelihood": -19.455793669787663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.4579124542995325,
      "success": true,
      "log_likelihood": -12.882674307964143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.7312346044038976,
      "success": true,
      "log_likelihood": -26.640038947901296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.710175106927408,
      "success": true,
      "log_likelihood": -9.975979270451264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.7713681343804276,
      "success": true,
      "log_likelihood": -17.95794256485774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.108222962192516,
      "success": true,
      "log_likelihood": -17.574528764876778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": -0.2750335956627898,
      "success": true,
      "log_likelihood": -8.652439959269975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.3726562262136113,
      "success": true,
      "log_likelihood": -15.237141840277038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.5539989087454412,
      "success": true,
      "log_likelihood": -21.189202184386367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "kappa": {
        "r": 0.9396046979875377,
        "p": 1.9897679236378524e-47
      }
    }
  },
  "bic_results": {
    "average_bic": 30.984097225818616,
    "individual_bics": [
      31.367373121650278,
      36.08525563347356,
      28.40318661420253,
      31.358342780739413,
      25.608359965967256,
      30.848894888057814,
      7.305694704990795,
      30.984364315137146,
      7.305694704990707,
      26.600546034720836,
      21.552299541192813,
      30.583237267426455,
      24.111428719381557,
      7.305694704990706,
      7.305694704990705,
      7.305694704991579,
      7.305694704990828,
      24.102179982523932,
      25.33922449981498,
      7.305694704991367,
      34.609455959630886,
      26.95742475813097,
      40.79241182644184,
      37.56981112618491,
      31.79258713771859,
      34.66385363816306,
      30.70142653295583,
      14.56712100636409,
      26.878328981651684,
      36.034043163796866,
      7.305694704992177,
      31.367373125342137,
      47.71704751563454,
      34.11932214963254,
      7.305694704991412,
      33.26208513544768,
      28.50547775034901,
      32.55131889017014,
      39.067537500598064,
      24.999930735353878,
      38.980021466611916,
      30.273790121911002,
      18.149881713963804,
      36.33409224360724,
      32.8927060811983,
      35.806351193988846,
      34.60945596173266,
      42.372331897309216,
      26.484174363313766,
      55.88405876334287,
      38.42739958062736,
      43.64085098054107,
      41.572357322040574,
      48.3816404705193,
      44.60662654886342,
      17.590791050317673,
      23.98151276333057,
      27.06490244375986,
      33.40695562624252,
      32.561546708401984,
      43.02401149015699,
      33.372331903682465,
      31.367373121650505,
      46.05780261195548,
      25.878243618466374,
      33.9736742132843,
      24.22133947424513,
      29.742449309879294,
      36.363574590201424,
      26.88839885138391,
      7.866991522992421,
      40.16905795774067,
      35.266296553552365,
      34.01722457318209,
      53.739652598579056,
      33.35656421371062,
      21.814644519142103,
      48.908730179746804,
      50.662504636502455,
      31.36737312166891,
      52.293590586750724,
      25.943914490970975,
      42.495106278031436,
      29.348867554384395,
      56.8635968342587,
      23.535477479358637,
      39.499404068171586,
      38.732576468209665,
      20.88839885699606,
      34.05780261901019,
      45.961923307228844
    ],
    "num_parameters": 1,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}