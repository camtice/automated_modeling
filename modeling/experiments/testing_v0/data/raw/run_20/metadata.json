{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self + kappa * (split_self - (token_self/(token_self + token_opp)) * combined_earning)\nSummary: A utility model for responder behavior in which the utility of accepting an offer is determined by the actual monetary payoff (split_self) combined with a fairness adjustment. The fairness adjustment is based on the deviation of split_self from a fair share computed as the participant\u2019s relative contribution (token_self) times the combined earning. The approach uses a single learnable parameter (kappa) governing the sensitivity to fairness deviations.\nModel 2:\nSpecification: U_i = gamma * split_self - delta * max((token_self/(token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: A utility model for responder behavior that scales the monetary outcome of the offer by gamma and applies a fairness penalty when the offer falls short of an equity reference point derived from the participant\u2019s token contribution. The penalty is weighted by delta, such that only offers below the fair share incur a reduction in utility.\nModel 3:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning \nand let d = split_self - fair_share.\nThen, the utility for accepting an offer is:\n\u2003\u2003U_accept = split_self + gamma \u00d7 [ I(d \u2265 0) \u00d7 d + I(d < 0) \u00d7 lambda_param \u00d7 d ]\nwhere I(condition) is an indicator function that equals 1 if the condition is true, and 0 otherwise.\nSummary: A reference-dependent utility model for responder behavior that computes the utility of accepting an offer by adjusting the actual monetary share with a fairness-based deviation. Offers above the fairness reference yield additional positive utility scaled by a gain sensitivity parameter (gamma), whereas offers below the reference incur an amplified penalty via a loss aversion parameter (lambda_param). The model uses only two learnable parameters and directly maps observable monetary variables and token contributions to the computed utility.\nModel 4:\nSpecification: U_accept = gamma * split_self + lambda * log( split_self / ((token_self / (token_self + token_opp)) * combined_earning ) )\nSummary: A dual-component utility model for responder behavior that combines a scaled monetary payoff with a nonlinear fairness adjustment. Fairness is computed as the proportionate share of the total earnings based on token contributions, and the offer is evaluated as a log ratio relative to this fairness benchmark. Two learnable parameters, gamma and lambda, respectively govern the weight of the monetary payoff and sensitivity to fairness deviations.\nModel 5:\nSpecification: U_accept = gamma * split_self - alpha * (split_self - (token_self/(token_self+token_opp))*combined_earning)^2\nSummary: This model computes the utility for a responder\u2019s acceptance decision as a weighted monetary gain (split_self scaled by gamma) reduced by a quadratic penalty on the deviation from a fairness benchmark (fair share derived from token contributions and combined earning) scaled by alpha. The model uses two learnable parameters, gamma and alpha, capturing self-interest and sensitivity to fairness violations.\nModel 6:\nSpecification: Let fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning,\nand let fairness_ratio = split_self / fair_share.\nThen the utility for acceptance is defined as:\n\u2003\u2003U_accept = gamma \u00d7 split_self \u00d7 (fairness_ratio)^alpha.\nSummary: This model computes the utility of accepting an offer as a product of the monetary payoff (split_self) scaled by gamma and a fairness adjustment. The fairness ratio, defined by the offer compared to the equitable share derived from token contributions, is raised to the power of alpha. These two learnable parameters, gamma and alpha, capture self-interest and fairness sensitivity in a multiplicative, nonlinear fashion.\nModel 7:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning. \nThen, the utility for accepting an offer is given by:\n\u2003\u2003U_accept = gamma \u00d7 split_self + delta \u00d7 (\u221a(split_self) \u2212 \u221a(fair_share)).\nSummary: This model computes the utility of accepting an offer as the sum of a self-interest component\u2014proportional to the offered share (split_self) weighted by gamma\u2014and a fairness component\u2014capturing the difference between the square roots of the offered share and the fair share (the equitable division based on token contributions), weighted by delta. The square-root transformation incorporates diminishing sensitivity to fairness deviations.\nModel 8:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning  \nd = split_self - fair_share  \nU_accept = gamma * split_self + lambda_param * combined_earning * tanh(d / combined_earning)\nSummary: A model of responder behavior that computes the utility of accepting an offer as the sum of a linear self-interest term and a fairness-based adjustment. The fairness adjustment is derived by comparing split_self with a fair share determined by token contributions and is nonlinearly transformed via the tanh function to capture diminishing sensitivity to fairness deviations. Only two learnable parameters, gamma and lambda_param, govern self-interest and fairness sensitivity, respectively.\nModel 9:\nSpecification: U_accept = gamma * split_self - delta * abs(split_self - ((token_self/(token_self + token_opp)) * combined_earning))\nSummary: A dual-factor utility model for responder behavior that combines a self-interest component (valuing the monetary offer) with a fairness penalty based on the absolute deviation from a token-based fair share. Two learnable parameters, gamma and delta, govern the weight of self-interest and fairness sensitivity, respectively.\nModel 10:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) * combined_earning \nLet disparity = | ln( split_self / fair_share ) |\nThen, the utility of accepting an offer is defined as:\n\u2003\u2003U_accept = gamma * split_self - lambda_param * combined_earning * disparity\nSummary: A utility model for responder behavior that combines self-interest and fairness sensitivity. The model calculates a fair share based on token contributions; then it penalizes offers that deviate from this fair share by applying an absolute logarithmic difference. Two learnable parameters, gamma and lambda_param, respectively scale the self-interest benefit and the fairness penalty.\nModel 11:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = split_self - fair_share  \nU_accept = gamma \u00d7 split_self + lambda \u00d7 ( d / (1 + |d|/combined_earning) )\nSummary: A utility model for responder behavior that combines a linear self-interest component with a fairness-adjustment component. The fairness adjustment is computed as the normalized deviation between the offer and the fair share (derived from token-based contributions) using a saturating function. Two learnable parameters (gamma and lambda) control the sensitivity to monetary value and fairness deviations, respectively.\nModel 12:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = split_self \u2212 fair_share  \nThen, the utility for accepting an offer is given by:\n\u2003\u2003U_accept = { d^(rho),\u2003\u2003if d \u2265 0  \n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 \u2212 alpha \u00d7 (\u2212d)^(rho),\u2003if d < 0 }\nSummary: This model computes the utility of a responder\u2019s acceptance decision by first establishing a fairness benchmark based on token contributions and combined earnings, then evaluating the offer as a deviation from this benchmark. Gains (offers above fairness) yield a positively curved utility raised to the power rho, while losses (offers below fairness) are penalized by an additional factor alpha. The two learnable parameters, rho and alpha, capture diminishing sensitivity and loss aversion, respectively.\nModel 13:\nSpecification: U_accept = gamma * split_self * (1 + lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))))\nSummary: A multiplicative utility model for responder decisions that integrates self-interest and fairness considerations. The model multiplies the offered monetary payoff (split_self) by an adjustment factor reflecting the deviation between the actual share ratio and a fairness benchmark computed from token contributions. Two learnable parameters, gamma and lambda_param, govern the scaling of self-interest and sensitivity to fairness deviations.\nModel 14:\nSpecification: tags, with variable descriptions in JSON format inside <VARIABLES> tags, and a concise summary in <SUMMARY> tags.\n\n--------------------------------------------------\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet r = (split_self / fair_share) \u2212 1  \nU_accept = gamma \u00d7 split_self \u00d7 (1 + lambda_param \u00d7 r)\nSummary: tags.\n\n--------------------------------------------------\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet r = (split_self / fair_share) \u2212 1  \nU_accept = gamma \u00d7 split_self \u00d7 (1 + lambda_param \u00d7 r)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, combining self-interest and fairness adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary offer for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma\": {\n      \"description\": \"Self-interest scaling parameter governing the valuation of split_self.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter governing how the ratio of split_self to fair_share adjusts the utility.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_share\": {\n      \"description\": \"The fair share of the combined earning, based on the participant\u2019s relative token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"r\": {\n      \"description\": \"Relative deviation of the offered split from the fair share (unitless).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA multiplicative utility model for responder behavior in which the base monetary payoff (split_self) is scaled by a fairness adjustment. The fairness benchmark, computed as the token-proportionate share of the combined earning (fair_share), is compared to the actual offer via a relative deviation (r). The utility for accepting an offer is given by U_accept = gamma \u00d7 split_self \u00d7 (1 + lambda_param \u00d7 r), where gamma and lambda_param (with bounds [0,10] and [-10,10], respectively) are the only learnable parameters.\nModel 15:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = split_self \u2212 fair_share  \nU_accept = gamma \u00d7 split_self + lambda_param \u00d7 (exp(d / combined_earning) \u2212 1)\nSummary: An exponential reference-dependent utility model for responder behavior. The model computes a fairness benchmark based on token contributions and combined earnings, then calculates the deviation (d) between the actual offer and this fair share. The utility is a sum of a self-interest term (gamma \u00d7 split_self) and a fairness adjustment (lambda_param multiplied by an exponential function of d), capturing nonlinear sensitivity to fairness deviations.\nModel 16:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = (split_self)^gamma - lambda_param \u00d7 max(fair_share - split_self, 0)\nSummary: A prospect theory\u2013inspired utility model for responder behavior featuring nonlinear self-interest valuation and an asymmetric fairness penalty. The model computes a fair share from participants\u2019 token contributions and penalizes offers below this benchmark while applying diminishing sensitivity to increased monetary offers via a power function. Two learnable parameters (gamma and lambda_param) calibrate the curvature and fairness sensitivity.\nModel 17:\nSpecification: U_accept = gamma * split_self * ( 2 / (1 + exp( - lambda_param * ( (split_self / ((token_self/(token_self + token_opp)) * combined_earning)) - 1 ) ) )\nSummary: A logistic adjustment model for responder behavior where the self-interest value (split_self) is modulated by a fairness-based logistic factor. The fairness benchmark is computed from the token-based proportional share of combined earnings, and the ratio of the offer to this fair share is transformed by a logistic function parameterized by lambda_param. The overall utility is then scaled by gamma, capturing the self-interest component.\nModel 18:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet r = (split_self / fair_share) \u2212 1  \nLet L = 1 / (1 + exp(\u2212 lambda_param \u00d7 r))  \nU_accept = split_self \u00d7 [ gamma + (1 \u2212 gamma) \u00d7 L ]\nSummary: A utility model for responder behavior that multiplies the monetary offer by a fairness-adjusted factor. The fairness benchmark is derived from token contributions and combined earnings, and the relative deviation from this benchmark is transformed through a logistic function. Two learnable parameters, gamma and lambda_param, respectively calibrate baseline self-interest and the steepness of fairness sensitivity.\nModel 19:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet d = split_self \u2212 fair_share  \nU_accept = split_self + lambda_param \u00d7 combined_earning \u00d7 tanh( gamma \u00d7 d / combined_earning )\nSummary: A utility model for responder behavior that computes the acceptance utility as the sum of the base monetary payoff and a nonlinear fairness adjustment. The fairness benchmark is derived from token contributions and combined earnings, and deviations from this fair share are scaled by a tanh function. The two learnable parameters\u2014gamma (scaling the sensitivity inside the tanh) and lambda_param (magnitude of the fairness adjustment)\u2014capture the nonlinear sensitivity to fairness violations while keeping the self\u2010interest component unweighted.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "gamma": {
      "description": "A self-interest scaling parameter governing the weight of the monetary offer (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "A fairness sensitivity parameter that scales the fairness adjustment term relative to combined earning.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet r = split_self / fair_share  \nLet F = (2 / (1 + exp( - (r - 1) )) ) - 1  \nU_accept = gamma \u00d7 split_self + lambda_param \u00d7 combined_earning \u00d7 F",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer, combining the direct monetary benefit with a fairness adjustment.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The monetary offer for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant.",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent.",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_share": {
      "description": "The fairness benchmark, computed as the participant's token proportion times combined earning.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "r": {
      "description": "The ratio of the offered split to the fair share.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "F": {
      "description": "A logistic transformation of the relative deviation (r - 1) ensuring the fairness adjustment is bounded between -1 and 1.",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gamma": {
      "description": "A self-interest scaling parameter governing the weight of the monetary offer (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "A fairness sensitivity parameter that scales the fairness adjustment term relative to combined earning.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder decisions that integrates a linear self\u2010interest term with an additive fairness adjustment. The fairness benchmark is computed as the participant\u2019s proportional token share multiplied by the combined earning. The relative offer is transformed via a logistic function into a bounded fairness adjustment, and the overall utility is given by U_accept = gamma \u00d7 split_self + lambda_param \u00d7 combined_earning \u00d7 F. This model uses two learnable parameters (gamma and lambda_param) to capture self\u2010interest and fairness sensitivity.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. The key psychological mechanisms we wish to capture are:\n   \u2022 A baseline valuation of the monetary offer (self\u2010interest), driven by split_self.\n   \u2022 A fairness comparison process where the participant forms a fairness reference (fair_share) based on their token contribution relative to the total (token_self/(token_self+token_opp)) multiplied by the combined earning.\n   \u2022 A nonlinear, saturating adjustment for deviations between the actual offer and the fairness benchmark. In particular, if the offer is lower than fair_share the adjustment is negative, and if higher it is positive, but with diminishing sensitivity for extreme deviations.\n\n2. The interaction of these mechanisms is modeled by combining a linear self\u2010interest term with an additive fairness adjustment. The fairness term is structured as a logistic transformation of the relative deviation (ratio of split_self to fair_share) so that the adjustment remains bounded between \u20131 and 1. This logistic term converts the relative deviation into a smooth, saturating function that modulates the overall utility.\n\n3. Mathematically, the model uses:\n   \u2022 A \u201cfair_share\u201d calculated as (token_self/(token_self+token_opp))\u00d7combined_earning.\n   \u2022 A relative ratio r = split_self/fair_share.\n   \u2022 A logistic transformation F = 2/(1+exp(\u2013(r\u20131))) \u2013 1, mapping deviations so that F\u22480 when split_self equals fair_share, negative when below, and positive when above.\n   \u2022 An additive utility function: the utility of accepting is the linear benefit from the monetary offer (scaled by a self\u2010interest parameter gamma) plus an adjustment term that scales the fairness deviation (with magnitude controlled by lambda_param and the total available amount, combined_earning).\n\n4. Only two learnable parameters are used:\n   \u2022 gamma (self\u2010interest scaling, positive) \n   \u2022 lambda_param (fairness sensitivity; can be positive or negative to capture the direction and magnitude of fairness adjustment)\n\n5. Observable model variables are directly mapped from the dataset (split_self, token_self, token_opp, combined_earning), and the computed fair_share and r are intermediate calculations. The final model provides U_accept\u2014the utility value for accepting an offer\u2014which later translates into choice probabilities (via a temperature parameter not included here).\n\nBelow is the formal model specification.\n\n--------------------------------------------------\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet r = split_self / fair_share  \nLet F = (2 / (1 + exp( - (r - 1) )) ) - 1  \nU_accept = gamma \u00d7 split_self + lambda_param \u00d7 combined_earning \u00d7 F\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, combining the direct monetary benefit with a fairness adjustment.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary offer for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_share\": {\n      \"description\": \"The fairness benchmark, computed as the participant's token proportion times combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"r\": {\n      \"description\": \"The ratio of the offered split to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"F\": {\n      \"description\": \"A logistic transformation of the relative deviation (r - 1) ensuring the fairness adjustment is bounded between -1 and 1.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"A self-interest scaling parameter governing the weight of the monetary offer (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"A fairness sensitivity parameter that scales the fairness adjustment term relative to combined earning.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder decisions that integrates a linear self\u2010interest term with an additive fairness adjustment. The fairness benchmark is computed as the participant\u2019s proportional token share multiplied by the combined earning. The relative offer is transformed via a logistic function into a bounded fairness adjustment, and the overall utility is given by U_accept = gamma \u00d7 split_self + lambda_param \u00d7 combined_earning \u00d7 F. This model uses two learnable parameters (gamma and lambda_param) to capture self\u2010interest and fairness sensitivity.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, gamma=1, lambda_param=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 1)\n        token_opp = trial.get(\"token_opp\", 1)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        \n        # Calculate fair_share\n        fair_share = (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n        \n        # Calculate r\n        r = split_self / fair_share if fair_share > 0 else 0\n        \n        # Calculate F\n        F = (2 / (1 + math.exp(-(r - 1)))) - 1\n        \n        # Calculate U_accept\n        U_accept = (gamma * split_self) + (lambda_param * combined_earning * F)\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "gamma": 0.0,
      "lambda_param": 3.56714399055335,
      "success": true,
      "log_likelihood": -7.33316345087696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3014459932885512,
      "lambda_param": 2.1581606611956348,
      "success": true,
      "log_likelihood": -15.395927987281782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8065666769590734,
      "lambda_param": 2.7577696219425474,
      "success": true,
      "log_likelihood": -13.103919836417198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4385373868626583,
      "lambda_param": 2.732637376607935,
      "success": true,
      "log_likelihood": -13.54869831843182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2276272967038768,
      "lambda_param": 2.5694895042249986,
      "success": true,
      "log_likelihood": -14.051422275615318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.8030367071697913,
      "lambda_param": 3.2360674757431243,
      "success": true,
      "log_likelihood": -10.405663720660876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -9.148480757986537,
      "success": true,
      "log_likelihood": -7.214018133542101e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.545143885771074,
      "lambda_param": 2.8089941614144007,
      "success": true,
      "log_likelihood": -11.30324656676657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -7.075767684414179,
      "success": true,
      "log_likelihood": -9.537019624937147e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5196925159287138,
      "lambda_param": 3.5063790950517264,
      "success": true,
      "log_likelihood": -11.31448759481561,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.7722898229816884,
      "lambda_param": 7.0271308781034865,
      "success": true,
      "log_likelihood": -6.2105958103350725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.009236741071389868,
      "lambda_param": 2.9657896981528387,
      "success": true,
      "log_likelihood": -8.845611445385327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.417396771738523,
      "lambda_param": 5.185374208486434,
      "success": true,
      "log_likelihood": -8.2857901509718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -6.616279191997697,
      "success": true,
      "log_likelihood": -1.2779564168312135e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -9.20696574599123,
      "success": true,
      "log_likelihood": -7.4319331735294675e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -7.952707565528623,
      "success": true,
      "log_likelihood": -6.394913894327855e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 9.850785001806612,
      "lambda_param": -7.814289309979228,
      "success": true,
      "log_likelihood": -7.896036242741622e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": 5.993565427398291,
      "success": true,
      "log_likelihood": -2.5579904505765394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.82042981171101,
      "lambda_param": 1.1658557606441242,
      "success": true,
      "log_likelihood": -7.9505063273038745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -7.834951442277366,
      "success": true,
      "log_likelihood": -6.6280618755121525e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3252657432550707,
      "lambda_param": 1.9920821056030509,
      "success": true,
      "log_likelihood": -15.813364838385883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.0403750687534616,
      "lambda_param": 1.6285328056720323,
      "success": true,
      "log_likelihood": -8.15881470476353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7972572993226925,
      "lambda_param": 1.836606046976822,
      "success": true,
      "log_likelihood": -16.78717572844009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3774478284693976,
      "lambda_param": 1.9698018663786165,
      "success": true,
      "log_likelihood": -15.732857197795163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.051188757470143,
      "lambda_param": 1.9969236896920348,
      "success": true,
      "log_likelihood": -16.177659460287817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5487209154413932,
      "lambda_param": 1.9298716082282217,
      "success": true,
      "log_likelihood": -15.243019005166138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.911937735139454,
      "lambda_param": 5.5276357323213325,
      "success": true,
      "log_likelihood": -7.07869992129846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.805312621429273,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -2.8345027545583568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0862983847639547,
      "lambda_param": 0.7094595731826217,
      "success": true,
      "log_likelihood": -10.089823843878376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3358067921748245,
      "lambda_param": 0.8213695179073628,
      "success": true,
      "log_likelihood": -16.077088465858594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 9.970115442586199,
      "lambda_param": -7.593473976329383,
      "success": true,
      "log_likelihood": -7.504268741638545e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.5671485102697815,
      "success": true,
      "log_likelihood": -7.333163450871049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6764224755773103,
      "lambda_param": 1.3596038232250462,
      "success": true,
      "log_likelihood": -19.13408665965425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2336229380339971,
      "lambda_param": 2.7524482989503714,
      "success": true,
      "log_likelihood": -13.406783953508672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -7.231327761186872,
      "success": true,
      "log_likelihood": -8.721840439950139e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.4518225680503156,
      "lambda_param": 2.390744789814915,
      "success": true,
      "log_likelihood": -11.713251990294474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 4.330725321320042,
      "lambda_param": 4.187798791191794,
      "success": true,
      "log_likelihood": -7.931994923090939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2368571010300173,
      "lambda_param": 2.1638738197079745,
      "success": true,
      "log_likelihood": -15.455769840635833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1836970630247818,
      "lambda_param": 1.208933527643223,
      "success": true,
      "log_likelihood": -17.71735916171755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0249797788226043,
      "lambda_param": 0.46806065253993007,
      "success": true,
      "log_likelihood": -9.37004127916696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2324664313668696,
      "lambda_param": 1.6128433955353267,
      "success": true,
      "log_likelihood": -16.972879803489402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.47363552120331126,
      "lambda_param": 2.856194236912037,
      "success": true,
      "log_likelihood": -11.141756093374225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.380762528689419,
      "lambda_param": -0.7067037122464955,
      "success": true,
      "log_likelihood": -7.166315052173824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.7829910200920462,
      "lambda_param": 2.405766427213943,
      "success": true,
      "log_likelihood": -13.78290264742906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0530160728196836,
      "lambda_param": 2.428103343971442,
      "success": true,
      "log_likelihood": -12.961133263777208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5456097090327274,
      "lambda_param": 1.0720005381199178,
      "success": true,
      "log_likelihood": -15.03199458679217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9748918632148482,
      "lambda_param": 3.0718270462252666,
      "success": true,
      "log_likelihood": -12.234076778988936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7305055819483257,
      "lambda_param": 1.6271959632540107,
      "success": true,
      "log_likelihood": -17.779277076564966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0428661286605692,
      "lambda_param": 2.5917713922055623,
      "success": true,
      "log_likelihood": -13.769942965773815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.38477284984346294,
      "lambda_param": 0.39019297234901396,
      "success": true,
      "log_likelihood": -23.53116511135168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2978956680529836,
      "lambda_param": 1.0596492789023608,
      "success": true,
      "log_likelihood": -16.86533178959093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.056851438541381,
      "success": true,
      "log_likelihood": -12.189266549497884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1385386071087962,
      "lambda_param": 1.5144997918101644,
      "success": true,
      "log_likelihood": -17.54032487623535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6842646617506976,
      "lambda_param": 0.5698652174498686,
      "success": true,
      "log_likelihood": -21.365446934862014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.28028392207102887,
      "lambda_param": 0.9809016605390607,
      "success": true,
      "log_likelihood": -20.905028554676903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.9831776455123054,
      "lambda_param": 7.890266181365288,
      "success": true,
      "log_likelihood": -5.515806811290498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1151703813629907,
      "lambda_param": 3.9838878355769225,
      "success": true,
      "log_likelihood": -9.501233787591008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6855302956109053,
      "lambda_param": -0.9593568046674535,
      "success": true,
      "log_likelihood": -11.824330942588052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.8231403159079815,
      "success": true,
      "log_likelihood": -9.220754740226301,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6439551721438646,
      "lambda_param": 0.7604370244652294,
      "success": true,
      "log_likelihood": -13.333348690692457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9842000570879096,
      "lambda_param": 1.1068341369796204,
      "success": true,
      "log_likelihood": -19.00477647640985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4193396208327138,
      "lambda_param": 2.513860867769429,
      "success": true,
      "log_likelihood": -14.21127919753379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.567148739054964,
      "success": true,
      "log_likelihood": -7.333163450871066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6130954404126724,
      "lambda_param": 1.0634953798650102,
      "success": true,
      "log_likelihood": -20.623850168553332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9069677739228693,
      "lambda_param": 4.02820868113251,
      "success": true,
      "log_likelihood": -8.985399213734484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.3040365928557827,
      "lambda_param": 3.121690002515444,
      "success": true,
      "log_likelihood": -11.53350872490276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.50204191877668,
      "lambda_param": 0.7540473139933509,
      "success": true,
      "log_likelihood": -8.091909309357574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.810501002675528,
      "lambda_param": 0.7317199195304606,
      "success": true,
      "log_likelihood": -11.980616352791973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.737835481830856,
      "lambda_param": 2.082253687585586,
      "success": true,
      "log_likelihood": -14.360749150761864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.189432594480121,
      "lambda_param": -0.24049334980702092,
      "success": true,
      "log_likelihood": -11.41562432336187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5449156006703666,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -0.8663649011072951,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0014489323042490225,
      "lambda_param": 2.2235024867755526,
      "success": true,
      "log_likelihood": -11.434814965673388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.348969715475502,
      "lambda_param": 1.9593035950303737,
      "success": true,
      "log_likelihood": -15.834645450349804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.467327955903617,
      "lambda_param": 0.7112358556768572,
      "success": true,
      "log_likelihood": -14.579451347960667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.46465048091906486,
      "lambda_param": 0.7144508597934877,
      "success": true,
      "log_likelihood": -22.43074980766458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.412536980483904,
      "lambda_param": 2.5285861040246567,
      "success": true,
      "log_likelihood": -11.811994132671156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8589503584948335,
      "lambda_param": 0.01325533810586067,
      "success": true,
      "log_likelihood": -7.884123734716643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.2574690122403176,
      "success": true,
      "log_likelihood": -11.278720572278404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.571203107962028,
      "lambda_param": 0.37696933700807894,
      "success": true,
      "log_likelihood": -22.117003206944112,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.5671494713489227,
      "success": true,
      "log_likelihood": -7.333163450871328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5172212962258288,
      "lambda_param": 0.7389098228654188,
      "success": true,
      "log_likelihood": -22.166838089431266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0512032903252833,
      "lambda_param": -0.4494246348253469,
      "success": true,
      "log_likelihood": -11.325248519564123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.0441257899002063,
      "success": true,
      "log_likelihood": -12.250769509722224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.043425795402149,
      "lambda_param": 4.342508481330383,
      "success": true,
      "log_likelihood": -8.980912278817588,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3673900456821477,
      "lambda_param": 0.284379777939023,
      "success": true,
      "log_likelihood": -23.648459963540457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1340612504946854,
      "lambda_param": 5.050401663556831,
      "success": true,
      "log_likelihood": -5.435801384140904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1221838820733976,
      "lambda_param": 0.9545425438223567,
      "success": true,
      "log_likelihood": -18.09349395238027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.13214818406484535,
      "lambda_param": 1.6889589173562325,
      "success": true,
      "log_likelihood": -15.121460703782473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.6739853950645607,
      "lambda_param": 0.47303244851611614,
      "success": true,
      "log_likelihood": -6.268101157293267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8478561564704832,
      "lambda_param": 2.6410496119467983,
      "success": true,
      "log_likelihood": -13.233690099884546,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7387280352702588,
      "lambda_param": 0.43052837941425354,
      "success": true,
      "log_likelihood": -20.624143549922206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "gamma": {
        "r": 0.8125307360777124,
        "p": 1.0537286864835518e-24
      },
      "lambda_param": {
        "r": 0.8855597625302826,
        "p": 2.1074037842070757e-34
      }
    }
  },
  "bic_results": {
    "average_bic": 30.227602699471106,
    "individual_bics": [
      21.833364778666137,
      37.958893851475786,
      33.374877549746614,
      34.26443451377586,
      35.26988242814286,
      27.97836531823397,
      7.167052304948487,
      29.77353101044536,
      7.16705695095147,
      29.796013066543438,
      19.588229497582365,
      24.85826076768287,
      23.738618178855823,
      7.167063436040556,
      7.1670527407785665,
      7.167050666740009,
      7.167053668984705,
      12.283018778065298,
      23.06805053151997,
      7.1670511330359705,
      38.793767553683985,
      23.484667286439283,
      40.7413893337924,
      38.63275227250254,
      39.52235679748785,
      37.6530758872445,
      21.32443771950914,
      12.836043386028933,
      27.346685564668974,
      39.321214808629406,
      7.167052885449703,
      21.833364778654317,
      45.43521119622072,
      33.98060578392956,
      7.1670553205931,
      30.593541857501165,
      23.0310277230941,
      38.07857755818389,
      42.60175620034732,
      25.907120435246142,
      41.11279748389102,
      29.45055006366067,
      21.49966798125987,
      34.73284317177034,
      33.08930440446664,
      37.23102705049656,
      31.63519143489009,
      42.72559203004215,
      34.70692380845985,
      54.22936809961558,
      40.897701456094076,
      31.545570975907985,
      42.247687629382916,
      49.897931746636246,
      48.977094986266025,
      18.198651499493216,
      26.169505452094235,
      30.81569976208832,
      25.60854735736482,
      33.83373525829713,
      45.17659082973192,
      35.5895962719798,
      21.83336477865435,
      48.41473821401888,
      25.13783630438119,
      30.234055326717737,
      23.35085649562737,
      31.128270582496164,
      35.88853617843595,
      29.99828652363596,
      8.89976767912681,
      30.036667808258997,
      38.836328777611826,
      36.32594057283355,
      52.02853749224138,
      30.79102614225453,
      22.935285346345506,
      29.72447902146903,
      51.40104429080044,
      21.833364778654875,
      51.50071405577475,
      29.817534916040465,
      31.66857689635667,
      25.128862434547393,
      54.46395780399313,
      18.03864064519403,
      43.35402578167276,
      37.40995928447717,
      19.703240191498754,
      33.634418076681314,
      48.41532497675663
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}