{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self + kappa * (split_self - (token_self/(token_self + token_opp)) * combined_earning)\nSummary: A utility model for responder behavior in which the utility of accepting an offer is determined by the actual monetary payoff (split_self) combined with a fairness adjustment. The fairness adjustment is based on the deviation of split_self from a fair share computed as the participant\u2019s relative contribution (token_self) times the combined earning. The approach uses a single learnable parameter (kappa) governing the sensitivity to fairness deviations.\nModel 2:\nSpecification: U_i = gamma * split_self - delta * max((token_self/(token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: A utility model for responder behavior that scales the monetary outcome of the offer by gamma and applies a fairness penalty when the offer falls short of an equity reference point derived from the participant\u2019s token contribution. The penalty is weighted by delta, such that only offers below the fair share incur a reduction in utility.\nModel 3:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning \nand let d = split_self - fair_share.\nThen, the utility for accepting an offer is:\n\u2003\u2003U_accept = split_self + gamma \u00d7 [ I(d \u2265 0) \u00d7 d + I(d < 0) \u00d7 lambda_param \u00d7 d ]\nwhere I(condition) is an indicator function that equals 1 if the condition is true, and 0 otherwise.\nSummary: A reference-dependent utility model for responder behavior that computes the utility of accepting an offer by adjusting the actual monetary share with a fairness-based deviation. Offers above the fairness reference yield additional positive utility scaled by a gain sensitivity parameter (gamma), whereas offers below the reference incur an amplified penalty via a loss aversion parameter (lambda_param). The model uses only two learnable parameters and directly maps observable monetary variables and token contributions to the computed utility.\nModel 4:\nSpecification: U_accept = gamma * split_self + lambda * log( split_self / ((token_self / (token_self + token_opp)) * combined_earning ) )\nSummary: A dual-component utility model for responder behavior that combines a scaled monetary payoff with a nonlinear fairness adjustment. Fairness is computed as the proportionate share of the total earnings based on token contributions, and the offer is evaluated as a log ratio relative to this fairness benchmark. Two learnable parameters, gamma and lambda, respectively govern the weight of the monetary payoff and sensitivity to fairness deviations.\nModel 5:\nSpecification: U_accept = gamma * split_self - alpha * (split_self - (token_self/(token_self+token_opp))*combined_earning)^2\nSummary: This model computes the utility for a responder\u2019s acceptance decision as a weighted monetary gain (split_self scaled by gamma) reduced by a quadratic penalty on the deviation from a fairness benchmark (fair share derived from token contributions and combined earning) scaled by alpha. The model uses two learnable parameters, gamma and alpha, capturing self-interest and sensitivity to fairness violations.\nModel 6:\nSpecification: Let fair_share = (token_self/(token_self + token_opp)) \u00d7 combined_earning,\nand let fairness_ratio = split_self / fair_share.\nThen the utility for acceptance is defined as:\n\u2003\u2003U_accept = gamma \u00d7 split_self \u00d7 (fairness_ratio)^alpha.\nSummary: This model computes the utility of accepting an offer as a product of the monetary payoff (split_self) scaled by gamma and a fairness adjustment. The fairness ratio, defined by the offer compared to the equitable share derived from token contributions, is raised to the power of alpha. These two learnable parameters, gamma and alpha, capture self-interest and fairness sensitivity in a multiplicative, nonlinear fashion.\nModel 7:\nSpecification: Let fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning. \nThen, the utility for accepting an offer is given by:\n\u2003\u2003U_accept = gamma \u00d7 split_self + delta \u00d7 (\u221a(split_self) \u2212 \u221a(fair_share)).\nSummary: This model computes the utility of accepting an offer as the sum of a self-interest component\u2014proportional to the offered share (split_self) weighted by gamma\u2014and a fairness component\u2014capturing the difference between the square roots of the offered share and the fair share (the equitable division based on token contributions), weighted by delta. The square-root transformation incorporates diminishing sensitivity to fairness deviations.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "gamma": {
      "description": "Weight on the monetary component (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Sensitivity to fairness deviations; adjusts utility by scaling the fairness adjustment term.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let fair_share = (token_self / (token_self + token_opp)) * combined_earning  \nd = split_self - fair_share  \nU_accept = gamma * split_self + lambda_param * combined_earning * tanh(d / combined_earning)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Computed utility for accepting the offer, combining self-interest and fairness-adjusted components.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gamma": {
      "description": "Weight on the monetary component (split_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Sensitivity to fairness deviations; adjusts utility by scaling the fairness adjustment term.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Monetary share offered to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined earnings available (in \u00a3) from the tokens, where each token contributes \u00a33.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A model of responder behavior that computes the utility of accepting an offer as the sum of a linear self-interest term and a fairness-based adjustment. The fairness adjustment is derived by comparing split_self with a fair share determined by token contributions and is nonlinearly transformed via the tanh function to capture diminishing sensitivity to fairness deviations. Only two learnable parameters, gamma and lambda_param, govern self-interest and fairness sensitivity, respectively.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms: In decisions on accepting an offer, participants consider both the direct monetary gain (self-interest) and the fairness of the split relative to what would be deemed fair given their token contribution. Fairness considerations are known to have diminishing sensitivity, meaning that the perceived difference between an offer and the fair share does not scale linearly (especially once the deviation becomes very large).\n\n2. Mechanism interaction: We propose that the overall utility for accepting an offer is a combination of a linear self-interest term plus a nonlinear adjustment based on fairness deviation. Fairness is computed by comparing the participant\u2019s share (split_self) with a reference point (fair_share) defined by the ratio of their token contribution in the combined tokens times the total available earnings (combined_earning). A hyperbolic tangent (tanh) function is used to capture the diminishing sensitivity to fairness deviations.\n\n3. Mathematical form: \n\u2003\u2003\u2022 Compute the fair share as:\n\u2003\u2003\u2003 fair_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n\u2003\u2003\u2022 Compute the deviation as:\n\u2003\u2003\u2003 d = split_self \u2212 fair_share.\n\u2003\u2003\u2022 Combine a self-interest component that is proportional to the monetary share split_self with a fairness adjustment: \n\u2003\u2003\u2003 The adjustment is proportional to combined_earning multiplied by tanh(d/combined_earning) so that the deviation is scaled in a bounded manner.\n\u2003\u2003\u2022 Two learnable parameters are introduced: gamma (\u03b3) governing the weight on the direct payoff, and lambda_param (\u03bb) governing the sensitivity to fairness deviations.\n\n4. Learnable parameters: gamma and lambda_param. Finite bounds are imposed on these parameters (e.g., gamma between 0 and 10, lambda_param between \u221210 and 10) to ensure identifiability and successful recovery.\n\n5. Data mapping: The observable variables split_self, token_self, token_opp, and combined_earning are directly used to compute fair_share and then derive the utility of accepting the offer. This utility (U_accept) is then available to be linked with the probability of action selection (via a temperature parameter to be added later).\n\nBelow is the formal mathematical model, followed by the variable descriptions.\n\n<MODEL>\nLet fair_share = (token_self / (token_self + token_opp)) * combined_earning  \nd = split_self - fair_share  \nU_accept = gamma * split_self + lambda_param * combined_earning * tanh(d / combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Computed utility for accepting the offer, combining self-interest and fairness-adjusted components.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on the monetary component (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Sensitivity to fairness deviations; adjusts utility by scaling the fairness adjustment term.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share offered to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined earnings available (in \u00a3) from the tokens, where each token contributes \u00a33.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA model of responder behavior that computes the utility of accepting an offer as the sum of a linear self-interest term and a fairness-based adjustment. The fairness adjustment is derived by comparing split_self with a fair share determined by token contributions and is nonlinearly transformed via the tanh function to capture diminishing sensitivity to fairness deviations. Only two learnable parameters, gamma and lambda_param, govern self-interest and fairness sensitivity, respectively.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, gamma=1, lambda_param=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        if token_self + token_opp == 0:  # Avoid division by zero\n            fair_share = 0\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n        \n        d = split_self - fair_share\n        U_accept = gamma * split_self + lambda_param * combined_earning * math.tanh(d / combined_earning)\n\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "gamma": 0.0,
      "lambda_param": 3.459767497129913,
      "success": true,
      "log_likelihood": -7.982176321814549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1936535470569036,
      "lambda_param": 1.8396003099902576,
      "success": true,
      "log_likelihood": -16.050643312238634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.5137108817368636,
      "lambda_param": 3.6780161439305656,
      "success": true,
      "log_likelihood": -10.104483459118814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.407267652033794,
      "lambda_param": 2.500597647714831,
      "success": true,
      "log_likelihood": -13.601665586701515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.009848809372054,
      "lambda_param": 3.897826614210997,
      "success": true,
      "log_likelihood": -9.904479042512257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.487160491212927,
      "lambda_param": 2.688637822798287,
      "success": true,
      "log_likelihood": -10.950099972808609,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.861057469080358e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.482629755078566,
      "lambda_param": 2.585506231262488,
      "success": true,
      "log_likelihood": -11.013173377539118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 9.973408500905535,
      "lambda_param": -8.605953967586776,
      "success": true,
      "log_likelihood": -4.99931972232313e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5285496375547567,
      "lambda_param": 3.3105329691983774,
      "success": true,
      "log_likelihood": -11.086497229153128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.809661500183496,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -2.3298551245052757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.006974393406862082,
      "lambda_param": 2.9298194698069793,
      "success": true,
      "log_likelihood": -9.168934519971677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.296573732671135,
      "lambda_param": 4.604665977910022,
      "success": true,
      "log_likelihood": -8.628440977916355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.861057469080359e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.8610574690803582e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.861057469080359e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -7.665891115157316,
      "success": true,
      "log_likelihood": -8.072824040391346e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 9.051272139183046,
      "lambda_param": 4.5811945579788516,
      "success": true,
      "log_likelihood": -2.720840615556863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.562451568810506,
      "lambda_param": 1.5867252716415887,
      "success": true,
      "log_likelihood": -6.734129841332169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.8610574690803595e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.416002677418777,
      "lambda_param": 2.0076796006390065,
      "success": true,
      "log_likelihood": -15.087639266689289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.2149091610324847,
      "lambda_param": 1.6235272234766278,
      "success": true,
      "log_likelihood": -7.8918869908769445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.662161304902583,
      "lambda_param": 1.4429144528386386,
      "success": true,
      "log_likelihood": -18.16906883196052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2072198178385871,
      "lambda_param": 1.5823298627861133,
      "success": true,
      "log_likelihood": -16.801266202414894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3707454440141598,
      "lambda_param": 2.443481518239305,
      "success": true,
      "log_likelihood": -13.800174727751369,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5941657761001338,
      "lambda_param": 1.8743020533101273,
      "success": true,
      "log_likelihood": -14.78458613724014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.2703805309157103,
      "lambda_param": 2.9170517925161494,
      "success": true,
      "log_likelihood": -11.39904015942607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.8754528584997106,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -3.9075191039555826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.3942841902106062,
      "lambda_param": 0.9113397721533141,
      "success": true,
      "log_likelihood": -9.381849993981126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3827660642620765,
      "lambda_param": 0.820535921423317,
      "success": true,
      "log_likelihood": -15.837908693675097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.861057469080358e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.459767342123738,
      "success": true,
      "log_likelihood": -7.982176321814342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5278218355032186,
      "lambda_param": 0.9794594109011326,
      "success": true,
      "log_likelihood": -20.856244243284177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9673870239050264,
      "lambda_param": 2.0482559468890065,
      "success": true,
      "log_likelihood": -15.24989052481855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "lambda_param": -10.0,
      "success": true,
      "log_likelihood": -2.861057469080358e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.938969731595537,
      "lambda_param": 1.6743739148047876,
      "success": true,
      "log_likelihood": -13.308675933629903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 4.289071105138674,
      "lambda_param": 3.924684572914695,
      "success": true,
      "log_likelihood": -7.020399693341428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4275333806555972,
      "lambda_param": 2.350427223346079,
      "success": true,
      "log_likelihood": -14.078497621656522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1966197074606884,
      "lambda_param": 1.1462765472973828,
      "success": true,
      "log_likelihood": -17.587038482806594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.929698676892975,
      "lambda_param": 0.3584808244762049,
      "success": true,
      "log_likelihood": -9.511809693836884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1423581944577255,
      "lambda_param": 1.3728981384396608,
      "success": true,
      "log_likelihood": -17.560556003747752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.39778554690396434,
      "lambda_param": 2.486557559261653,
      "success": true,
      "log_likelihood": -11.948964799395288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 7.450890011637558,
      "lambda_param": -1.8761679382239211,
      "success": true,
      "log_likelihood": -22.526082978127757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3695018453112084,
      "lambda_param": 1.660434240116505,
      "success": true,
      "log_likelihood": -16.023534256901453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9254124877609968,
      "lambda_param": 2.1224281404682452,
      "success": true,
      "log_likelihood": -13.2239161842661,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.409119927713137,
      "lambda_param": 0.8439102605388128,
      "success": true,
      "log_likelihood": -15.684773700559345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.428231540311808,
      "lambda_param": 2.0269256802903284,
      "success": true,
      "log_likelihood": -15.009024984245325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6443351512066043,
      "lambda_param": 1.3474015943431306,
      "success": true,
      "log_likelihood": -18.717311911566014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4081710026033478,
      "lambda_param": 3.227869351135819,
      "success": true,
      "log_likelihood": -11.211279731263314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.38255604097400436,
      "lambda_param": 0.3562017863562179,
      "success": true,
      "log_likelihood": -23.578787186601666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2285752474317786,
      "lambda_param": 0.9004046064055595,
      "success": true,
      "log_likelihood": -17.263112577910185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 1.8190861493480743,
      "success": true,
      "log_likelihood": -13.152468549923997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9561697826161719,
      "lambda_param": 1.1337718474414002,
      "success": true,
      "log_likelihood": -18.962880820206184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6377368763844518,
      "lambda_param": 0.4536254563098365,
      "success": true,
      "log_likelihood": -21.721401754097563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4309845537426265,
      "lambda_param": 1.264452433711171,
      "success": true,
      "log_likelihood": -18.916024908471776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.8283361034387493,
      "lambda_param": 9.585149236350087,
      "success": true,
      "log_likelihood": -4.338626099490841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.939412932296214,
      "lambda_param": 3.351242032660498,
      "success": true,
      "log_likelihood": -10.210276190299572,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5956832298311003,
      "lambda_param": -1.1694219054878792,
      "success": true,
      "log_likelihood": -11.202835538133673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.686285199359437,
      "success": true,
      "log_likelihood": -9.794021428329012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4578957916666915,
      "lambda_param": 0.515620444837324,
      "success": true,
      "log_likelihood": -13.979850264259422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9122536872872131,
      "lambda_param": 0.9234257173907889,
      "success": true,
      "log_likelihood": -19.5911717312417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3523844182644655,
      "lambda_param": 2.2371595040558114,
      "success": true,
      "log_likelihood": -14.505872607305704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.4597682207913483,
      "success": true,
      "log_likelihood": -7.982176321815692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.619728464177935,
      "lambda_param": 1.0011770839775536,
      "success": true,
      "log_likelihood": -20.618789934679253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.632026252001175,
      "lambda_param": 2.987032489568429,
      "success": true,
      "log_likelihood": -10.751492882029641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6786489629221923,
      "lambda_param": 2.0588956623867705,
      "success": true,
      "log_likelihood": -14.204565240297848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.3595448222176887,
      "lambda_param": 0.6055672489632289,
      "success": true,
      "log_likelihood": -8.346491543396224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.8798336401067703,
      "lambda_param": 0.7477415160334333,
      "success": true,
      "log_likelihood": -11.779419425756059,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.428393392915253,
      "lambda_param": 1.5345976171109592,
      "success": true,
      "log_likelihood": -15.950214938782086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2592323965157863,
      "lambda_param": -0.12534649576780912,
      "success": true,
      "log_likelihood": -11.50197006799009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4239735066458837,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -1.349113303904293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 1.9607076439431324,
      "success": true,
      "log_likelihood": -12.462370090671195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.3721481482789712,
      "lambda_param": 1.8703172100262198,
      "success": true,
      "log_likelihood": -15.551589893528458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4186932253076912,
      "lambda_param": 0.6100028028304159,
      "success": true,
      "log_likelihood": -14.776521951329752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4304244110169249,
      "lambda_param": 0.5974837559638089,
      "success": true,
      "log_likelihood": -22.846113649767865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9339011126426318,
      "lambda_param": 1.821869900780221,
      "success": true,
      "log_likelihood": -13.339227073357128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0808832747656916,
      "lambda_param": 0.2163585963767569,
      "success": true,
      "log_likelihood": -7.80258361486529,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.4579934978490403,
      "success": true,
      "log_likelihood": -10.502540497221705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5495688160343637,
      "lambda_param": 0.3123685353587985,
      "success": true,
      "log_likelihood": -22.258118450731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 3.4597668090614158,
      "success": true,
      "log_likelihood": -7.982176321813731,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4751654311710474,
      "lambda_param": 0.6081115692311273,
      "success": true,
      "log_likelihood": -22.645508947786556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.006391831303289,
      "lambda_param": -0.500534898262862,
      "success": true,
      "log_likelihood": -11.207965945915548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "lambda_param": 2.125066960476199,
      "success": true,
      "log_likelihood": -11.741087372126158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.5376481172723926,
      "lambda_param": 3.3755454336870128,
      "success": true,
      "log_likelihood": -10.358891356353823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.35573467904352846,
      "lambda_param": 0.24054296073703507,
      "success": true,
      "log_likelihood": -23.727219032378894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.05537463050602711,
      "lambda_param": 4.285025735777568,
      "success": true,
      "log_likelihood": -6.8339317178874674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.15562137478956,
      "lambda_param": 0.934434809745449,
      "success": true,
      "log_likelihood": -17.866465511842513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.188034860106207,
      "lambda_param": 1.8156106671525927,
      "success": true,
      "log_likelihood": -14.287785364233532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 3.0919547778823784,
      "lambda_param": 0.7051592789389624,
      "success": true,
      "log_likelihood": -5.857070806667954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5452083556275142,
      "lambda_param": 2.029775102776942,
      "success": true,
      "log_likelihood": -14.688166711010425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7230739796756445,
      "lambda_param": 0.37522571924449705,
      "success": true,
      "log_likelihood": -20.727739170431732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "gamma": {
        "r": 0.7232976509360262,
        "p": 1.915632183395343e-17
      },
      "lambda_param": {
        "r": 0.8866136543395692,
        "p": 1.3748442695458652e-34
      }
    }
  },
  "bic_results": {
    "average_bic": 30.94728417249,
    "individual_bics": [
      23.131390520541316,
      39.268324501389486,
      27.376004795149846,
      34.37036905031525,
      26.975995961936732,
      29.067237822529435,
      7.167043599027158,
      29.193384631990455,
      7.167047875551664,
      29.340032335218474,
      11.826748125922771,
      25.504906916855575,
      24.42391983274493,
      7.167043599027158,
      7.167043599027158,
      7.167043599027158,
      7.1670540225603006,
      12.608719108025946,
      20.635297559576557,
      7.167043599027158,
      37.3423164102908,
      22.950811858666107,
      43.50517554083326,
      40.769570281742006,
      34.767387332414955,
      36.7362101513925,
      29.96511819576436,
      14.982076084823385,
      25.930737864874473,
      38.84285526426241,
      7.167043599027158,
      23.131390520540904,
      48.87952636348057,
      37.66681892654932,
      7.167043599027158,
      33.784389744172024,
      21.207837263595074,
      35.324033120225266,
      42.34111484252541,
      26.190657264585987,
      42.28814988440772,
      31.064967475702794,
      52.21920383316773,
      39.21410639071512,
      33.61487024544442,
      38.53658527803091,
      37.18508784540287,
      44.60166170004425,
      29.589597339438846,
      54.32461225011555,
      41.69326303273259,
      33.471974976760215,
      45.092799517324586,
      50.609841385107345,
      44.99908769385577,
      15.844290075893902,
      27.587590257511366,
      29.572708953179564,
      26.755080733570246,
      35.12673840543106,
      46.34938133939562,
      36.17878309152363,
      23.131390520543604,
      48.40461774627072,
      28.6700236409715,
      35.57616835750792,
      23.86002096370467,
      30.72587672842434,
      39.06746775447639,
      30.170978012892398,
      9.865264484720806,
      32.09177805825461,
      38.270217663969134,
      36.72008177957172,
      52.85926517644795,
      33.84549202362648,
      22.7722051066428,
      28.17211887135563,
      51.68327477837422,
      23.131390520539682,
      52.45805577248533,
      29.582969768743318,
      30.649212621164537,
      27.884820589619864,
      54.621475941670006,
      20.834901312687155,
      42.899968900597244,
      35.74260860537928,
      18.88117949024813,
      36.54337129893307,
      48.62251621777568
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}