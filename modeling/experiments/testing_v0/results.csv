run_number,average_bic,model_specification,model_summary,version,kappa_recovery,gamma_recovery,delta_recovery,lambda_param_recovery,alpha_recovery,rho_recovery
20,30.227602699471106,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let r = split_self / fair_share  
Let F = (2 / (1 + exp( - (r - 1) )) ) - 1  
U_accept = gamma × split_self + lambda_param × combined_earning × F","A utility model for responder decisions that integrates a linear self‐interest term with an additive fairness adjustment. The fairness benchmark is computed as the participant’s proportional token share multiplied by the combined earning. The relative offer is transformed via a logistic function into a bounded fairness adjustment, and the overall utility is given by U_accept = gamma × split_self + lambda_param × combined_earning × F. This model uses two learnable parameters (gamma and lambda_param) to capture self‐interest and fairness sensitivity.",v0,,0.8125307360777124,,0.8855597625302826,,
2,30.756923372277615,"U_i = gamma * split_self - delta * max((token_self/(token_self + token_opp)) * combined_earning - split_self, 0)","A utility model for responder behavior that scales the monetary outcome of the offer by gamma and applies a fairness penalty when the offer falls short of an equity reference point derived from the participant’s token contribution. The penalty is weighted by delta, such that only offers below the fair share incur a reduction in utility.",v0,,0.8313696017262885,0.856561292012421,,,
8,30.94728417249,"Let fair_share = (token_self / (token_self + token_opp)) * combined_earning  
d = split_self - fair_share  
U_accept = gamma * split_self + lambda_param * combined_earning * tanh(d / combined_earning)","A model of responder behavior that computes the utility of accepting an offer as the sum of a linear self-interest term and a fairness-based adjustment. The fairness adjustment is derived by comparing split_self with a fair share determined by token contributions and is nonlinearly transformed via the tanh function to capture diminishing sensitivity to fairness deviations. Only two learnable parameters, gamma and lambda_param, govern self-interest and fairness sensitivity, respectively.",v0,,0.7232976509360262,,0.8866136543395692,,
1,30.984097225818616,U_accept = split_self + kappa * (split_self - (token_self/(token_self + token_opp)) * combined_earning),A utility model for responder behavior in which the utility of accepting an offer is determined by the actual monetary payoff (split_self) combined with a fairness adjustment. The fairness adjustment is based on the deviation of split_self from a fair share computed as the participant’s relative contribution (token_self) times the combined earning. The approach uses a single learnable parameter (kappa) governing the sensitivity to fairness deviations.,v0,0.9396046979875377,,,,,
9,31.330376003680467,U_accept = gamma * split_self - delta * abs(split_self - ((token_self/(token_self + token_opp)) * combined_earning)),"A dual-factor utility model for responder behavior that combines a self-interest component (valuing the monetary offer) with a fairness penalty based on the absolute deviation from a token-based fair share. Two learnable parameters, gamma and delta, govern the weight of self-interest and fairness sensitivity, respectively.",v0,,0.8334980265196997,0.8127583949602847,,,
16,31.749272138836446,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
U_accept = (split_self)^gamma - lambda_param × max(fair_share - split_self, 0)",A prospect theory–inspired utility model for responder behavior featuring nonlinear self-interest valuation and an asymmetric fairness penalty. The model computes a fair share from participants’ token contributions and penalizes offers below this benchmark while applying diminishing sensitivity to increased monetary offers via a power function. Two learnable parameters (gamma and lambda_param) calibrate the curvature and fairness sensitivity.,v0,,0.844668758356513,,0.8355310517734558,,
5,32.83647705306111,U_accept = gamma * split_self - alpha * (split_self - (token_self/(token_self+token_opp))*combined_earning)^2,"This model computes the utility for a responder’s acceptance decision as a weighted monetary gain (split_self scaled by gamma) reduced by a quadratic penalty on the deviation from a fairness benchmark (fair share derived from token contributions and combined earning) scaled by alpha. The model uses two learnable parameters, gamma and alpha, capturing self-interest and sensitivity to fairness violations.",v0,,0.7601390837678457,,,0.7229696124371643,
19,34.289461055507424,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let d = split_self − fair_share  
U_accept = split_self + lambda_param × combined_earning × tanh( gamma × d / combined_earning )","A utility model for responder behavior that computes the acceptance utility as the sum of the base monetary payoff and a nonlinear fairness adjustment. The fairness benchmark is derived from token contributions and combined earnings, and deviations from this fair share are scaled by a tanh function. The two learnable parameters—gamma (scaling the sensitivity inside the tanh) and lambda_param (magnitude of the fairness adjustment)—capture the nonlinear sensitivity to fairness violations while keeping the self‐interest component unweighted.",v0,,0.32725579364318574,,0.869530095483877,,
13,34.9546469958989,U_accept = gamma * split_self * (1 + lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp)))),"A multiplicative utility model for responder decisions that integrates self-interest and fairness considerations. The model multiplies the offered monetary payoff (split_self) by an adjustment factor reflecting the deviation between the actual share ratio and a fairness benchmark computed from token contributions. Two learnable parameters, gamma and lambda_param, govern the scaling of self-interest and sensitivity to fairness deviations.",v0,,0.6801838540163812,,0.9652246030638056,,
3,35.12456264322567,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning 
and let d = split_self - fair_share.
Then, the utility for accepting an offer is:
  U_accept = split_self + gamma × [ I(d ≥ 0) × d + I(d < 0) × lambda_param × d ]
where I(condition) is an indicator function that equals 1 if the condition is true, and 0 otherwise.","A reference-dependent utility model for responder behavior that computes the utility of accepting an offer by adjusting the actual monetary share with a fairness-based deviation. Offers above the fairness reference yield additional positive utility scaled by a gain sensitivity parameter (gamma), whereas offers below the reference incur an amplified penalty via a loss aversion parameter (lambda_param). The model uses only two learnable parameters and directly maps observable monetary variables and token contributions to the computed utility.",v0,,0.2847445129999609,,0.5270418719837289,,
15,36.17862201043385,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let d = split_self − fair_share  
U_accept = gamma × split_self + lambda_param × (exp(d / combined_earning) − 1)","An exponential reference-dependent utility model for responder behavior. The model computes a fairness benchmark based on token contributions and combined earnings, then calculates the deviation (d) between the actual offer and this fair share. The utility is a sum of a self-interest term (gamma × split_self) and a fairness adjustment (lambda_param multiplied by an exponential function of d), capturing nonlinear sensitivity to fairness deviations.",v0,,0.8017863440215096,,0.1819130623971072,,
6,39.89075283977933,"Let fair_share = (token_self/(token_self + token_opp)) × combined_earning,
and let fairness_ratio = split_self / fair_share.
Then the utility for acceptance is defined as:
  U_accept = gamma × split_self × (fairness_ratio)^alpha.","This model computes the utility of accepting an offer as a product of the monetary payoff (split_self) scaled by gamma and a fairness adjustment. The fairness ratio, defined by the offer compared to the equitable share derived from token contributions, is raised to the power of alpha. These two learnable parameters, gamma and alpha, capture self-interest and fairness sensitivity in a multiplicative, nonlinear fashion.",v0,,0.5706902975347992,,,0.8149072257914808,
17,40.49167900375824,U_accept = gamma * split_self * ( 2 / (1 + exp( - lambda_param * ( (split_self / ((token_self/(token_self + token_opp)) * combined_earning)) - 1 ) ) ),"A logistic adjustment model for responder behavior where the self-interest value (split_self) is modulated by a fairness-based logistic factor. The fairness benchmark is computed from the token-based proportional share of combined earnings, and the ratio of the offer to this fair share is transformed by a logistic function parameterized by lambda_param. The overall utility is then scaled by gamma, capturing the self-interest component.",v0,,0.5920602062853919,,0.7064699182641901,,
12,47.989696963330225,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let d = split_self − fair_share  
Then, the utility for accepting an offer is given by:
  U_accept = { d^(rho),  if d ≥ 0  
         − alpha × (−d)^(rho), if d < 0 }","This model computes the utility of a responder’s acceptance decision by first establishing a fairness benchmark based on token contributions and combined earnings, then evaluating the offer as a deviation from this benchmark. Gains (offers above fairness) yield a positively curved utility raised to the power rho, while losses (offers below fairness) are penalized by an additional factor alpha. The two learnable parameters, rho and alpha, capture diminishing sensitivity and loss aversion, respectively.",v0,,,,,0.7398612020441935,0.575906769233865
7,74.88776615156729,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning. 
Then, the utility for accepting an offer is given by:
  U_accept = gamma × split_self + delta × (√(split_self) − √(fair_share)).","This model computes the utility of accepting an offer as the sum of a self-interest component—proportional to the offered share (split_self) weighted by gamma—and a fairness component—capturing the difference between the square roots of the offered share and the fair share (the equitable division based on token contributions), weighted by delta. The square-root transformation incorporates diminishing sensitivity to fairness deviations.",v0,,0.37606054273251477,0.5581200868400801,,,
4,,U_accept = gamma * split_self + lambda * log( split_self / ((token_self / (token_self + token_opp)) * combined_earning ) ),"A dual-component utility model for responder behavior that combines a scaled monetary payoff with a nonlinear fairness adjustment. Fairness is computed as the proportionate share of the total earnings based on token contributions, and the offer is evaluated as a log ratio relative to this fairness benchmark. Two learnable parameters, gamma and lambda, respectively govern the weight of the monetary payoff and sensitivity to fairness deviations.",v0,,,,,,
10,,"Let fair_share = (token_self / (token_self + token_opp)) * combined_earning 
Let disparity = | ln( split_self / fair_share ) |
Then, the utility of accepting an offer is defined as:
  U_accept = gamma * split_self - lambda_param * combined_earning * disparity","A utility model for responder behavior that combines self-interest and fairness sensitivity. The model calculates a fair share based on token contributions; then it penalizes offers that deviate from this fair share by applying an absolute logarithmic difference. Two learnable parameters, gamma and lambda_param, respectively scale the self-interest benefit and the fairness penalty.",v0,,,,,,
11,,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let d = split_self - fair_share  
U_accept = gamma × split_self + lambda × ( d / (1 + |d|/combined_earning) )","A utility model for responder behavior that combines a linear self-interest component with a fairness-adjustment component. The fairness adjustment is computed as the normalized deviation between the offer and the fair share (derived from token-based contributions) using a saturating function. Two learnable parameters (gamma and lambda) control the sensitivity to monetary value and fairness deviations, respectively.",v0,,,,,,
14,,"tags, with variable descriptions in JSON format inside <VARIABLES> tags, and a concise summary in <SUMMARY> tags.

--------------------------------------------------

<MODEL>
Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let r = (split_self / fair_share) − 1  
U_accept = gamma × split_self × (1 + lambda_param × r)","tags.

--------------------------------------------------

<MODEL>
Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let r = (split_self / fair_share) − 1  
U_accept = gamma × split_self × (1 + lambda_param × r)
</MODEL>

<VARIABLES>
{
  ""variables"": {
    ""U_accept"": {
      ""description"": ""Utility of accepting the offer, combining self-interest and fairness adjustment."",
      ""range"": {
        ""min"": ""-inf"",
        ""max"": ""inf"",
        ""inclusive_min"": false,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""calculated""
    },
    ""split_self"": {
      ""description"": ""The monetary offer for the participant (in £)."",
      ""range"": {
        ""min"": 0,
        ""max"": ""inf"",
        ""inclusive_min"": true,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""data""
    },
    ""token_self"": {
      ""description"": ""The number of tokens found by the participant."",
      ""range"": {
        ""min"": 1,
        ""max"": ""inf"",
        ""inclusive_min"": true,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""data""
    },
    ""token_opp"": {
      ""description"": ""The number of tokens found by the opponent."",
      ""range"": {
        ""min"": 1,
        ""max"": ""inf"",
        ""inclusive_min"": true,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""data""
    },
    ""combined_earning"": {
      ""description"": ""Total amount of money earned in the trial (each token is worth £3)."",
      ""range"": {
        ""min"": 0,
        ""max"": ""inf"",
        ""inclusive_min"": true,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""data""
    },
    ""gamma"": {
      ""description"": ""Self-interest scaling parameter governing the valuation of split_self."",
      ""range"": {
        ""min"": 0,
        ""max"": 10,
        ""inclusive_min"": true,
        ""inclusive_max"": true
      },
      ""learnable"": true,
      ""source"": ""learnable""
    },
    ""lambda_param"": {
      ""description"": ""Fairness sensitivity parameter governing how the ratio of split_self to fair_share adjusts the utility."",
      ""range"": {
        ""min"": -10,
        ""max"": 10,
        ""inclusive_min"": true,
        ""inclusive_max"": true
      },
      ""learnable"": true,
      ""source"": ""learnable""
    },
    ""fair_share"": {
      ""description"": ""The fair share of the combined earning, based on the participant’s relative token contribution."",
      ""range"": {
        ""min"": 0,
        ""max"": ""inf"",
        ""inclusive_min"": true,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""calculated""
    },
    ""r"": {
      ""description"": ""Relative deviation of the offered split from the fair share (unitless)."",
      ""range"": {
        ""min"": ""-inf"",
        ""max"": ""inf"",
        ""inclusive_min"": false,
        ""inclusive_max"": false
      },
      ""learnable"": false,
      ""source"": ""calculated""
    }
  }
}
</VARIABLES>

<SUMMARY>
A multiplicative utility model for responder behavior in which the base monetary payoff (split_self) is scaled by a fairness adjustment. The fairness benchmark, computed as the token-proportionate share of the combined earning (fair_share), is compared to the actual offer via a relative deviation (r). The utility for accepting an offer is given by U_accept = gamma × split_self × (1 + lambda_param × r), where gamma and lambda_param (with bounds [0,10] and [-10,10], respectively) are the only learnable parameters.",v0,,,,,,
18,,"Let fair_share = (token_self / (token_self + token_opp)) × combined_earning  
Let r = (split_self / fair_share) − 1  
Let L = 1 / (1 + exp(− lambda_param × r))  
U_accept = split_self × [ gamma + (1 − gamma) × L ]","A utility model for responder behavior that multiplies the monetary offer by a fairness-adjusted factor. The fairness benchmark is derived from token contributions and combined earnings, and the relative deviation from this benchmark is transformed through a logistic function. Two learnable parameters, gamma and lambda_param, respectively calibrate baseline self-interest and the steepness of fairness sensitivity.",v0,,,,,,
