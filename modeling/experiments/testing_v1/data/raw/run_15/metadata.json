{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - alpha * max( (token_self/(token_self+token_opp))*combined_earning - split_self , 0 ) - beta * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0 )\nSummary: The model computes the utility of accepting an offer by comparing the offered monetary share (split_self) to a fairness reference derived from the participant\u2019s token allocation (token_self) relative to total tokens (token_self + token_opp) and the combined earning. Two learnable parameters (alpha and beta) penalize deviations from this fairness reference, reflecting sensitivity to disadvantageous and advantageous inequity respectively.\nModel 2:\nSpecification: U_accept = split_self - gamma * [max( fairness_reference - split_self, 0 )]^2 - theta * [max( split_self - fairness_reference, 0 )]^2\n\nwhere fairness_reference = (token_self / (token_self + token_opp)) * combined_earning\nSummary: A quadratic inequity aversion model for responders. The utility of accepting an offer is computed as the offered monetary value minus a squared penalty based on deviation from a fairness reference derived from token allocation. Two learnable parameters govern the sensitivity to disadvantageous (gamma) and advantageous (theta) inequity.\nModel 3:\nSpecification: U_accept = split_self + lambda_param * exp(- tau_param * abs(split_self - ((token_self/(token_self+token_opp))*combined_earning)))\nSummary: A utility model for responder behavior that combines the offered monetary share (split_self) with an additional fairness bonus. The bonus is maximal when the offer equals the fairness reference (computed from token_self, token_opp, and combined_earning) and decays exponentially with the absolute deviation from fairness. The model includes two learnable parameters: lambda_param, scaling the bonus magnitude, and tau_param, governing the decay rate.\nModel 4:\nSpecification: U_accept = ln(1 + split_self) \n           - kappa * max( ln(1 + (token_self/(token_self+token_opp))*combined_earning) - ln(1 + split_self), 0 )\n           - mu    * max( ln(1 + split_self) - ln(1 + (token_self/(token_self+token_opp))*combined_earning), 0 )\nSummary: This model computes the utility of accepting an offer by first applying a logarithmic transformation to the offered monetary amount to capture diminishing sensitivity. A fairness reference is derived from the participant\u2019s token ratio and combined earnings. Two learnable parameters (kappa and mu) penalize deviations from this fairness reference, with separate weights for disadvantageous and advantageous inequity, respectively.\nModel 5:\nSpecification: U_accept = split_self - alpha * | split_self - (token_self/(token_self + token_opp))*combined_earning |^delta\nSummary: A utility model for responders that calculates the attractiveness of accepting an offer by subtracting a non-linear penalty from the monetary share offered (split_self). The penalty is determined by the absolute deviation between the offer and a fairness reference derived from the participant\u2019s token share relative to the total and the combined earnings. Two learnable parameters, alpha and delta, control the sensitivity and curvature of the penalty, respectively.\nModel 6:\nSpecification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet \u0394 = split_self \u2212 f  \nU_accept = f + { \u0394^rho,                     if \u0394 \u2265 0  \n              \u2212 lambda_param \u00d7 (\u2212\u0394)^rho,      if \u0394 < 0 }\nSummary: A reference-dependent utility model in which the fairness benchmark is computed from the participant\u2019s token share and combined earnings. The utility for accepting an offer combines the fairness reference with a nonlinear evaluation of deviations from fairness: gains (offers above fairness) are mapped via a power function while losses (offers below fairness) incur an amplified penalty governed by a loss aversion parameter. Two learnable parameters (rho and lambda_param) govern diminishing sensitivity and loss aversion.\nModel 7:\nSpecification: U_accept = split_self - (1 - weight_self) * ( max((token_self/(token_self+token_opp))*combined_earning - split_self, 0) + penalty_advantage * max(split_self - (token_self/(token_self+token_opp))*combined_earning, 0) )\nSummary: This model computes the utility of accepting an offer as a trade-off between self-interested monetary gain and fairness deviations relative to a fairness benchmark calculated from token allocations and total earnings. Two learnable parameters govern the weight on self-interest and differential sensitivity to over-generous offers.\nModel 8:\nSpecification: Let f = (token_self/(token_self+token_opp)) \u00d7 combined_earning  \nLet \u0394 = ln(split_self/f)  \nU_accept = split_self + { eta \u00d7 f \u00d7 \u0394   if \u0394 \u2265 0  \n                          - lambda \u00d7 f \u00d7 |\u0394|   if \u0394 < 0 }\nSummary: The model computes the utility for accepting an offer by combining the monetary value offered (split_self) with a fairness adjustment based on the logarithmic deviation of the offer from a fairness benchmark (f). This benchmark is derived from the participant\u2019s token share relative to total tokens and the combined earnings. Two learnable parameters, eta and lambda, separately scale the bonus for offers exceeding fairness and the penalty for offers below fairness.\nModel 9:\nSpecification: Let f = (token_self / (token_self + token_opp)) * combined_earning  \nLet \u0394 = split_self - f  \nDefine \u0394_positive = max(\u0394, 0) and \u0394_negative = max(-\u0394, 0)  \nThen, the utility of accepting an offer is given by:  \nU_accept = split_self + f * ( eta * tanh( \u0394_positive / f ) - lambda_param * tanh( \u0394_negative / f ) )\nSummary: This model computes the utility for a responder by first deriving a fairness benchmark from the participant\u2019s token share and the total earnings. The offered share (split_self) is then adjusted by a bonus if it exceeds this fairness reference or a penalty if it falls short. These adjustments are scaled by separate learnable parameters (eta for positive deviations and lambda_param for negative deviations) and modulated by a saturating hyperbolic tangent function.\nModel 10:\nSpecification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nU_accept = split_self \u2212 kappa \u00d7 f \u00d7 | ln(split_self / f) |^(epsilon)\nSummary: A reference-dependent utility model computed by first deriving a fairness benchmark from the token distribution and total earnings. The offered monetary share is penalized according to the absolute logarithmic deviation from this fairness benchmark. The penalty is scaled by the fairness reference and modulated by two learnable parameters: kappa (penalty weight) and epsilon (curvature or sensitivity to deviation). This formulation enables a calibrated assessment of fairness deviations while predicting responder acceptance based solely on the computed utility.\nModel 11:\nSpecification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet \u0394 = split_self \u2212 f  \nThen,  \nU_accept = { split_self + (\u0394)^gamma,       if \u0394 \u2265 0  \n             split_self \u2212 lambda_param \u00d7 (\u2212\u0394)^gamma,  if \u0394 < 0 }\nSummary: This model computes responder utility as the offered monetary share plus an adjustment based on fairness deviation. A fairness benchmark is derived from the participant\u2019s token share and combined earnings. The adjustment is applied using a power function with curvature parameter gamma, and a loss\u2010aversion parameter lambda_param scales negative deviations, capturing asymmetric sensitivity to fairness.\nModel 12:\nSpecification: f = (token_self / (token_self + token_opp)) * combined_earning\n\u03b4 = (split_self - f) / f\nU_accept = split_self + lambda_param * arctan( tau_param * \u03b4 )\nSummary: This model computes the utility of accepting an offer by adding the monetary value (split_self) to a fairness adjustment determined by the normalized deviation from a fairness reference. The fairness reference is defined as the participant's token share times the combined earnings. The deviation is transformed via an arctan function\u2014scaled by two learnable parameters (lambda_param and tau_param) that respectively modulate the magnitude and sensitivity of the fairness adjustment. This formulation captures saturating sensitivity to fairness deviations in a parsimonious two-parameter framework.\nModel 13:\nSpecification: Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet \u0394 = |split_self \u2212 f| / f  \nU_accept = split_self \u00d7 (1 \u2212 lambda_param \u00d7 (\u0394)^rho)\nSummary: A multiplicative utility model for responders where the offered monetary share (split_self) is adjusted by a fairness penalty based on the normalized deviation of the offer from a fairness benchmark. The fairness benchmark is determined by the participant\u2019s relative token contribution scaled by total earnings. The two learnable parameters (lambda_param and rho) control the magnitude and nonlinearity of the penalty.\nModel 14:\nSpecification: Let f = (token_self / (token_self + token_opp)) * combined_earning  \nLet D = ln(split_self / f)  \nU_accept = split_self - { [I(split_self < f) \u00d7 lambda_neg  +  I(split_self \u2265 f) \u00d7 lambda_pos] \u00d7 |D| }\nSummary: A reference-dependent utility model in which the fairness benchmark is computed from the participant\u2019s token share and group earnings. The utility for accepting an offer equals the monetary offer (split_self) diminished by a penalty proportional to the absolute logarithmic deviation from fairness. Two learnable parameters\u2014lambda_neg for disadvantageous deviations and lambda_pos for advantageous deviations\u2014modulate the penalty, capturing asymmetric inequity aversion.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "eta": {
      "description": "Learnable elasticity parameter when the offer is favorable or equal to the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Learnable elasticity parameter when the offer is below the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let f = (token_self/(token_self+token_opp)) \u00d7 combined_earning\n\nThen, \n\u2003if split_self \u2265 f:\n\u2003\u2003U_accept = f^(1 \u2013 eta) \u00d7 (split_self)^(eta)\n\u2003else:\n\u2003\u2003U_accept = f^(1 \u2013 theta) \u00d7 (split_self)^(theta)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer computed as a weighted geometric integration of the fairness reference and the offered share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share offered to the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned (each token is worth \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "eta": {
      "description": "Learnable elasticity parameter when the offer is favorable or equal to the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta": {
      "description": "Learnable elasticity parameter when the offer is below the fairness reference",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A multiplicative (geometric) utility model for responder behavior that compares the offered share to a fairness benchmark derived from token allocations and combined earnings. When the offer meets or exceeds the fairness reference, reward sensitivity is governed by the parameter eta; when below, penalty sensitivity is governed by theta. This two-parameter formulation captures asymmetric integration of fairness and monetary outcomes.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: Responders are sensitive both to the absolute monetary amount offered (split_self) and to a fairness reference computed from their token share relative to the total (f = (token_self/(token_self+token_opp))\u00d7combined_earning). In the face of favorable offers (split_self \u2265 f), responders may \u201cboost\u201d the utility of the offer through an integrative processing giving extra weight to the monetary gain. In contrast, when the offer falls short of the fairness standard (split_self < f), the responder\u2019s sense of inequity depresses utility. This differential processing is captured via a \u201ccurvature\u201d or elasticity parameter that governs the sensitivity to deviations in each domain.\n\n2. Interaction of mechanisms: The model is built on the idea that responders combine the fairness benchmark and the offered amount in a multiplicative (geometric averaging) fashion. This formulation naturally captures diminishing sensitivity to amounts relative to the fairness reference. Two parameters are used: one (eta) for offers that meet or exceed the fairness reference, and a different one (theta) for offers below the fairness reference. This asymmetry allows for a bonus for sufficiently good offers and a penalty for offers perceived as unfair.\n\n3. Mathematical form: Define f as described. Then the utility for accepting the offer (U_accept) is given by a piecewise multiplicative integration of split_self and f:\n\u2003\u2003\u2022 If split_self \u2265 f, then U_accept = f^(1 \u2013 eta) \u00b7 (split_self)^(eta)\n\u2003\u2003\u2022 If split_self < f, then U_accept = f^(1 \u2013 theta) \u00b7 (split_self)^(theta)\nThis formulation is interpretable as a weighted geometric mean where the weighting parameters (eta and theta, each bounded between 0 and 1) govern the relative importance of the \u201cfair\u201d benchmark versus the actual monetary offer.\n\n4. Needed parameters:\n\u2003\u2003\u2022 eta: governs the elasticity when the offer is favorable or equal to the fairness reference.\n\u2003\u2003\u2022 theta: governs the elasticity when the offer is below the fairness reference.\nBoth parameters are learnable and are given generous bounds of [0, 1].\n\n5. Mapping to observable behavior: The calculated utility U_accept (which may be negative if the offer is perceived very unfair) is then used (alongside a later stochasticity parameter) to predict the probability of the responder accepting the offer. The model uses only observable variables provided in the dataset: token_self, token_opp, combined_earning (for fairness reference) and split_self (the monetary offer). Only responder behavior (trial_role = 1) is modeled.\n\nThe full formal specification is provided below.\n\n<MODEL>\nLet f = (token_self/(token_self+token_opp)) \u00d7 combined_earning\n\nThen, \n\u2003if split_self \u2265 f:\n\u2003\u2003U_accept = f^(1 \u2013 eta) \u00d7 (split_self)^(eta)\n\u2003else:\n\u2003\u2003U_accept = f^(1 \u2013 theta) \u00d7 (split_self)^(theta)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer computed as a weighted geometric integration of the fairness reference and the offered share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share offered to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned (each token is worth \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Learnable elasticity parameter when the offer is favorable or equal to the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta\": {\n      \"description\": \"Learnable elasticity parameter when the offer is below the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA multiplicative (geometric) utility model for responder behavior that compares the offered share to a fairness benchmark derived from token allocations and combined earnings. When the offer meets or exceeds the fairness reference, reward sensitivity is governed by the parameter eta; when below, penalty sensitivity is governed by theta. This two-parameter formulation captures asymmetric integration of fairness and monetary outcomes.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, eta=1, theta=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        if token_self + token_opp == 0:  # Avoid division by zero\n            f = 0\n        else:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n        \n        if split_self >= f:\n            U_accept = (f ** (1 - eta)) * (split_self ** eta)\n        else:\n            U_accept = (f ** (1 - theta)) * (split_self ** theta)\n        \n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -62.14977224398085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -33.425129870232766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -31.025129870773018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -36.35012986957564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -38.4501298671142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -23.75012987450438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.637079143403911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -23.000129874103948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.6370791434039114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -40.70012986753074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -35.75012986929096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -59.52477224535404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -39.275129867010456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.637079143403912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.63707914340391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.6370791434039105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.637079143403911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.9979136350993117,
      "success": true,
      "log_likelihood": -10.5501152234152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -11.075129878322363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.9999999999999999,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.637079143403911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -31.325129869982646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -12.275129878003387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -39.95012986772514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -30.20012987104811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -36.42512986759504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -27.050129872191643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -27.87512987270872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -48.35012986367309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -11.750129878204175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -18.500129875357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.637079143403912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -62.14977224398085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -37.55012986816911,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -39.80012986791388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -2.63707914340391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -20.675129875915243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -19.400129876163614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -34.62512986917737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -25.02512987233912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.7179699608760931,
      "success": true,
      "log_likelihood": -10.645879713630354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -28.850129871222176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -52.32512986186411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -7.1370791344033035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -28.250129872483445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -25.02512987395883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -18.425129876147352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -31.325129870550626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -39.2751298687245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -41.75012986572241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -32.14977225704127,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -21.500129875183312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -58.32477224565594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -29.45012987156048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -26.749772259663498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -43.550129864945255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -43.92512986554439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -48.12512986354882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.0,
      "success": true,
      "log_likelihood": -11.63707913854505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -59.74977224507409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -14.825129876827406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -27.50012987216269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -34.77512986858792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -62.149772243980856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -35.45012986953837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -50.67512986358383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -27.72512987277475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.7563155959610359,
      "success": true,
      "log_likelihood": -10.2401023331559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -13.400129877080907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -25.850129874240938,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.5954259784633953,
      "success": true,
      "log_likelihood": -11.677333148078699,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -59.75012985896691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -57.949772245662516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -30.575129871921053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -16.025129876922907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -34.09977225664403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -22.10012987430925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.4911554613731593,
      "success": true,
      "log_likelihood": -9.038997849221634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -65.29977224274407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -26.9751298728098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -62.14977224398085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -33.57512986904865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.3409676239652308,
      "success": true,
      "log_likelihood": -11.221625223403322,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -59.8247722452301,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -28.4751298734717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -31.250129869373882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -60.50012985790157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -23.075129874039536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 0.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -52.699772248157444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 0.5334840260759877,
      "success": true,
      "log_likelihood": -8.33575649327154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -29.45012987341337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "eta": 1.0,
      "theta": 1.0,
      "success": true,
      "log_likelihood": -23.825129873641615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "eta": {
        "r": 0.12087320448798096,
        "p": 0.23094302117254445
      },
      "theta": {
        "r": 0.45826998641411,
        "p": 1.6310498650819734e-06
      }
    }
  },
  "bic_results": {
    "average_bic": 66.73455775365089,
    "individual_bics": [
      131.46658236487391,
      74.01729761737775,
      69.21729761845826,
      79.8672976160635,
      84.06729761114062,
      54.66729762592098,
      12.441196163720042,
      53.16729762512011,
      12.441196163720043,
      88.5672976119737,
      78.66729761549414,
      126.2165823676203,
      85.71729761093313,
      12.441196163720043,
      12.44119616372004,
      12.44119616372004,
      12.441196163720042,
      28.26726832374262,
      29.317297633556947,
      12.441196163720042,
      69.81729761687751,
      31.717297632918992,
      87.0672976123625,
      67.56729761900844,
      80.0172976121023,
      61.267297621295505,
      62.917297622329656,
      103.8672976042584,
      30.667297633320572,
      44.16729762762622,
      12.441196163720043,
      131.46658236487391,
      82.26729761325043,
      86.76729761273998,
      12.44119616372004,
      48.5172976287427,
      45.96729762923945,
      76.41729761526696,
      57.21729762159046,
      28.458797304172926,
      64.86729761935658,
      111.81729760064044,
      21.441196145718827,
      63.66729762187911,
      57.217297624829875,
      44.01729762920692,
      69.81729761801347,
      85.71729761436121,
      90.66729760835703,
      71.46658239099476,
      50.16729762727884,
      123.8165823682241,
      66.06729762003319,
      60.666582396239214,
      94.26729760680273,
      95.017297608001,
      103.41729760400986,
      30.44119615400232,
      126.6665823670604,
      36.81729763056703,
      62.1672976212376,
      76.71729761408805,
      131.46658236487394,
      78.06729761598896,
      108.51729760407987,
      62.61729762246172,
      27.647242543224017,
      33.96729763107403,
      58.867297625394094,
      30.521704173069615,
      126.66729759484603,
      123.06658236823725,
      68.31729762075433,
      39.21729763075803,
      75.36658239020028,
      51.36729762553072,
      25.245033575355485,
      137.76658236240036,
      61.117297622531815,
      131.46658236487391,
      74.31729761500952,
      29.610288323718862,
      126.81658236737242,
      64.11729762385562,
      69.66729761565999,
      128.16729759271536,
      53.31729762499129,
      112.5665823732271,
      23.838550863455296,
      66.06729762373897,
      54.81729762419545
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}