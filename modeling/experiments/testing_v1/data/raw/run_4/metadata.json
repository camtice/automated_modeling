{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - alpha * max( (token_self/(token_self+token_opp))*combined_earning - split_self , 0 ) - beta * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0 )\nSummary: The model computes the utility of accepting an offer by comparing the offered monetary share (split_self) to a fairness reference derived from the participant\u2019s token allocation (token_self) relative to total tokens (token_self + token_opp) and the combined earning. Two learnable parameters (alpha and beta) penalize deviations from this fairness reference, reflecting sensitivity to disadvantageous and advantageous inequity respectively.\nModel 2:\nSpecification: U_accept = split_self - gamma * [max( fairness_reference - split_self, 0 )]^2 - theta * [max( split_self - fairness_reference, 0 )]^2\n\nwhere fairness_reference = (token_self / (token_self + token_opp)) * combined_earning\nSummary: A quadratic inequity aversion model for responders. The utility of accepting an offer is computed as the offered monetary value minus a squared penalty based on deviation from a fairness reference derived from token allocation. Two learnable parameters govern the sensitivity to disadvantageous (gamma) and advantageous (theta) inequity.\nModel 3:\nSpecification: U_accept = split_self + lambda_param * exp(- tau_param * abs(split_self - ((token_self/(token_self+token_opp))*combined_earning)))\nSummary: A utility model for responder behavior that combines the offered monetary share (split_self) with an additional fairness bonus. The bonus is maximal when the offer equals the fairness reference (computed from token_self, token_opp, and combined_earning) and decays exponentially with the absolute deviation from fairness. The model includes two learnable parameters: lambda_param, scaling the bonus magnitude, and tau_param, governing the decay rate.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "kappa": {
      "description": "Sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "mu": {
      "description": "Sensitivity parameter for advantageous inequity (penalty when the offer exceeds the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = ln(1 + split_self) \n           - kappa * max( ln(1 + (token_self/(token_self+token_opp))*combined_earning) - ln(1 + split_self), 0 )\n           - mu    * max( ln(1 + split_self) - ln(1 + (token_self/(token_self+token_opp))*combined_earning), 0 )",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting an offer, computed from the logarithm of the offered share penalized by fairness deviations.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3) on that trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "kappa": {
      "description": "Sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "mu": {
      "description": "Sensitivity parameter for advantageous inequity (penalty when the offer exceeds the fairness reference).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model computes the utility of accepting an offer by first applying a logarithmic transformation to the offered monetary amount to capture diminishing sensitivity. A fairness reference is derived from the participant\u2019s token ratio and combined earnings. Two learnable parameters (kappa and mu) penalize deviations from this fairness reference, with separate weights for disadvantageous and advantageous inequity, respectively.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:  \n\u2022 Responders are sensitive not only to the absolute amount they receive (split_self) but also to deviations from what they consider a \u201cfair\u201d share.  \n\u2022 Fairness is evaluated relative to a reference computed from the participant\u2019s token allocation relative to the total tokens (token_self / (token_self + token_opp)) multiplied by the combined_earning.  \n\u2022 Diminishing sensitivity is a well\u2010established principle in decision making (e.g., logarithmic utility functions are common), so it is reasonable to transform monetary outcomes using a logarithm.  \n\u2022 Responders may experience different psychological costs for disadvantageous inequity (when the offer is lower than the fairness reference) compared to advantageous inequity (when the offer exceeds the fairness reference).\n\n2. Interaction of these mechanisms:  \n\u2022 The offered amount is first transformed via a log function to capture diminishing sensitivity.  \n\u2022 A fairness reference is computed in the same logarithmic metric so that differences are in a proportionally comparable scale.  \n\u2022 Two penalty terms, weighted by learnable parameters, are applied: one for disadvantageous deviations (when the fairness reference exceeds the offer) and one for advantageous deviations (when the offer exceeds the fairness reference).\n\n3. Mathematical form:  \n\u2022 Let fairness_reference = (token_self/(token_self+token_opp)) * combined_earning.  \n\u2022 Transform both split_self and fairness_reference with log(1+x) (ensuring that zero offers are handled gracefully).  \n\u2022 The penalty for a shortfall is computed as the difference log(1+fairness_reference) \u2013 log(1+split_self) when positive; likewise, for an excessive offer, the penalty is the difference log(1+split_self) \u2013 log(1+fairness_reference).  \n\n4. Parameters:  \n\u2022 kappa (learnable) governs sensitivity to disadvantageous inequity (when the offer is less than the fairness reference).  \n\u2022 mu (learnable) governs sensitivity to advantageous inequity (when the offer exceeds the fairness reference).  \nBoth parameters are assigned generous bounds.\n\n5. Mapping to observable behavior:  \n\u2022 The model uses observable variables split_self, token_self, token_opp, and combined_earning.  \n\u2022 The computed utility U_accept is a single number that (once fed into a choice\u2010probability function with a temperature parameter) will determine the likelihood of accepting an offer.  \n\u2022 Negative values of U_accept indicate that an offer is unlikely to be accepted.\n\nBelow is the formal model specification.\n\n<MODEL>\nU_accept = ln(1 + split_self) \n           - kappa * max( ln(1 + (token_self/(token_self+token_opp))*combined_earning) - ln(1 + split_self), 0 )\n           - mu    * max( ln(1 + split_self) - ln(1 + (token_self/(token_self+token_opp))*combined_earning), 0 )\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting an offer, computed from the logarithm of the offered share penalized by fairness deviations.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3) on that trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"kappa\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity (penalty when the offer is below the fairness reference).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"mu\": {\n      \"description\": \"Sensitivity parameter for advantageous inequity (penalty when the offer exceeds the fairness reference).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model computes the utility of accepting an offer by first applying a logarithmic transformation to the offered monetary amount to capture diminishing sensitivity. A fairness reference is derived from the participant\u2019s token ratio and combined earnings. Two learnable parameters (kappa and mu) penalize deviations from this fairness reference, with separate weights for disadvantageous and advantageous inequity, respectively.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, kappa=1, mu=1):\n    utility_values = []\n    \n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        \n        # Calculation of the fairness reference\n        fairness_reference = (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n        \n        # Utility calculations\n        ln_split_self = math.log(1 + split_self)\n        ln_fairness_reference = math.log(1 + fairness_reference)\n        \n        disadvantageous_penalty = max(ln_fairness_reference - ln_split_self, 0)\n        advantageous_penalty = max(ln_split_self - ln_fairness_reference, 0)\n        \n        U_accept = ln_split_self - kappa * disadvantageous_penalty - mu * advantageous_penalty\n        \n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "kappa": 10.0,
      "mu": 0.009756737400890553,
      "success": true,
      "log_likelihood": -12.769995023747832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.397561877800798,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.35799830717616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.768525220351199,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.654133229709057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.316135203418961,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.136026922486064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.843850365913168,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.237477078135736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.343816060277254,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.760567775545773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.9594340520055074,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.89834897285132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 9.33862654788065,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -13.93185410776769,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.436783865028616,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -13.581063714953046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.00968420201649026,
      "success": true,
      "log_likelihood": -12.420347718416341,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.70020418827759,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.221158809998824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 1.482188427348136e-17,
      "success": true,
      "log_likelihood": -14.31209295710538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.31209295710538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.53165075747527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.458349020383043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.722360100593555,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.56102470687872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.055851087426966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 7.417573338042299,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.40421756479992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.535531202919991,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.989384534477306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.895066203993567,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.957477325535542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.121195898632287,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.47629495329199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.794963397241644,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.639641665484547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -10.006707006717644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.729439628723156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.44316183101921885,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.458568279151393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.31209295710538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009656609396909875,
      "success": true,
      "log_likelihood": -12.76999502366869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.521070374407309,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.95452316692116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.257095168547536,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.526450789723391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -14.312092957105381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.7638706445673242,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.957601999174944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.6293564708398085,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.339765388900886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.722746390050173,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.916695027374384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2940703482383205,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -20.414950090550875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.137422077357932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.1447895523960794,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -20.57688003409456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -12.247514166085367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.24024195207474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.19021069681293,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.994361519641757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.616712756463697,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.775936078515777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.0018486462112546,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.716614473715712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.885246471556388,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.563287895718453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.522596553234773,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.813615399782087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 8.173713441992904,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.815480963402381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2562145348855673,
      "mu": 0.009535884460726788,
      "success": true,
      "log_likelihood": -23.853567390197654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.3514885562571,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -20.61424679824115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009729488129414557,
      "success": true,
      "log_likelihood": -14.404429369316302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.121196526106341,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.6842518421811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.094649082595923,
      "mu": 0.00793932126951812,
      "success": true,
      "log_likelihood": -22.17088530072209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 6.390368911217054,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.935736879871783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -10.978129903837752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -11.944569623215862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.17941042554295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009596370089232325,
      "success": true,
      "log_likelihood": -12.83132722237811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.197753012190173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.430137076691062,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -21.503873148539196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.671470619919966,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.04166012367707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009590626573544604,
      "success": true,
      "log_likelihood": -12.769995023651479,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.87419225263427,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -20.593678221630842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -11.69549136181709,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.484609082828027,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.24702989339854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.075273219038436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.325508801926894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.9727736308065777,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.90902451237661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.411745455570163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -10.680575852568815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009579162532489149,
      "success": true,
      "log_likelihood": -14.167568298077166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 4.489336307724356,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.386324665309274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.049055875261770195,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -18.87434778707549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 3.3496714442718543,
      "mu": 10.0,
      "success": true,
      "log_likelihood": -22.39222028047285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.2340528264563697,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -19.57070124371281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.605974974439599,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 10.0,
      "success": true,
      "log_likelihood": -14.626518679046987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.148497021858111,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -23.013643848799767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.009631289123394289,
      "success": true,
      "log_likelihood": -12.769995023658804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 2.9316747557058864,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -22.989738882511585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.506296077440364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 10.0,
      "success": true,
      "log_likelihood": -12.236058221045841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.70668136415735,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -16.581374193806877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.3437883542287756,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -23.724088392977002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -12.006967164762752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 1.5093581866931163,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -20.8048332918403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 10.0,
      "mu": 10.0,
      "success": true,
      "log_likelihood": -12.621928641129154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.0,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -15.424404732632311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 5.528074201211329,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -17.533258988571042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "kappa": 0.4161932819563519,
      "mu": 0.0,
      "success": true,
      "log_likelihood": -21.74279574290833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "kappa": {
        "r": 0.8707503430371827,
        "p": 5.659362874680419e-32
      },
      "mu": {
        "r": 0.19630269451783458,
        "p": 0.050296161266284986
      }
    }
  },
  "bic_results": {
    "average_bic": 40.80297091787691,
    "individual_bics": [
      32.70702792440788,
      43.88303449126454,
      40.47530433633033,
      39.439091721884346,
      37.64199203318369,
      44.688173428003765,
      35.791223791122974,
      44.96373582261486,
      35.791223791122974,
      35.0307460924476,
      34.32916530681831,
      32.0077333137449,
      35.60935549690987,
      35.791223791122974,
      35.79122379112298,
      35.79122379112298,
      35.79122379112298,
      40.230339391862756,
      40.083735917678304,
      35.79122379112299,
      44.289087290669656,
      41.27874005176615,
      41.97547300651206,
      45.14580694586683,
      43.0819925279833,
      44.1196277834962,
      42.44632120788131,
      27.180451890347506,
      40.62591713435853,
      46.084174435215004,
      35.79122379112298,
      32.7070279242496,
      47.07608421075454,
      38.219939456359,
      35.79122379112298,
      45.082241875262106,
      43.84656865471399,
      43.00042793166099,
      47.99693805801397,
      39.44188203162808,
      48.32079794510134,
      31.66206620908295,
      37.6475217810617,
      45.15576091619573,
      44.71891003394377,
      46.60026682434364,
      44.293613668349124,
      44.79426867647639,
      38.79799980371698,
      54.874172657307525,
      48.39553147339452,
      35.975896615544826,
      46.53554156127442,
      51.5088084783564,
      47.038511636655784,
      29.123297684587726,
      31.056177123343943,
      41.52585872799812,
      32.82969232166844,
      43.562543901292564,
      50.17478417399061,
      43.250358124266356,
      32.707027924215176,
      48.3543943201739,
      30.5580206005464,
      43.6610976637093,
      39.31758431498909,
      41.818055480766006,
      44.98508690166544,
      39.99052878805254,
      28.528189582049848,
      35.50217447306655,
      45.93968720753077,
      44.9157334510632,
      51.951478437857915,
      46.30844036433784,
      38.37898782579142,
      36.420075235006195,
      53.19432557451175,
      32.70702792422983,
      53.14651564193539,
      40.17963003179295,
      31.6391543190039,
      40.32978626452597,
      54.61521466286622,
      31.180972206437723,
      48.77670446059282,
      32.41089515917053,
      38.01584734217684,
      42.2335558540543,
      50.65262936272888
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}