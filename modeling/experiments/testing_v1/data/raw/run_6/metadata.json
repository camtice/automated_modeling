{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - alpha * max( (token_self/(token_self+token_opp))*combined_earning - split_self , 0 ) - beta * max( split_self - (token_self/(token_self+token_opp))*combined_earning , 0 )\nSummary: The model computes the utility of accepting an offer by comparing the offered monetary share (split_self) to a fairness reference derived from the participant\u2019s token allocation (token_self) relative to total tokens (token_self + token_opp) and the combined earning. Two learnable parameters (alpha and beta) penalize deviations from this fairness reference, reflecting sensitivity to disadvantageous and advantageous inequity respectively.\nModel 2:\nSpecification: U_accept = split_self - gamma * [max( fairness_reference - split_self, 0 )]^2 - theta * [max( split_self - fairness_reference, 0 )]^2\n\nwhere fairness_reference = (token_self / (token_self + token_opp)) * combined_earning\nSummary: A quadratic inequity aversion model for responders. The utility of accepting an offer is computed as the offered monetary value minus a squared penalty based on deviation from a fairness reference derived from token allocation. Two learnable parameters govern the sensitivity to disadvantageous (gamma) and advantageous (theta) inequity.\nModel 3:\nSpecification: U_accept = split_self + lambda_param * exp(- tau_param * abs(split_self - ((token_self/(token_self+token_opp))*combined_earning)))\nSummary: A utility model for responder behavior that combines the offered monetary share (split_self) with an additional fairness bonus. The bonus is maximal when the offer equals the fairness reference (computed from token_self, token_opp, and combined_earning) and decays exponentially with the absolute deviation from fairness. The model includes two learnable parameters: lambda_param, scaling the bonus magnitude, and tau_param, governing the decay rate.\nModel 4:\nSpecification: U_accept = ln(1 + split_self) \n           - kappa * max( ln(1 + (token_self/(token_self+token_opp))*combined_earning) - ln(1 + split_self), 0 )\n           - mu    * max( ln(1 + split_self) - ln(1 + (token_self/(token_self+token_opp))*combined_earning), 0 )\nSummary: This model computes the utility of accepting an offer by first applying a logarithmic transformation to the offered monetary amount to capture diminishing sensitivity. A fairness reference is derived from the participant\u2019s token ratio and combined earnings. Two learnable parameters (kappa and mu) penalize deviations from this fairness reference, with separate weights for disadvantageous and advantageous inequity, respectively.\nModel 5:\nSpecification: U_accept = split_self - alpha * | split_self - (token_self/(token_self + token_opp))*combined_earning |^delta\nSummary: A utility model for responders that calculates the attractiveness of accepting an offer by subtracting a non-linear penalty from the monetary share offered (split_self). The penalty is determined by the absolute deviation between the offer and a fairness reference derived from the participant\u2019s token share relative to the total and the combined earnings. Two learnable parameters, alpha and delta, control the sensitivity and curvature of the penalty, respectively.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "rho": {
      "description": "Curvature exponent governing diminishing sensitivity to deviations from fairness.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient scaling the penalty for offers below the fairness reference.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet \u0394 = split_self \u2212 f  \nU_accept = f + { \u0394^rho,                     if \u0394 \u2265 0  \n              \u2212 lambda_param \u00d7 (\u2212\u0394)^rho,      if \u0394 < 0 }",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer, computed relative to a fairness reference.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The monetary share offered to the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary amount available (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "rho": {
      "description": "Curvature exponent governing diminishing sensitivity to deviations from fairness.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient scaling the penalty for offers below the fairness reference.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "f": {
      "description": "Fairness reference computed from token allocation and combined earnings.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Delta": {
      "description": "The difference between the offered monetary share and the fairness reference.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A reference-dependent utility model in which the fairness benchmark is computed from the participant\u2019s token share and combined earnings. The utility for accepting an offer combines the fairness reference with a nonlinear evaluation of deviations from fairness: gains (offers above fairness) are mapped via a power function while losses (offers below fairness) incur an amplified penalty governed by a loss aversion parameter. Two learnable parameters (rho and lambda_param) govern diminishing sensitivity and loss aversion.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms:\n   \u2022 A reference\u2010dependent evaluation process where responders compare the offered share (split_self) to a fairness benchmark.\n   \u2022 Diminishing sensitivity to deviations from fairness: small differences are felt more strongly than larger ones in a non\u2010linear manner.\n   \u2022 Loss aversion: deviations below the fairness benchmark incur a stronger penalty than equivalent gains above the fairness reference.\n\n2. How these mechanisms interact:\n   \u2022 The fairness reference is computed using the participant\u2019s token share relative to the total tokens multiplied by the combined pot.\n   \u2022 The difference, \u0394, between the actual offer (split_self) and this fairness reference is remapped using a power function (capturing diminishing sensitivity).\n   \u2022 When \u0394 is negative, its value is down\u2010weighted further by a loss aversion parameter.\n\n3. Mathematical form capturing these interactions:\n   \u2022 Let f denote the fairness reference:\n       f = (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n   \u2022 Define \u0394 = split_self \u2212 f.\n   \u2022 Then, the utility is given by a prospect theory\u2013like piecewise function:\n       \u2022 If \u0394 \u2265 0 then the bonus is \u0394 raised to a power.\n       \u2022 If \u0394 < 0 then a penalty term applies which is amplified by a loss aversion coefficient.\n\n4. Parameters needed to calibrate the model:\n   \u2022 A curvature exponent (rho) controlling the nonlinear mapping of deviations.\n   \u2022 A loss aversion constant (lambda_param) controlling the relative weight of negative deviations.\n   These are our only learnable parameters.\n\n5. Mapping to observable behavior:\n   \u2022 The model uses token_self, token_opp, and combined_earning to form a fairness benchmark.\n   \u2022 The observed offer (split_self) is compared to this benchmark, and its deviation is remapped into a utility score.\n   \u2022 Higher utility (when offers exceed fairness) should drive greater probability of acceptance, whereas lower or negative utility (when offers fall short) reduce the likelihood of acceptance.\n\nBelow is the formal mathematical model and variable descriptions:\n\n<MODEL>\nLet f = (token_self / (token_self + token_opp)) \u00d7 combined_earning  \nLet \u0394 = split_self \u2212 f  \nU_accept = f + { \u0394^rho,                     if \u0394 \u2265 0  \n              \u2212 lambda_param \u00d7 (\u2212\u0394)^rho,      if \u0394 < 0 }\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, computed relative to a fairness reference.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"rho\": {\n      \"description\": \"Curvature exponent governing diminishing sensitivity to deviations from fairness.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion coefficient scaling the penalty for offers below the fairness reference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"f\": {\n      \"description\": \"Fairness reference computed from token allocation and combined earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Delta\": {\n      \"description\": \"The difference between the offered monetary share and the fairness reference.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA reference-dependent utility model in which the fairness benchmark is computed from the participant\u2019s token share and combined earnings. The utility for accepting an offer combines the fairness reference with a nonlinear evaluation of deviations from fairness: gains (offers above fairness) are mapped via a power function while losses (offers below fairness) incur an amplified penalty governed by a loss aversion parameter. Two learnable parameters (rho and lambda_param) govern diminishing sensitivity and loss aversion.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, rho=1.0, lambda_param=1.0):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        # Calculate fairness reference f\n        if (token_self + token_opp) > 0:\n            f = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            f = 0  # If both tokens are zero, fairness reference is 0\n            \n        # Calculate \u0394\n        delta = split_self - f\n        \n        # Calculate utility U_accept\n        if delta >= 0:\n            U_accept = f + (delta ** rho)\n        else:\n            U_accept = f - lambda_param * ((-delta) ** rho)\n        \n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "rho": 0.9770707370234176,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.328102266747443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.8575639323357143,
      "lambda_param": 3.0428218666418023,
      "success": true,
      "log_likelihood": -16.21864844486203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.5766659360482658,
      "lambda_param": 1.3352382081875236,
      "success": true,
      "log_likelihood": -11.611637867182708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9222823624281152,
      "lambda_param": 3.165354047710319,
      "success": true,
      "log_likelihood": -14.002510583996376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.8634446290104476,
      "lambda_param": 1.3564282097845408,
      "success": true,
      "log_likelihood": -9.536288128109808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.5743664784875496,
      "success": true,
      "log_likelihood": -12.168088963132512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.6383079519283625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.5751021604336217,
      "success": true,
      "log_likelihood": -10.61636295481845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.6383079519283625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9753799195780006,
      "lambda_param": 3.4942040358552573,
      "success": true,
      "log_likelihood": -11.663435904643972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.9318850249258983,
      "lambda_param": 1.2182430565000317,
      "success": true,
      "log_likelihood": -7.589193429759397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.0179070591961752,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -13.204861008921903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.4498067050845955,
      "lambda_param": 2.1655348011619533,
      "success": true,
      "log_likelihood": -9.732753405196629,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.638307951928363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.638307951928362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.6383079519283625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.6383079519283625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.24813573121383048,
      "success": true,
      "log_likelihood": -8.953367439091643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.2550586827925518,
      "success": true,
      "log_likelihood": -8.441071565721177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.638307951928362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.1025579330846578,
      "lambda_param": 2.1729372913037635,
      "success": true,
      "log_likelihood": -15.557028042625399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.2787587989922765,
      "success": true,
      "log_likelihood": -9.640086631615036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5062904441582554,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -16.617667959496174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.8318237822826388,
      "lambda_param": 2.8652795200339725,
      "success": true,
      "log_likelihood": -16.920424678803194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.6736198152033634,
      "lambda_param": 1.356108513319864,
      "success": true,
      "log_likelihood": -12.891212202631424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9265827189050685,
      "lambda_param": 2.4229635172991464,
      "success": true,
      "log_likelihood": -15.603414273059636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.3389261558843815,
      "lambda_param": 1.5513475657603861,
      "success": true,
      "log_likelihood": -13.357593071167404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.6027318240812936,
      "lambda_param": 4.420005423684742,
      "success": true,
      "log_likelihood": -5.1984870728918455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.24091302336458123,
      "success": true,
      "log_likelihood": -9.481517351081449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.2630071177268436,
      "lambda_param": 1.024895028296885,
      "success": true,
      "log_likelihood": -16.020557541089975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.638307951928363,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9770708667130535,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.32810226674655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5129123711778844,
      "lambda_param": 4.538670606165952,
      "success": true,
      "log_likelihood": -20.343802039832006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.6941513211654733,
      "lambda_param": 4.310257719655178,
      "success": true,
      "log_likelihood": -14.669285096582996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -2.638307951928362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.8823027296251081,
      "lambda_param": 2.1482581512180654,
      "success": true,
      "log_likelihood": -14.865576244305784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.4931509250782238,
      "success": true,
      "log_likelihood": -10.560508679416586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.4371695250504577,
      "lambda_param": 1.6440748800003484,
      "success": true,
      "log_likelihood": -14.063056855735322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.2211346844413529,
      "lambda_param": 1.4226079372431801,
      "success": true,
      "log_likelihood": -17.615796936007783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.4520850470079834,
      "lambda_param": 0.41859875155683385,
      "success": true,
      "log_likelihood": -10.407748764915796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.3821465728431372,
      "lambda_param": 1.3263395711727808,
      "success": true,
      "log_likelihood": -17.3310729829205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7377347972989874,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -11.855409520669141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -7.138307942927755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9552357354530839,
      "lambda_param": 2.356635365174224,
      "success": true,
      "log_likelihood": -16.47076112198508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.43491327042686,
      "lambda_param": 1.2013332393932923,
      "success": true,
      "log_likelihood": -14.328249166200115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.0316568334837803,
      "lambda_param": 1.4457971751100969,
      "success": true,
      "log_likelihood": -16.16074704136635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.1635879294271723,
      "lambda_param": 2.01421893338836,
      "success": true,
      "log_likelihood": -15.532314358516516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5018344943382319,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -16.466443733837995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 1.4248346339289757,
      "success": true,
      "log_likelihood": -9.4269770845366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.4093029540276336,
      "lambda_param": 4.2254543400370075,
      "success": true,
      "log_likelihood": -23.291034919311166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.3367445798097137,
      "lambda_param": 1.034959368008139,
      "success": true,
      "log_likelihood": -17.288941535901415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7297528583185308,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -17.36897699755589,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7276337977153141,
      "lambda_param": 3.069688357961478,
      "success": true,
      "log_likelihood": -18.604155223494267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5283919766053354,
      "lambda_param": 3.3700548561835464,
      "success": true,
      "log_likelihood": -21.137341193984547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.6247462173691342,
      "lambda_param": 4.550266201270934,
      "success": true,
      "log_likelihood": -19.465518497225926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.8338867926787334,
      "lambda_param": 2.4912039055769517,
      "success": true,
      "log_likelihood": -6.324465041357232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9097839194907827,
      "lambda_param": 4.732504476330408,
      "success": true,
      "log_likelihood": -10.358426078031266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.1,
      "lambda_param": 1.3395891585386908,
      "success": true,
      "log_likelihood": -10.991782649775699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9438597498262201,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.306253699142307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.8323314931820689,
      "lambda_param": 1.5487529469909018,
      "success": true,
      "log_likelihood": -14.416678012882873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9133052192590876,
      "lambda_param": 2.205863485604891,
      "success": true,
      "log_likelihood": -19.771324516247027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.1196532353003814,
      "lambda_param": 2.3646438677528394,
      "success": true,
      "log_likelihood": -14.94149092663015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9770706045500718,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.328102266748605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.6408954056178595,
      "lambda_param": 3.7415716787601627,
      "success": true,
      "log_likelihood": -20.727844078907545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.782321033995774,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -10.49051168283687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.870023527374036,
      "lambda_param": 2.6808765907241714,
      "success": true,
      "log_likelihood": -15.184111051741331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.6918873544105404,
      "lambda_param": 0.29750674869893773,
      "success": true,
      "log_likelihood": -9.696910443309585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.7288235033920718,
      "lambda_param": 0.38504588054914984,
      "success": true,
      "log_likelihood": -12.179651695224745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.6791186318380441,
      "lambda_param": 3.1900486634341596,
      "success": true,
      "log_likelihood": -15.857028052450202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.1868242844177972,
      "lambda_param": 0.5393061786553156,
      "success": true,
      "log_likelihood": -11.582583711473456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.123067260039921,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -8.725380278120507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7901511312867938,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -16.58923394596361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.1174377415804164,
      "lambda_param": 2.070878281134191,
      "success": true,
      "log_likelihood": -15.903102235802312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9403837535316765,
      "lambda_param": 1.43316914911917,
      "success": true,
      "log_likelihood": -15.237843973939928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5610808942135835,
      "lambda_param": 3.8605180288317684,
      "success": true,
      "log_likelihood": -22.287053639608352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 2.0,
      "lambda_param": 0.518295019065099,
      "success": true,
      "log_likelihood": -11.69493537697393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.8319727977701092,
      "lambda_param": 0.18116293801798536,
      "success": true,
      "log_likelihood": -8.592466401112876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9046260769547075,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -18.74141853641163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.35324258808892395,
      "lambda_param": 4.096738876562934,
      "success": true,
      "log_likelihood": -20.184380716499696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9770716385481206,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.3281022667464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.5117132378838429,
      "lambda_param": 3.9498319525377967,
      "success": true,
      "log_likelihood": -23.160430803034167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.2868395349091721,
      "lambda_param": 0.32189889222205303,
      "success": true,
      "log_likelihood": -11.088353527274917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.0590531898682753,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -15.437698196992836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.0985334986171136,
      "lambda_param": 2.1695466680226847,
      "success": true,
      "log_likelihood": -12.97382462973327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.4733992425642916,
      "lambda_param": 3.6577448581219234,
      "success": true,
      "log_likelihood": -24.42721368070949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.9668459967380572,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -12.523766239940834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.2675698175234678,
      "lambda_param": 1.210257822961465,
      "success": true,
      "log_likelihood": -17.8237147048704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7990977666069958,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -14.627682294395271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 1.8597169979194694,
      "lambda_param": 0.20679783380801367,
      "success": true,
      "log_likelihood": -7.115986733444597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.6408948459279209,
      "lambda_param": 3.741580080885846,
      "success": true,
      "log_likelihood": -14.727844081773128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "rho": 0.7573269090791962,
      "lambda_param": 2.2088042666233867,
      "success": true,
      "log_likelihood": -20.982024365001994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "rho": {
        "r": 0.7152626157361615,
        "p": 6.261533469689116e-17
      },
      "lambda_param": {
        "r": 0.8025405906363311,
        "p": 1.0355358701074004e-23
      }
    }
  },
  "bic_results": {
    "average_bic": 33.32415504379323,
    "individual_bics": [
      35.823242410407104,
      39.60433476663628,
      30.390313611277634,
      35.17205904490497,
      26.239614133131838,
      31.50321580317724,
      12.443653780768944,
      28.399763786549123,
      12.443653780768944,
      30.493909686200162,
      22.345424736431013,
      33.57675989475602,
      26.632544687305476,
      12.443653780768946,
      12.443653780768944,
      12.443653780768944,
      12.443653780768944,
      25.073772755095504,
      24.049181008354573,
      12.443653780768944,
      38.28109396216302,
      26.447211140142294,
      40.402373795904566,
      41.007887234518606,
      32.94946228217507,
      38.373866423031494,
      33.882224019247026,
      17.564012022695913,
      26.13007257907512,
      39.20815295909217,
      12.443653780768946,
      35.82324241040532,
      47.85464195657623,
      36.50560807007821,
      12.443653780768944,
      36.89819036552379,
      28.28805523574539,
      35.29315158838286,
      42.398631748927784,
      27.982535406743814,
      41.82918384275322,
      30.8778569182505,
      21.44365376276773,
      40.10856012088238,
      35.82353620931245,
      39.48853195964492,
      38.23166659394525,
      40.09992534458821,
      26.020992045985423,
      53.74910771553455,
      41.74492094871505,
      41.904991872024,
      44.37534832390075,
      49.44172026488131,
      46.09807487136407,
      19.815967959626683,
      27.883890032974755,
      29.15060317646362,
      35.77954527519683,
      36.00039390267796,
      46.70968690940627,
      37.05001973017252,
      35.82324241040943,
      48.62272603472731,
      28.14806124258596,
      37.53525998039488,
      26.560858763531392,
      31.52634126736171,
      38.881093981812626,
      30.332205299859133,
      24.617798433153233,
      40.34550576883944,
      38.97324234851684,
      37.64272582479207,
      51.74114515612892,
      30.55690863086008,
      24.35197067913797,
      44.64987494973548,
      47.53579930991161,
      35.82324241040502,
      53.48789948298055,
      29.343744931462055,
      38.04243427089789,
      33.11468713637876,
      56.021465238331196,
      32.214570356793885,
      42.81446728665302,
      36.42240246570276,
      21.399011343801412,
      36.622726040458474,
      49.131086606916206
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}