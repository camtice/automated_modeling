{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "alpha": {
      "description": "Learnable inequity sensitivity parameter for disadvantageous inequity (penalty when offer is less than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable inequity sensitivity parameter for advantageous inequity (penalty when offer is greater than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self - ( alpha * max( (combined_earning * (token_self/(token_self+token_opp))) - split_self, 0 ) + beta * max( split_self - (combined_earning * (token_self/(token_self+token_opp))), 0 ) )",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposal, computed as the offered split adjusted for fairness deviations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary amount proposed to the responder (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary amount available to be split between responder and opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (reflecting their contribution)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (reflecting their contribution)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Learnable inequity sensitivity parameter for disadvantageous inequity (penalty when offer is less than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Learnable inequity sensitivity parameter for advantageous inequity (penalty when offer is greater than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A fairness-based utility model for responder decisions that compares the received monetary share to a fairness norm computed from the participant\u2019s token contribution relative to total tokens. Deviations below the fair share incur a penalty weighted by alpha, and deviations above incur a penalty weighted by beta. This linear model uses two learnable parameters to capture inequity aversion.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:  \n\u2003\u2013 Responders care not only about the absolute monetary gain (the amount of money they receive, given by split_self) but also about whether that gain is \u201cfair\u201d relative to their own contribution versus the opponent\u2019s contribution.  \n\u2003\u2013 The fair share can be defined by the proportion of tokens that the responder contributed relative to the total tokens pooled, multiplied by the combined earning.  \n\u2003\u2013 Deviations from this fairness norm lead to an \u201cinequity penalty.\u201d In keeping with the Fehr\u2010Schmidt approach, one may distinguish between disadvantageous inequity (getting less than what is \u201cfair\u201d) and advantageous inequity (getting more than what is \u201cfair\u201d).  \n\u2003\u2013 The responder\u2019s utility for accepting an offer is then determined by the amount they receive, discounted by any fairness penalty.\n\n2. How these mechanisms interact:  \n\u2003\u2013 First, calculate the \u201cfair share\u201d as:  \n\u2003\u2003fair_share = combined_earning \u00d7 (token_self / (token_self + token_opp))  \n\u2003\u2013 Then, compare the proposed offer (split_self) to the fair_share.  \n\u2003\u2013 If the offer is lower than fair_share (disadvantageous inequity), a penalty weighted by a parameter (alpha) is subtracted.  \n\u2003\u2013 If the offer is higher than the fair_share (advantageous inequity), a penalty weighted by another parameter (beta) is subtracted.  \n\u2003\u2013 Thus, any deviation from fairness (in either direction) reduces the utility of acceptance.\n\n3. Mathematical form capturing these interactions:  \n\u2003\u2013 The utility for accepting (U_accept) is defined as:  \n\u2003\u2003U_accept = split_self \u2013 [\u03b1\u00d7max(fair_share \u2013 split_self, 0) + \u03b2\u00d7max(split_self \u2013 fair_share, 0)]  \n\u2003\u2013 This is a linear function with two penalties for inequity: \u03b1 for disadvantageous inequity and \u03b2 for advantageous inequity.\n\n4. Learnable parameters needed:  \n\u2003\u2013 \u03b1 (alpha): Sensitivity to receiving less than the fair share.  \n\u2003\u2013 \u03b2 (beta): Sensitivity to receiving more than the fair share.  \n\u2003\u2013 Suggested finite bounds (generous to allow flexibility): e.g., [0, 10] for both parameters.\n\n5. Mapping model to observable behavior:  \n\u2003\u2013 Observables from the dataset include split_self, token_self, token_opp, combined_earning.  \n\u2003\u2013 The computed U_accept, which is the utility of accepting the proposal, will be linked to the responder\u2019s behavior. (Reject is modeled elsewhere.)  \n\u2003\u2013 This utility function can later be transformed into choice probabilities via a separate softmax/temperature parameter.\n\nBelow is the formal model specification and corresponding variable descriptions.\n\n<MODEL>\nU_accept = split_self - ( alpha * max( (combined_earning * (token_self/(token_self+token_opp))) - split_self, 0 ) + beta * max( split_self - (combined_earning * (token_self/(token_self+token_opp))), 0 ) )\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposal, computed as the offered split adjusted for fairness deviations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary amount proposed to the responder (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary amount available to be split between responder and opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (reflecting their contribution)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (reflecting their contribution)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Learnable inequity sensitivity parameter for disadvantageous inequity (penalty when offer is less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Learnable inequity sensitivity parameter for advantageous inequity (penalty when offer is greater than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model for responder decisions that compares the received monetary share to a fairness norm computed from the participant\u2019s token contribution relative to total tokens. Deviations below the fair share incur a penalty weighted by alpha, and deviations above incur a penalty weighted by beta. This linear model uses two learnable parameters to capture inequity aversion.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        if (token_self + token_opp) == 0:\n            fair_share = 0\n        else:\n            fair_share = combined_earning * (token_self / (token_self + token_opp))\n        \n        disadvantageous_inequity = max(fair_share - split_self, 0)\n        advantageous_inequity = max(split_self - fair_share, 0)\n        \n        U_accept = split_self - (alpha * disadvantageous_inequity + beta * advantageous_inequity)\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "alpha": 7.684296763744259,
      "beta": 1.9267548645309032,
      "success": true,
      "log_likelihood": -11.809149638555173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.551226457210366,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.37303515340969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6418948723809015,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.536623085403065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8940762604164894,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.026061752379782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2600065681998642,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.165990478075992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1121989271629475,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.729366392628565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.059519776996962,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.79365702474421,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.406381626793198,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.66739194122272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.206789294005281,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.135942097573615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.225871947572505,
      "beta": 1.9267206855919998,
      "success": true,
      "log_likelihood": -11.768043500727213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.3907711006117536,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.422283600536657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18807438341573826,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.280097766720267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.15499620751654644,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.895189135932402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665799322945647,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.630634720834147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.26555190699003844,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.715535548952774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.818896507028542,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.73970621318074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.305724476752834,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.10173509182461,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8844039812111173,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.242754334715714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.200222405008577,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.642404018956691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.374202390897391,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.671493923465592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.419228323176026,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -5.698332469571409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11115053430235447,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.660104839713668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5108863660960701,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.276660921007387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684314596345462,
      "beta": 1.9267239546058939,
      "success": true,
      "log_likelihood": -11.809149638434253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.446244740593411,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -22.183321687270418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0391825069603473,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.412768893686728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8212818878549899,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.915760549691457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9007500519733019,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.543270001975348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7397872913765515,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.615461339629793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9247004751708805,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.826006856800422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1777500652034119,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.799091766737064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.5897059734367915,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.536569215707972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2230301993519808,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.47892458771208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1283355570842581,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.752309167276353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.515131673005615,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.163185250404695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4665797711754205,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.630634721864592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.722904716544194,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.52516069869861,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.5053775884776357,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.612605292144398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8630153256579481,
      "beta": 1.9257467724438926,
      "success": true,
      "log_likelihood": -25.76896205056731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6826013890482938,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -17.487698787393327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.687885334844221,
      "beta": 1.9266765611491599,
      "success": true,
      "log_likelihood": -18.93744981101243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1337509848352314,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.09248097576477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7354832151446474,
      "beta": 1.9266779788780735,
      "success": true,
      "log_likelihood": -22.046225499718524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9336241812709267,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -20.65194006052379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.262487331057455,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -7.18761445378932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4145790306530053,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.3865637357495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.638619170082886,
      "beta": 1.926716669337898,
      "success": true,
      "log_likelihood": -13.324900639998187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2020164701293335,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.51121013001751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9587242096452965,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -19.80663387356356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7229083716210387,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.025160701756775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684317028545109,
      "beta": 1.926712354686897,
      "success": true,
      "log_likelihood": -11.809149638433738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3678371063924932,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -21.349320221418516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.687885023543285,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -11.340847885340349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2637963261894527,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.301181385370095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.19738351477557875,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.101187698384502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0699240204379712,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -16.483949531947356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -2.3866661013818056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.973023213798615,
      "beta": 1.9267247419548748,
      "success": true,
      "log_likelihood": -17.127994263881646,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3999592899776745,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.95538144745535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3097211134725464,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.249755727903047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1337515850449362,
      "beta": 5.087838955404432,
      "success": true,
      "log_likelihood": -22.5946655714783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9198875669315167,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -14.97017883619155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.005570616205019,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -12.977666491818155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6261898445787721,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -23.600671064622038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.684310035647687,
      "beta": 1.9266971532965789,
      "success": true,
      "log_likelihood": -11.809149638459116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0543403250754217,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -24.447926714510643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.473766464704716,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -10.735262420499673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4529890556135217,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.999600639701718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7266108542156882,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -26.70928056328221,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.68429587395517,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.212547704535227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7667713658330932,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -18.030295987590918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4559745157186263,
      "beta": 5.08781189071078,
      "success": true,
      "log_likelihood": -13.556111594249122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3678372045747098,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -15.349320224936838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5491377022334648,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -21.243908961167556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9063280794576508,
        "p": 1.9299274054942227e-38
      },
      "beta": {
        "r": 0.7508431731513826,
        "p": 2.358590521408165e-19
      }
    }
  },
  "bic_results": {
    "average_bic": 35.00456496022979,
    "individual_bics": [
      30.785337154022564,
      39.913108183731595,
      32.24028404771835,
      35.21916138167178,
      29.499018833064206,
      34.62577066216935,
      21.06729763582464,
      34.75435192640064,
      21.067297635824644,
      30.50182175935766,
      25.438922072059448,
      30.703124878366644,
      28.011605077985536,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      21.067297635824637,
      27.727233410352753,
      28.95741614877702,
      21.067297635824637,
      38.428307318580515,
      30.59810897481777,
      44.646450303273696,
      41.37050806056144,
      35.65254654634365,
      38.451845914825604,
      34.510025723843405,
      18.563702816055038,
      30.487247556339554,
      39.72035971892699,
      21.067297635824637,
      30.785337153780723,
      51.533681251453054,
      37.992575664285674,
      21.06729763582464,
      36.998558976295136,
      32.25357788086291,
      36.3979605561718,
      42.81905159051306,
      28.867297633208644,
      42.765221410386346,
      34.24017630832817,
      26.467297632862127,
      40.124887052336376,
      36.67165621146493,
      39.49340837772161,
      38.4283073206414,
      46.21735927430944,
      30.392248461201014,
      58.70496197804684,
      42.14243545169887,
      45.04193749893708,
      45.351999828441755,
      51.259488876349266,
      48.470917997959795,
      21.54226678449086,
      27.94016534841122,
      34.71729763045507,
      33.81683915690859,
      36.18945813694724,
      46.780305624039336,
      37.21735928042577,
      30.785337153779693,
      49.86567831974925,
      29.848733647592915,
      37.76940064765241,
      27.967297634040214,
      33.369413273681225,
      40.13493694080693,
      31.2672976308031,
      11.94037007967583,
      41.42302640467551,
      39.07780077182292,
      37.66654933271831,
      52.356369019868815,
      37.10739554929532,
      26.617297634140527,
      33.12237086054853,
      54.36838000615629,
      30.785337153830454,
      56.062891305933505,
      31.5672976315387,
      28.637562717911564,
      33.166239156315655,
      60.58559900347664,
      27.592133285982676,
      43.227629852094054,
      34.279261065410466,
      25.267297634776078,
      37.8656783267859,
      49.65485579924733
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}