{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = split_self - ( alpha * max( (combined_earning * (token_self/(token_self+token_opp))) - split_self, 0 ) + beta * max( split_self - (combined_earning * (token_self/(token_self+token_opp))), 0 ) )\nSummary: A fairness-based utility model for responder decisions that compares the received monetary share to a fairness norm computed from the participant\u2019s token contribution relative to total tokens. Deviations below the fair share incur a penalty weighted by alpha, and deviations above incur a penalty weighted by beta. This linear model uses two learnable parameters to capture inequity aversion.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "w": {
      "description": "Self\u2013interest weight parameter scaling the monetary share (split_self). Higher values indicate a relatively greater emphasis on the absolute monetary gain.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter determining the penalty for deviation from the fairness norm. When the offer is below norm, the deviation is weighted by gamma; when above, by (1 \u2013 gamma).",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let N = combined_earning \u00d7 (token_self / (token_self + token_opp)).\n\nDefine the penalty term P as:\n\u2003P = { gamma \u00d7 (N \u2013 split_self)\u2003if split_self < N\n\u2003\u2003\u2003 (1 \u2013 gamma) \u00d7 (split_self \u2013 N)\u2003if split_self \u2265 N }.\n\nThen the utility for accepting an offer is given by:\n\u2003U_accept = w \u00d7 split_self \u2013 P.",
  "variable_descriptions": {
    "U_accept": {
      "description": "Calculated utility of accepting a proposal, where negative values indicate a low likelihood of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "w": {
      "description": "Self\u2013interest weight parameter scaling the monetary share (split_self). Higher values indicate a relatively greater emphasis on the absolute monetary gain.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Fairness sensitivity parameter determining the penalty for deviation from the fairness norm. When the offer is below norm, the deviation is weighted by gamma; when above, by (1 \u2013 gamma).",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed monetary share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A dual\u2013component, piecewise linear utility model for responders that integrates weighted self\u2013interest with an asymmetrically applied fairness penalty. The fairness norm is computed as the proportional share from the combined earning based on token contributions. Two learnable parameters are used: w, the self\u2013interest weight on the monetary offer, and gamma, which governs the strength of the penalty when the offer falls below the fairness norm relative to when it exceeds the norm.",
  "full_reasoning": "Below is one way to capture responder behavior using psychological notions of self\u2010interest combined with a fairness (or inequity) concern that compares the actual offer (split_self) to a fairness \u201cnorm\u201d derived from the relative token contributions. In this model the responder\u2019s utility is a weighted (by w) benefit from the absolute monetary share minus a penalty for deviating from what one \u201cdeserves\u201d given the token division. Importantly, the penalty term is defined asymmetrically so that when the share is below the fairness norm the penalty is stronger than when above the norm. (That is, responders are more sensitive to receiving less than what they \u201cdeserve\u201d than to receiving more than their norm would indicate.) \n\nStep by step reasoning:\n1. Key psychological mechanisms:\n\u2003\u2022 Self\u2010interest \u2013 simply valuing the monetary share (split_self) in absolute terms.\n\u2003\u2022 Fairness comparison \u2013 computing a fairness norm as one\u2019s \u201cdeserved\u201d share based on one\u2019s token contribution relative to the total tokens (i.e. norm = combined_earning \u00d7 (token_self/(token_self+token_opp))).\n\u2003\u2022 Asymmetry in responses \u2013 penalizing receiving less than the fairness norm more strongly than penalizing receiving more.\n\n2. Interaction of these mechanisms:\n\u2003\u2022 The utility is an increasing function of the monetary share (weighted by parameter w).\n\u2003\u2022 A penalty is subtracted that is proportional to the deviation from the fairness norm. This penalty uses an asymmetry parameter (gamma) such that when the proposer\u2019s offer is less than the norm (i.e., disadvantageous inequity) the deviation is multiplied by gamma (with gamma tending to push the penalty higher), and when the offer is above the norm a lesser penalty (using 1\u2013gamma) is applied.\n\n3. Mathematical form:\n\u2003\u2022 Define the fairness norm as N = combined_earning \u00d7 (token_self/(token_self+token_opp)).\n\u2003\u2022 Use an indicator function I(\u00b7) to define the piecewise penalty term:\n\u2003\u2003\u2013 If split_self < N then penalty = gamma \u00d7 (N \u2013 split_self).\n\u2003\u2003\u2013 If split_self \u2265 N then penalty = (1 \u2013 gamma) \u00d7 (split_self \u2013 N).\n\u2003\u2022 The utility is then given by the weighted monetary share minus the penalty.\n\n4. Learnable parameters:\n\u2003\u2022 w: the weight given to one\u2019s self\u2010interest (affecting sensitivity to the monetary gain). This parameter adjusts how much the money matters in the overall evaluation.\n\u2003\u2022 gamma: the fairness sensitivity parameter that dictates the relative penalty for deviation from the fairness norm. When gamma is high, falling short of the norm is strongly penalized compared to exceeding it (and vice\u2010versa).\n\n5. Mapping to observed behavior:\n\u2003\u2022 For every trial in which the participant is a responder, the model uses the offer (split_self), the combined pot (combined_earning) and token counts (token_self and token_opp) to compute the fairness norm N.\n\u2003\u2022 The piecewise penalty function then adjusts the utility based on whether the offer is below or above N.\n\u2003\u2022 This computed utility (with negative values receiving low probability later through a temperature parameter not included here) determines the likelihood of accepting the proposal.\n\nBelow is the formal specification using our two learnable parameters:\n\n<MODEL>\nLet N = combined_earning \u00d7 (token_self / (token_self + token_opp)).\n\nDefine the penalty term P as:\n\u2003P = { gamma \u00d7 (N \u2013 split_self)\u2003if split_self < N\n\u2003\u2003\u2003 (1 \u2013 gamma) \u00d7 (split_self \u2013 N)\u2003if split_self \u2265 N }.\n\nThen the utility for accepting an offer is given by:\n\u2003U_accept = w \u00d7 split_self \u2013 P.\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Calculated utility of accepting a proposal, where negative values indicate a low likelihood of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"w\": {\n      \"description\": \"Self\u2013interest weight parameter scaling the monetary share (split_self). Higher values indicate a relatively greater emphasis on the absolute monetary gain.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Fairness sensitivity parameter determining the penalty for deviation from the fairness norm. When the offer is below norm, the deviation is weighted by gamma; when above, by (1 \u2013 gamma).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA dual\u2013component, piecewise linear utility model for responders that integrates weighted self\u2013interest with an asymmetrically applied fairness penalty. The fairness norm is computed as the proportional share from the combined earning based on token contributions. Two learnable parameters are used: w, the self\u2013interest weight on the monetary offer, and gamma, which governs the strength of the penalty when the offer falls below the fairness norm relative to when it exceeds the norm.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, w=1.0, gamma=0.5):\n    utility_values = []\n    \n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        # Calculate fairness norm N\n        if (token_self + token_opp) > 0:\n            N = combined_earning * (token_self / (token_self + token_opp))\n        else:\n            N = 0  # Avoid division by zero if both token counts are zero\n        \n        # Calculate the penalty P\n        if split_self < N:\n            P = gamma * (N - split_self)\n        else:\n            P = (1 - gamma) * (split_self - N)\n        \n        # Calculate the utility U_accept\n        U_accept = w * split_self - P\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.389563846212772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.7244688649402344,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -17.2946459268905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.825714756225942,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.535722238558392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.6084743280773875,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.1674073056043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.5288334818237063,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.961136666797659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.1923595568323437,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.490397400800838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.1958842884802399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.2383324229720496,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.329022283514657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.1958842884802399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.44593556719496175,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -15.307349130749406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.6317306131806395,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.695358150198963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.764563846136008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.49818413295368036,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.709759580159359,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.19588428848023984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.19588428848023984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.19588428848023984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.1958842884802398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.9428953882521687,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -4.901662745114052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.7625048499224594,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -6.922947615782872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.19588428848023987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8126904373147413,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.581480122891826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.441684526829244,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -8.235156196904382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.4733340695569192,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -18.71263628113343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8621547141606566,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -17.51454088495933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.6055843969433411,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.287934491597408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.0114973420160112,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -15.918253936835848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.9705891801106453,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.560765904599325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.173441332629942,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.321938463102402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.386465166197532,
      "gamma": 0.8653631329366143,
      "success": true,
      "log_likelihood": -9.362926095354418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.3830851660619412,
      "gamma": 0.7858381342711418,
      "success": true,
      "log_likelihood": -15.915876736512644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.19588428848023984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.389563846212779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.5524484999870394,
      "gamma": 0.980052728531003,
      "success": true,
      "log_likelihood": -21.06870301204214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.47884042548097855,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.991223349287694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 5.0,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -0.1958842884802399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.3967136003508758,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.945927609816845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.4965828506243217,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -10.827607972279777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.676044559679777,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.334825690282436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.1187505106892257,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -17.738163826420497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.926398290636208,
      "gamma": 0.3323560222984373,
      "success": true,
      "log_likelihood": -9.557236891127987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.923983021777169,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -17.959225677284476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.029656524204016266,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.702810696526798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.886988548938609,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -7.7724286017755695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.9524526754716378,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.79632771073356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.1187504298331243,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.738163827292064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.4096918535585232,
      "gamma": 0.8091276290100381,
      "success": true,
      "log_likelihood": -15.75134592904442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8126905210968279,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.581480123070193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.4981849188150178,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -19.209759578773216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.407908135429234,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -15.305585811081842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.4123064880568647,
      "gamma": 0.3714147574017502,
      "success": true,
      "log_likelihood": -23.629024840937294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.2325193845649938,
      "gamma": 0.8690088063449415,
      "success": true,
      "log_likelihood": -17.3484394721886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.564563845515126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8961429949027675,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -19.105233252272278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.670507154336889,
      "gamma": 0.46923334547005974,
      "success": true,
      "log_likelihood": -21.615534504271427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.3434357717261131,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -19.281677605164074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.33009264398792115,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.782963398848189,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.18142561941471705,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.55701576861386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.1604647793029437,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -13.794359357492342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.989563846085447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.4546238445654398,
      "gamma": 0.48244273634907764,
      "success": true,
      "log_likelihood": -14.091878590330715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.918527485122104,
      "gamma": 0.8944353300741186,
      "success": true,
      "log_likelihood": -19.7828813816515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.6700789851345282,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.58578471844323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.389563846212775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.6434537284225116,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -20.70408213266367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.09017732756691049,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.453722849672621,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.9779215013217433,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -15.764628170953287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.3198388419995575,
      "gamma": 0.5468093940667271,
      "success": true,
      "log_likelihood": -8.411856802030282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.880753352246232,
      "gamma": 0.7146825817064916,
      "success": true,
      "log_likelihood": -11.786052819670473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.0737663378323168,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.467445671199037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.3778192873281123,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.615382613420877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -11.639563846377241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.189563845783557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8454740700230986,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.709715012898787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.4229394281516035,
      "gamma": 0.5830851716700309,
      "success": true,
      "log_likelihood": -14.858479905465819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.4488102486928297,
      "gamma": 0.5886465852970373,
      "success": true,
      "log_likelihood": -22.492382395269377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.296537869552094,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.288595254905795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 2.1041178418389954,
      "gamma": 0.21731651717358696,
      "success": true,
      "log_likelihood": -7.815401456445219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.539563846171937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.5736447953083309,
      "gamma": 0.31592606434746234,
      "success": true,
      "log_likelihood": -22.578202313664672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.389563846212779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.5012942274289275,
      "gamma": 0.6133352552181095,
      "success": true,
      "log_likelihood": -22.933527592313233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.3558049399152807,
      "gamma": 0.0,
      "success": true,
      "log_likelihood": -11.82039521438316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -13.064563846075103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.9416994892073473,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.234418064988716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.3838597859218153,
      "gamma": 0.25477234612103067,
      "success": true,
      "log_likelihood": -24.120794999172944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -12.389563846212779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 1.1597185360757645,
      "gamma": 0.9029039854852294,
      "success": true,
      "log_likelihood": -17.96895024652763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.0,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -14.939563845449959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 3.105938198582192,
      "gamma": 0.6770636246037525,
      "success": true,
      "log_likelihood": -5.8184751724597135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.8961429373729611,
      "gamma": 1.0,
      "success": true,
      "log_likelihood": -16.1052332537747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "w": 0.7454260934851868,
      "gamma": 0.37419896834598704,
      "success": true,
      "log_likelihood": -20.974561413021853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "w": {
        "r": 0.852166645607177,
        "p": 2.5600233730160137e-29
      },
      "gamma": {
        "r": 0.6248063588996795,
        "p": 3.721602114400387e-12
      }
    }
  },
  "bic_results": {
    "average_bic": 34.26389764185722,
    "individual_bics": [
      31.946165569337765,
      41.75632973069322,
      36.238482354029,
      39.50185248812082,
      37.08931121050754,
      34.14783267851389,
      7.5588064538727,
      33.82508244394153,
      7.5588064538727,
      37.781736138411034,
      34.557754177310144,
      32.69616556918424,
      36.58655703723094,
      7.558806453872699,
      7.558806453872699,
      7.558806453872699,
      7.558806453872699,
      16.970363367140322,
      21.012933108477966,
      7.5588064538727,
      40.32999812269587,
      23.637350270720987,
      44.59231043917908,
      42.19611964683088,
      39.742906860107034,
      39.00354575058392,
      36.28856968611087,
      33.81091480311702,
      25.892890067621053,
      38.998791349937505,
      7.558806453872699,
      31.94616556933778,
      49.304443900996496,
      41.149484575487605,
      7.5588064538727,
      35.05889309654591,
      28.822253821471776,
      39.83668925747709,
      42.64336552975321,
      26.281511659168196,
      43.08548923148117,
      36.57265926996582,
      22.711895080463357,
      40.75969329837934,
      36.64336553149635,
      38.66972973500106,
      40.329998123052604,
      45.58655703445865,
      37.778209499075906,
      54.42508755878681,
      41.863916821289415,
      36.296165567942474,
      45.377504381456774,
      50.39810688545507,
      45.730393087240365,
      34.732964674608596,
      36.28106941413994,
      34.755756591896905,
      33.14616556908312,
      35.35079505757365,
      46.73280064021522,
      40.338607313798676,
      31.946165569337772,
      48.57520214223956,
      36.074483576257464,
      38.69629421881879,
      23.990751480972783,
      30.739143516253165,
      40.10192921931029,
      30.397803103753972,
      30.446165569666704,
      35.54616556847933,
      40.58646790270979,
      36.88399768784386,
      52.15180266745097,
      35.74422838672381,
      22.797840789802656,
      32.24616556925609,
      52.32344250424156,
      31.94616556933778,
      53.034093061538684,
      30.80782830567854,
      33.296165569062424,
      35.63587400688965,
      55.408627875258105,
      31.94616556933778,
      43.10493836996748,
      37.04616556781214,
      18.803988221831645,
      39.377504384461616,
      49.11616070295592
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}