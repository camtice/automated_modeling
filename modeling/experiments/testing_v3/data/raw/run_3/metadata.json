{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U = beta * split_self - lambda_param * max((token_self/(token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: A two-parameter inequity aversion model for responder behavior. The model computes a fairness reference based on the proportion of tokens earned. The utility of accepting an offer is the monetary reward weighted by beta minus a penalty, weighted by lambda_param, applied only when the offer is below the fairness reference.\nModel 2:\nSpecification: U = mu * split_self - xi * max( (combined_earning * (token_self / (token_self + token_opp)) - split_self), 0 )^2\nSummary: A utility model for responders that integrates reward sensitivity and quadratic inequity aversion. The model computes a fairness reference based on participants\u2019 relative token contributions and applies a penalty proportionate to the squared shortfall from this reference when an offer is unfair.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "delta": {
      "description": "Penalty sensitivity parameter that scales the loss when the offered share falls below the fairness reference",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Curvature parameter controlling diminishing sensitivity to monetary outcomes (reward and penalty)",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = (split_self)^(gamma) - delta * (max((combined_earning * token_self/(token_self + token_opp)) - split_self, 0))^(gamma)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of the responder when accepting an offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Monetary share for the participant from the offer (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in the pot (in \u00a3); each token is worth \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "delta": {
      "description": "Penalty sensitivity parameter that scales the loss when the offered share falls below the fairness reference",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Curvature parameter controlling diminishing sensitivity to monetary outcomes (reward and penalty)",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior that combines nonlinear reward evaluation and nonlinear penalty for fairness violations. The model computes a fairness reference based on the participant\u2019s token share relative to the total tokens and scales it by the combined earning. The reward (split_self) and any shortfall from this fairness benchmark are both transformed by a curvature parameter (gamma), while a penalty sensitivity parameter (delta) scales the disutility when the offer is unfair.",
  "full_reasoning": "Step-by-step reasoning:\n1. Key psychological mechanisms: The responder is thought to integrate the benefit of the monetary reward from an offer (split_self) with a penalty for a perceived fairness violation. The fairness reference is computed from the relative token contributions (token_self relative to token_self + token_opp) of the responder versus the opponent, scaled by the total available combined earning. When the proposed offer is below this fairness reference, a penalty is incurred. In addition, incorporating nonlinear (diminishing) sensitivity to both gains and losses is in keeping with psychological evidence from prospect theory.\n\n2. Mechanism interaction: The model assumes that the utility of accepting an offer is determined by the nonlinearly transformed monetary reward minus a nonlinearly transformed penalty whenever the offer falls short of the fairness benchmark. There are two key learnable parameters. One (gamma) governs the curvature (diminishing sensitivity) of the utility with respect to money, and the other (delta) scales the penalty for unfair offers. A utility that is lower than zero indicates a highly unfavorable (or \u201cunfair\u201d) offer that is unlikely to be accepted.\n\n3. Mathematical form: Define the fairness reference as \n\u2003\u2003fairness_ref = combined_earning \u00d7 (token_self/(token_self + token_opp)).\nThen, if the offer falls below this fairness reference, a penalty is applied. The utility is calculated as the power-transformed monetary reward minus the scaled and power-transformed shortfall. Formally, we use:\n\u2003\u2003U = (split_self)^(gamma) \u2212 delta \u00d7 (max(fairness_ref \u2212 split_self, 0))^(gamma).\n\n4. Calibration parameters: The two learnable parameters are:\n   \u2022 gamma (\u03b3): Determines the curvature of both the reward and the penalty functions (i.e. diminishing sensitivity). A value of 1 implies linear sensitivity, while values less than 1 imply diminishing sensitivity.\n   \u2022 delta (\u03b4): Determines the weight of the penalty when the offer is below the fairness reference.\n\n5. Mapping to observable behavior: The observable variable split_self (the monetary share given to the responder) is transformed by a power function. The fairness reference is computed from the tokens and combined earnings. The penalty term in the model only applies when the offer is below what is perceived as fair (i.e. fairness_ref \u2212 split_self > 0). The model outputs a utility U that is later used (together with a temperature parameter applied in a separate process) to predict the probability that the responder accepts the offer.\n\nBelow is the formal specification.\n\n<MODEL>\nU = (split_self)^(gamma) - delta * (max((combined_earning * token_self/(token_self + token_opp)) - split_self, 0))^(gamma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of the responder when accepting an offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Monetary share for the participant from the offer (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in the pot (in \u00a3); each token is worth \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"delta\": {\n      \"description\": \"Penalty sensitivity parameter that scales the loss when the offered share falls below the fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Curvature parameter controlling diminishing sensitivity to monetary outcomes (reward and penalty)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that combines nonlinear reward evaluation and nonlinear penalty for fairness violations. The model computes a fairness reference based on the participant\u2019s token share relative to the total tokens and scales it by the combined earning. The reward (split_self) and any shortfall from this fairness benchmark are both transformed by a curvature parameter (gamma), while a penalty sensitivity parameter (delta) scales the disutility when the offer is unfair.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, delta=1, gamma=1):\n    utility_values = []\n\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if token_self + token_opp > 0:\n            fairness_ref = combined_earning * (token_self / (token_self + token_opp))\n        else:\n            fairness_ref = 0\n\n        penalty = max((fairness_ref - split_self), 0)\n\n        U = (split_self ** gamma) - (delta * (penalty ** gamma))\n        utility_values.append(U)\n\n    return utility_values",
  "fitting_results": [
    {
      "delta": 7.3396140774712215,
      "gamma": 0.14952206485517378,
      "success": true,
      "log_likelihood": -7.243149970903054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.5483605279478427,
      "gamma": 1.0077871598131831,
      "success": true,
      "log_likelihood": -16.372069826403692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.6575655443619801,
      "gamma": 1.3692092945518408,
      "success": true,
      "log_likelihood": -10.7384884764227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.852889853572791,
      "gamma": 1.212512881607293,
      "success": true,
      "log_likelihood": -13.512045647802745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.318276371453586,
      "gamma": 1.2795888100845194,
      "success": true,
      "log_likelihood": -10.172827285823386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.0880095554192037,
      "gamma": 1.4839596575959249,
      "success": true,
      "log_likelihood": -10.956557501968721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.9999999999999998,
      "success": true,
      "log_likelihood": -2.3010828567590713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.0598192186884552,
      "gamma": 1.422445586569141,
      "success": true,
      "log_likelihood": -11.44248541292888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.3010828567590713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.3789692197317076,
      "gamma": 1.1340288009922348,
      "success": true,
      "log_likelihood": -11.44227768468798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.778553877131434,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.3350652761379957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 5.689278451651542,
      "gamma": 0.41920992005265445,
      "success": true,
      "log_likelihood": -9.363148002678201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.445511684144367,
      "gamma": 1.2955307348445815,
      "success": true,
      "log_likelihood": -9.358602279099651,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.9999999999999998,
      "success": true,
      "log_likelihood": -2.301082856759071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.3010828567590713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.301082856759071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.301082856759071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.20441700628231096,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -3.7053849288737113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.25032806958617226,
      "gamma": 1.6961448292781265,
      "success": true,
      "log_likelihood": -7.844088462689367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.9999999999999998,
      "success": true,
      "log_likelihood": -2.3010828567590704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.4542321706049186,
      "gamma": 1.0578994729443152,
      "success": true,
      "log_likelihood": -15.570404733703985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.31560372853257435,
      "gamma": 1.6202195871199734,
      "success": true,
      "log_likelihood": -8.886550487295263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.9558802703392095,
      "gamma": 0.8056075338362416,
      "success": true,
      "log_likelihood": -18.331928844180716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.293998641181262,
      "gamma": 1.0365409614010443,
      "success": true,
      "log_likelihood": -17.080154419315345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.8808072708529737,
      "gamma": 1.0965155145518464,
      "success": true,
      "log_likelihood": -14.094724269691772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.1694424239573091,
      "gamma": 1.116209411166582,
      "success": true,
      "log_likelihood": -15.411550526117932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.3470812281692537,
      "gamma": 1.3635873230157305,
      "success": true,
      "log_likelihood": -11.927785538302206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 6.006131238908904,
      "gamma": 1.451140032662478,
      "success": true,
      "log_likelihood": -4.34379805733486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.2308294343865799,
      "gamma": 1.5593845224163005,
      "success": true,
      "log_likelihood": -9.706728024266948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.5189665811778298,
      "gamma": 1.0930824812560556,
      "success": true,
      "log_likelihood": -16.162529561211926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.9999999999999998,
      "success": true,
      "log_likelihood": -2.301082856759071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 7.339629107589923,
      "gamma": 0.1495084087704499,
      "success": true,
      "log_likelihood": -7.243149969917245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.6271101690663978,
      "gamma": 0.7118934089515552,
      "success": true,
      "log_likelihood": -21.09348376250629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.07843090260244,
      "gamma": 0.931774581015614,
      "success": true,
      "log_likelihood": -15.35097670308392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -2.301082856759071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.7266498876684799,
      "gamma": 1.423830446360755,
      "success": true,
      "log_likelihood": -12.94872258936209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.782480382669938,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -6.279043741477634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.7252284318393023,
      "gamma": 1.124634097009325,
      "success": true,
      "log_likelihood": -14.385359180276755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.9232406821762529,
      "gamma": 1.015342843768863,
      "success": true,
      "log_likelihood": -17.822134442091972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0216426320827743,
      "gamma": 1.2870983074943954,
      "success": true,
      "log_likelihood": -10.169422665152426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.1756229933115996,
      "gamma": 1.015830608238787,
      "success": true,
      "log_likelihood": -17.7950103101793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 4.124192965183887,
      "gamma": 0.5547553543725101,
      "success": true,
      "log_likelihood": -11.093984332181957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.2225925243843687,
      "success": true,
      "log_likelihood": -9.138619752499398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.1912050284412878,
      "gamma": 1.1389957701238111,
      "success": true,
      "log_likelihood": -16.199529950042148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.0899277589572358,
      "gamma": 1.3187268147685556,
      "success": true,
      "log_likelihood": -13.38637383987869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.5084057865997703,
      "gamma": 1.2122291362182505,
      "success": true,
      "log_likelihood": -15.640385731279753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.4433412835140202,
      "gamma": 1.1234987819590525,
      "success": true,
      "log_likelihood": -15.399121588816808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.9565641876438167,
      "gamma": 0.729763258755423,
      "success": true,
      "log_likelihood": -18.593909988872856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.5559988694490956,
      "gamma": 1.179701476176754,
      "success": true,
      "log_likelihood": -11.206521146158519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.0147495539517126,
      "gamma": 0.552491281374749,
      "success": true,
      "log_likelihood": -23.727257724972517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.6756985037907509,
      "gamma": 1.1377610013173658,
      "success": true,
      "log_likelihood": -17.25504763342811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 5.031909676071718,
      "gamma": 0.21444236528980198,
      "success": true,
      "log_likelihood": -12.516270216308579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.140850679559048,
      "gamma": 0.9785873402508248,
      "success": true,
      "log_likelihood": -19.085495949372184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.7638783476464865,
      "gamma": 0.8324646788723085,
      "success": true,
      "log_likelihood": -21.903368510727358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 2.222115202384531,
      "gamma": 0.637478922153404,
      "success": true,
      "log_likelihood": -18.673852426081407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 5.11754435052665,
      "gamma": 1.8871191826909903,
      "success": true,
      "log_likelihood": -3.9693635583108215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 3.412521200966721,
      "gamma": 0.9907510752795236,
      "success": true,
      "log_likelihood": -10.385653645841597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.0025372305946185,
      "success": true,
      "log_likelihood": -13.775056128104472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 5.695595269223979,
      "gamma": 0.3088544622951624,
      "success": true,
      "log_likelihood": -9.87015717998722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.23332033031243976,
      "gamma": 1.1623088573641014,
      "success": true,
      "log_likelihood": -14.229634118748638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.972240548899316,
      "gamma": 0.9284358417375159,
      "success": true,
      "log_likelihood": -19.72994388019969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.7105699997561243,
      "gamma": 1.0548659525894954,
      "success": true,
      "log_likelihood": -14.975120169420173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 7.339660143697363,
      "gamma": 0.149497926746675,
      "success": true,
      "log_likelihood": -7.243149970460238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.4397945975143878,
      "gamma": 0.8341024207537565,
      "success": true,
      "log_likelihood": -20.997960320201035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 3.825146904651232,
      "gamma": 0.750755925335076,
      "success": true,
      "log_likelihood": -10.772113207597373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.217475611447455,
      "gamma": 1.164282151123692,
      "success": true,
      "log_likelihood": -14.87814152513834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.09140387166030756,
      "gamma": 1.5225712261443773,
      "success": true,
      "log_likelihood": -8.88428254594302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.2702579634678322,
      "gamma": 1.2530051216232188,
      "success": true,
      "log_likelihood": -12.475602181952906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.007167857160395,
      "gamma": 1.2041980346553935,
      "success": true,
      "log_likelihood": -15.92977118515702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.0920410946154344,
      "success": true,
      "log_likelihood": -11.95400878360578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 10.0,
      "gamma": 0.5835815020211512,
      "success": true,
      "log_likelihood": -1.5405625876275737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 4.940548387476696,
      "gamma": 0.2487773027457197,
      "success": true,
      "log_likelihood": -12.52484295248312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.3666267111339632,
      "gamma": 1.189351406966683,
      "success": true,
      "log_likelihood": -15.471169348776593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.32833519757075275,
      "gamma": 1.1993063450323524,
      "success": true,
      "log_likelihood": -14.828000461650959,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.3122943475092894,
      "gamma": 0.6450991593558218,
      "success": true,
      "log_likelihood": -22.515113862159247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.9177197182288318,
      "gamma": 1.313741076148105,
      "success": true,
      "log_likelihood": -13.627769851726415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.4037350358462735,
      "success": true,
      "log_likelihood": -8.509016691433937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 7.459148660076382,
      "gamma": 0.1,
      "success": true,
      "log_likelihood": -7.979595193596876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.691608877735842,
      "gamma": 0.6753537485083706,
      "success": true,
      "log_likelihood": -22.385149629010993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 7.339592892363379,
      "gamma": 0.14951229299020466,
      "success": true,
      "log_likelihood": -7.243149970063526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.193523682596826,
      "gamma": 0.62294525689125,
      "success": true,
      "log_likelihood": -22.689445377884816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.0,
      "gamma": 1.0969915077116894,
      "success": true,
      "log_likelihood": -12.098421496576123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 5.0255332483382595,
      "gamma": 0.4607276024707582,
      "success": true,
      "log_likelihood": -11.727363042977311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.5203601698503801,
      "gamma": 1.798707310821633,
      "success": true,
      "log_likelihood": -8.150526007733072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.8007925128859458,
      "gamma": 0.4600990981522425,
      "success": true,
      "log_likelihood": -23.218972414158962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 7.113780552217848,
      "gamma": 0.23593903559212973,
      "success": true,
      "log_likelihood": -6.603766698993689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.7646479936239808,
      "gamma": 1.0438956365528698,
      "success": true,
      "log_likelihood": -18.003412784775797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 3.6236674431954934,
      "gamma": 0.6656344616840412,
      "success": true,
      "log_likelihood": -13.545742309430164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.06882898200426538,
      "gamma": 1.8335250166654675,
      "success": true,
      "log_likelihood": -6.433188462468616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 1.2804913940497307,
      "gamma": 1.3804202751989174,
      "success": true,
      "log_likelihood": -13.796940152780248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "delta": 0.5320279992288314,
      "gamma": 0.8006250591130286,
      "success": true,
      "log_likelihood": -20.772996969674757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "delta": {
        "r": 0.9043876418404181,
        "p": 5.024614387498188e-38
      },
      "gamma": {
        "r": 0.8998376801896681,
        "p": 4.381903554231071e-37
      }
    }
  },
  "bic_results": {
    "average_bic": 31.284713431857103,
    "individual_bics": [
      21.653337818718327,
      39.9111775297196,
      28.644014829757623,
      34.19112917251771,
      27.512692448558994,
      29.08015288084966,
      11.769203590430362,
      30.05200870276998,
      11.769203590430362,
      30.051593246288178,
      11.83716842918821,
      25.89333388226862,
      25.884242435111524,
      11.769203590430362,
      11.769203590430362,
      11.769203590430362,
      11.769203590430362,
      14.577807734659643,
      22.855214802290952,
      11.769203590430362,
      38.30784734432019,
      24.940138851502745,
      43.83089556527365,
      41.32734671554291,
      35.356486416295766,
      37.99013892914808,
      31.02260895351663,
      15.85463399158194,
      26.580493925446113,
      39.49209699933607,
      11.769203590430362,
      21.65333781674671,
      49.354005401924795,
      37.86899128308006,
      11.769203590430362,
      33.0644830556364,
      19.725125359867487,
      35.93775623746573,
      42.81130676109616,
      27.505883207217074,
      42.75705849727082,
      29.355006541276133,
      25.444277381911014,
      39.566097776996514,
      33.9397855566696,
      38.447809339471725,
      37.965281054545834,
      44.35485785465793,
      29.580080169229255,
      54.62155332685725,
      41.67713314376844,
      32.19957830952938,
      45.33802977565659,
      50.97377489836693,
      44.51474272907503,
      15.105764993533864,
      27.93834516859541,
      34.717150133121166,
      26.90735223688666,
      35.626306114409495,
      46.6269256373116,
      37.11727821575256,
      21.653337817832696,
      49.16295851731429,
      28.711264292106968,
      36.9233209271889,
      24.935602968798257,
      32.118242240818034,
      39.026580247226256,
      31.075055444123777,
      10.248163052167367,
      32.21672378187846,
      38.10937657446541,
      36.823038800214135,
      52.19726560123071,
      34.42257758036505,
      24.185071259780095,
      23.126228264105972,
      51.937337134934204,
      21.653337817039272,
      52.54592863268185,
      31.363880870064463,
      30.621763962866844,
      23.468089892378366,
      53.60498270523014,
      20.374571274899598,
      43.17386344646381,
      34.258522495772546,
      20.033414801849453,
      34.760918182472714,
      48.71303181626173
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}