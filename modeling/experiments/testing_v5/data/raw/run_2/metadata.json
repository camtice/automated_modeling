{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_i = gamma * split_self - alpha * max( (combined_earning * (token_self / (token_self + token_opp))) - split_self , 0 )\nSummary: This model computes the utility for a responder\u2019s acceptance decision by combining the monetary gain (split_self) with a fairness penalty based on the difference between an expected fair share (derived from token_self, token_opp, and combined_earning) and the actual offer. Two learnable parameters, gamma and alpha, capture sensitivity to monetary reward and aversion to disadvantageous inequality respectively.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "theta": {
      "description": "Fairness sensitivity parameter scaling the penalty from deviating below the expected fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Non-linear exponent parameter governing the impact of fairness deviations",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self - theta * ( max( combined_earning * ( token_self / ( token_self + token_opp ) ) - split_self , 0 ) )^(kappa)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting a proposal, combining monetary gain and fairness penalty",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed share for the participant in \u00a3",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "theta": {
      "description": "Fairness sensitivity parameter scaling the penalty from deviating below the expected fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Non-linear exponent parameter governing the impact of fairness deviations",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model for responder behavior that computes the acceptance utility as the offered share minus a non-linear penalty for offers that fall below the fairness norm. The fairness norm is determined by the proportion of tokens obtained relative to the total tokens. Two learnable parameters\u2014theta and kappa\u2014control the sensitivity and non-linearity of the penalty.",
  "full_reasoning": "Below is the step\u2010by\u2010step reasoning and our proposed model:\n\n1. Key Psychological Mechanisms:\n\u2003\u2022 Responder behavior is driven by a desire for monetary gain (i.e., the amount they receive) and an aversion to unfair offers.\n\u2003\u2022 A fairness norm is naturally formed based on the tokens each side has found. Specifically, a responder expects to receive an amount proportional to the ratio of their tokens (token_self) relative to the total (token_self + token_opp) scaled by the combined earnings.\n\u2003\u2022 When the proposed split (split_self) falls short of the expected fair share, the responder\u2019s utility is reduced by a penalty. Note that only disadvantageous deviations (offers below the norm) are penalized.\n\n2. Interaction of Mechanisms:\n\u2003\u2022 The model captures two competing forces: the immediate gain from accepting the offer (split_self) and the disutility from the fairness violation (the difference between the expected fair share and the offer if the offer is lower than the expectation).\n\u2003\u2022 The penalty is made non\u2010linear by an exponent parameter, allowing us to capture that increasing deviations may have a multiplicatively larger impact on utility.\n\n3. Mathematical Form:\n\u2003\u2022 The expected fair share is computed as: \n\u2003\u2003expected_share = combined_earning \u00d7 (token_self / (token_self + token_opp))\n\u2003\u2022 The utility (U_accept) for accepting the proposal is defined as the monetary offer (split_self) minus a fairness \u201cpenalty\u201d if the offer is lower than expected.\n\u2003\u2022 Mathematically:\n\u2003\u2003U_accept = split_self \u2212 theta \u00d7 { max[ expected_share \u2212 split_self, 0 ] }^(kappa)\n\u2003\u2022 Here, theta (\u03b8) scales the sensitivity to fairness deviations and kappa (\u03ba) allows non\u2010linear effects; both are learnable parameters.\n\n4. Parameter Calibration:\n\u2003\u2022 The penalty scaling parameter theta (\u03b8) is learnable and constrained to be positive (e.g., between 0 and 20).\n\u2003\u2022 The non-linear exponent kappa (\u03ba) is learnable and must be positive (e.g., between 0.1 and 5).\n\u2003\u2022 These bounds are generous enough to capture different degrees of fairness sensitivity and non-linearity, while ensuring that the parameters are recoverable.\n\n5. Mapping to Observable Behavior:\n\u2003\u2022 The observed split_self, token_self, token_opp, and combined_earning are available from the data.\n\u2003\u2022 The computed expected_share from these data points represents the respondent\u2019s fairness norm.\n\u2003\u2022 The model produces U_accept on a trial-by-trial basis; negative results indicate low utility for accepting the offer. Later, this utility would be converted, via a separate temperature parameter, into a probability of acceptance.\n\nBelow is the formal specification:\n\n<MODEL>\nU_accept = split_self - theta * ( max( combined_earning * ( token_self / ( token_self + token_opp ) ) - split_self , 0 ) )^(kappa)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting a proposal, combining monetary gain and fairness penalty\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta\": {\n      \"description\": \"Fairness sensitivity parameter scaling the penalty from deviating below the expected fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Non-linear exponent parameter governing the impact of fairness deviations\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior that computes the acceptance utility as the offered share minus a non-linear penalty for offers that fall below the fairness norm. The fairness norm is determined by the proportion of tokens obtained relative to the total tokens. Two learnable parameters\u2014theta and kappa\u2014control the sensitivity and non-linearity of the penalty.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, theta=1, kappa=1):\n    utility_values = []\n    for trial in trial_data:\n        # Extract necessary variables from the trial dictionary\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate the expected fair share\n        if token_self + token_opp > 0:\n            expected_share = combined_earning * (token_self / (token_self + token_opp))\n        else:\n            expected_share = 0  # Avoid division by zero if both tokens are zero\n\n        # Calculate the penalty term\n        penalty = max(expected_share - split_self, 0)\n        \n        # Calculate U_accept\n        U_accept = split_self - theta * (penalty ** kappa)\n        \n        # Append the calculated utility value to the list\n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "theta": 9.769041650858998,
      "kappa": 0.1396021302958385,
      "success": true,
      "log_likelihood": -9.068415640982526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.9731947229155955,
      "kappa": 0.8053569383179519,
      "success": true,
      "log_likelihood": -16.242797463093243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.5721938970257386,
      "kappa": 1.88507880128451,
      "success": true,
      "log_likelihood": -11.70531585904395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.2202734045227386,
      "kappa": 0.8615148441492145,
      "success": true,
      "log_likelihood": -13.997457488567344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.5944592361110796,
      "kappa": 2.295696758166856,
      "success": true,
      "log_likelihood": -9.620852604731473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.050957113289960936,
      "kappa": 3.32701116250083,
      "success": true,
      "log_likelihood": -12.23913690703782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.006119903282478479,
      "kappa": 5.0,
      "success": true,
      "log_likelihood": -10.203896910959232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.4877255799250797,
      "kappa": 0.9678286547889801,
      "success": true,
      "log_likelihood": -11.663649607772987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.38055853953658125,
      "kappa": 2.656508846149628,
      "success": true,
      "log_likelihood": -7.572108799589787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 7.734470931501028,
      "kappa": 0.34393908023305464,
      "success": true,
      "log_likelihood": -10.46122678572003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.2911651564933762,
      "kappa": 1.6129994264346783,
      "success": true,
      "log_likelihood": -9.780954843674479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.95012987945621,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -10.550129878667317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.016235612629185776,
      "kappa": 2.9461473147790627,
      "success": true,
      "log_likelihood": -9.859749663403864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.248027999801696,
      "kappa": 1.1307564113711686,
      "success": true,
      "log_likelihood": -15.575030633996604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.12977457930281128,
      "success": true,
      "log_likelihood": -12.275129878003387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 4.986364283244165,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -15.833416264562878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.8259465631217895,
      "kappa": 0.7393660301403361,
      "success": true,
      "log_likelihood": -16.939800694773286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.6578511061484469,
      "kappa": 1.9352741709484045,
      "success": true,
      "log_likelihood": -13.061853748244419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.3747161046643266,
      "kappa": 0.8967210872611703,
      "success": true,
      "log_likelihood": -15.612168807135317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.5674833074907543,
      "kappa": 1.6963251486035664,
      "success": true,
      "log_likelihood": -13.345780217353493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.4673693106639027,
      "kappa": 1.7053209132883966,
      "success": true,
      "log_likelihood": -5.226861573770401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -11.750129878204175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.2578044032050685,
      "kappa": 1.4685213424983818,
      "success": true,
      "log_likelihood": -16.12645490870862,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.950129879456209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 9.768937630311175,
      "kappa": 0.1396063014462469,
      "success": true,
      "log_likelihood": -9.068415639974916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.6212545444831954,
      "kappa": 0.2565019384463926,
      "success": true,
      "log_likelihood": -20.24770007930293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.249810321835043,
      "kappa": 0.5885367184452749,
      "success": true,
      "log_likelihood": -14.70807469908808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -6.9501298794562105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.2199089167484074,
      "kappa": 0.7147065373589528,
      "success": true,
      "log_likelihood": -14.854857959726562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.040190720542836234,
      "kappa": 3.269467361765716,
      "success": true,
      "log_likelihood": -10.838779773426687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.7380738404214421,
      "kappa": 1.7271811896023441,
      "success": true,
      "log_likelihood": -14.084327022042057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.5754102170017458,
      "kappa": 1.3472015172248983,
      "success": true,
      "log_likelihood": -17.669008288219946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -10.850129878148211,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.5070408743250159,
      "kappa": 1.6455952438967882,
      "success": true,
      "log_likelihood": -17.393230793109087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 6.216563573251773,
      "kappa": 0.3544747024533358,
      "success": true,
      "log_likelihood": -10.248370149752585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -9.650129877974955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.3698028058513418,
      "kappa": 0.9128585885169012,
      "success": true,
      "log_likelihood": -16.4698347654906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0046846563635163365,
      "kappa": 5.0,
      "success": true,
      "log_likelihood": -14.163971342649232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.4168861176122077,
      "kappa": 1.1420600146821114,
      "success": true,
      "log_likelihood": -16.1597286255633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.040795916692056,
      "kappa": 1.2756634433232898,
      "success": true,
      "log_likelihood": -15.535862856316518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 4.039817158314183,
      "kappa": 0.298434753971041,
      "success": true,
      "log_likelihood": -16.702955852645623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.06726359507136706,
      "kappa": 5.0,
      "success": true,
      "log_likelihood": -9.221383438518382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.0272262956599523,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -23.32583736447781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.00159500049825948,
      "kappa": 4.917902943580742,
      "success": true,
      "log_likelihood": -16.97156947412284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 7.395649472849156,
      "kappa": 0.16494874201830584,
      "success": true,
      "log_likelihood": -14.255168044889729,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.0112265519764043,
      "kappa": 0.5678032149535027,
      "success": true,
      "log_likelihood": -18.651323735334643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.5147650982510714,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -20.893262999753315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.4951803283086087,
      "kappa": 0.4876637547227018,
      "success": true,
      "log_likelihood": -19.513401585803674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.478387255209852,
      "kappa": 2.217872933960875,
      "success": true,
      "log_likelihood": -6.316010463664224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.7731950519970967,
      "kappa": 0.8697814734135034,
      "success": true,
      "log_likelihood": -10.354131279164884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -13.775129876771425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 7.978370386581974,
      "kappa": 0.23803863237665165,
      "success": true,
      "log_likelihood": -11.213119489535927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.34342665752673923,
      "kappa": 0.6699782592698386,
      "success": true,
      "log_likelihood": -14.477531186831557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.1966609762249902,
      "kappa": 0.8376914151111386,
      "success": true,
      "log_likelihood": -19.773416619840205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.4307245911687554,
      "kappa": 1.157591929824719,
      "success": true,
      "log_likelihood": -14.956013833352186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 9.768942783525468,
      "kappa": 0.13960588720388994,
      "success": true,
      "log_likelihood": -9.068415639975152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.254492489153814,
      "kappa": 0.2883311854302385,
      "success": true,
      "log_likelihood": -20.46132969000882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 6.0923771714933,
      "kappa": 0.356379157125136,
      "success": true,
      "log_likelihood": -9.317631708373957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.6162243989260627,
      "kappa": 0.8108203611502202,
      "success": true,
      "log_likelihood": -15.204550696890138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -10.400129878563996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -13.400129877080907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.222936312308973,
      "kappa": 0.4490929254915349,
      "success": true,
      "log_likelihood": -15.865322211094478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -12.05012987694544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 20.0,
      "kappa": 0.12027045395400901,
      "success": true,
      "log_likelihood": -0.3187894699202274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 7.390189936725063,
      "kappa": 0.16294295731309125,
      "success": true,
      "log_likelihood": -13.965384163679675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.0905639376445595,
      "kappa": 1.198211072402411,
      "success": true,
      "log_likelihood": -15.904974116364624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.3789861111459769,
      "kappa": 0.867335854533183,
      "success": true,
      "log_likelihood": -15.243340993067907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.6006404778904173,
      "kappa": 0.3886063051041475,
      "success": true,
      "log_likelihood": -22.801613018362623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.005203372648946164,
      "kappa": 4.915689930057096,
      "success": true,
      "log_likelihood": -11.304435426980097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -9.725129878614155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 9.944098388574158,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -13.074323709989732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.5068658673837843,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -21.00942865285693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 9.768940698107695,
      "kappa": 0.13960587977620975,
      "success": true,
      "log_likelihood": -9.068415639974246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.2527576240375544,
      "kappa": 0.1175969773183973,
      "success": true,
      "log_likelihood": -22.778450574150042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -12.20012987731324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 6.387214927925031,
      "kappa": 0.5712696211042556,
      "success": true,
      "log_likelihood": -14.307897087364916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.0597827697632758,
      "kappa": 1.2513553661498393,
      "success": true,
      "log_likelihood": -12.963536646792633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 2.313459559924504,
      "kappa": 0.2087652265766509,
      "success": true,
      "log_likelihood": -24.9786941900201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 9.768934983483478,
      "kappa": 0.13960509953593223,
      "success": true,
      "log_likelihood": -7.2684156405786995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.2991325844810491,
      "kappa": 1.6567158165424272,
      "success": true,
      "log_likelihood": -17.83631906041614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 4.917100389584586,
      "kappa": 5.0,
      "success": true,
      "log_likelihood": -31.10939110357157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 0.0,
      "kappa": 0.1,
      "success": true,
      "log_likelihood": -9.050129878931928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 3.254490357203112,
      "kappa": 0.28833169769985634,
      "success": true,
      "log_likelihood": -14.461329692874699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta": 1.2111534647561712,
      "kappa": 0.45201840054050635,
      "success": true,
      "log_likelihood": -21.02138834942809,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "theta": {
        "r": 0.7122481784025382,
        "p": 9.663187931573267e-17
      },
      "kappa": {
        "r": 0.5651843952757094,
        "p": 9.013133138040453e-10
      }
    }
  },
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}