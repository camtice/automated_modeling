{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = beta + split_self - alpha * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: This utility model for responder behavior computes the acceptance utility by combining the offered monetary gain (split_self) with a fairness adjustment. A fair share is calculated based on the ratio of participant tokens to total tokens multiplied by the combined earnings. If the offer falls below this fair share, a disutility proportional to the shortfall (scaled by learnable parameter alpha) is subtracted, with an additive baseline bias captured by learnable parameter beta.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter capturing overall responder tendency to accept",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Inequity aversion parameter penalizing the squared difference between fair share and offered share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = beta + split_self - lambda_param * ((token_self / (token_self + token_opp)) * combined_earning - split_self)^2",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer, combining monetary gain with a quadratic penalty for fairness deviations",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter capturing overall responder tendency to accept",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Inequity aversion parameter penalizing the squared difference between fair share and offered share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The monetary share offered to the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, used to compute fair share",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, used to compute fair share",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary earnings from tokens (derived from combined tokens and conversion rate)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A quadratic fairness comparison model for responder behavior. The model computes a fairness benchmark from token ratios and combined earnings; then, it generates the utility of accepting by adding the monetary offer (split_self) and subtracting a quadratic penalty for deviations from this fair share. Two learnable parameters capture baseline bias (beta) and sensitivity to fairness deviations (lambda_param).",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:\n   \u2022 Responders are assumed to have a reference point of what is \u201cfair\u201d based on their own tokens relative to the total tokens, which maps onto the combined earnings.\n   \u2022 Deviations from this fairness benchmark induce a disutility that increases nonlinearly (e.g., quadratically) as the offered share (split_self) departs from the fair share.\n   \u2022 There can also be a baseline bias or overall tendency to favor acceptance that is independent of the fairness adjustment.\n\n2. How these mechanisms interact:\n   \u2022 The fair share is computed as the ratio of the participant\u2019s tokens (token_self) to total tokens (token_self + token_opp) multiplied by the combined earning.\n   \u2022 The utility from accepting an offer is then a function of the offer\u2019s monetary value (split_self) adjusted by a penalty proportional to the squared difference between split_self and the fair share.\n   \u2022 A baseline parameter (beta) is added to allow for responder-specific overall tendencies.\n\n3. Mathematical form to capture these interactions:\n   \u2022 Define fair_share = (token_self / (token_self + token_opp)) * combined_earning.\n   \u2022 The utility is given by U_accept = beta + split_self \u2212 lambda_param*(fair_share \u2212 split_self)\u00b2.\n   \u2022 Here, beta is a bias parameter and lambda_param is the penalty (inequity aversion) parameter, both with finite bounds.\n\n4. Parameters calibration:\n   \u2022 Two learnable parameters will be calibrated: beta (the baseline bias) and lambda_param (the penalty for squared deviations from fairness).\n   \u2022 Their finite numerical bounds will be set generously (e.g., beta in [\u2013100, 100] and lambda_param in [0, 10]).\n\n5. Mapping model variables to observable behavior:\n   \u2022 split_self is the monetary portion the participant receives.\n   \u2022 token_self, token_opp, and combined_earning come from task data and are used to compute the fair share.\n   \u2022 The computed utility U_accept drives the acceptance behavior (higher utilities imply greater likelihood of acceptance).\n\nBelow is the formal model specification and variable descriptions:\n\n<MODEL>\nU_accept = beta + split_self - lambda_param * ((token_self / (token_self + token_opp)) * combined_earning - split_self)^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer, combining monetary gain with a quadratic penalty for fairness deviations\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter capturing overall responder tendency to accept\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Inequity aversion parameter penalizing the squared difference between fair share and offered share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share offered to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earnings from tokens (derived from combined tokens and conversion rate)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA quadratic fairness comparison model for responder behavior. The model computes a fairness benchmark from token ratios and combined earnings; then, it generates the utility of accepting by adding the monetary offer (split_self) and subtracting a quadratic penalty for deviations from this fair share. Two learnable parameters capture baseline bias (beta) and sensitivity to fairness deviations (lambda_param).\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, beta=1, lambda_param=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate the fair share\n        if (token_self + token_opp) > 0:\n            fair_share = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            fair_share = 0\n\n        # Calculate U_accept based on the model specification\n        U_accept = beta + split_self - lambda_param * ((fair_share - split_self) ** 2)\n\n        utility_values.append(U_accept)\n\n    return utility_values",
  "fitting_results": [
    {
      "beta": -7.260244375538149,
      "lambda_param": 0.45295736824189975,
      "success": true,
      "log_likelihood": -6.651697029518339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3450522888350975,
      "lambda_param": 0.27432297463473726,
      "success": true,
      "log_likelihood": -18.295899277716824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.213764467034426,
      "lambda_param": 0.6062132574653384,
      "success": true,
      "log_likelihood": -11.469170598810807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6612753230347128,
      "lambda_param": 0.39161066995550065,
      "success": true,
      "log_likelihood": -14.028229074325752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7207103976192264,
      "lambda_param": 1.0504498726562093,
      "success": true,
      "log_likelihood": -9.265634708760427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9450356725863995,
      "lambda_param": 0.45244154095482914,
      "success": true,
      "log_likelihood": -11.75601550458299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 39.98835290955328,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.2937631192617254e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9931023268470023,
      "lambda_param": 0.6116668609667864,
      "success": true,
      "log_likelihood": -9.530892336368986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 48.61718995892153,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.378820778562227e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0517603324841485,
      "lambda_param": 0.6093633354498988,
      "success": true,
      "log_likelihood": -13.409515060086989,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.343040154907592,
      "lambda_param": 0.9539440492791551,
      "success": true,
      "log_likelihood": -7.465960452344929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.165174448704202,
      "lambda_param": 0.5873092653063289,
      "success": true,
      "log_likelihood": -7.520861492247709,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6278583268711079,
      "lambda_param": 0.9258103974790549,
      "success": true,
      "log_likelihood": -9.989566976201614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 62.36099725731492,
      "lambda_param": 0.23880786021223233,
      "success": true,
      "log_likelihood": 3.5873155555409887e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 54.82323185295762,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.5900673543296116e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 42.774455040476724,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -5.065672327138645e-10,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 92.46087640587643,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.94928464426692,
      "lambda_param": 0.17403389230578648,
      "success": true,
      "log_likelihood": -8.03576609828862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.372211742845124,
      "lambda_param": 0.3259753652856952,
      "success": true,
      "log_likelihood": -5.914070421001693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 69.47308003451148,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.5999938583917958e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.05624267339331278,
      "lambda_param": 0.3752343501112384,
      "success": true,
      "log_likelihood": -17.2427223830389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.68873228908521,
      "lambda_param": 0.2840240263222066,
      "success": true,
      "log_likelihood": -7.7981576009698585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.4815747816776903,
      "lambda_param": 0.18382819210917253,
      "success": true,
      "log_likelihood": -16.531166334781226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6768787646348644,
      "lambda_param": 0.18461614190534112,
      "success": true,
      "log_likelihood": -18.258508335430143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8710517574589365,
      "lambda_param": 0.8030429194163801,
      "success": true,
      "log_likelihood": -12.493354583416162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.8532921898436934,
      "lambda_param": 0.2104116417732934,
      "success": true,
      "log_likelihood": -17.455662546935304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.19947594361803936,
      "lambda_param": 0.3950890690231537,
      "success": true,
      "log_likelihood": -13.420172694688466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7630210169020973,
      "lambda_param": 2.821167638139879,
      "success": true,
      "log_likelihood": -6.37587918600662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.886833465037456,
      "lambda_param": 0.244895439539914,
      "success": true,
      "log_likelihood": -7.7737564113326485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2143113762367785,
      "lambda_param": 0.16247783668631077,
      "success": true,
      "log_likelihood": -15.848051904852143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 99.89485551829891,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.260204302686642,
      "lambda_param": 0.4529643612300541,
      "success": true,
      "log_likelihood": -6.651697029174046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.5411442308762875,
      "lambda_param": 0.08910373081947665,
      "success": true,
      "log_likelihood": -19.745924790407855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.3487019666873956,
      "lambda_param": 0.3271364082323414,
      "success": true,
      "log_likelihood": -16.521798777166836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 70.02999815535446,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": 3.59999585679324e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9698227662014489,
      "lambda_param": 0.12580771941110175,
      "success": true,
      "log_likelihood": -15.069896673915082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -74.19759159197169,
      "lambda_param": 9.267719327601336,
      "success": true,
      "log_likelihood": -575.6461810767729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 57.23091231219616,
      "lambda_param": 6.160206301462231,
      "success": true,
      "log_likelihood": -99.61579953424216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.505825871334093,
      "lambda_param": 0.24686136960261243,
      "success": true,
      "log_likelihood": -17.987831085180673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.712189474725713,
      "lambda_param": 0.07054540807726696,
      "success": true,
      "log_likelihood": -9.244323185028334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7864859459770317,
      "lambda_param": 0.36823101050451185,
      "success": true,
      "log_likelihood": -17.34821495551157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.413513411514878,
      "lambda_param": 0.37385232146322206,
      "success": true,
      "log_likelihood": -13.958479917138378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.160858945432116,
      "lambda_param": 0.007132710520702137,
      "success": true,
      "log_likelihood": -5.75500640760997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.9767085723264417,
      "lambda_param": 0.23565979902042639,
      "success": true,
      "log_likelihood": -16.829788833169424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.47906093975415803,
      "lambda_param": 0.3308386124497917,
      "success": true,
      "log_likelihood": -14.249859465477032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4262768810146078,
      "lambda_param": 0.08537486043751526,
      "success": true,
      "log_likelihood": -16.194790500680313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.3262717801345075,
      "lambda_param": 0.3739986750548718,
      "success": true,
      "log_likelihood": -15.885099554772983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.7405401610794518,
      "lambda_param": 0.10020044968652007,
      "success": true,
      "log_likelihood": -19.168951774478888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1272600301485847,
      "lambda_param": 1.3999764173289373,
      "success": true,
      "log_likelihood": -9.196656524036069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.267944231741297,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.687410151793102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.01757626212897321,
      "lambda_param": 0.15630895036800263,
      "success": true,
      "log_likelihood": -17.18929909630902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.700661428044426,
      "lambda_param": 0.16587143926986495,
      "success": true,
      "log_likelihood": -11.68606777008268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.302844672406911,
      "lambda_param": 0.10602383338901426,
      "success": true,
      "log_likelihood": -18.82525382082517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.610027577708974,
      "lambda_param": 0.014352663059841285,
      "success": true,
      "log_likelihood": -20.2717745214823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.7537517994920755,
      "lambda_param": 0.2536060993745149,
      "success": true,
      "log_likelihood": -21.36390664660925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7869035537479101,
      "lambda_param": 1.824458816629309,
      "success": true,
      "log_likelihood": -6.687629935245752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9981066271489456,
      "lambda_param": 0.9521028468050291,
      "success": true,
      "log_likelihood": -10.718394409425015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0428743510860523,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -13.253874573920381,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.32429357246126,
      "lambda_param": 0.5014334248543194,
      "success": true,
      "log_likelihood": -7.983706087016962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.19997655906709733,
      "lambda_param": 0.013400630487166495,
      "success": true,
      "log_likelihood": -14.724772321992054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0741023761868989,
      "lambda_param": 0.14785188555228454,
      "success": true,
      "log_likelihood": -20.34657556343885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.09788937474076352,
      "lambda_param": 0.46853316327455186,
      "success": true,
      "log_likelihood": -16.16370816886566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.260032429043356,
      "lambda_param": 0.45299368698866793,
      "success": true,
      "log_likelihood": -6.6516970346988655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.9775959742757836,
      "lambda_param": 0.1267694223076875,
      "success": true,
      "log_likelihood": -19.194546030679756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.9373693786958417,
      "lambda_param": 0.529152307930691,
      "success": true,
      "log_likelihood": -11.127439027365796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 61.32420840612516,
      "lambda_param": 5.770762999308272,
      "success": true,
      "log_likelihood": -137.06989442557466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 56.938141317338406,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -69.07324407886287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.785725645685123,
      "lambda_param": 0.16321051130030856,
      "success": true,
      "log_likelihood": -11.090561343638104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9809336655999061,
      "lambda_param": 0.11104632286119777,
      "success": true,
      "log_likelihood": -16.67744704522987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.8595263428972832,
      "lambda_param": 0.012517533385851595,
      "success": true,
      "log_likelihood": -10.837904918210276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.378288644715618,
      "lambda_param": 1.232031800104232,
      "success": true,
      "log_likelihood": -6.5897006363548325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.065181910964458,
      "lambda_param": 0.3345661634621367,
      "success": true,
      "log_likelihood": -10.443185297293955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7430575284379752,
      "lambda_param": 0.3133695846969246,
      "success": true,
      "log_likelihood": -16.261025230537964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.31741576439073554,
      "lambda_param": 0.03487113297372115,
      "success": true,
      "log_likelihood": -15.524945536289744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.2841502817529884,
      "lambda_param": 0.024941202137364896,
      "success": true,
      "log_likelihood": -23.31486022644245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6549920835019063,
      "lambda_param": 0.5185274172065407,
      "success": true,
      "log_likelihood": -10.930858725889392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.957805054057327,
      "lambda_param": 0.08625662186827912,
      "success": true,
      "log_likelihood": -6.978710062145846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -8.508616956683843,
      "lambda_param": 0.37701711040858843,
      "success": true,
      "log_likelihood": -6.363431228171231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.493233677069756,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -21.686735352218903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -7.260203675645764,
      "lambda_param": 0.4529654125178308,
      "success": true,
      "log_likelihood": -6.651697029166895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.50295827859682,
      "lambda_param": 0.08250464592468049,
      "success": true,
      "log_likelihood": -23.289657445445705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7057880919918011,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -10.998506324686922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.648552331362669,
      "lambda_param": 0.9666503368818453,
      "success": true,
      "log_likelihood": -7.87063050559333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1266582051127776,
      "lambda_param": 0.3069394578048758,
      "success": true,
      "log_likelihood": -12.757964191090801,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.493232915399648,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -25.961735351029343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.1240529370231,
      "lambda_param": 0.6116375027373614,
      "success": true,
      "log_likelihood": -8.285182579570463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.44265197821182384,
      "lambda_param": 0.2017285251138596,
      "success": true,
      "log_likelihood": -17.82811679780001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.085773318847497,
      "lambda_param": 0.47635192513956215,
      "success": true,
      "log_likelihood": -14.130904195354217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.987760247948053,
      "lambda_param": 0.1799557882413877,
      "success": true,
      "log_likelihood": -4.883995629040982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.4355414513908094,
      "lambda_param": 0.1617521926071345,
      "success": true,
      "log_likelihood": -14.549061633467929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.279422119860813,
      "lambda_param": 0.035921468739085666,
      "success": true,
      "log_likelihood": -21.497018979938968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.9393381974601048,
        "p": 2.452981431484481e-47
      },
      "lambda_param": {
        "r": 0.5719416654330552,
        "p": 5.109446531896332e-10
      }
    }
  },
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}