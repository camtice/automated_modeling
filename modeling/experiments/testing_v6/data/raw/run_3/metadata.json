{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = beta + split_self - alpha * max((token_self / (token_self + token_opp)) * combined_earning - split_self, 0)\nSummary: This utility model for responder behavior computes the acceptance utility by combining the offered monetary gain (split_self) with a fairness adjustment. A fair share is calculated based on the ratio of participant tokens to total tokens multiplied by the combined earnings. If the offer falls below this fair share, a disutility proportional to the shortfall (scaled by learnable parameter alpha) is subtracted, with an additive baseline bias captured by learnable parameter beta.\nModel 2:\nSpecification: U_accept = beta + split_self - lambda_param * ((token_self / (token_self + token_opp)) * combined_earning - split_self)^2\nSummary: A quadratic fairness comparison model for responder behavior. The model computes a fairness benchmark from token ratios and combined earnings; then, it generates the utility of accepting by adding the monetary offer (split_self) and subtracting a quadratic penalty for deviations from this fair share. Two learnable parameters capture baseline bias (beta) and sensitivity to fairness deviations (lambda_param).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "beta": {
      "description": "Baseline bias parameter representing an inherent acceptance tendency.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "gamma_param": {
      "description": "Fairness sensitivity parameter scaling the penalty for offers below the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Let F = (token_self / (token_self + token_opp)) * combined_earning\n\nU_accept = beta + split_self - gamma_param * ((max(F - split_self, 0)^2) / F)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer computed for responder behavior.",
      "range": {
        "min": "-infinity",
        "max": "infinity",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Baseline bias parameter representing an inherent acceptance tendency.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "gamma_param": {
      "description": "Fairness sensitivity parameter scaling the penalty for offers below the fairness benchmark.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {},
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The monetary share proposed for the participant in a given trial (in \u00a3).",
      "range": {
        "min": 0,
        "max": "combined_earning value",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, used to compute the fairness benchmark.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, used to compute the fairness benchmark.",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total monetary earnings available in a trial (each token is worth \u00a33).",
      "range": {
        "min": 0,
        "max": "infinity",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": {},
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A normalized quadratic fairness model for responder utility that uses the monetary offer and a fairness benchmark computed from token counts and total earnings. The model applies a penalty\u2014scaled by gamma_param\u2014to offers that fall short of the fair share, with a baseline bias beta added. This yields a utility signal that is high for offers meeting or exceeding the fairness benchmark and reduced when offers are below it.",
  "full_reasoning": "Step-by-step reasoning:\n\n1. Key psychological mechanisms:  \n   \u2022 Responders compare the offered share (split_self) against a fairness benchmark (derived from token_self, token_opp, and combined_earning).  \n   \u2022 When the offer is below the fairness benchmark, a \u201closs\u201d (disutility) occurs due to perceived inequity.  \n   \u2022 The magnitude of disutility can be nonlinear in the size of the deviation relative to the benchmark.\n\n2. Interactions of mechanisms:  \n   \u2022 The fairness benchmark is computed as the participant\u2019s proportional entitlement (token_self divided by the total tokens) multiplied by the total earnings.  \n   \u2022 When the offer falls short of this benchmark, a penalty is incurred. This penalty is modeled as a quadratic function of the shortfall, normalized by the fair share to account for scale differences.\n\n3. Mathematical form:  \n   \u2022 Define F = (token_self/(token_self+token_opp)) \u2217 combined_earning.  \n   \u2022 Then for offers that are below F the penalty is proportional to (F \u2013 split_self)\u00b2 divided by F, and if split_self \u2265 F, no penalty is incurred.  \n   \u2022 Adding a baseline bias (beta) and the monetary gain (split_self) gives a complete utility formula.\n\n4. Learnable parameters:  \n   \u2022 A baseline intercept (beta) representing an inherent bias towards acceptance.  \n   \u2022 A sensitivity parameter (gamma_param) scaling the penalty for offers below the fairness benchmark.\n\n5. Mapping to observable behavior:  \n   \u2022 The computed utility U_accept feeds directly into the probability of acceptance (via a later softmax/temperature parameter) but here only the continuous utility is defined.  \n   \u2022 The observed variables (split_self, token_self, token_opp, combined_earning) are used to calculate the fairness benchmark F and then influence the utility via the amount offered and the penalty when the offer is perceived as unfair.\n\nBelow is the formal specification of the model.\n\n<MODEL>\nLet F = (token_self / (token_self + token_opp)) * combined_earning\n\nU_accept = beta + split_self - gamma_param * ((max(F - split_self, 0)^2) / F)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer computed for responder behavior.\",\n      \"range\": {\n        \"min\": \"-infinity\",\n        \"max\": \"infinity\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline bias parameter representing an inherent acceptance tendency.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_param\": {\n      \"description\": \"Fairness sensitivity parameter scaling the penalty for offers below the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The monetary share proposed for the participant in a given trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning value\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to compute the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to compute the fairness benchmark.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total monetary earnings available in a trial (each token is worth \u00a33).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"infinity\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": {},\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA normalized quadratic fairness model for responder utility that uses the monetary offer and a fairness benchmark computed from token counts and total earnings. The model applies a penalty\u2014scaled by gamma_param\u2014to offers that fall short of the fair share, with a baseline bias beta added. This yields a utility signal that is high for offers meeting or exceeding the fairness benchmark and reduced when offers are below it.\n</SUMMARY>",
  "simulation_code": "def simulate_model(trial_data, beta=1, gamma_param=1):\n    utility_values = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        \n        # Calculate fairness benchmark F\n        if (token_self + token_opp) > 0:\n            F = (token_self / (token_self + token_opp)) * combined_earning\n        else:\n            F = 0  # To avoid division by zero, set F to 0 if no tokens are present\n        \n        # Calculate U_accept\n        penalty = max(F - split_self, 0) ** 2 / F if F > 0 else 0\n        U_accept = beta + split_self - gamma_param * penalty\n        \n        utility_values.append(U_accept)\n    \n    return utility_values",
  "fitting_results": [
    {
      "beta": -6.779701993951864,
      "gamma_param": 5.366499233051261,
      "success": true,
      "log_likelihood": -6.113553114529421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.7006781025006579,
      "gamma_param": 2.533831742643152,
      "success": true,
      "log_likelihood": -17.41689704817105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.9486814902897622,
      "gamma_param": 5.828530902442841,
      "success": true,
      "log_likelihood": -10.03411331582186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0604413096855085,
      "gamma_param": 3.4613487043499487,
      "success": true,
      "log_likelihood": -13.30199491023469,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.8841160699230843,
      "gamma_param": 8.19901764363245,
      "success": true,
      "log_likelihood": -9.7037502120296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0402542658238576,
      "gamma_param": 3.8732817737292113,
      "success": true,
      "log_likelihood": -11.242486979771577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 46.015092553034044,
      "gamma_param": 3.4722347949393977,
      "success": true,
      "log_likelihood": -2.5788045892745494e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.87223899030976,
      "gamma_param": 4.73759411862793,
      "success": true,
      "log_likelihood": -10.026171004567608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 42.90310995631204,
      "gamma_param": 2.8274164259155383,
      "success": true,
      "log_likelihood": -1.7188112593551692e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2661754127686502,
      "gamma_param": 6.165414637140692,
      "success": true,
      "log_likelihood": -11.408053825245801,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.148417619691784,
      "gamma_param": 10.0,
      "success": true,
      "log_likelihood": -4.994892241238696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.697169304833634,
      "gamma_param": 6.288451150684794,
      "success": true,
      "log_likelihood": -6.873494274421479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7089807721114556,
      "gamma_param": 7.523907765550494,
      "success": true,
      "log_likelihood": -9.825458130633548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 57.66648569738778,
      "gamma_param": 5.257271524737765,
      "success": true,
      "log_likelihood": -1.9416080689987406e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 100.0,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 26.894066235329703,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -1.1527253251947186e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 84.53419414907844,
      "gamma_param": 3.4987155384936806,
      "success": true,
      "log_likelihood": 3.599988529321278e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.334984398534432,
      "gamma_param": 2.2441293327361898,
      "success": true,
      "log_likelihood": -6.427424895109935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.46760362813773,
      "gamma_param": 3.3872706063819504,
      "success": true,
      "log_likelihood": -5.338535826454012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 88.04290848726714,
      "gamma_param": 8.331689952467924,
      "success": true,
      "log_likelihood": -3.7041396877839394e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0154175110610018,
      "gamma_param": 3.4329295436478398,
      "success": true,
      "log_likelihood": -16.181057336599046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.8201879180898395,
      "gamma_param": 2.8364573475150907,
      "success": true,
      "log_likelihood": -7.07175205759666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.0055626952787096,
      "gamma_param": 1.8712683250095854,
      "success": true,
      "log_likelihood": -15.799618455773892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0532903592091114,
      "gamma_param": 1.841253696164675,
      "success": true,
      "log_likelihood": -17.349408383232237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.9666204656651904,
      "gamma_param": 5.426739357886388,
      "success": true,
      "log_likelihood": -14.634315014745079,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.27749123826665684,
      "gamma_param": 2.392750391513925,
      "success": true,
      "log_likelihood": -15.611324505149149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1403204453165985,
      "gamma_param": 3.550272855675777,
      "success": true,
      "log_likelihood": -12.477950001956573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6894396590634531,
      "gamma_param": 10.0,
      "success": true,
      "log_likelihood": -5.690321475358381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.211756287315446,
      "gamma_param": 1.8529167281031567,
      "success": true,
      "log_likelihood": -8.32603876426095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6658589546293547,
      "gamma_param": 1.3708962021213866,
      "success": true,
      "log_likelihood": -15.764421475098418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 46.088316541677585,
      "gamma_param": 1.4992792440426606,
      "success": true,
      "log_likelihood": -5.2416191515100266e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.779841996531485,
      "gamma_param": 5.366037652716898,
      "success": true,
      "log_likelihood": -6.113553109209612,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1550077166808395,
      "gamma_param": 1.0038932297930045,
      "success": true,
      "log_likelihood": -19.283816443303664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.5053422215275443,
      "gamma_param": 3.400286080022957,
      "success": true,
      "log_likelihood": -14.975852710769535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 89.78949909045534,
      "gamma_param": 2.63142388723797,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.18098489442873208,
      "gamma_param": 1.4424908602915014,
      "success": true,
      "log_likelihood": -14.001904555206782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 39.80752531345633,
      "gamma_param": 8.595102915920784e-08,
      "success": true,
      "log_likelihood": -229.8961503954648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.853186195449817,
      "gamma_param": 4.202642699166696,
      "success": true,
      "log_likelihood": -15.07844583099768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8339819388271771,
      "gamma_param": 1.9077528144689941,
      "success": true,
      "log_likelihood": -18.11776410954113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.4421018918486412,
      "gamma_param": 0.8218761436743924,
      "success": true,
      "log_likelihood": -8.9681195075349,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6217481171350427,
      "gamma_param": 2.3505610215601,
      "success": true,
      "log_likelihood": -18.710240398482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.7944054401350487,
      "gamma_param": 3.9676837463504477,
      "success": true,
      "log_likelihood": -12.858378935744243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 88.32142795350146,
      "gamma_param": 9.390192554913053,
      "success": true,
      "log_likelihood": -23.02585110007134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.35416136389496455,
      "gamma_param": 2.1645477116711835,
      "success": true,
      "log_likelihood": -16.05897852016918,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2797097175022596,
      "gamma_param": 2.8847156205768276,
      "success": true,
      "log_likelihood": -13.577533867459845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.022670956009803827,
      "gamma_param": 0.846291087619187,
      "success": true,
      "log_likelihood": -15.897736826898832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.06830919872438182,
      "gamma_param": 2.926546086195243,
      "success": true,
      "log_likelihood": -15.929737755515792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.272967437379503,
      "gamma_param": 1.190811558316231,
      "success": true,
      "log_likelihood": -18.544876137359186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.120114269894141,
      "gamma_param": 8.17912227022161,
      "success": true,
      "log_likelihood": -11.550624639292922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.2679433975915257,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -22.687410151793106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.04269801228027116,
      "gamma_param": 1.1129784399746383,
      "success": true,
      "log_likelihood": -17.572716014846705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.326989235351605,
      "gamma_param": 1.874390325771404,
      "success": true,
      "log_likelihood": -11.312848082217485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -83.17152605827425,
      "gamma_param": 1.5134198804108134,
      "success": true,
      "log_likelihood": -437.4911659902411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.428430561108998,
      "gamma_param": 0.23173754416701123,
      "success": true,
      "log_likelihood": -20.199267403531174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.865500961635954,
      "gamma_param": 1.6424725957839208,
      "success": true,
      "log_likelihood": -22.00888881238431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.783832632689736,
      "gamma_param": 10.0,
      "success": true,
      "log_likelihood": -5.463351444757449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3842680918697912,
      "gamma_param": 7.6911610307440625,
      "success": true,
      "log_likelihood": -10.032108060381187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0428630555329002,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -13.253874573843547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.95132748963008,
      "gamma_param": 4.976640688360776,
      "success": true,
      "log_likelihood": -7.506391427239507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.37943151974923933,
      "gamma_param": 0.42807984747003947,
      "success": true,
      "log_likelihood": -14.44832915698688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 99.2486435143012,
      "gamma_param": 7.826202927527874,
      "success": true,
      "log_likelihood": -322.3079044598644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.3344639666093982,
      "gamma_param": 3.6375068202249117,
      "success": true,
      "log_likelihood": -16.3674432974124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.77983951605643,
      "gamma_param": 5.366040674506852,
      "success": true,
      "log_likelihood": -6.113553109210555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.744904233789425,
      "gamma_param": 1.1165950825424833,
      "success": true,
      "log_likelihood": -18.99564877773409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.2473190546797,
      "gamma_param": 5.465608883851686,
      "success": true,
      "log_likelihood": -9.874431881146714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.29639044332602693,
      "gamma_param": 2.216984499556521,
      "success": true,
      "log_likelihood": -15.405281971887826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.115308369328648,
      "gamma_param": 1.0873771900380709,
      "success": true,
      "log_likelihood": -8.056556593409088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.627908092238322,
      "gamma_param": 1.5220067430879725,
      "success": true,
      "log_likelihood": -10.818845309157238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.1991980186013413,
      "gamma_param": 1.4200299841342305,
      "success": true,
      "log_likelihood": -15.483815717660177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0957327346713663,
      "gamma_param": 0.21309200807229567,
      "success": true,
      "log_likelihood": -10.80528032529194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.200416999981948,
      "gamma_param": 10.0,
      "success": true,
      "log_likelihood": -4.811150140486857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.950884303376125,
      "gamma_param": 2.673878695615151,
      "success": true,
      "log_likelihood": -10.395353951026605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4966571297167316,
      "gamma_param": 2.371267974103695,
      "success": true,
      "log_likelihood": -16.463753593833196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 70.34279937589088,
      "gamma_param": 6.700657525465729,
      "success": true,
      "log_likelihood": -183.19843170825055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 92.36319553144514,
      "gamma_param": 8.436326953809107,
      "success": true,
      "log_likelihood": -414.4643111013768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.5811632959610025,
      "gamma_param": 3.4484933724114746,
      "success": true,
      "log_likelihood": -12.35957748503966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.439402748844607,
      "gamma_param": 0.823648735127763,
      "success": true,
      "log_likelihood": -6.941121236060781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -9.334801701577888,
      "gamma_param": 0.7956679811019226,
      "success": true,
      "log_likelihood": -6.881761229292296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.493233293172576,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -21.68673535221884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.779846885931137,
      "gamma_param": 5.366088086835522,
      "success": true,
      "log_likelihood": -6.113553109304518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.608003564933474,
      "gamma_param": 0.4984573350683208,
      "success": true,
      "log_likelihood": -23.562591409706048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7057889797400547,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -10.998506324686925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.910078126987947,
      "gamma_param": 5.16831109805377,
      "success": true,
      "log_likelihood": -8.264831370032027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.05529195607836978,
      "gamma_param": 3.2157671856654733,
      "success": true,
      "log_likelihood": -10.959058926874533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.493231085798949,
      "gamma_param": 0.0,
      "success": true,
      "log_likelihood": -25.961735351034154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -5.487456715671954,
      "gamma_param": 7.642871249436193,
      "success": true,
      "log_likelihood": -7.374365106504328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.39308354154638875,
      "gamma_param": 1.343929846100895,
      "success": true,
      "log_likelihood": -18.55246013158873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.6524478484323906,
      "gamma_param": 4.322503915977518,
      "success": true,
      "log_likelihood": -13.49173895037707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 53.57629704161454,
      "gamma_param": 0.33604358186602346,
      "success": true,
      "log_likelihood": -46.01268616973091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.6530179612604483,
      "gamma_param": 1.9041625620510043,
      "success": true,
      "log_likelihood": -13.199578159878177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.4205900818785977,
      "gamma_param": 0.16093661074410115,
      "success": true,
      "log_likelihood": -21.616896317687157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.8814121495450942,
        "p": 1.0876381305291443e-33
      },
      "gamma_param": {
        "r": 0.04711166543720369,
        "p": 0.6416077042995159
      }
    }
  },
  "bic_error": "'ModelOutput' object has no attribute 'metrics'"
}